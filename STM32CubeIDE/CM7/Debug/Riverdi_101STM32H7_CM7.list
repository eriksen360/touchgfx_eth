
Riverdi_101STM32H7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c410  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dec  0802c6b0  0802c6b0  0003c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000006de  0803049c  0803049c  0004049c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08030b7c  08030b7c  00040b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  08030b94  08030b94  00040b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08030ba4  08030ba4  00194530  2**0
                  CONTENTS
  7 .ARM          00000008  08030ba4  08030ba4  00040ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08030bac  08030bac  00194530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  08030bac  08030bac  00040bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   0000000c  08030bc4  08030bc4  00040bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000144  24000000  08030bd0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 CCMRAM        00007800  24000144  08030d14  00050144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00024158  24007944  08038514  00057944  2**2
                  ALLOC
 14 ._user_heap_stack 00018804  2402ba9c  08038514  0005ba9c  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00194530  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00000000  d0000000  d0000000  0019455e  2**0
                  CONTENTS
 17 BufferSection 00096000  d05dc000  d05dc000  0019c000  2**2
                  ALLOC
 18 ExtFlashSection 00134530  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .comment      000000c2  00000000  00000000  0019455e  2**0
                  CONTENTS, READONLY
 20 .debug_info   000e069a  00000000  00000000  00194620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 0001a666  00000000  00000000  00274cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0002773d  00000000  00000000  0028f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00005288  00000000  00000000  002b6a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00004bed  00000000  00000000  002bbce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00064914  00000000  00000000  002c08d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0009b8b2  00000000  00000000  003251e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0021c946  00000000  00000000  003c0a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  00012000  00000000  00000000  005dd3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006f  00000000  00000000  005ef3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24007944 	.word	0x24007944
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802c698 	.word	0x0802c698

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24007948 	.word	0x24007948
 80002dc:	0802c698 	.word	0x0802c698

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800067c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800067e:	2400      	movs	r4, #0
{
 8000680:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	221c      	movs	r2, #28
 8000684:	4621      	mov	r1, r4
 8000686:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8000688:	9402      	str	r4, [sp, #8]
 800068a:	e9cd 4400 	strd	r4, r4, [sp]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	f02b f978 	bl	802b982 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000692:	481b      	ldr	r0, [pc, #108]	; (8000700 <MX_ADC1_Init+0x84>)
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_ADC1_Init+0x88>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000696:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000698:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800069a:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800069c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006a0:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	2304      	movs	r3, #4
 80006a6:	6103      	str	r3, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 80006a8:	2301      	movs	r3, #1
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.NbrOfConversion = 1;
 80006ae:	6183      	str	r3, [r0, #24]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b0:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b4:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	f009 fe58 	bl	800a36c <HAL_ADC_Init>
 80006bc:	b108      	cbz	r0, 80006c2 <MX_ADC1_Init+0x46>
  {
    Error_Handler();
 80006be:	f001 fae2 	bl	8001c86 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c2:	4669      	mov	r1, sp
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_ADC1_Init+0x84>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c6:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c8:	f009 ff64 	bl	800a594 <HAL_ADCEx_MultiModeConfigChannel>
 80006cc:	b108      	cbz	r0, 80006d2 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 80006ce:	f001 fada 	bl	8001c86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <MX_ADC1_Init+0x8c>)
 80006d4:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	a903      	add	r1, sp, #12
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_ADC1_Init+0x84>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006da:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006de:	2300      	movs	r3, #0
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <MX_ADC1_Init+0x90>)
 80006e2:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e6:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 80006e8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.Offset = 0;
 80006ec:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	f009 fbd4 	bl	8009e9c <HAL_ADC_ConfigChannel>
 80006f4:	b108      	cbz	r0, 80006fa <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80006f6:	f001 fac6 	bl	8001c86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	b00a      	add	sp, #40	; 0x28
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	bf00      	nop
 8000700:	24007960 	.word	0x24007960
 8000704:	40022000 	.word	0x40022000
 8000708:	04300002 	.word	0x04300002
 800070c:	47ff0000 	.word	0x47ff0000

08000710 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000710:	b500      	push	{lr}
 8000712:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000714:	221c      	movs	r2, #28
 8000716:	2100      	movs	r1, #0
 8000718:	a801      	add	r0, sp, #4
 800071a:	f02b f932 	bl	802b982 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_ADC3_Init+0x70>)
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC3_Init+0x74>)
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	2204      	movs	r2, #4
  hadc3.Instance = ADC3;
 8000724:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000726:	2300      	movs	r3, #0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 800072a:	2201      	movs	r2, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800072c:	8283      	strh	r3, [r0, #20]
  hadc3.Init.NbrOfConversion = 1;
 800072e:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000730:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000732:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000734:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000738:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000744:	f009 fe12 	bl	800a36c <HAL_ADC_Init>
 8000748:	b108      	cbz	r0, 800074e <MX_ADC3_Init+0x3e>
  {
    Error_Handler();
 800074a:	f001 fa9c 	bl	8001c86 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <MX_ADC3_Init+0x78>)
 8000750:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_ADC3_Init+0x70>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000758:	2300      	movs	r3, #0
 800075a:	4a0c      	ldr	r2, [pc, #48]	; (800078c <MX_ADC3_Init+0x7c>)
 800075c:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000760:	2204      	movs	r2, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8000762:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000766:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.Offset = 0;
 800076a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800076e:	f009 fb95 	bl	8009e9c <HAL_ADC_ConfigChannel>
 8000772:	b108      	cbz	r0, 8000778 <MX_ADC3_Init+0x68>
  {
    Error_Handler();
 8000774:	f001 fa87 	bl	8001c86 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000778:	b009      	add	sp, #36	; 0x24
 800077a:	f85d fb04 	ldr.w	pc, [sp], #4
 800077e:	bf00      	nop
 8000780:	240079c4 	.word	0x240079c4
 8000784:	58026000 	.word	0x58026000
 8000788:	04300002 	.word	0x04300002
 800078c:	47ff0000 	.word	0x47ff0000

08000790 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2214      	movs	r2, #20
 8000792:	2100      	movs	r1, #0
{
 8000794:	b510      	push	{r4, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	eb0d 0002 	add.w	r0, sp, r2
 800079e:	f02b f8f0 	bl	802b982 <memset>
  if(adcHandle->Instance==ADC1)
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	4a30      	ldr	r2, [pc, #192]	; (8000868 <HAL_ADC_MspInit+0xd8>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d137      	bne.n	800081a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <HAL_ADC_MspInit+0xdc>)
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ac:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	a905      	add	r1, sp, #20
 80007b0:	482f      	ldr	r0, [pc, #188]	; (8000870 <HAL_ADC_MspInit+0xe0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007b2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80007b6:	f042 0220 	orr.w	r2, r2, #32
 80007ba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80007be:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80007c2:	f002 0220 	and.w	r2, r2, #32
 80007c6:	9200      	str	r2, [sp, #0]
 80007c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007ce:	f042 0204 	orr.w	r2, r2, #4
 80007d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007da:	f002 0204 	and.w	r2, r2, #4
 80007de:	9201      	str	r2, [sp, #4]
 80007e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007e6:	f042 0202 	orr.w	r2, r2, #2
 80007ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e9cd 3405 	strd	r3, r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	f00a fb20 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000804:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	a905      	add	r1, sp, #20
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080a:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f00a fb17 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000816:	b00a      	add	sp, #40	; 0x28
 8000818:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC3)
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_ADC_MspInit+0xe8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d1fa      	bne.n	8000816 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_ADC_MspInit+0xdc>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000822:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000826:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800082a:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 800082c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000830:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000834:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000838:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800083c:	9203      	str	r2, [sp, #12]
 800083e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000844:	f042 0204 	orr.w	r2, r2, #4
 8000848:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	9304      	str	r3, [sp, #16]
 8000856:	9b04      	ldr	r3, [sp, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000858:	f009 fafe 	bl	8009e58 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800085c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000860:	4608      	mov	r0, r1
 8000862:	f009 faf9 	bl	8009e58 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000866:	e7d6      	b.n	8000816 <HAL_ADC_MspInit+0x86>
 8000868:	40022000 	.word	0x40022000
 800086c:	58024400 	.word	0x58024400
 8000870:	58020800 	.word	0x58020800
 8000874:	58020400 	.word	0x58020400
 8000878:	58026000 	.word	0x58026000

0800087c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800087c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <MX_CRC_Init+0x24>)
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_CRC_Init+0x28>)
 8000882:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	8083      	strh	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000888:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800088c:	2301      	movs	r3, #1
 800088e:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000890:	f009 ff36 	bl	800a700 <HAL_CRC_Init>
 8000894:	b118      	cbz	r0, 800089e <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800089a:	f001 b9f4 	b.w	8001c86 <Error_Handler>
}
 800089e:	bd08      	pop	{r3, pc}
 80008a0:	24007a28 	.word	0x24007a28
 80008a4:	58024c00 	.word	0x58024c00

080008a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80008a8:	6802      	ldr	r2, [r0, #0]
{
 80008aa:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_CRC_MspInit+0x2c>)
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d10d      	bne.n	80008ce <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008b2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80008b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80008be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008ce:	b002      	add	sp, #8
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	58024c00 	.word	0x58024c00

080008d8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80008d8:	b500      	push	{lr}
 80008da:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008dc:	2224      	movs	r2, #36	; 0x24
 80008de:	2100      	movs	r1, #0
 80008e0:	a801      	add	r0, sp, #4
 80008e2:	f02b f84e 	bl	802b982 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008e6:	4810      	ldr	r0, [pc, #64]	; (8000928 <MX_DAC1_Init+0x50>)
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_DAC1_Init+0x54>)
 80008ea:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008ec:	f009 ff68 	bl	800a7c0 <HAL_DAC_Init>
 80008f0:	b108      	cbz	r0, 80008f6 <MX_DAC1_Init+0x1e>
  {
    Error_Handler();
 80008f2:	f001 f9c8 	bl	8001c86 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008f6:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80008f8:	2301      	movs	r3, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008fa:	a901      	add	r1, sp, #4
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <MX_DAC1_Init+0x50>)
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008fe:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000900:	e9cd 2201 	strd	r2, r2, [sp, #4]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000904:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000908:	f009 ff6e 	bl	800a7e8 <HAL_DAC_ConfigChannel>
 800090c:	b108      	cbz	r0, 8000912 <MX_DAC1_Init+0x3a>
  {
    Error_Handler();
 800090e:	f001 f9ba 	bl	8001c86 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000912:	2210      	movs	r2, #16
 8000914:	a901      	add	r1, sp, #4
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_DAC1_Init+0x50>)
 8000918:	f009 ff66 	bl	800a7e8 <HAL_DAC_ConfigChannel>
 800091c:	b108      	cbz	r0, 8000922 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 800091e:	f001 f9b2 	bl	8001c86 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000922:	b00b      	add	sp, #44	; 0x2c
 8000924:	f85d fb04 	ldr.w	pc, [sp], #4
 8000928:	24007a4c 	.word	0x24007a4c
 800092c:	40007400 	.word	0x40007400

08000930 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	2214      	movs	r2, #20
 8000938:	2100      	movs	r1, #0
 800093a:	a803      	add	r0, sp, #12
 800093c:	f02b f821 	bl	802b982 <memset>
  if(dacHandle->Instance==DAC1)
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_DAC_MspInit+0x60>)
 8000944:	429a      	cmp	r2, r3
 8000946:	d120      	bne.n	800098a <HAL_DAC_MspInit+0x5a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_DAC_MspInit+0x64>)
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	a903      	add	r1, sp, #12
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <HAL_DAC_MspInit+0x68>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800094e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000952:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000956:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800095a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800095e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000962:	9201      	str	r2, [sp, #4]
 8000964:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f00a fa5d 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800098a:	b008      	add	sp, #32
 800098c:	bd10      	pop	{r4, pc}
 800098e:	bf00      	nop
 8000990:	40007400 	.word	0x40007400
 8000994:	58024400 	.word	0x58024400
 8000998:	58020000 	.word	0x58020000

0800099c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800099c:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_DMA2D_Init+0x40>)
  hdma2d.Init.Mode = DMA2D_M2M;
 80009a0:	2300      	movs	r3, #0
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <MX_DMA2D_Init+0x44>)
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80009a4:	65c3      	str	r3, [r0, #92]	; 0x5c
  hdma2d.Init.Mode = DMA2D_M2M;
 80009a6:	e9c0 2300 	strd	r2, r3, [r0]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80009aa:	2201      	movs	r2, #1
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ac:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80009b0:	e9c0 3211 	strd	r3, r2, [r0, #68]	; 0x44
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009b4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hdma2d.Init.OutputOffset = 0;
 80009b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009bc:	f009 ffb8 	bl	800a930 <HAL_DMA2D_Init>
 80009c0:	b108      	cbz	r0, 80009c6 <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
 80009c2:	f001 f960 	bl	8001c86 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009c6:	2101      	movs	r1, #1
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_DMA2D_Init+0x40>)
 80009ca:	f009 ffef 	bl	800a9ac <HAL_DMA2D_ConfigLayer>
 80009ce:	b118      	cbz	r0, 80009d8 <MX_DMA2D_Init+0x3c>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80009d4:	f001 b957 	b.w	8001c86 <Error_Handler>
}
 80009d8:	bd08      	pop	{r3, pc}
 80009da:	bf00      	nop
 80009dc:	24007a60 	.word	0x24007a60
 80009e0:	52001000 	.word	0x52001000

080009e4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 80009e4:	6802      	ldr	r2, [r0, #0]
{
 80009e6:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_DMA2D_MspInit+0x28>)
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d10c      	bne.n	8000a08 <HAL_DMA2D_MspInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_DMA2D_MspInit+0x2c>)
 80009f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80009f4:	f042 0210 	orr.w	r2, r2, #16
 80009f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80009fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a08:	b002      	add	sp, #8
 8000a0a:	4770      	bx	lr
 8000a0c:	52001000 	.word	0x52001000
 8000a10:	58024400 	.word	0x58024400

08000a14 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a14:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <MX_FDCAN1_Init+0x58>)
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 16;
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a18:	2201      	movs	r2, #1
  hfdcan1.Instance = FDCAN1;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_FDCAN1_Init+0x5c>)
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a1c:	2110      	movs	r1, #16
  hfdcan1.Instance = FDCAN1;
 8000a1e:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a20:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a22:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 2;
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 1;
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a26:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a2a:	2102      	movs	r1, #2
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a2c:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a2e:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.DataTimeSeg1 = 1;
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a30:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan1.Init.MessageRAMOffset = 0;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a34:	2204      	movs	r2, #4
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a36:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a3a:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a3e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a42:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a46:	e9c0 2311 	strd	r2, r3, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a4a:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan1.Init.TxEventsNbr = 0;
 8000a4e:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  hfdcan1.Init.TxBuffersNbr = 0;
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a52:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a56:	e9c0 3219 	strd	r3, r2, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a5a:	f00a f807 	bl	800aa6c <HAL_FDCAN_Init>
 8000a5e:	b118      	cbz	r0, 8000a68 <MX_FDCAN1_Init+0x54>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a64:	f001 b90f 	b.w	8001c86 <Error_Handler>
}
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24007acc 	.word	0x24007acc
 8000a70:	4000a000 	.word	0x4000a000

08000a74 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000a74:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <MX_FDCAN2_Init+0x58>)
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = DISABLE;
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 16;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a78:	2201      	movs	r2, #1
  hfdcan2.Instance = FDCAN2;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_FDCAN2_Init+0x5c>)
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a7c:	2110      	movs	r1, #16
  hfdcan2.Instance = FDCAN2;
 8000a7e:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a80:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a82:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 2;
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a86:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000a8a:	2102      	movs	r1, #2
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a8c:	8203      	strh	r3, [r0, #16]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a8e:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.DataTimeSeg1 = 1;
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a90:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hfdcan2.Init.MessageRAMOffset = 0;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a94:	2204      	movs	r2, #4
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a96:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a9a:	e9c0 1107 	strd	r1, r1, [r0, #28]
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a9e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000aa2:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000aa6:	e9c0 2311 	strd	r2, r3, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.RxBuffersNbr = 0;
 8000aaa:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
  hfdcan2.Init.TxEventsNbr = 0;
 8000aae:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  hfdcan2.Init.TxBuffersNbr = 0;
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000ab2:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ab6:	e9c0 3219 	strd	r3, r2, [r0, #100]	; 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000aba:	f009 ffd7 	bl	800aa6c <HAL_FDCAN_Init>
 8000abe:	b118      	cbz	r0, 8000ac8 <MX_FDCAN2_Init+0x54>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000ac4:	f001 b8df 	b.w	8001c86 <Error_Handler>
}
 8000ac8:	bd08      	pop	{r3, pc}
 8000aca:	bf00      	nop
 8000acc:	24007b6c 	.word	0x24007b6c
 8000ad0:	4000a400 	.word	0x4000a400

08000ad4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	2214      	movs	r2, #20
{
 8000ad8:	b0bc      	sub	sp, #240	; 0xf0
 8000ada:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	2100      	movs	r1, #0
 8000ade:	eb0d 0002 	add.w	r0, sp, r2
 8000ae2:	f02a ff4e 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae6:	22c8      	movs	r2, #200	; 0xc8
 8000ae8:	2100      	movs	r1, #0
 8000aea:	a80a      	add	r0, sp, #40	; 0x28
 8000aec:	f02a ff49 	bl	802b982 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	4a4b      	ldr	r2, [pc, #300]	; (8000c20 <HAL_FDCAN_MspInit+0x14c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d154      	bne.n	8000ba2 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afe:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b08:	9327      	str	r3, [sp, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0a:	f00d ff4b 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	b108      	cbz	r0, 8000b14 <HAL_FDCAN_MspInit+0x40>
    {
      Error_Handler();
 8000b10:	f001 f8b9 	bl	8001c86 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b14:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <HAL_FDCAN_MspInit+0x150>)
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b1a:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b1e:	d10c      	bne.n	8000b3a <HAL_FDCAN_MspInit+0x66>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b20:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <HAL_FDCAN_MspInit+0x154>)
 8000b22:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b2a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000b2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	9b00      	ldr	r3, [sp, #0]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <HAL_FDCAN_MspInit+0x154>)
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PA11     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b40:	2509      	movs	r5, #9
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	a905      	add	r1, sp, #20
 8000b48:	4838      	ldr	r0, [pc, #224]	; (8000c2c <HAL_FDCAN_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	f042 0202 	orr.w	r2, r2, #2
 8000b4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b56:	f002 0202 	and.w	r2, r2, #2
 8000b5a:	9201      	str	r2, [sp, #4]
 8000b5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b6e:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f00a f95e 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	a905      	add	r1, sp, #20
 8000b8e:	4828      	ldr	r0, [pc, #160]	; (8000c30 <HAL_FDCAN_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b90:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f00a f953 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000b9e:	b03c      	add	sp, #240	; 0xf0
 8000ba0:	bd70      	pop	{r4, r5, r6, pc}
  else if(fdcanHandle->Instance==FDCAN2)
 8000ba2:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <HAL_FDCAN_MspInit+0x160>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d1fa      	bne.n	8000b9e <HAL_FDCAN_MspInit+0xca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bae:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000bb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bb8:	9327      	str	r3, [sp, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f00d fef3 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	b108      	cbz	r0, 8000bc4 <HAL_FDCAN_MspInit+0xf0>
      Error_Handler();
 8000bc0:	f001 f861 	bl	8001c86 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_FDCAN_MspInit+0x150>)
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000bca:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000bcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000bce:	d10c      	bne.n	8000bea <HAL_FDCAN_MspInit+0x116>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_FDCAN_MspInit+0x154>)
 8000bd2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bda:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000bde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be6:	9303      	str	r3, [sp, #12]
 8000be8:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_FDCAN_MspInit+0x154>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	a905      	add	r1, sp, #20
 8000bee:	480f      	ldr	r0, [pc, #60]	; (8000c2c <HAL_FDCAN_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bf4:	f042 0202 	orr.w	r2, r2, #2
 8000bf8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	f242 0220 	movw	r2, #8224	; 0x2020
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	9304      	str	r3, [sp, #16]
 8000c0a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000c18:	2309      	movs	r3, #9
 8000c1a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	e7bd      	b.n	8000b9a <HAL_FDCAN_MspInit+0xc6>
 8000c1e:	bf00      	nop
 8000c20:	4000a000 	.word	0x4000a000
 8000c24:	24007ac8 	.word	0x24007ac8
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400
 8000c30:	58020000 	.word	0x58020000
 8000c34:	4000a400 	.word	0x4000a400

08000c38 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000c38:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	2208      	movs	r2, #8
  Command.AutoRefreshNumber      = 1;
 8000c40:	608b      	str	r3, [r1, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c42:	e9c1 3200 	strd	r3, r2, [r1]
  Command.ModeRegisterDefinition = 0;
 8000c46:	2300      	movs	r3, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.ModeRegisterDefinition = 0;
 8000c4c:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000c4e:	f00f fd6d 	bl	801072c <HAL_SDRAM_SendCommand>
 8000c52:	3800      	subs	r0, #0
 8000c54:	bf18      	it	ne
 8000c56:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8000c58:	4240      	negs	r0, r0
 8000c5a:	bd08      	pop	{r3, pc}
 8000c5c:	24007c0c 	.word	0x24007c0c

08000c60 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8000c60:	b508      	push	{r3, lr}
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <IS42S32800J_Precharge+0x24>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c64:	2308      	movs	r3, #8
 8000c66:	2202      	movs	r2, #2
  Command.AutoRefreshNumber      = 8;
 8000c68:	608b      	str	r3, [r1, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c6a:	e9c1 2300 	strd	r2, r3, [r1]
  Command.ModeRegisterDefinition = 0;
 8000c6e:	2300      	movs	r3, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.ModeRegisterDefinition = 0;
 8000c74:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000c76:	f00f fd59 	bl	801072c <HAL_SDRAM_SendCommand>
 8000c7a:	3800      	subs	r0, #0
 8000c7c:	bf18      	it	ne
 8000c7e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8000c80:	4240      	negs	r0, r0
 8000c82:	bd08      	pop	{r3, pc}
 8000c84:	24007c0c 	.word	0x24007c0c

08000c88 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode)
{
 8000c88:	b508      	push	{r3, lr}
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000c8a:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c8e:	f04f 0c04 	mov.w	ip, #4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000c92:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 8000c94:	694a      	ldr	r2, [r1, #20]
 8000c96:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8000c98:	698a      	ldr	r2, [r1, #24]
 8000c9a:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000c9c:	69ca      	ldr	r2, [r1, #28]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <IS42S32800J_ModeRegConfig+0x38>)
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000ca0:	4313      	orrs	r3, r2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	e9c1 c200 	strd	ip, r2, [r1]
  Command.AutoRefreshNumber      = 1;
 8000ca8:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8000caa:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	f00f fd3b 	bl	801072c <HAL_SDRAM_SendCommand>
 8000cb6:	3800      	subs	r0, #0
 8000cb8:	bf18      	it	ne
 8000cba:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	bd08      	pop	{r3, pc}
 8000cc0:	24007c0c 	.word	0x24007c0c

08000cc4 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 8000cc4:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000cc8:	2308      	movs	r3, #8
  Command.AutoRefreshNumber      = 8;
 8000cca:	e9c1 3301 	strd	r3, r3, [r1, #4]
  Command.ModeRegisterDefinition = 0;
 8000cce:	2300      	movs	r3, #0
  Command.CommandMode            = RefreshMode;
 8000cd0:	600a      	str	r2, [r1, #0]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.ModeRegisterDefinition = 0;
 8000cd6:	60cb      	str	r3, [r1, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000cd8:	f00f fd28 	bl	801072c <HAL_SDRAM_SendCommand>
 8000cdc:	3800      	subs	r0, #0
 8000cde:	bf18      	it	ne
 8000ce0:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	bd08      	pop	{r3, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24007c0c 	.word	0x24007c0c

08000cec <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4605      	mov	r5, r0
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000cf0:	f00f fd3b 	bl	801076a <HAL_SDRAM_ProgramRefreshRate>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	b928      	cbnz	r0, 8000d04 <IS42S32800J_RefreshRate+0x18>
  {
    return IS42S32800J_ERROR;
  }
  else
  {
	  HAL_SDRAM_SetAutoRefreshNumber(Ctx,2);
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	f00f fd4d 	bl	801079a <HAL_SDRAM_SetAutoRefreshNumber>
    return IS42S32800J_OK;
 8000d00:	4620      	mov	r0, r4
  }
}
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
    return IS42S32800J_ERROR;
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	e7fb      	b.n	8000d02 <IS42S32800J_RefreshRate+0x16>

08000d0a <IS42S32800J_Init>:
{
 8000d0a:	b538      	push	{r3, r4, r5, lr}
 8000d0c:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000d0e:	6809      	ldr	r1, [r1, #0]
{
 8000d10:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000d12:	f7ff ff91 	bl	8000c38 <IS42S32800J_ClockEnable>
 8000d16:	b110      	cbz	r0, 8000d1e <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
	  HAL_Delay(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f009 f882 	bl	8009e28 <HAL_Delay>
    IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank);
 8000d24:	6821      	ldr	r1, [r4, #0]
 8000d26:	4628      	mov	r0, r5
 8000d28:	f7ff ff86 	bl	8000c38 <IS42S32800J_ClockEnable>
    HAL_Delay(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f009 f87b 	bl	8009e28 <HAL_Delay>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000d32:	6821      	ldr	r1, [r4, #0]
 8000d34:	4628      	mov	r0, r5
 8000d36:	f7ff ff93 	bl	8000c60 <IS42S32800J_Precharge>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d1ec      	bne.n	8000d18 <IS42S32800J_Init+0xe>
    	HAL_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f009 f872 	bl	8009e28 <HAL_Delay>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000d44:	4628      	mov	r0, r5
 8000d46:	e9d4 1200 	ldrd	r1, r2, [r4]
 8000d4a:	f7ff ffbb 	bl	8000cc4 <IS42S32800J_RefreshMode>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d1e2      	bne.n	8000d18 <IS42S32800J_Init+0xe>
    	    HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f009 f868 	bl	8009e28 <HAL_Delay>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000d58:	4621      	mov	r1, r4
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f7ff ff94 	bl	8000c88 <IS42S32800J_ModeRegConfig>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d1d9      	bne.n	8000d18 <IS42S32800J_Init+0xe>
            HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f009 f85f 	bl	8009e28 <HAL_Delay>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000d6a:	68a1      	ldr	r1, [r4, #8]
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	f7ff ffbd 	bl	8000cec <IS42S32800J_RefreshRate>
 8000d72:	3800      	subs	r0, #0
 8000d74:	bf18      	it	ne
 8000d76:	2001      	movne	r0, #1
 8000d78:	4240      	negs	r0, r0
  return ret;
 8000d7a:	e7cf      	b.n	8000d1c <IS42S32800J_Init+0x12>

08000d7c <BSP_SDRAM_SingleTest>:
    return *( __IO uint32_t * )( SDRAM_DEVICE_ADDR + address );
}

int32_t
BSP_SDRAM_SingleTest( void )
{
 8000d7c:	b082      	sub	sp, #8

	volatile uint32_t i;
	volatile uint32_t w=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9301      	str	r3, [sp, #4]
    for ( i = 0; i < SDRAM_DEVICE_SIZE/4; ++i )
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	9b00      	ldr	r3, [sp, #0]
 8000d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d8a:	d308      	bcc.n	8000d9e <BSP_SDRAM_SingleTest+0x22>
    {
        BSP_SDRAM_Write_word( i * 4, w );
    }

    for ( i = 0; i < SDRAM_DEVICE_SIZE/4; ++i )
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	9b00      	ldr	r3, [sp, #0]
 8000d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000d96:	d30b      	bcc.n	8000db0 <BSP_SDRAM_SingleTest+0x34>

            return -1;
        }
    }

  return 0;
 8000d98:	2000      	movs	r0, #0
}
 8000d9a:	b002      	add	sp, #8
 8000d9c:	4770      	bx	lr
        BSP_SDRAM_Write_word( i * 4, w );
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	9a01      	ldr	r2, [sp, #4]
 8000da2:	009b      	lsls	r3, r3, #2
    *( __IO uint32_t * )( SDRAM_DEVICE_ADDR + address ) = data;
 8000da4:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8000da8:	601a      	str	r2, [r3, #0]
    for ( i = 0; i < SDRAM_DEVICE_SIZE/4; ++i )
 8000daa:	9b00      	ldr	r3, [sp, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	e7e8      	b.n	8000d82 <BSP_SDRAM_SingleTest+0x6>
        if ( w != BSP_SDRAM_Read_word( i * 4 ) )
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	009b      	lsls	r3, r3, #2
    return *( __IO uint32_t * )( SDRAM_DEVICE_ADDR + address );
 8000db4:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8000db8:	681b      	ldr	r3, [r3, #0]
        if ( w != BSP_SDRAM_Read_word( i * 4 ) )
 8000dba:	9a01      	ldr	r2, [sp, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d102      	bne.n	8000dc6 <BSP_SDRAM_SingleTest+0x4a>
    for ( i = 0; i < SDRAM_DEVICE_SIZE/4; ++i )
 8000dc0:	9b00      	ldr	r3, [sp, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	e7e3      	b.n	8000d8e <BSP_SDRAM_SingleTest+0x12>
            return -1;
 8000dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dca:	e7e6      	b.n	8000d9a <BSP_SDRAM_SingleTest+0x1e>

08000dcc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000dcc:	b500      	push	{lr}

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dce:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_FMC_Init+0x8c>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dd0:	2301      	movs	r3, #1
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dd2:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dd4:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000e60 <MX_FMC_Init+0x94>
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dd8:	f04f 0e20 	mov.w	lr, #32
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 8000de0:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000de2:	e9c0 c300 	strd	ip, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000de6:	e9c0 e204 	strd	lr, r2, [r0, #16]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000dea:	2300      	movs	r3, #0
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000dec:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000df0:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000df8:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000dfa:	e9c0 1208 	strd	r1, r2, [r0, #32]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000dfe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 3;
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e02:	2107      	movs	r1, #7
 8000e04:	2303      	movs	r3, #3
  SdramTiming.SelfRefreshTime = 4;
 8000e06:	2204      	movs	r2, #4
  SdramTiming.RowCycleDelay = 7;
  SdramTiming.WriteRecoveryTime = 4;
  SdramTiming.RPDelay = 3;
  SdramTiming.RCDDelay = 3;
 8000e08:	9307      	str	r3, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e0a:	e9cd 3101 	strd	r3, r1, [sp, #4]
  SdramTiming.RowCycleDelay = 7;
 8000e0e:	e9cd 2103 	strd	r2, r1, [sp, #12]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e12:	eb0d 0102 	add.w	r1, sp, r2
  SdramTiming.RPDelay = 3;
 8000e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e1a:	f00f fc5f 	bl	80106dc <HAL_SDRAM_Init>
 8000e1e:	b108      	cbz	r0, 8000e24 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 8000e20:	f000 ff31 	bl	8001c86 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  /* External memory mode register configuration */
       pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e24:	490d      	ldr	r1, [pc, #52]	; (8000e5c <MX_FMC_Init+0x90>)
       pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8000e26:	2208      	movs	r2, #8
 8000e28:	2303      	movs	r3, #3
       pRegMode.RefreshRate     = REFRESH_COUNT;
       pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8000e2a:	f240 6003 	movw	r0, #1539	; 0x603
       pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8000e2e:	e9c1 2300 	strd	r2, r3, [r1]
       pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8000e32:	2300      	movs	r3, #0
       pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
       pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8000e34:	2230      	movs	r2, #48	; 0x30
       pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8000e36:	e9c1 0302 	strd	r0, r3, [r1, #8]
       pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8000e3a:	610b      	str	r3, [r1, #16]
       pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
       pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;

       /* SDRAM initialization sequence */
       if(IS42S32800J_Init(&hsdram1, &pRegMode) != IS42S32800J_OK)
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_FMC_Init+0x8c>)
       pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8000e3e:	e9c1 2305 	strd	r2, r3, [r1, #20]
       pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8000e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e46:	61cb      	str	r3, [r1, #28]
       if(IS42S32800J_Init(&hsdram1, &pRegMode) != IS42S32800J_OK)
 8000e48:	f7ff ff5f 	bl	8000d0a <IS42S32800J_Init>
 8000e4c:	b108      	cbz	r0, 8000e52 <MX_FMC_Init+0x86>
       {
    	   Error_Handler( );
 8000e4e:	f000 ff1a 	bl	8001c86 <Error_Handler>
       }
  /* USER CODE END FMC_Init 2 */
}
 8000e52:	b009      	add	sp, #36	; 0x24
 8000e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e58:	24007c20 	.word	0x24007c20
 8000e5c:	24007c54 	.word	0x24007c54
 8000e60:	52004140 	.word	0x52004140

08000e64 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2214      	movs	r2, #20
 8000e6c:	a801      	add	r0, sp, #4
 8000e6e:	f02a fd88 	bl	802b982 <memset>
  if (FMC_Initialized) {
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_SDRAM_MspInit+0xfc>)
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d16f      	bne.n	8000f5a <HAL_SDRAM_MspInit+0xf6>
  FMC_Initialized = 1;
 8000e7a:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	a80e      	add	r0, sp, #56	; 0x38
  FMC_Initialized = 1;
 8000e7e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	22a8      	movs	r2, #168	; 0xa8
 8000e82:	f02a fd7e 	bl	802b982 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e8a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 180;
 8000e92:	2304      	movs	r3, #4
 8000e94:	22b4      	movs	r2, #180	; 0xb4
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e96:	930a      	str	r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 180;
 8000e98:	e9cd 3208 	strd	r3, r2, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000ea4:	2280      	movs	r2, #128	; 0x80
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000ea6:	9318      	str	r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000ea8:	920d      	str	r2, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eaa:	f00d fd7b 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	b108      	cbz	r0, 8000eb4 <HAL_SDRAM_MspInit+0x50>
      Error_Handler();
 8000eb0:	f000 fee9 	bl	8001c86 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_SDRAM_MspInit+0x100>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2601      	movs	r6, #1
 8000eba:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ebc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec0:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ec2:	a901      	add	r1, sp, #4
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <HAL_SDRAM_MspInit+0x104>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ec6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000eca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000ece:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ee8:	f009 ffac 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 8000eec:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef0:	a901      	add	r1, sp, #4
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efe:	f009 ffa1 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 8000f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f06:	a901      	add	r1, sp, #4
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f0a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f14:	f009 ff96 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5|GPIO_PIN_4
 8000f18:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1c:	a901      	add	r1, sp, #4
 8000f1e:	4815      	ldr	r0, [pc, #84]	; (8000f74 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f20:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2a:	f009 ff8b 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D0_Pin
 8000f2e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f32:	a901      	add	r1, sp, #4
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f36:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f40:	f009 ff80 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 8000f44:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f48:	a901      	add	r1, sp, #4
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f56:	f009 ff75 	bl	800ae44 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f5a:	b039      	add	sp, #228	; 0xe4
 8000f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	24007c1c 	.word	0x24007c1c
 8000f64:	58024400 	.word	0x58024400
 8000f68:	58022000 	.word	0x58022000
 8000f6c:	58021000 	.word	0x58021000
 8000f70:	58021c00 	.word	0x58021c00
 8000f74:	58021800 	.word	0x58021800
 8000f78:	58020c00 	.word	0x58020c00
 8000f7c:	58021400 	.word	0x58021400

08000f80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f80:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f82:	f006 fc45 	bl	8007810 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f011 fe6e 	bl	8012c68 <osDelay>
  for(;;)
 8000f8c:	e7fb      	b.n	8000f86 <StartDefaultTask+0x6>

08000f8e <vApplicationIdleHook>:
}
 8000f8e:	4770      	bx	lr

08000f90 <vApplicationStackOverflowHook>:
}
 8000f90:	4770      	bx	lr
	...

08000f94 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000f94:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <MX_FREERTOS_Init+0x30>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <MX_FREERTOS_Init+0x34>)
 8000f9c:	f011 fe1d 	bl	8012bda <osThreadNew>
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_FREERTOS_Init+0x38>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <MX_FREERTOS_Init+0x3c>)
 8000fa4:	2100      	movs	r1, #0
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fa6:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <MX_FREERTOS_Init+0x40>)
 8000faa:	f011 fe16 	bl	8012bda <osThreadNew>
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_FREERTOS_Init+0x44>)
  VideoTaskHandle = osThreadNew(videoTaskFunc, NULL, &VideoTask_attributes);
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <MX_FREERTOS_Init+0x48>)
 8000fb2:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fb4:	6018      	str	r0, [r3, #0]
  VideoTaskHandle = osThreadNew(videoTaskFunc, NULL, &VideoTask_attributes);
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <MX_FREERTOS_Init+0x4c>)
 8000fb8:	f011 fe0f 	bl	8012bda <osThreadNew>
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_FREERTOS_Init+0x50>)
 8000fbe:	6018      	str	r0, [r3, #0]
}
 8000fc0:	bd08      	pop	{r3, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0802e958 	.word	0x0802e958
 8000fc8:	08000f81 	.word	0x08000f81
 8000fcc:	24007c7c 	.word	0x24007c7c
 8000fd0:	0802e910 	.word	0x0802e910
 8000fd4:	0800316f 	.word	0x0800316f
 8000fd8:	24007c74 	.word	0x24007c74
 8000fdc:	0802e934 	.word	0x0802e934
 8000fe0:	08006cb1 	.word	0x08006cb1
 8000fe4:	24007c78 	.word	0x24007c78

08000fe8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PJ8   ------> UART8_TX
*/
void MX_GPIO_Init(void)
{
 8000fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fec:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	2214      	movs	r2, #20
 8000ff0:	2100      	movs	r1, #0
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8000ff2:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8001268 <MX_GPIO_Init+0x280>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	a80b      	add	r0, sp, #44	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 8000ff8:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800126c <MX_GPIO_Init+0x284>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f02a fcc1 	bl	802b982 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001000:	4b93      	ldr	r3, [pc, #588]	; (8001250 <MX_GPIO_Init+0x268>)
  HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8001002:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB1_EN_GPIO_Port, USB1_EN_Pin, GPIO_PIN_RESET);
 8001004:	f8df b268 	ldr.w	fp, [pc, #616]	; 8001270 <MX_GPIO_Init+0x288>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001008:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_RST_GPIO_Port, R_RST_Pin, GPIO_PIN_RESET);
 8001010:	4f90      	ldr	r7, [pc, #576]	; (8001254 <MX_GPIO_Init+0x26c>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = R_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001018:	4e8f      	ldr	r6, [pc, #572]	; (8001258 <MX_GPIO_Init+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	f44f 7a80 	mov.w	sl, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001020:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001028:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001034:	f042 0202 	orr.w	r2, r2, #2
 8001038:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800103c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001040:	f002 0202 	and.w	r2, r2, #2
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800104c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001054:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001058:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800105c:	9202      	str	r2, [sp, #8]
 800105e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001060:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001068:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800106c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001070:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001074:	9203      	str	r2, [sp, #12]
 8001076:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800107c:	f042 0208 	orr.w	r2, r2, #8
 8001080:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001084:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001088:	f002 0208 	and.w	r2, r2, #8
 800108c:	9204      	str	r2, [sp, #16]
 800108e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001094:	f042 0204 	orr.w	r2, r2, #4
 8001098:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800109c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010a0:	f002 0204 	and.w	r2, r2, #4
 80010a4:	9205      	str	r2, [sp, #20]
 80010a6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010ac:	f042 0201 	orr.w	r2, r2, #1
 80010b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010b8:	f002 0201 	and.w	r2, r2, #1
 80010bc:	9206      	str	r2, [sp, #24]
 80010be:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010c4:	f042 0210 	orr.w	r2, r2, #16
 80010c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010d0:	f002 0210 	and.w	r2, r2, #16
 80010d4:	9207      	str	r2, [sp, #28]
 80010d6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010e8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80010ec:	9208      	str	r2, [sp, #32]
 80010ee:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001100:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001104:	9209      	str	r2, [sp, #36]	; 0x24
 8001106:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001108:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800110c:	f042 0220 	orr.w	r2, r2, #32
 8001110:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	930a      	str	r3, [sp, #40]	; 0x28
 8001120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8001122:	f00a f81f 	bl	800b164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 8001126:	4648      	mov	r0, r9
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112e:	f00a f819 	bl	800b164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB1_EN_GPIO_Port, USB1_EN_Pin, GPIO_PIN_RESET);
 8001132:	4658      	mov	r0, fp
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113a:	f00a f813 	bl	800b164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_RST_GPIO_Port, R_RST_Pin, GPIO_PIN_RESET);
 800113e:	4638      	mov	r0, r7
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001146:	f00a f80d 	bl	800b164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	4630      	mov	r0, r6
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	f00a f808 	bl	800b164 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(R_CS_GPIO_Port, &GPIO_InitStruct);
 8001158:	a90b      	add	r1, sp, #44	; 0x2c
 800115a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(R_CS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f009 fe6e 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R_INT_Pin;
 8001168:	2210      	movs	r2, #16
  HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 800116a:	a90b      	add	r1, sp, #44	; 0x2c
 800116c:	483b      	ldr	r0, [pc, #236]	; (800125c <MX_GPIO_Init+0x274>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 8001174:	f009 fe66 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB1_OVERCURRENT_Pin|USR_BTN_1_Pin;
 8001178:	f248 0240 	movw	r2, #32832	; 0x8040
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	a90b      	add	r1, sp, #44	; 0x2c
 800117e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f009 fe5d 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CTP_RST_Pin;
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  HAL_GPIO_Init(CTP_RST_GPIO_Port, &GPIO_InitStruct);
 800118e:	a90b      	add	r1, sp, #44	; 0x2c
 8001190:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(CTP_RST_GPIO_Port, &GPIO_InitStruct);
 800119e:	f009 fe51 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_nINT_Pin|SDIO_CD_Pin;
 80011a2:	220c      	movs	r2, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a4:	a90b      	add	r1, sp, #44	; 0x2c
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_GPIO_Init+0x278>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ae:	f009 fe49 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(MCO1_GPIO_Port, &GPIO_InitStruct);
 80011b2:	a90b      	add	r1, sp, #44	; 0x2c
 80011b4:	4630      	mov	r0, r6
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011b6:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	e9cd a90b 	strd	sl, r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(MCO1_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f009 fe40 	bl	800ae44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = R_GPIO1_Pin|R_GPIO0_Pin;
 80011c4:	2288      	movs	r2, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c6:	a90b      	add	r1, sp, #44	; 0x2c
 80011c8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	940d      	str	r4, [sp, #52]	; 0x34
  /*Configure GPIO pin : PJ8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80011cc:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d4:	f009 fe36 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB1_EN_Pin;
 80011d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(USB1_EN_GPIO_Port, &GPIO_InitStruct);
 80011dc:	a90b      	add	r1, sp, #44	; 0x2c
 80011de:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB1_EN_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f009 fe2c 	bl	800ae44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R_RST_Pin;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(R_RST_GPIO_Port, &GPIO_InitStruct);
 80011f0:	a90b      	add	r1, sp, #44	; 0x2c
 80011f2:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(R_RST_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f009 fe22 	bl	800ae44 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001200:	a90b      	add	r1, sp, #44	; 0x2c
 8001202:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001204:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	e9cd a90b 	strd	sl, r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001210:	f009 fe18 	bl	800ae44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001214:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001218:	a90b      	add	r1, sp, #44	; 0x2c
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <MX_GPIO_Init+0x27c>)
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800121c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001224:	f009 fe0e 	bl	800ae44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001228:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800122a:	a90b      	add	r1, sp, #44	; 0x2c
 800122c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001236:	f009 fe05 	bl	800ae44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 800123a:	4622      	mov	r2, r4
 800123c:	2107      	movs	r1, #7
 800123e:	2009      	movs	r0, #9
 8001240:	f009 fa1e 	bl	800a680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001244:	2009      	movs	r0, #9
 8001246:	f009 fa4d 	bl	800a6e4 <HAL_NVIC_EnableIRQ>

}
 800124a:	b011      	add	sp, #68	; 0x44
 800124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001250:	58024400 	.word	0x58024400
 8001254:	58022400 	.word	0x58022400
 8001258:	58020000 	.word	0x58020000
 800125c:	58020400 	.word	0x58020400
 8001260:	58021000 	.word	0x58021000
 8001264:	58021c00 	.word	0x58021c00
 8001268:	58021800 	.word	0x58021800
 800126c:	58020800 	.word	0x58020800
 8001270:	58021400 	.word	0x58021400

08001274 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001274:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00B03FDB;
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x50>)
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_I2C1_Init+0x54>)
 800127c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	2300      	movs	r3, #0
 8001282:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8001284:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001290:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001292:	f00a fddb 	bl	800be4c <HAL_I2C_Init>
 8001296:	b108      	cbz	r0, 800129c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8001298:	f000 fcf5 	bl	8001c86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <MX_I2C1_Init+0x4c>)
 80012a0:	f00a febe 	bl	800c020 <HAL_I2CEx_ConfigAnalogFilter>
 80012a4:	b108      	cbz	r0, 80012aa <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80012a6:	f000 fcee 	bl	8001c86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C1_Init+0x4c>)
 80012ae:	f00a fedd 	bl	800c06c <HAL_I2CEx_ConfigDigitalFilter>
 80012b2:	b118      	cbz	r0, 80012bc <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012b8:	f000 bce5 	b.w	8001c86 <Error_Handler>
}
 80012bc:	bd08      	pop	{r3, pc}
 80012be:	bf00      	nop
 80012c0:	24007c80 	.word	0x24007c80
 80012c4:	40005400 	.word	0x40005400
 80012c8:	00b03fdb 	.word	0x00b03fdb

080012cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012cc:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012ce:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x00501D55;
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C2_Init+0x54>)
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_I2C2_Init+0x58>)
 80012d4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	2300      	movs	r3, #0
 80012da:	2201      	movs	r2, #1
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
 80012dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ea:	f00a fdaf 	bl	800be4c <HAL_I2C_Init>
 80012ee:	b108      	cbz	r0, 80012f4 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 80012f0:	f000 fcc9 	bl	8001c86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80012f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <MX_I2C2_Init+0x50>)
 80012fa:	f00a fe91 	bl	800c020 <HAL_I2CEx_ConfigAnalogFilter>
 80012fe:	b108      	cbz	r0, 8001304 <MX_I2C2_Init+0x38>
  {
    Error_Handler();
 8001300:	f000 fcc1 	bl	8001c86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_I2C2_Init+0x50>)
 8001308:	f00a feb0 	bl	800c06c <HAL_I2CEx_ConfigDigitalFilter>
 800130c:	b108      	cbz	r0, 8001312 <MX_I2C2_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 fcba 	bl	8001c86 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001312:	2002      	movs	r0, #2
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001318:	f00a bece 	b.w	800c0b8 <HAL_I2CEx_EnableFastModePlus>
 800131c:	24007cd4 	.word	0x24007cd4
 8001320:	40005800 	.word	0x40005800
 8001324:	00501d55 	.word	0x00501d55

08001328 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001328:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800132a:	4812      	ldr	r0, [pc, #72]	; (8001374 <MX_I2C4_Init+0x4c>)
  hi2c4.Init.Timing = 0x00B03FDB;
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_I2C4_Init+0x50>)
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_I2C4_Init+0x54>)
 8001330:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c4.Init.OwnAddress1 = 0;
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	2300      	movs	r3, #0
 8001336:	2201      	movs	r2, #1
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
 8001338:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001344:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001346:	f00a fd81 	bl	800be4c <HAL_I2C_Init>
 800134a:	b108      	cbz	r0, 8001350 <MX_I2C4_Init+0x28>
  {
    Error_Handler();
 800134c:	f000 fc9b 	bl	8001c86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	4808      	ldr	r0, [pc, #32]	; (8001374 <MX_I2C4_Init+0x4c>)
 8001354:	f00a fe64 	bl	800c020 <HAL_I2CEx_ConfigAnalogFilter>
 8001358:	b108      	cbz	r0, 800135e <MX_I2C4_Init+0x36>
  {
    Error_Handler();
 800135a:	f000 fc94 	bl	8001c86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_I2C4_Init+0x4c>)
 8001362:	f00a fe83 	bl	800c06c <HAL_I2CEx_ConfigDigitalFilter>
 8001366:	b118      	cbz	r0, 8001370 <MX_I2C4_Init+0x48>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001368:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800136c:	f000 bc8b 	b.w	8001c86 <Error_Handler>
}
 8001370:	bd08      	pop	{r3, pc}
 8001372:	bf00      	nop
 8001374:	24007d28 	.word	0x24007d28
 8001378:	58001c00 	.word	0x58001c00
 800137c:	00b03fdb 	.word	0x00b03fdb

08001380 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001384:	b0be      	sub	sp, #248	; 0xf8
 8001386:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	2214      	movs	r2, #20
 800138a:	2100      	movs	r1, #0
 800138c:	a807      	add	r0, sp, #28
 800138e:	f02a faf8 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001392:	22c8      	movs	r2, #200	; 0xc8
 8001394:	2100      	movs	r1, #0
 8001396:	a80c      	add	r0, sp, #48	; 0x30
 8001398:	f02a faf3 	bl	802b982 <memset>
  if(i2cHandle->Instance==I2C1)
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	4a5d      	ldr	r2, [pc, #372]	; (8001514 <HAL_I2C_MspInit+0x194>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d133      	bne.n	800140c <HAL_I2C_MspInit+0x8c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a4:	2208      	movs	r2, #8
 80013a6:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a8:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f00d faf9 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	b108      	cbz	r0, 80013b8 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 80013b4:	f000 fc67 	bl	8001c86 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4c57      	ldr	r4, [pc, #348]	; (8001518 <HAL_I2C_MspInit+0x198>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ba:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80013cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d8:	2312      	movs	r3, #18
 80013da:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	484e      	ldr	r0, [pc, #312]	; (800151c <HAL_I2C_MspInit+0x19c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e6:	2304      	movs	r3, #4
 80013e8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f009 fd2b 	bl	800ae44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ee:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80013f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80013fa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001406:	b03e      	add	sp, #248	; 0xf8
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(i2cHandle->Instance==I2C2)
 800140c:	4a44      	ldr	r2, [pc, #272]	; (8001520 <HAL_I2C_MspInit+0x1a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d149      	bne.n	80014a6 <HAL_I2C_MspInit+0x126>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001412:	2208      	movs	r2, #8
 8001414:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001416:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001418:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f00d fac2 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	b108      	cbz	r0, 8001426 <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 8001422:	f000 fc30 	bl	8001c86 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	4c3c      	ldr	r4, [pc, #240]	; (8001518 <HAL_I2C_MspInit+0x198>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2700      	movs	r7, #0
 800142e:	2603      	movs	r6, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001430:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001434:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001436:	a907      	add	r1, sp, #28
 8001438:	483a      	ldr	r0, [pc, #232]	; (8001524 <HAL_I2C_MspInit+0x1a4>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001442:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800145a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800145e:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	9303      	str	r3, [sp, #12]
 8001466:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001468:	2310      	movs	r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	e9cd 3807 	strd	r3, r8, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001472:	f009 fce7 	bl	800ae44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001476:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	a907      	add	r1, sp, #28
 800147c:	4827      	ldr	r0, [pc, #156]	; (800151c <HAL_I2C_MspInit+0x19c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800147e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f009 fcdc 	bl	800ae44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800148c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001498:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800149c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a0:	9304      	str	r3, [sp, #16]
 80014a2:	9b04      	ldr	r3, [sp, #16]
 80014a4:	e7af      	b.n	8001406 <HAL_I2C_MspInit+0x86>
  else if(i2cHandle->Instance==I2C4)
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_I2C_MspInit+0x1a8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d1ac      	bne.n	8001406 <HAL_I2C_MspInit+0x86>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80014ac:	2210      	movs	r2, #16
 80014ae:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80014b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	f00d fa75 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	b108      	cbz	r0, 80014c0 <HAL_I2C_MspInit+0x140>
      Error_Handler();
 80014bc:	f000 fbe3 	bl	8001c86 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	4c15      	ldr	r4, [pc, #84]	; (8001518 <HAL_I2C_MspInit+0x198>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2100      	movs	r1, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	4818      	ldr	r0, [pc, #96]	; (800152c <HAL_I2C_MspInit+0x1ac>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80014d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	9305      	str	r3, [sp, #20]
 80014e0:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e2:	2312      	movs	r3, #18
 80014e4:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80014ee:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80014f2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	f009 fca6 	bl	800ae44 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80014f8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8001504:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8001508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150c:	9306      	str	r3, [sp, #24]
 800150e:	9b06      	ldr	r3, [sp, #24]
}
 8001510:	e779      	b.n	8001406 <HAL_I2C_MspInit+0x86>
 8001512:	bf00      	nop
 8001514:	40005400 	.word	0x40005400
 8001518:	58024400 	.word	0x58024400
 800151c:	58020400 	.word	0x58020400
 8001520:	40005800 	.word	0x40005800
 8001524:	58021c00 	.word	0x58021c00
 8001528:	58001c00 	.word	0x58001c00
 800152c:	58020c00 	.word	0x58020c00

08001530 <MX_JPEG_Init>:
MDMA_HandleTypeDef hmdma_jpeg_infifo_th;
MDMA_HandleTypeDef hmdma_jpeg_outfifo_th;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8001530:	b508      	push	{r3, lr}
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_JPEG_Init+0x18>)
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <MX_JPEG_Init+0x1c>)
 8001536:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8001538:	f00a ff60 	bl	800c3fc <HAL_JPEG_Init>
 800153c:	b118      	cbz	r0, 8001546 <MX_JPEG_Init+0x16>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800153e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001542:	f000 bba0 	b.w	8001c86 <Error_Handler>
}
 8001546:	bd08      	pop	{r3, pc}
 8001548:	24007d7c 	.word	0x24007d7c
 800154c:	52003000 	.word	0x52003000

08001550 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8001550:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(jpegHandle->Instance==JPEG)
 8001552:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_JPEG_MspInit+0xec>)
{
 8001554:	4605      	mov	r5, r0
  if(jpegHandle->Instance==JPEG)
 8001556:	6802      	ldr	r2, [r0, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d16d      	bne.n	8001638 <HAL_JPEG_MspInit+0xe8>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800155c:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_JPEG_MspInit+0xf0>)
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800155e:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001562:	4c38      	ldr	r4, [pc, #224]	; (8001644 <HAL_JPEG_MspInit+0xf4>)
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001564:	2102      	movs	r1, #2
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001566:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800156a:	f44f 4ea0 	mov.w	lr, #20480	; 0x5000
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800156e:	4836      	ldr	r0, [pc, #216]	; (8001648 <HAL_JPEG_MspInit+0xf8>)
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001570:	f042 0220 	orr.w	r2, r2, #32
 8001574:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001578:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800157a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001586:	2311      	movs	r3, #17
 8001588:	e9c4 0300 	strd	r0, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800158c:	2300      	movs	r3, #0
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800158e:	4620      	mov	r0, r4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001590:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001594:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001598:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800159a:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800159c:	e9c4 c209 	strd	ip, r2, [r4, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015a0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80015a4:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015a8:	e9c4 e20b 	strd	lr, r2, [r4, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80015ac:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80015b0:	f00b fee7 	bl	800d382 <HAL_MDMA_Init>
 80015b4:	b108      	cbz	r0, 80015ba <HAL_JPEG_MspInit+0x6a>
    {
      Error_Handler();
 80015b6:	f000 fb66 	bl	8001c86 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80015ba:	2200      	movs	r2, #0
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <HAL_JPEG_MspInit+0xf4>)
 80015be:	4611      	mov	r1, r2
 80015c0:	f00b ff4e 	bl	800d460 <HAL_MDMA_ConfigPostRequestMask>
 80015c4:	b108      	cbz	r0, 80015ca <HAL_JPEG_MspInit+0x7a>
    {
      Error_Handler();
 80015c6:	f000 fb5e 	bl	8001c86 <Error_Handler>
    }

    __HAL_LINKDMA(jpegHandle,hdmain,hmdma_jpeg_infifo_th);
 80015ca:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80015cc:	2313      	movs	r3, #19
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015d0:	2108      	movs	r1, #8
    __HAL_LINKDMA(jpegHandle,hdmain,hmdma_jpeg_infifo_th);
 80015d2:	6425      	str	r5, [r4, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80015d4:	4c1e      	ldr	r4, [pc, #120]	; (8001650 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80015d6:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	2280      	movs	r2, #128	; 0x80
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80015de:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80015e0:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80015e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80015e4:	63a3      	str	r3, [r4, #56]	; 0x38
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80015e6:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015ea:	2220      	movs	r2, #32
 80015ec:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80015f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80015f4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015f8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80015fc:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 8001600:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001604:	f00b febd 	bl	800d382 <HAL_MDMA_Init>
 8001608:	b108      	cbz	r0, 800160e <HAL_JPEG_MspInit+0xbe>
    {
      Error_Handler();
 800160a:	f000 fb3c 	bl	8001c86 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 800160e:	2200      	movs	r2, #0
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <HAL_JPEG_MspInit+0x100>)
 8001612:	4611      	mov	r1, r2
 8001614:	f00b ff24 	bl	800d460 <HAL_MDMA_ConfigPostRequestMask>
 8001618:	b108      	cbz	r0, 800161e <HAL_JPEG_MspInit+0xce>
    {
      Error_Handler();
 800161a:	f000 fb34 	bl	8001c86 <Error_Handler>
    }

    __HAL_LINKDMA(jpegHandle,hdmaout,hmdma_jpeg_outfifo_th);
 800161e:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 7, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2107      	movs	r1, #7
 8001624:	2079      	movs	r0, #121	; 0x79
    __HAL_LINKDMA(jpegHandle,hdmaout,hmdma_jpeg_outfifo_th);
 8001626:	6425      	str	r5, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 7, 0);
 8001628:	f009 f82a 	bl	800a680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800162c:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 800162e:	b003      	add	sp, #12
 8001630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001634:	f009 b856 	b.w	800a6e4 <HAL_NVIC_EnableIRQ>
}
 8001638:	b003      	add	sp, #12
 800163a:	bd30      	pop	{r4, r5, pc}
 800163c:	52003000 	.word	0x52003000
 8001640:	58024400 	.word	0x58024400
 8001644:	24007dd4 	.word	0x24007dd4
 8001648:	52000200 	.word	0x52000200
 800164c:	520001c0 	.word	0x520001c0
 8001650:	24007e40 	.word	0x24007e40

08001654 <MX_LPTIM2_Init>:

LPTIM_HandleTypeDef hlptim2;

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8001654:	b508      	push	{r3, lr}
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <MX_LPTIM2_Init+0x38>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001658:	2300      	movs	r3, #0
 800165a:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <MX_LPTIM2_Init+0x3c>)
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800165c:	6103      	str	r3, [r0, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800165e:	6303      	str	r3, [r0, #48]	; 0x30
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001660:	e9c0 2300 	strd	r2, r3, [r0]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001668:	6142      	str	r2, [r0, #20]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800166a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800166e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001672:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001676:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800167a:	f00b fc55 	bl	800cf28 <HAL_LPTIM_Init>
 800167e:	b118      	cbz	r0, 8001688 <MX_LPTIM2_Init+0x34>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001684:	f000 baff 	b.w	8001c86 <Error_Handler>
}
 8001688:	bd08      	pop	{r3, pc}
 800168a:	bf00      	nop
 800168c:	24007eac 	.word	0x24007eac
 8001690:	58002400 	.word	0x58002400

08001694 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	b0ba      	sub	sp, #232	; 0xe8
 8001698:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	2214      	movs	r2, #20
 800169c:	2100      	movs	r1, #0
 800169e:	a803      	add	r0, sp, #12
 80016a0:	f02a f96f 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a4:	22c8      	movs	r2, #200	; 0xc8
 80016a6:	2100      	movs	r1, #0
 80016a8:	a808      	add	r0, sp, #32
 80016aa:	f02a f96a 	bl	802b982 <memset>
  if(lptimHandle->Instance==LPTIM2)
 80016ae:	6822      	ldr	r2, [r4, #0]
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_LPTIM_MspInit+0xb8>)
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d147      	bne.n	8001746 <HAL_LPTIM_MspInit+0xb2>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80016bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c0:	f00d f970 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	b108      	cbz	r0, 80016ca <HAL_LPTIM_MspInit+0x36>
    {
      Error_Handler();
 80016c6:	f000 fade 	bl	8001c86 <Error_Handler>
    }

    /* LPTIM2 clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_LPTIM_MspInit+0xbc>)
    /**LPTIM2 GPIO Configuration
    PB10     ------> LPTIM2_IN1
    PD11     ------> LPTIM2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80016d0:	2503      	movs	r5, #3
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80016d2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	a903      	add	r1, sp, #12
 80016d8:	481e      	ldr	r0, [pc, #120]	; (8001754 <HAL_LPTIM_MspInit+0xc0>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80016da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016de:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80016e2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80016e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016f2:	f042 0202 	orr.w	r2, r2, #2
 80016f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016fe:	f002 0202 	and.w	r2, r2, #2
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8001716:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f009 fb8a 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001730:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001734:	a903      	add	r1, sp, #12
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <HAL_LPTIM_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8001738:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f009 fb7f 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8001746:	b03a      	add	sp, #232	; 0xe8
 8001748:	bd70      	pop	{r4, r5, r6, pc}
 800174a:	bf00      	nop
 800174c:	58002400 	.word	0x58002400
 8001750:	58024400 	.word	0x58024400
 8001754:	58020400 	.word	0x58020400
 8001758:	58020c00 	.word	0x58020c00

0800175c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800175c:	b510      	push	{r4, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001760:	2234      	movs	r2, #52	; 0x34
 8001762:	2100      	movs	r1, #0

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001764:	2400      	movs	r4, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001766:	a801      	add	r0, sp, #4
 8001768:	f02a f90b 	bl	802b982 <memset>
  hltdc.Instance = LTDC;
 800176c:	4823      	ldr	r0, [pc, #140]	; (80017fc <MX_LTDC_Init+0xa0>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <MX_LTDC_Init+0xa4>)
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 0;
  hltdc.Init.VerticalSync = 0;
  hltdc.Init.AccumulatedHBP = 88;
  hltdc.Init.AccumulatedVBP = 23;
 8001770:	f04f 0c58 	mov.w	ip, #88	; 0x58
  hltdc.Init.AccumulatedActiveW = 1368;
  hltdc.Init.AccumulatedActiveH = 823;
 8001774:	f44f 6eab 	mov.w	lr, #1368	; 0x558
  hltdc.Init.TotalWidth = 1440;
  hltdc.Init.TotalHeigh = 838;
 8001778:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
  hltdc.Init.Backcolor.Blue = 0;
 800177c:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc.Init.VerticalSync = 0;
 800177e:	6184      	str	r4, [r0, #24]
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
 8001780:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001784:	e9c0 3400 	strd	r3, r4, [r0]
  hltdc.Init.AccumulatedVBP = 23;
 8001788:	2317      	movs	r3, #23
 800178a:	e9c0 c307 	strd	ip, r3, [r0, #28]
  hltdc.Init.AccumulatedActiveH = 823;
 800178e:	f240 3337 	movw	r3, #823	; 0x337
 8001792:	e9c0 e309 	strd	lr, r3, [r0, #36]	; 0x24
  hltdc.Init.TotalHeigh = 838;
 8001796:	f240 3346 	movw	r3, #838	; 0x346
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800179a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc.Init.HorizontalSync = 0;
 800179e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hltdc.Init.TotalHeigh = 838;
 80017a2:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017a6:	f00b fca7 	bl	800d0f8 <HAL_LTDC_Init>
 80017aa:	b108      	cbz	r0, 80017b0 <MX_LTDC_Init+0x54>
  {
    Error_Handler();
 80017ac:	f000 fa6b 	bl	8001c86 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 1280;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 800;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017b0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80017b4:	2102      	movs	r1, #2
  pLayerCfg.Alpha = 255;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
  pLayerCfg.WindowX1 = 1280;
 80017ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  pLayerCfg.WindowX0 = 0;
 80017be:	9401      	str	r4, [sp, #4]
  pLayerCfg.FBStartAdress = 0xD0000000;
  pLayerCfg.ImageWidth = 1280;
  pLayerCfg.ImageHeight = 800;
 80017c0:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80017c2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
 80017c6:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017ca:	e9cd 3104 	strd	r3, r1, [sp, #16]
  pLayerCfg.Alpha = 255;
 80017ce:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 80017d0:	e9cd 1406 	strd	r1, r4, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017d4:	2105      	movs	r1, #5
 80017d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  pLayerCfg.FBStartAdress = 0xD0000000;
 80017da:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <MX_LTDC_Init+0xa0>)
  pLayerCfg.ImageWidth = 1280;
 80017e0:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  pLayerCfg.WindowY0 = 0;
 80017e4:	e9cd 2402 	strd	r2, r4, [sp, #8]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017e8:	a901      	add	r1, sp, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	f00b fd4f 	bl	800d28e <HAL_LTDC_ConfigLayer>
 80017f0:	b108      	cbz	r0, 80017f6 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 80017f2:	f000 fa48 	bl	8001c86 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017f6:	b00e      	add	sp, #56	; 0x38
 80017f8:	bd10      	pop	{r4, pc}
 80017fa:	bf00      	nop
 80017fc:	24007ee4 	.word	0x24007ee4
 8001800:	50001000 	.word	0x50001000

08001804 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001808:	b08c      	sub	sp, #48	; 0x30
 800180a:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	2214      	movs	r2, #20
 800180e:	2100      	movs	r1, #0
 8001810:	a807      	add	r0, sp, #28
 8001812:	f02a f8b6 	bl	802b982 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_LTDC_MspInit+0x194>)
 800181a:	429a      	cmp	r2, r3
 800181c:	f040 80b9 	bne.w	8001992 <HAL_LTDC_MspInit+0x18e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001820:	4b5e      	ldr	r3, [pc, #376]	; (800199c <HAL_LTDC_MspInit+0x198>)
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001824:	2503      	movs	r5, #3
 8001826:	270e      	movs	r7, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001828:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800182c:	a907      	add	r1, sp, #28
 800182e:	485c      	ldr	r0, [pc, #368]	; (80019a0 <HAL_LTDC_MspInit+0x19c>)

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001832:	f042 0208 	orr.w	r2, r2, #8

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001836:	f04f 0809 	mov.w	r8, #9
    __HAL_RCC_LTDC_CLK_ENABLE();
 800183a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800183e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001842:	f002 0208 	and.w	r2, r2, #8
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800184a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800184e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001852:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001856:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800185a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800185e:	9201      	str	r2, [sp, #4]
 8001860:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001862:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800186e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001872:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001876:	9202      	str	r2, [sp, #8]
 8001878:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800187a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800187e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001882:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001886:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800188a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800188e:	9203      	str	r2, [sp, #12]
 8001890:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001896:	f042 0210 	orr.w	r2, r2, #16
 800189a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800189e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018a2:	f002 0210 	and.w	r2, r2, #16
 80018a6:	9204      	str	r2, [sp, #16]
 80018a8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80018be:	9205      	str	r2, [sp, #20]
 80018c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80018c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	9306      	str	r3, [sp, #24]
 80018d8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	23fd      	movs	r3, #253	; 0xfd
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018dc:	e9cd 570a 	strd	r5, r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	e9cd 3607 	strd	r3, r6, [sp, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018e4:	f009 faae 	bl	800ae44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 80018e8:	f64e 03ff 	movw	r3, #59647	; 0xe8ff
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018ec:	a907      	add	r1, sp, #28
 80018ee:	482d      	ldr	r0, [pc, #180]	; (80019a4 <HAL_LTDC_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018f0:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80018fa:	f009 faa3 	bl	800ae44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001902:	a907      	add	r1, sp, #28
 8001904:	4828      	ldr	r0, [pc, #160]	; (80019a8 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001906:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001910:	f009 fa98 	bl	800ae44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001918:	a907      	add	r1, sp, #28
 800191a:	4822      	ldr	r0, [pc, #136]	; (80019a4 <HAL_LTDC_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800191c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001928:	f009 fa8c 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800192c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192e:	a907      	add	r1, sp, #28
 8001930:	481e      	ldr	r0, [pc, #120]	; (80019ac <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001932:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193c:	f009 fa82 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8001940:	f44f 4308 	mov.w	r3, #34816	; 0x8800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001944:	a907      	add	r1, sp, #28
 8001946:	481a      	ldr	r0, [pc, #104]	; (80019b0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001948:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001954:	f009 fa76 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001958:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800195c:	a907      	add	r1, sp, #28
 800195e:	4814      	ldr	r0, [pc, #80]	; (80019b0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001960:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800196a:	f009 fa6b 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800196e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001970:	a907      	add	r1, sp, #28
 8001972:	4810      	ldr	r0, [pc, #64]	; (80019b4 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001974:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800197e:	f009 fa61 	bl	800ae44 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001982:	2058      	movs	r0, #88	; 0x58
 8001984:	4622      	mov	r2, r4
 8001986:	2105      	movs	r1, #5
 8001988:	f008 fe7a 	bl	800a680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800198c:	2058      	movs	r0, #88	; 0x58
 800198e:	f008 fea9 	bl	800a6e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001992:	b00c      	add	sp, #48	; 0x30
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001998:	50001000 	.word	0x50001000
 800199c:	58024400 	.word	0x58024400
 80019a0:	58022800 	.word	0x58022800
 80019a4:	58022400 	.word	0x58022400
 80019a8:	58021800 	.word	0x58021800
 80019ac:	58021000 	.word	0x58021000
 80019b0:	58022000 	.word	0x58022000
 80019b4:	58021c00 	.word	0x58021c00

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b530      	push	{r4, r5, lr}
 80019ba:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019bc:	224c      	movs	r2, #76	; 0x4c
 80019be:	2100      	movs	r1, #0
 80019c0:	a80b      	add	r0, sp, #44	; 0x2c
 80019c2:	f029 ffde 	bl	802b982 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c6:	2220      	movs	r2, #32
 80019c8:	2100      	movs	r1, #0
 80019ca:	a803      	add	r0, sp, #12
 80019cc:	f029 ffd9 	bl	802b982 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f00b feb1 	bl	800d738 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d6:	2300      	movs	r3, #0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <SystemClock_Config+0x10c>)
 80019dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <SystemClock_Config+0x110>)
 80019ee:	699a      	ldr	r2, [r3, #24]
 80019f0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019f4:	619a      	str	r2, [r3, #24]
 80019f6:	699a      	ldr	r2, [r3, #24]
 80019f8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80019fc:	9200      	str	r2, [sp, #0]
 80019fe:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	0494      	lsls	r4, r2, #18
 8001a04:	d5fc      	bpl.n	8001a00 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4a31      	ldr	r2, [pc, #196]	; (8001acc <SystemClock_Config+0x114>)
 8001a08:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 8001a0c:	f041 0102 	orr.w	r1, r1, #2
 8001a10:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
 8001a14:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 8001a18:	f002 0202 	and.w	r2, r2, #2
 8001a1c:	9201      	str	r2, [sp, #4]
 8001a1e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a2a:	619a      	str	r2, [r3, #24]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <SystemClock_Config+0x10c>)
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a40:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <SystemClock_Config+0x110>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a4a:	6993      	ldr	r3, [r2, #24]
 8001a4c:	0498      	lsls	r0, r3, #18
 8001a4e:	d5fc      	bpl.n	8001a4a <SystemClock_Config+0x92>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a54:	2129      	movs	r1, #41	; 0x29
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001a56:	22f0      	movs	r2, #240	; 0xf0
 8001a58:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 24;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a5a:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a5e:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a62:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001a64:	e9cd 4216 	strd	r4, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a68:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001a6c:	2218      	movs	r2, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a70:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a74:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a76:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e9cd 531b 	strd	r5, r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a80:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f00c f96b 	bl	800dd5c <HAL_RCC_OscConfig>
 8001a86:	b108      	cbz	r0, 8001a8c <SystemClock_Config+0xd4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <SystemClock_Config+0xd2>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	223f      	movs	r2, #63	; 0x3f
 8001a8e:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a90:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a92:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a96:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a9c:	e9cd 0505 	strd	r0, r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001aa2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001aa6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aaa:	f00c fcf5 	bl	800e498 <HAL_RCC_ClockConfig>
 8001aae:	b108      	cbz	r0, 8001ab4 <SystemClock_Config+0xfc>
 8001ab0:	b672      	cpsid	i
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <SystemClock_Config+0xfa>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ab8:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8001abc:	f00c fbfc 	bl	800e2b8 <HAL_RCC_MCOConfig>
}
 8001ac0:	b01f      	add	sp, #124	; 0x7c
 8001ac2:	bd30      	pop	{r4, r5, pc}
 8001ac4:	58000400 	.word	0x58000400
 8001ac8:	58024800 	.word	0x58024800
 8001acc:	58024400 	.word	0x58024400

08001ad0 <PeriphCommonClock_Config>:
{
 8001ad0:	b500      	push	{lr}
 8001ad2:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	22c0      	movs	r2, #192	; 0xc0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	a802      	add	r0, sp, #8
 8001ada:	f029 ff52 	bl	802b982 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LTDC;
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <PeriphCommonClock_Config+0x40>)
 8001ae0:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_LTDC;
 8001ae4:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL3.PLL3N = 181;
 8001ae8:	23b5      	movs	r3, #181	; 0xb5
 8001aea:	220a      	movs	r2, #10
 8001aec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001af0:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001af2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 4;
 8001af6:	2304      	movs	r3, #4
 8001af8:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afe:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f00c ff50 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	b108      	cbz	r0, 8001b0a <PeriphCommonClock_Config+0x3a>
 8001b06:	b672      	cpsid	i
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <PeriphCommonClock_Config+0x38>
}
 8001b0a:	b033      	add	sp, #204	; 0xcc
 8001b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b10:	20080000 	.word	0x20080000

08001b14 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b14:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <main+0x158>)
{
 8001b16:	b507      	push	{r0, r1, r2, lr}
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8001b1e:	d111      	bne.n	8001b44 <main+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b24:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b3a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b40:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b44:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <main+0x158>)
 8001b46:	6953      	ldr	r3, [r2, #20]
 8001b48:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8001b4c:	d123      	bne.n	8001b96 <main+0x82>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001b4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b56:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b5a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b5e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b62:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001b66:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b68:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b6c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b6e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001b72:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b74:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001b78:	d2f9      	bcs.n	8001b6e <main+0x5a>
    } while(sets-- != 0U);
 8001b7a:	3b20      	subs	r3, #32
 8001b7c:	f113 0f20 	cmn.w	r3, #32
 8001b80:	d1f2      	bne.n	8001b68 <main+0x54>
 8001b82:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001b86:	6953      	ldr	r3, [r2, #20]
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b92:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001b96:	f008 f907 	bl	8009da8 <HAL_Init>
  SystemClock_Config();
 8001b9a:	f7ff ff0d 	bl	80019b8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001b9e:	f7ff ff97 	bl	8001ad0 <PeriphCommonClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <main+0x15c>)
HAL_HSEM_FastTake(HSEM_ID_0);
 8001ba4:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8001ba6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001baa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001bae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001bbe:	f009 ffe5 	bl	800bb8c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	f009 ffef 	bl	800bba8 <HAL_HSEM_Release>
  MX_GPIO_Init();
 8001bca:	f7ff fa0d 	bl	8000fe8 <MX_GPIO_Init>
  MX_MDMA_Init();
 8001bce:	f000 f85d 	bl	8001c8c <MX_MDMA_Init>
  MX_I2C1_Init();
 8001bd2:	f7ff fb4f 	bl	8001274 <MX_I2C1_Init>
  MX_LTDC_Init();
 8001bd6:	f7ff fdc1 	bl	800175c <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8001bda:	f001 f84b 	bl	8002c74 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 8001bde:	f7ff fba3 	bl	8001328 <MX_I2C4_Init>
  MX_DAC1_Init();
 8001be2:	f7fe fe79 	bl	80008d8 <MX_DAC1_Init>
  MX_DMA2D_Init();
 8001be6:	f7fe fed9 	bl	800099c <MX_DMA2D_Init>
  MX_FDCAN1_Init();
 8001bea:	f7fe ff13 	bl	8000a14 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001bee:	f7fe ff41 	bl	8000a74 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8001bf2:	f000 fbc1 	bl	8002378 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bf6:	f000 ff07 	bl	8002a08 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001bfa:	f000 ff71 	bl	8002ae0 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001bfe:	f000 fddb 	bl	80027b8 <MX_TIM6_Init>
  MX_UART4_Init();
 8001c02:	f001 f801 	bl	8002c08 <MX_UART4_Init>
  MX_UART8_Init();
 8001c06:	f001 f833 	bl	8002c70 <MX_UART8_Init>
  MX_CRC_Init();
 8001c0a:	f7fe fe37 	bl	800087c <MX_CRC_Init>
  MX_I2C2_Init();
 8001c0e:	f7ff fb5d 	bl	80012cc <MX_I2C2_Init>
  MX_LPTIM2_Init();
 8001c12:	f7ff fd1f 	bl	8001654 <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001c16:	f000 fbdd 	bl	80023d4 <MX_SPI2_Init>
  MX_TIM15_Init();
 8001c1a:	f000 ff9d 	bl	8002b58 <MX_TIM15_Init>
  MX_FATFS_Init();
 8001c1e:	f001 f929 	bl	8002e74 <MX_FATFS_Init>
  MX_RNG_Init();
 8001c22:	f000 fac7 	bl	80021b4 <MX_RNG_Init>
  MX_FMC_Init();
 8001c26:	f7ff f8d1 	bl	8000dcc <MX_FMC_Init>
  MX_JPEG_Init();
 8001c2a:	f7ff fc81 	bl	8001530 <MX_JPEG_Init>
  MX_RTC_Init();
 8001c2e:	f000 fafd 	bl	800222c <MX_RTC_Init>
  MX_ADC1_Init();
 8001c32:	f7fe fd23 	bl	800067c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001c36:	f7fe fd6b 	bl	8000710 <MX_ADC3_Init>
  MX_TouchGFX_Init();
 8001c3a:	f001 fa91 	bl	8003160 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001c3e:	f001 fa8e 	bl	800315e <MX_TouchGFX_PreOSInit>
if (BSP_SDRAM_SingleTest() != 0)
 8001c42:	f7ff f89b 	bl	8000d7c <BSP_SDRAM_SingleTest>
  if (CSP_QUADSPI_Init() == HAL_OK) {
 8001c46:	f000 fa7b 	bl	8002140 <CSP_QUADSPI_Init>
 8001c4a:	b908      	cbnz	r0, 8001c50 <main+0x13c>
	  CSP_QSPI_EnableMemoryMappedMode();
 8001c4c:	f000 f950 	bl	8001ef0 <CSP_QSPI_EnableMemoryMappedMode>
  if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8001c50:	2100      	movs	r1, #0
 8001c52:	4808      	ldr	r0, [pc, #32]	; (8001c74 <main+0x160>)
 8001c54:	f00f fb0c 	bl	8011270 <HAL_TIM_PWM_Start>
 8001c58:	b108      	cbz	r0, 8001c5e <main+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5a:	b672      	cpsid	i
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <main+0x148>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c5e:	f010 ff79 	bl	8012b54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c62:	f7ff f997 	bl	8000f94 <MX_FREERTOS_Init>
  osKernelStart();
 8001c66:	f010 ff97 	bl	8012b98 <osKernelStart>
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <main+0x156>
 8001c6c:	e000ed00 	.word	0xe000ed00
 8001c70:	58024400 	.word	0x58024400
 8001c74:	24008238 	.word	0x24008238

08001c78 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8001c78:	6803      	ldr	r3, [r0, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d101      	bne.n	8001c84 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001c80:	f008 b8c0 	b.w	8009e04 <HAL_IncTick>
}
 8001c84:	4770      	bx	lr

08001c86 <Error_Handler>:
 8001c86:	b672      	cpsid	i
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <Error_Handler+0x2>
	...

08001c8c <MX_MDMA_Init>:
  */
void MX_MDMA_Init(void)
{

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_MDMA_Init+0x34>)
{
 8001c8e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001c90:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 8, 0);
 8001c94:	2108      	movs	r1, #8
 8001c96:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 8, 0);
 8001ca0:	2200      	movs	r2, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001ca2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MDMA_IRQn, 8, 0);
 8001cae:	f008 fce7 	bl	800a680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001cb2:	207a      	movs	r0, #122	; 0x7a

}
 8001cb4:	b003      	add	sp, #12
 8001cb6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001cba:	f008 bd13 	b.w	800a6e4 <HAL_NVIC_EnableIRQ>
 8001cbe:	bf00      	nop
 8001cc0:	58024400 	.word	0x58024400

08001cc4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001cc4:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001cc6:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.ClockPrescaler = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <MX_QUADSPI_Init+0x38>)
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
  hqspi.Init.FlashSize = 27;
 8001ccc:	2110      	movs	r1, #16
  hqspi.Init.FifoThreshold = 1;
 8001cce:	6083      	str	r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001cd0:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hqspi.Init.ClockPrescaler = 1;
 8001cd4:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.FlashSize = 27;
 8001cd8:	231b      	movs	r3, #27
 8001cda:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001ce4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ce8:	f00b fe4c 	bl	800d984 <HAL_QSPI_Init>
 8001cec:	b118      	cbz	r0, 8001cf6 <MX_QUADSPI_Init+0x32>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001cf2:	f7ff bfc8 	b.w	8001c86 <Error_Handler>
}
 8001cf6:	bd08      	pop	{r3, pc}
 8001cf8:	24007f8c 	.word	0x24007f8c
 8001cfc:	52005000 	.word	0x52005000

08001d00 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	2214      	movs	r2, #20
{
 8001d06:	b0bc      	sub	sp, #240	; 0xf0
 8001d08:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	eb0d 0002 	add.w	r0, sp, r2
 8001d10:	f029 fe37 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d14:	22c8      	movs	r2, #200	; 0xc8
 8001d16:	2100      	movs	r1, #0
 8001d18:	a80a      	add	r0, sp, #40	; 0x28
 8001d1a:	f029 fe32 	bl	802b982 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001d1e:	6822      	ldr	r2, [r4, #0]
 8001d20:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_QSPI_MspInit+0x108>)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d16c      	bne.n	8001e00 <HAL_QSPI_MspInit+0x100>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001d2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d32:	f00c fe37 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	b108      	cbz	r0, 8001d3c <HAL_QSPI_MspInit+0x3c>
    {
      Error_Handler();
 8001d38:	f7ff ffa5 	bl	8001c86 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_QSPI_MspInit+0x10c>)
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2500      	movs	r5, #0
 8001d42:	2403      	movs	r4, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d48:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	a905      	add	r1, sp, #20
 8001d4e:	4830      	ldr	r0, [pc, #192]	; (8001e10 <HAL_QSPI_MspInit+0x110>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d54:	2709      	movs	r7, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001d5a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001d5e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d76:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001d7a:	9202      	str	r2, [sp, #8]
 8001d7c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d8e:	f002 0220 	and.w	r2, r2, #32
 8001d92:	9203      	str	r2, [sp, #12]
 8001d94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d9a:	f042 0202 	orr.w	r2, r2, #2
 8001d9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001da6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	9304      	str	r3, [sp, #16]
 8001db0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001dbc:	f009 f842 	bl	800ae44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc2:	a905      	add	r1, sp, #20
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dc6:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd0:	f009 f838 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd8:	a905      	add	r1, sp, #20
 8001dda:	480e      	ldr	r0, [pc, #56]	; (8001e14 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ddc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001de8:	f009 f82c 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001dec:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001dee:	a905      	add	r1, sp, #20
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <HAL_QSPI_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001df2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f009 f822 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001e00:	b03c      	add	sp, #240	; 0xf0
 8001e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e06:	bf00      	nop
 8001e08:	52005000 	.word	0x52005000
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	58021800 	.word	0x58021800
 8001e14:	58021400 	.word	0x58021400
 8001e18:	58020400 	.word	0x58020400

08001e1c <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
 8001e1c:	6802      	ldr	r2, [r0, #0]
{
 8001e1e:	b508      	push	{r3, lr}
  if(qspiHandle->Instance==QUADSPI)
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_QSPI_MspDeInit+0x38>)
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d115      	bne.n	8001e52 <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001e26:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_QSPI_MspDeInit+0x3c>)
    PF7     ------> QUADSPI_BK1_IO2
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    */
    HAL_GPIO_DeInit(QSPI_BK1_NCS_GPIO_Port, QSPI_BK1_NCS_Pin);
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	480c      	ldr	r0, [pc, #48]	; (8001e5c <HAL_QSPI_MspDeInit+0x40>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001e2c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e34:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(QSPI_BK1_NCS_GPIO_Port, QSPI_BK1_NCS_Pin);
 8001e38:	f009 f8ee 	bl	800b018 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin|QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin);
 8001e3c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001e40:	4807      	ldr	r0, [pc, #28]	; (8001e60 <HAL_QSPI_MspDeInit+0x44>)
 8001e42:	f009 f8e9 	bl	800b018 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8001e46:	2104      	movs	r1, #4
 8001e48:	4806      	ldr	r0, [pc, #24]	; (8001e64 <HAL_QSPI_MspDeInit+0x48>)

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin);
 8001e4e:	f009 b8e3 	b.w	800b018 <HAL_GPIO_DeInit>
}
 8001e52:	bd08      	pop	{r3, pc}
 8001e54:	52005000 	.word	0x52005000
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58021800 	.word	0x58021800
 8001e60:	58021400 	.word	0x58021400
 8001e64:	58020400 	.word	0x58020400

08001e68 <QSPI_WriteEnable>:
uint8_t QSPI_WriteEnable( uint32_t Mode)
{
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    sCommand.InstructionMode   = (Mode == MT25QL512G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001e68:	2803      	cmp	r0, #3
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;


    if ( HAL_OK !=
         HAL_QSPI_Command( &hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8001e6e:	b510      	push	{r4, lr}
    sCommand.InstructionMode   = (Mode == MT25QL512G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001e70:	bf08      	it	eq
 8001e72:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8001e76:	b094      	sub	sp, #80	; 0x50
    sCommand.InstructionMode   = (Mode == MT25QL512G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001e78:	bf18      	it	ne
 8001e7a:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8001e7e:	4604      	mov	r4, r0
         HAL_QSPI_Command( &hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8001e80:	a906      	add	r1, sp, #24
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <QSPI_WriteEnable+0x84>)
    sCommand.InstructionMode   = (Mode == MT25QL512G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001e84:	930c      	str	r3, [sp, #48]	; 0x30
    sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001e86:	2306      	movs	r3, #6
 8001e88:	9306      	str	r3, [sp, #24]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001e8a:	2300      	movs	r3, #0
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e8c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    sCommand.DataMode          = QSPI_DATA_NONE;
 8001e90:	930f      	str	r3, [sp, #60]	; 0x3c
    sCommand.DummyCycles       = 0;
 8001e92:	930b      	str	r3, [sp, #44]	; 0x2c
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e94:	9313      	str	r3, [sp, #76]	; 0x4c
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e96:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
         HAL_QSPI_Command( &hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8001e9a:	f00b fdd2 	bl	800da42 <HAL_QSPI_Command>
    if ( HAL_OK !=
 8001e9e:	bb10      	cbnz	r0, 8001ee6 <QSPI_WriteEnable+0x7e>
    {
        return HAL_ERROR;
    }
    //HAL_Delay( 100 );

    sConfig.Match           = MT25QL512G_SR_WREN | (MT25QL512G_SR_WREN << 8);
 8001ea0:	f240 2302 	movw	r3, #514	; 0x202
    sConfig.Mask            = MT25QL512G_SR_WREN | (MT25QL512G_SR_WREN << 8);
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
    sConfig.StatusBytesSize = 2;
    sConfig.Interval = 0xf0;
 8001ea4:	2202      	movs	r2, #2
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;

    sCommand.Instruction = READ_STATUS_REG_CMD;
    sCommand.DataMode = (Mode == MT25QL512G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001ea6:	2c03      	cmp	r4, #3
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001ea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001eac:	9004      	str	r0, [sp, #16]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001eae:	480f      	ldr	r0, [pc, #60]	; (8001eec <QSPI_WriteEnable+0x84>)
    sConfig.Mask            = MT25QL512G_SR_WREN | (MT25QL512G_SR_WREN << 8);
 8001eb0:	e9cd 3300 	strd	r3, r3, [sp]
    sConfig.Interval = 0xf0;
 8001eb4:	f04f 03f0 	mov.w	r3, #240	; 0xf0
 8001eb8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001ebc:	f04f 0305 	mov.w	r3, #5
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ec0:	466a      	mov	r2, sp
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001ec2:	e9cd 1305 	strd	r1, r3, [sp, #20]
    sCommand.DataMode = (Mode == MT25QL512G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001ec6:	bf0c      	ite	eq
 8001ec8:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8001ecc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ed0:	a906      	add	r1, sp, #24
    sCommand.DataMode = (Mode == MT25QL512G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001ed2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ed4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ed8:	f00b feae 	bl	800dc38 <HAL_QSPI_AutoPolling>
        return HAL_ERROR;
 8001edc:	3800      	subs	r0, #0
 8001ede:	bf18      	it	ne
 8001ee0:	2001      	movne	r0, #1
    {
        return HAL_ERROR;
    }

    return HAL_OK;
}
 8001ee2:	b014      	add	sp, #80	; 0x50
 8001ee4:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	e7fb      	b.n	8001ee2 <QSPI_WriteEnable+0x7a>
 8001eea:	bf00      	nop
 8001eec:	24007f8c 	.word	0x24007f8c

08001ef0 <CSP_QSPI_EnableMemoryMappedMode>:
    return HAL_OK;
}

uint8_t
CSP_QSPI_EnableMemoryMappedMode( void )
{
 8001ef0:	b500      	push	{lr}
	  QSPI_CommandTypeDef      s_command;
	  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;


    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 8001ef6:	b091      	sub	sp, #68	; 0x44
    /* Configure the memory mapped mode */
    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
    s_mem_mapped_cfg.TimeOutPeriod     = 0;


    if ( HAL_OK != HAL_QSPI_MemoryMapped( &hqspi, &s_command, &s_mem_mapped_cfg ) )
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <CSP_QSPI_EnableMemoryMappedMode+0x48>)
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001efa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = FOUR_BYTE_QUAD_OUT_FAST_READ_CMD;
 8001efc:	236c      	movs	r3, #108	; 0x6c
    if ( HAL_OK != HAL_QSPI_MemoryMapped( &hqspi, &s_command, &s_mem_mapped_cfg ) )
 8001efe:	466a      	mov	r2, sp
 8001f00:	a902      	add	r1, sp, #8
    s_command.Instruction       = FOUR_BYTE_QUAD_OUT_FAST_READ_CMD;
 8001f02:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001f04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f08:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001f0a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001f0e:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.DummyCycles       = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8001f10:	230a      	movs	r3, #10
 8001f12:	9307      	str	r3, [sp, #28]
    s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001f14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f18:	9305      	str	r3, [sp, #20]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	930a      	str	r3, [sp, #40]	; 0x28
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001f1e:	930f      	str	r3, [sp, #60]	; 0x3c
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f20:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001f24:	e9cd 3300 	strd	r3, r3, [sp]
    if ( HAL_OK != HAL_QSPI_MemoryMapped( &hqspi, &s_command, &s_mem_mapped_cfg ) )
 8001f28:	f00b fed6 	bl	800dcd8 <HAL_QSPI_MemoryMapped>
    {
        return HAL_ERROR;
    }

    return HAL_OK;
}
 8001f2c:	3800      	subs	r0, #0
 8001f2e:	bf18      	it	ne
 8001f30:	2001      	movne	r0, #1
 8001f32:	b011      	add	sp, #68	; 0x44
 8001f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f38:	24007f8c 	.word	0x24007f8c

08001f3c <QSPI_AutoPollingMemReady_Quad>:



uint8_t
QSPI_AutoPollingMemReady_Quad( void )
{
 8001f3c:	b500      	push	{lr}
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 8001f42:	b095      	sub	sp, #84	; 0x54
    sCommand.Instruction = READ_STATUS_REG_CMD;
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001f44:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
    sCommand.DummyCycles = 2UL;
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
    sCommand.NbData = 1;
 8001f48:	2101      	movs	r1, #1
    sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001f4a:	930c      	str	r3, [sp, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001f4c:	2305      	movs	r3, #5
    sCommand.DataMode = QSPI_DATA_4_LINES;
 8001f4e:	920f      	str	r2, [sp, #60]	; 0x3c
    sCommand.DummyCycles = 2UL;
 8001f50:	2202      	movs	r2, #2
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8001f52:	9306      	str	r3, [sp, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001f54:	2300      	movs	r3, #0
    sCommand.NbData = 1;
 8001f56:	9110      	str	r1, [sp, #64]	; 0x40

    sConfig.Match = 0x00;
    sConfig.Mask = MT25QL512G_SR_WIP | (MT25QL512G_SR_WIP <<8);
 8001f58:	f240 1101 	movw	r1, #257	; 0x101
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001f5c:	9313      	str	r3, [sp, #76]	; 0x4c
    sConfig.Match = 0x00;
 8001f5e:	9300      	str	r3, [sp, #0]
    sCommand.DummyCycles = 2UL;
 8001f60:	920b      	str	r2, [sp, #44]	; 0x2c
    sConfig.Mask = MT25QL512G_SR_WIP | (MT25QL512G_SR_WIP <<8);
 8001f62:	9101      	str	r1, [sp, #4]
    sConfig.StatusBytesSize = 2;
    sConfig.Interval = 0x10;
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;

    if ( HAL_OK !=
         HAL_QSPI_AutoPolling( &hqspi, &sCommand, &sConfig,
 8001f64:	a906      	add	r1, sp, #24
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <QSPI_AutoPollingMemReady_Quad+0x58>)
    sConfig.StatusBytesSize = 2;
 8001f68:	e9cd 2303 	strd	r2, r3, [sp, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001f6c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001f70:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    sConfig.Interval = 0x10;
 8001f74:	2310      	movs	r3, #16
         HAL_QSPI_AutoPolling( &hqspi, &sCommand, &sConfig,
 8001f76:	466a      	mov	r2, sp
    sConfig.Interval = 0x10;
 8001f78:	9302      	str	r3, [sp, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f7e:	9305      	str	r3, [sp, #20]
         HAL_QSPI_AutoPolling( &hqspi, &sCommand, &sConfig,
 8001f80:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f84:	f00b fe58 	bl	800dc38 <HAL_QSPI_AutoPolling>
                               HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
    {
        return HAL_ERROR;
    }
    return HAL_OK;
}
 8001f88:	3800      	subs	r0, #0
 8001f8a:	bf18      	it	ne
 8001f8c:	2001      	movne	r0, #1
 8001f8e:	b015      	add	sp, #84	; 0x54
 8001f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f94:	24007f8c 	.word	0x24007f8c

08001f98 <QSPI_Enter4Bytes>:
{
 8001f98:	b500      	push	{lr}
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8001f9e:	b08f      	sub	sp, #60	; 0x3c
	         HAL_QSPI_Command( &hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <QSPI_Enter4Bytes+0x40>)
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fa6:	9306      	str	r3, [sp, #24]
    s_command.Instruction       = ENTER_FOUR_BYTE;
 8001fa8:	23b7      	movs	r3, #183	; 0xb7
	         HAL_QSPI_Command( &hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8001faa:	4669      	mov	r1, sp
    s_command.Instruction       = ENTER_FOUR_BYTE;
 8001fac:	9300      	str	r3, [sp, #0]
    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001fae:	2300      	movs	r3, #0
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001fb0:	e9cd 3307 	strd	r3, r3, [sp, #28]
    s_command.DataMode          = QSPI_DATA_NONE;
 8001fb4:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 8001fb6:	9305      	str	r3, [sp, #20]
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001fb8:	930d      	str	r3, [sp, #52]	; 0x34
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001fba:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
	         HAL_QSPI_Command( &hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8001fbe:	f00b fd40 	bl	800da42 <HAL_QSPI_Command>
	    if ( HAL_OK !=
 8001fc2:	b938      	cbnz	r0, 8001fd4 <QSPI_Enter4Bytes+0x3c>
	    if ( HAL_OK != QSPI_AutoPollingMemReady_Quad( ) )
 8001fc4:	f7ff ffba 	bl	8001f3c <QSPI_AutoPollingMemReady_Quad>
	        return HAL_ERROR;
 8001fc8:	3800      	subs	r0, #0
 8001fca:	bf18      	it	ne
 8001fcc:	2001      	movne	r0, #1
}
 8001fce:	b00f      	add	sp, #60	; 0x3c
 8001fd0:	f85d fb04 	ldr.w	pc, [sp], #4
	        return HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	e7fa      	b.n	8001fce <QSPI_Enter4Bytes+0x36>
 8001fd8:	24007f8c 	.word	0x24007f8c

08001fdc <QSPI_ResetChip>:
{
 8001fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 8001fe0:	4d2e      	ldr	r5, [pc, #184]	; (800209c <QSPI_ResetChip+0xc0>)
{
 8001fe2:	b08e      	sub	sp, #56	; 0x38
    s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001fe4:	2400      	movs	r4, #0
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001fe6:	f44f 7640 	mov.w	r6, #768	; 0x300
    s_command.Instruction       = RESET_ENABLE_CMD;
 8001fea:	f04f 0866 	mov.w	r8, #102	; 0x66
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 8001fee:	4669      	mov	r1, sp
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4628      	mov	r0, r5
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001ff6:	9606      	str	r6, [sp, #24]
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ff8:	f44f 7780 	mov.w	r7, #256	; 0x100
    s_command.Instruction       = RESET_ENABLE_CMD;
 8001ffc:	f8cd 8000 	str.w	r8, [sp]
    s_command.DataMode          = QSPI_DATA_NONE;
 8002000:	9409      	str	r4, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 8002002:	9405      	str	r4, [sp, #20]
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002004:	940d      	str	r4, [sp, #52]	; 0x34
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002006:	e9cd 4407 	strd	r4, r4, [sp, #28]
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800200a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 800200e:	f00b fd18 	bl	800da42 <HAL_QSPI_Command>
    HAL_Delay( 1 );
 8002012:	2001      	movs	r0, #1
 8002014:	f007 ff08 	bl	8009e28 <HAL_Delay>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002018:	9606      	str	r6, [sp, #24]
    s_command.Instruction       = RESET_EXECUTE_CMD ;
 800201a:	2699      	movs	r6, #153	; 0x99
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 800201c:	4669      	mov	r1, sp
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4628      	mov	r0, r5
    s_command.Instruction       = RESET_EXECUTE_CMD ;
 8002024:	9600      	str	r6, [sp, #0]
    s_command.DataMode          = QSPI_DATA_NONE;
 8002026:	9409      	str	r4, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 8002028:	9405      	str	r4, [sp, #20]
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800202a:	940d      	str	r4, [sp, #52]	; 0x34
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800202c:	e9cd 4407 	strd	r4, r4, [sp, #28]
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002030:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 8002034:	f00b fd05 	bl	800da42 <HAL_QSPI_Command>
    HAL_Delay( 10 );
 8002038:	200a      	movs	r0, #10
 800203a:	f007 fef5 	bl	8009e28 <HAL_Delay>
    if ( HAL_OK != QSPI_AutoPollingMemReady_Quad( ) )
 800203e:	f7ff ff7d 	bl	8001f3c <QSPI_AutoPollingMemReady_Quad>
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 8002042:	4669      	mov	r1, sp
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4628      	mov	r0, r5
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800204a:	9706      	str	r7, [sp, #24]
    s_command.Instruction       = RESET_ENABLE_CMD;
 800204c:	f8cd 8000 	str.w	r8, [sp]
    s_command.DataMode          = QSPI_DATA_NONE;
 8002050:	9409      	str	r4, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 8002052:	9405      	str	r4, [sp, #20]
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002054:	940d      	str	r4, [sp, #52]	; 0x34
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002056:	e9cd 4407 	strd	r4, r4, [sp, #28]
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800205a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 800205e:	f00b fcf0 	bl	800da42 <HAL_QSPI_Command>
    HAL_Delay( 1 );
 8002062:	2001      	movs	r0, #1
 8002064:	f007 fee0 	bl	8009e28 <HAL_Delay>
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4669      	mov	r1, sp
 800206e:	4628      	mov	r0, r5
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002070:	9706      	str	r7, [sp, #24]
    s_command.Instruction       = RESET_EXECUTE_CMD ;
 8002072:	9600      	str	r6, [sp, #0]
    s_command.DataMode          = QSPI_DATA_NONE;
 8002074:	9409      	str	r4, [sp, #36]	; 0x24
    s_command.DummyCycles       = 0;
 8002076:	9405      	str	r4, [sp, #20]
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002078:	940d      	str	r4, [sp, #52]	; 0x34
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800207a:	e9cd 4407 	strd	r4, r4, [sp, #28]
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800207e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
         HAL_QSPI_Command( &hqspi, &s_command, 5000 ) )
 8002082:	f00b fcde 	bl	800da42 <HAL_QSPI_Command>
    HAL_Delay( 10 );
 8002086:	200a      	movs	r0, #10
 8002088:	f007 fece 	bl	8009e28 <HAL_Delay>
    if ( HAL_OK != QSPI_AutoPollingMemReady_Quad( ) )
 800208c:	f7ff ff56 	bl	8001f3c <QSPI_AutoPollingMemReady_Quad>
}
 8002090:	1b00      	subs	r0, r0, r4
 8002092:	bf18      	it	ne
 8002094:	2001      	movne	r0, #1
 8002096:	b00e      	add	sp, #56	; 0x38
 8002098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800209c:	24007f8c 	.word	0x24007f8c

080020a0 <QSPI_DummyCyclesCfg>:
    return HAL_OK;
}


uint8_t QSPI_DummyCyclesCfg( void )
{
 80020a0:	b500      	push	{lr}

    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80020a2:	f44f 7240 	mov.w	r2, #768	; 0x300
{
 80020a6:	b091      	sub	sp, #68	; 0x44
  uint16_t reg=0;
 80020a8:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020aa:	4824      	ldr	r0, [pc, #144]	; (800213c <QSPI_DummyCyclesCfg+0x9c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80020ac:	9208      	str	r2, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80020ae:	2285      	movs	r2, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020b0:	a902      	add	r1, sp, #8
  uint16_t reg=0;
 80020b2:	f8ad 3006 	strh.w	r3, [sp, #6]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80020b6:	9202      	str	r2, [sp, #8]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80020b8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.DummyCycles       = 0;
 80020bc:	9307      	str	r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80020be:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.NbData            = 2;
 80020c0:	2202      	movs	r2, #2
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80020c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80020ca:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80020ce:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020d2:	f00b fcb6 	bl	800da42 <HAL_QSPI_Command>
 80020d6:	b118      	cbz	r0, 80020e0 <QSPI_DummyCyclesCfg+0x40>
  {
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return BSP status */
  return HAL_OK;
}
 80020da:	b011      	add	sp, #68	; 0x44
 80020dc:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	f10d 0106 	add.w	r1, sp, #6
 80020e8:	4814      	ldr	r0, [pc, #80]	; (800213c <QSPI_DummyCyclesCfg+0x9c>)
 80020ea:	f00b fd46 	bl	800db7a <HAL_QSPI_Receive>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d1f2      	bne.n	80020d8 <QSPI_DummyCyclesCfg+0x38>
  if (QSPI_WriteEnable( MT25QL512G_SPI_MODE) != HAL_OK)
 80020f2:	f7ff feb9 	bl	8001e68 <QSPI_WriteEnable>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d1ee      	bne.n	80020d8 <QSPI_DummyCyclesCfg+0x38>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80020fa:	2381      	movs	r3, #129	; 0x81
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	a902      	add	r1, sp, #8
 8002102:	480e      	ldr	r0, [pc, #56]	; (800213c <QSPI_DummyCyclesCfg+0x9c>)
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8002104:	9302      	str	r3, [sp, #8]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8002106:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800210a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800210e:	051b      	lsls	r3, r3, #20
 8002110:	0d1b      	lsrs	r3, r3, #20
 8002112:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8002116:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800211a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800211e:	f00b fc90 	bl	800da42 <HAL_QSPI_Command>
 8002122:	2800      	cmp	r0, #0
 8002124:	d1d8      	bne.n	80020d8 <QSPI_DummyCyclesCfg+0x38>
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	f10d 0106 	add.w	r1, sp, #6
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <QSPI_DummyCyclesCfg+0x9c>)
 8002130:	f00b fcca 	bl	800dac8 <HAL_QSPI_Transmit>
    return HAL_ERROR;
 8002134:	3800      	subs	r0, #0
 8002136:	bf18      	it	ne
 8002138:	2001      	movne	r0, #1
 800213a:	e7ce      	b.n	80020da <QSPI_DummyCyclesCfg+0x3a>
 800213c:	24007f8c 	.word	0x24007f8c

08002140 <CSP_QUADSPI_Init>:
{
 8002140:	b510      	push	{r4, lr}
	hqspi.Instance = QUADSPI;
 8002142:	4c1a      	ldr	r4, [pc, #104]	; (80021ac <CSP_QUADSPI_Init+0x6c>)
{
 8002144:	b08e      	sub	sp, #56	; 0x38
	hqspi.Instance = QUADSPI;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <CSP_QUADSPI_Init+0x70>)
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8002148:	4620      	mov	r0, r4
	hqspi.Instance = QUADSPI;
 800214a:	6023      	str	r3, [r4, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 800214c:	f00b fc68 	bl	800da20 <HAL_QSPI_DeInit>
 8002150:	b110      	cbz	r0, 8002158 <CSP_QUADSPI_Init+0x18>
        return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
}
 8002154:	b00e      	add	sp, #56	; 0x38
 8002156:	bd10      	pop	{r4, pc}
    MX_QUADSPI_Init();
 8002158:	f7ff fdb4 	bl	8001cc4 <MX_QUADSPI_Init>
    if (QSPI_ResetChip() != HAL_OK) {
 800215c:	f7ff ff3e 	bl	8001fdc <QSPI_ResetChip>
 8002160:	2800      	cmp	r0, #0
 8002162:	d1f6      	bne.n	8002152 <CSP_QUADSPI_Init+0x12>
    if ( QSPI_Enter4Bytes() != HAL_OK) {
 8002164:	f7ff ff18 	bl	8001f98 <QSPI_Enter4Bytes>
 8002168:	2800      	cmp	r0, #0
 800216a:	d1f2      	bne.n	8002152 <CSP_QUADSPI_Init+0x12>
    if ( QSPI_DummyCyclesCfg() != HAL_OK) {
 800216c:	f7ff ff98 	bl	80020a0 <QSPI_DummyCyclesCfg>
 8002170:	2800      	cmp	r0, #0
 8002172:	d1ee      	bne.n	8002152 <CSP_QUADSPI_Init+0x12>
    if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002174:	4620      	mov	r0, r4
 8002176:	f00b fc05 	bl	800d984 <HAL_QSPI_Init>
 800217a:	2800      	cmp	r0, #0
 800217c:	d1e9      	bne.n	8002152 <CSP_QUADSPI_Init+0x12>
	  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800217e:	f44f 7380 	mov.w	r3, #256	; 0x100
	  s_command.DataMode          = QSPI_DATA_NONE;
 8002182:	9009      	str	r0, [sp, #36]	; 0x24
	  s_command.DummyCycles       = 0;
 8002184:	9005      	str	r0, [sp, #20]
         HAL_QSPI_Command( &hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
	  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800218a:	9306      	str	r3, [sp, #24]
	  s_command.Instruction       = ENTER_QUAD_MODE;
 800218c:	2335      	movs	r3, #53	; 0x35
	  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800218e:	900d      	str	r0, [sp, #52]	; 0x34
         HAL_QSPI_Command( &hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 8002190:	4669      	mov	r1, sp
	  s_command.Instruction       = ENTER_QUAD_MODE;
 8002192:	9300      	str	r3, [sp, #0]
	  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002194:	e9cd 0007 	strd	r0, r0, [sp, #28]
	  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002198:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
         HAL_QSPI_Command( &hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE ) )
 800219c:	4620      	mov	r0, r4
 800219e:	f00b fc50 	bl	800da42 <HAL_QSPI_Command>
    	 return HAL_ERROR;
 80021a2:	3800      	subs	r0, #0
 80021a4:	bf18      	it	ne
 80021a6:	2001      	movne	r0, #1
 80021a8:	e7d4      	b.n	8002154 <CSP_QUADSPI_Init+0x14>
 80021aa:	bf00      	nop
 80021ac:	24007f8c 	.word	0x24007f8c
 80021b0:	52005000 	.word	0x52005000

080021b4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80021b4:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <MX_RNG_Init+0x20>)
 80021bc:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80021c0:	f00d fcae 	bl	800fb20 <HAL_RNG_Init>
 80021c4:	b118      	cbz	r0, 80021ce <MX_RNG_Init+0x1a>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80021c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80021ca:	f7ff bd5c 	b.w	8001c86 <Error_Handler>
}
 80021ce:	bd08      	pop	{r3, pc}
 80021d0:	24007fd8 	.word	0x24007fd8
 80021d4:	48021800 	.word	0x48021800

080021d8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	b0b4      	sub	sp, #208	; 0xd0
 80021dc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021de:	22c8      	movs	r2, #200	; 0xc8
 80021e0:	2100      	movs	r1, #0
 80021e2:	a802      	add	r0, sp, #8
 80021e4:	f029 fbcd 	bl	802b982 <memset>
  if(rngHandle->Instance==RNG)
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_RNG_MspInit+0x4c>)
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d117      	bne.n	8002220 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80021f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f4:	2300      	movs	r3, #0
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f6:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80021f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fc:	f00c fbd2 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002200:	b108      	cbz	r0, 8002206 <HAL_RNG_MspInit+0x2e>
    {
      Error_Handler();
 8002202:	f7ff fd40 	bl	8001c86 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RNG_MspInit+0x50>)
 8002208:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800220c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002210:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002214:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002220:	b034      	add	sp, #208	; 0xd0
 8002222:	bd10      	pop	{r4, pc}
 8002224:	48021800 	.word	0x48021800
 8002228:	58024400 	.word	0x58024400

0800222c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800222c:	b508      	push	{r3, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800222e:	480a      	ldr	r0, [pc, #40]	; (8002258 <MX_RTC_Init+0x2c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002230:	2300      	movs	r3, #0
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <MX_RTC_Init+0x30>)
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8002234:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002236:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002238:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800223a:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800223e:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002240:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hrtc.Init.SynchPrediv = 255;
 8002244:	e9c0 1202 	strd	r1, r2, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002248:	f00d fcfe 	bl	800fc48 <HAL_RTC_Init>
 800224c:	b118      	cbz	r0, 8002256 <MX_RTC_Init+0x2a>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800224e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002252:	f7ff bd18 	b.w	8001c86 <Error_Handler>
}
 8002256:	bd08      	pop	{r3, pc}
 8002258:	24007fec 	.word	0x24007fec
 800225c:	58004000 	.word	0x58004000

08002260 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002260:	b510      	push	{r4, lr}
 8002262:	b0b2      	sub	sp, #200	; 0xc8
 8002264:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002266:	22c8      	movs	r2, #200	; 0xc8
 8002268:	2100      	movs	r1, #0
 800226a:	4668      	mov	r0, sp
 800226c:	f029 fb89 	bl	802b982 <memset>
  if(rtcHandle->Instance==RTC)
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RTC_MspInit+0x44>)
 8002274:	429a      	cmp	r2, r3
 8002276:	d112      	bne.n	800229e <HAL_RTC_MspInit+0x3e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002278:	2300      	movs	r3, #0
 800227a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002280:	e9cd 2300 	strd	r2, r3, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	932e      	str	r3, [sp, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228a:	f00c fb8b 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 800228e:	b108      	cbz	r0, 8002294 <HAL_RTC_MspInit+0x34>
    {
      Error_Handler();
 8002290:	f7ff fcf9 	bl	8001c86 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_RTC_MspInit+0x48>)
 8002296:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800229e:	b032      	add	sp, #200	; 0xc8
 80022a0:	bd10      	pop	{r4, pc}
 80022a2:	bf00      	nop
 80022a4:	58004000 	.word	0x58004000
 80022a8:	58024400 	.word	0x58024400

080022ac <HAL_SD_MspInit>:
  /* USER CODE END SDMMC1_Init 2 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	b0bb      	sub	sp, #236	; 0xec
 80022b0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	2214      	movs	r2, #20
 80022b4:	2100      	movs	r1, #0
 80022b6:	a803      	add	r0, sp, #12
 80022b8:	f029 fb63 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022bc:	22c8      	movs	r2, #200	; 0xc8
 80022be:	2100      	movs	r1, #0
 80022c0:	a808      	add	r0, sp, #32
 80022c2:	f029 fb5e 	bl	802b982 <memset>
  if(sdHandle->Instance==SDMMC1)
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_SD_MspInit+0xbc>)
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d14a      	bne.n	8002364 <HAL_SD_MspInit+0xb8>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80022ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022d2:	2300      	movs	r3, #0
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80022d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022da:	f00c fb63 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	b108      	cbz	r0, 80022e4 <HAL_SD_MspInit+0x38>
    {
      Error_Handler();
 80022e0:	f7ff fcd1 	bl	8001c86 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_SD_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80022e6:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2600      	movs	r6, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	eb0d 0104 	add.w	r1, sp, r4
 80022f6:	481e      	ldr	r0, [pc, #120]	; (8002370 <HAL_SD_MspInit+0xc4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002300:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002304:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002308:	9200      	str	r2, [sp, #0]
 800230a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002310:	f042 0204 	orr.w	r2, r2, #4
 8002314:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002318:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800231c:	f002 0204 	and.w	r2, r2, #4
 8002320:	9201      	str	r2, [sp, #4]
 8002322:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002324:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002328:	f042 0208 	orr.w	r2, r2, #8
 800232c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002334:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	e9cd 3703 	strd	r3, r7, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234a:	f008 fd7b 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800234e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002350:	eb0d 0104 	add.w	r1, sp, r4
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002356:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002360:	f008 fd70 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002364:	b03b      	add	sp, #236	; 0xec
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002368:	52007000 	.word	0x52007000
 800236c:	58024400 	.word	0x58024400
 8002370:	58020800 	.word	0x58020800
 8002374:	58020c00 	.word	0x58020c00

08002378 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002378:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800237a:	4814      	ldr	r0, [pc, #80]	; (80023cc <MX_SPI1_Init+0x54>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <MX_SPI1_Init+0x58>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002382:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002386:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800238a:	2300      	movs	r3, #0
 800238c:	2207      	movs	r2, #7
 800238e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002396:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800239a:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800239e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 80023a2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023a6:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023aa:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023ae:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023b2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023b6:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ba:	f00e fa07 	bl	80107cc <HAL_SPI_Init>
 80023be:	b118      	cbz	r0, 80023c8 <MX_SPI1_Init+0x50>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80023c4:	f7ff bc5f 	b.w	8001c86 <Error_Handler>
}
 80023c8:	bd08      	pop	{r3, pc}
 80023ca:	bf00      	nop
 80023cc:	2400808c 	.word	0x2400808c
 80023d0:	40013000 	.word	0x40013000

080023d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023d4:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023d6:	4814      	ldr	r0, [pc, #80]	; (8002428 <MX_SPI2_Init+0x54>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023dc:	4a13      	ldr	r2, [pc, #76]	; (800242c <MX_SPI2_Init+0x58>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023de:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023e2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e6:	2300      	movs	r3, #0
 80023e8:	2207      	movs	r2, #7
 80023ea:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023f6:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
 80023fe:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002402:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002406:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800240a:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800240e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002412:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002416:	f00e f9d9 	bl	80107cc <HAL_SPI_Init>
 800241a:	b118      	cbz	r0, 8002424 <MX_SPI2_Init+0x50>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800241c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002420:	f7ff bc31 	b.w	8001c86 <Error_Handler>
}
 8002424:	bd08      	pop	{r3, pc}
 8002426:	bf00      	nop
 8002428:	24008114 	.word	0x24008114
 800242c:	40003800 	.word	0x40003800

08002430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	b0bf      	sub	sp, #252	; 0xfc
 8002434:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	2214      	movs	r2, #20
 8002438:	2100      	movs	r1, #0
 800243a:	a807      	add	r0, sp, #28
 800243c:	f029 faa1 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002440:	22c8      	movs	r2, #200	; 0xc8
 8002442:	2100      	movs	r1, #0
 8002444:	a80c      	add	r0, sp, #48	; 0x30
 8002446:	f029 fa9c 	bl	802b982 <memset>
  if(spiHandle->Instance==SPI1)
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_SPI_MspInit+0x17c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d160      	bne.n	8002514 <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002456:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002458:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800245a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245e:	f00c faa1 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002462:	b108      	cbz	r0, 8002468 <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8002464:	f7ff fc0f 	bl	8001c86 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_SPI_MspInit+0x180>)
    PG9     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2600      	movs	r6, #0
 800246e:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002470:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002474:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002476:	a907      	add	r1, sp, #28
 8002478:	484e      	ldr	r0, [pc, #312]	; (80025b4 <HAL_SPI_MspInit+0x184>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800247a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800247e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002482:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002486:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800248a:	9200      	str	r2, [sp, #0]
 800248c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800248e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002496:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800249a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800249e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80024a2:	9201      	str	r2, [sp, #4]
 80024a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80024aa:	f042 0202 	orr.w	r2, r2, #2
 80024ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80024b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80024b6:	f002 0202 	and.w	r2, r2, #2
 80024ba:	9202      	str	r2, [sp, #8]
 80024bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80024c2:	f042 0208 	orr.w	r2, r2, #8
 80024c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ce:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	9303      	str	r3, [sp, #12]
 80024d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024e4:	f008 fcae 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024e8:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	a907      	add	r1, sp, #28
 80024ec:	4832      	ldr	r0, [pc, #200]	; (80025b8 <HAL_SPI_MspInit+0x188>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ee:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f4:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f008 fca4 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024fc:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fe:	a907      	add	r1, sp, #28
 8002500:	482e      	ldr	r0, [pc, #184]	; (80025bc <HAL_SPI_MspInit+0x18c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002502:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250c:	f008 fc9a 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002510:	b03f      	add	sp, #252	; 0xfc
 8002512:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(spiHandle->Instance==SPI2)
 8002514:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <HAL_SPI_MspInit+0x190>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d1fa      	bne.n	8002510 <HAL_SPI_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800251a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800251e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002520:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002522:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002526:	f00c fa3d 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 800252a:	b108      	cbz	r0, 8002530 <HAL_SPI_MspInit+0x100>
      Error_Handler();
 800252c:	f7ff fbab 	bl	8001c86 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_SPI_MspInit+0x180>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002534:	2600      	movs	r6, #0
 8002536:	2503      	movs	r5, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002538:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800253c:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	a907      	add	r1, sp, #28
 8002540:	4820      	ldr	r0, [pc, #128]	; (80025c4 <HAL_SPI_MspInit+0x194>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002546:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800254a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800254e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002552:	9204      	str	r2, [sp, #16]
 8002554:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002562:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002566:	f002 0201 	and.w	r2, r2, #1
 800256a:	9205      	str	r2, [sp, #20]
 800256c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002572:	f042 0204 	orr.w	r2, r2, #4
 8002576:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800257e:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	9306      	str	r3, [sp, #24]
 8002586:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f008 fc56 	bl	800ae44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002598:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259a:	a907      	add	r1, sp, #28
 800259c:	480a      	ldr	r0, [pc, #40]	; (80025c8 <HAL_SPI_MspInit+0x198>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800259e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	e7b0      	b.n	800250c <HAL_SPI_MspInit+0xdc>
 80025aa:	bf00      	nop
 80025ac:	40013000 	.word	0x40013000
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58021800 	.word	0x58021800
 80025b8:	58020400 	.word	0x58020400
 80025bc:	58020c00 	.word	0x58020c00
 80025c0:	40003800 	.word	0x40003800
 80025c4:	58020000 	.word	0x58020000
 80025c8:	58020800 	.word	0x58020800

080025cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80025ce:	2400      	movs	r4, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025d2:	210f      	movs	r1, #15
 80025d4:	f06f 0001 	mvn.w	r0, #1
  PWR_PVDTypeDef sConfigPVD = {0};
 80025d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80025e0:	f042 0202 	orr.w	r2, r2, #2
 80025e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025e8:	4622      	mov	r2, r4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025f6:	f008 f843 	bl	800a680 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80025fa:	a802      	add	r0, sp, #8
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80025fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002600:	f00b f86e 	bl	800d6e0 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002604:	f00b f890 	bl	800d728 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002608:	b004      	add	sp, #16
 800260a:	bd10      	pop	{r4, pc}
 800260c:	58024400 	.word	0x58024400

08002610 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002610:	280f      	cmp	r0, #15
{
 8002612:	b510      	push	{r4, lr}
 8002614:	4604      	mov	r4, r0
 8002616:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002618:	d902      	bls.n	8002620 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800261c:	b00a      	add	sp, #40	; 0x28
 800261e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8002620:	4601      	mov	r1, r0
 8002622:	2200      	movs	r2, #0
 8002624:	201c      	movs	r0, #28
 8002626:	f008 f82b 	bl	800a680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800262a:	201c      	movs	r0, #28
 800262c:	f008 f85a 	bl	800a6e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_InitTick+0x88>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002632:	4669      	mov	r1, sp
 8002634:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8002636:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_InitTick+0x8c>)
 800263a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002652:	f00c f88d 	bl	800e770 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002656:	9b07      	ldr	r3, [sp, #28]
 8002658:	b9cb      	cbnz	r3, 800268e <HAL_InitTick+0x7e>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800265a:	f00c f865 	bl	800e728 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800265e:	4c10      	ldr	r4, [pc, #64]	; (80026a0 <HAL_InitTick+0x90>)
 8002660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002664:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002666:	f240 33e7 	movw	r3, #999	; 0x3e7
 800266a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_InitTick+0x94>)
 800266e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002672:	3801      	subs	r0, #1
  htim2.Init.ClockDivision = 0;
 8002674:	2300      	movs	r3, #0
  htim2.Init.Prescaler = uwPrescalerValue;
 8002676:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002678:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 800267a:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800267e:	f00e fbcf 	bl	8010e20 <HAL_TIM_Base_Init>
 8002682:	2800      	cmp	r0, #0
 8002684:	d1c9      	bne.n	800261a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim2);
 8002686:	4620      	mov	r0, r4
 8002688:	f00e fa70 	bl	8010b6c <HAL_TIM_Base_Start_IT>
 800268c:	e7c6      	b.n	800261c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800268e:	f00c f84b 	bl	800e728 <HAL_RCC_GetPCLK1Freq>
 8002692:	0040      	lsls	r0, r0, #1
 8002694:	e7e3      	b.n	800265e <HAL_InitTick+0x4e>
 8002696:	bf00      	nop
 8002698:	2400003c 	.word	0x2400003c
 800269c:	58024400 	.word	0x58024400
 80026a0:	2400819c 	.word	0x2400819c
 80026a4:	000f4240 	.word	0x000f4240

080026a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <NMI_Handler>

080026aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <HardFault_Handler>

080026ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler>

080026ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <BusFault_Handler>

080026b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <UsageFault_Handler>

080026b2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	4770      	bx	lr

080026b4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80026b4:	2008      	movs	r0, #8
 80026b6:	f008 bd5a 	b.w	800b16e <HAL_GPIO_EXTI_IRQHandler>
	...

080026bc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <TIM2_IRQHandler+0x8>)
 80026be:	f00e ba98 	b.w	8010bf2 <HAL_TIM_IRQHandler>
 80026c2:	bf00      	nop
 80026c4:	2400819c 	.word	0x2400819c

080026c8 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <OTG_HS_IRQHandler+0x8>)
 80026ca:	f008 be55 	b.w	800b378 <HAL_HCD_IRQHandler>
 80026ce:	bf00      	nop
 80026d0:	24009c90 	.word	0x24009c90

080026d4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80026d4:	4801      	ldr	r0, [pc, #4]	; (80026dc <LTDC_IRQHandler+0x8>)
 80026d6:	f00a bd7d 	b.w	800d1d4 <HAL_LTDC_IRQHandler>
 80026da:	bf00      	nop
 80026dc:	24007ee4 	.word	0x24007ee4

080026e0 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <JPEG_IRQHandler+0x8>)
 80026e2:	f00a bbc7 	b.w	800ce74 <HAL_JPEG_IRQHandler>
 80026e6:	bf00      	nop
 80026e8:	24007d7c 	.word	0x24007d7c

080026ec <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80026ec:	4804      	ldr	r0, [pc, #16]	; (8002700 <MDMA_IRQHandler+0x14>)
{
 80026ee:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80026f0:	f00a ff3e 	bl	800d570 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80026f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80026fa:	f00a bf39 	b.w	800d570 <HAL_MDMA_IRQHandler>
 80026fe:	bf00      	nop
 8002700:	24007e40 	.word	0x24007e40
 8002704:	24007dd4 	.word	0x24007dd4

08002708 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002708:	2001      	movs	r0, #1
 800270a:	4770      	bx	lr

0800270c <_kill>:

int _kill(int pid, int sig)
{
 800270c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800270e:	f029 fa43 	bl	802bb98 <__errno>
 8002712:	2316      	movs	r3, #22
 8002714:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002716:	f04f 30ff 	mov.w	r0, #4294967295
 800271a:	bd08      	pop	{r3, pc}

0800271c <_exit>:

void _exit (int status)
{
 800271c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800271e:	f029 fa3b 	bl	802bb98 <__errno>
 8002722:	2316      	movs	r3, #22
 8002724:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002726:	e7fe      	b.n	8002726 <_exit+0xa>

08002728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	460d      	mov	r5, r1
 800272c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	460e      	mov	r6, r1
 8002730:	1b73      	subs	r3, r6, r5
 8002732:	429c      	cmp	r4, r3
 8002734:	dc01      	bgt.n	800273a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002736:	4620      	mov	r0, r4
 8002738:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800273a:	f3af 8000 	nop.w
 800273e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	e7f5      	b.n	8002730 <_read+0x8>

08002744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	460d      	mov	r5, r1
 8002748:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	460e      	mov	r6, r1
 800274c:	1b73      	subs	r3, r6, r5
 800274e:	429c      	cmp	r4, r3
 8002750:	dc01      	bgt.n	8002756 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002752:	4620      	mov	r0, r4
 8002754:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002756:	f816 0b01 	ldrb.w	r0, [r6], #1
 800275a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275e:	e7f5      	b.n	800274c <_write+0x8>

08002760 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	4770      	bx	lr

08002766 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 800276a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800276c:	604b      	str	r3, [r1, #4]
}
 800276e:	4770      	bx	lr

08002770 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002770:	2001      	movs	r0, #1
 8002772:	4770      	bx	lr

08002774 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002774:	2000      	movs	r0, #0
 8002776:	4770      	bx	lr

08002778 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <_sbrk+0x30>)
{
 800277a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800277c:	6811      	ldr	r1, [r2, #0]
{
 800277e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002780:	b909      	cbnz	r1, 8002786 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <_sbrk+0x34>)
 8002784:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	6810      	ldr	r0, [r2, #0]
 8002788:	4909      	ldr	r1, [pc, #36]	; (80027b0 <_sbrk+0x38>)
 800278a:	4c0a      	ldr	r4, [pc, #40]	; (80027b4 <_sbrk+0x3c>)
 800278c:	4403      	add	r3, r0
 800278e:	1b09      	subs	r1, r1, r4
 8002790:	428b      	cmp	r3, r1
 8002792:	d906      	bls.n	80027a2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002794:	f029 fa00 	bl	802bb98 <__errno>
 8002798:	230c      	movs	r3, #12
 800279a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800279c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80027a0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80027a2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80027a4:	e7fc      	b.n	80027a0 <_sbrk+0x28>
 80027a6:	bf00      	nop
 80027a8:	240081e8 	.word	0x240081e8
 80027ac:	2402baa0 	.word	0x2402baa0
 80027b0:	24080000 	.word	0x24080000
 80027b4:	0000c800 	.word	0x0000c800

080027b8 <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	2400      	movs	r4, #0

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_TIM6_Init+0x3c>)
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_TIM6_Init+0x40>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c0:	9403      	str	r4, [sp, #12]
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 65535;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	6184      	str	r4, [r0, #24]
  htim6.Init.Prescaler = 0;
 80027c6:	e9c0 3400 	strd	r3, r4, [r0]
  htim6.Init.Period = 65535;
 80027ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
  htim6.Init.Period = 65535;
 80027d2:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027d4:	f00e fb24 	bl	8010e20 <HAL_TIM_Base_Init>
 80027d8:	b108      	cbz	r0, 80027de <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 80027da:	f7ff fa54 	bl	8001c86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027de:	a901      	add	r1, sp, #4
 80027e0:	4804      	ldr	r0, [pc, #16]	; (80027f4 <MX_TIM6_Init+0x3c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027e6:	f00e fd45 	bl	8011274 <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	b108      	cbz	r0, 80027f0 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80027ec:	f7ff fa4b 	bl	8001c86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027f0:	b004      	add	sp, #16
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	240082d0 	.word	0x240082d0
 80027f8:	40001000 	.word	0x40001000

080027fc <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80027fc:	6803      	ldr	r3, [r0, #0]
{
 80027fe:	b084      	sub	sp, #16
  if(tim_pwmHandle->Instance==TIM1)
 8002800:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_TIM_PWM_MspInit+0x6c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_PWM_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_TIM_PWM_MspInit+0x70>)
 8002808:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002820:	b004      	add	sp, #16
 8002822:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM5)
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_TIM_PWM_MspInit+0x74>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10d      	bne.n	8002846 <HAL_TIM_PWM_MspInit+0x4a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_TIM_PWM_MspInit+0x70>)
 800282c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002830:	f042 0208 	orr.w	r2, r2, #8
 8002834:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	9b02      	ldr	r3, [sp, #8]
 8002844:	e7ec      	b.n	8002820 <HAL_TIM_PWM_MspInit+0x24>
  else if(tim_pwmHandle->Instance==TIM15)
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_TIM_PWM_MspInit+0x78>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d1e9      	bne.n	8002820 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_TIM_PWM_MspInit+0x70>)
 800284e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002852:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002856:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800285a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	9303      	str	r3, [sp, #12]
 8002864:	9b03      	ldr	r3, [sp, #12]
}
 8002866:	e7db      	b.n	8002820 <HAL_TIM_PWM_MspInit+0x24>
 8002868:	40010000 	.word	0x40010000
 800286c:	58024400 	.word	0x58024400
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000

08002878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002878:	b510      	push	{r4, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	2214      	movs	r2, #20
 8002880:	2100      	movs	r1, #0
 8002882:	a803      	add	r0, sp, #12
 8002884:	f029 f87d 	bl	802b982 <memset>
  if(tim_baseHandle->Instance==TIM3)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_TIM_Base_MspInit+0x84>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d123      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_TIM_Base_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002892:	a903      	add	r1, sp, #12
 8002894:	481b      	ldr	r0, [pc, #108]	; (8002904 <HAL_TIM_Base_MspInit+0x8c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002896:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800289a:	f042 0202 	orr.w	r2, r2, #2
 800289e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80028a2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80028a6:	f002 0202 	and.w	r2, r2, #2
 80028aa:	9200      	str	r2, [sp, #0]
 80028ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028b2:	f042 0204 	orr.w	r2, r2, #4
 80028b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d0:	f008 fab8 	bl	800ae44 <HAL_GPIO_Init>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80028d4:	b008      	add	sp, #32
 80028d6:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM6)
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_TIM_Base_MspInit+0x90>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d1fa      	bne.n	80028d4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_TIM_Base_MspInit+0x88>)
 80028e0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80028e4:	f042 0210 	orr.w	r2, r2, #16
 80028e8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80028ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	9b02      	ldr	r3, [sp, #8]
}
 80028f8:	e7ec      	b.n	80028d4 <HAL_TIM_Base_MspInit+0x5c>
 80028fa:	bf00      	nop
 80028fc:	40000400 	.word	0x40000400
 8002900:	58024400 	.word	0x58024400
 8002904:	58020800 	.word	0x58020800
 8002908:	40001000 	.word	0x40001000

0800290c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	2214      	movs	r2, #20
 800290e:	2100      	movs	r1, #0
{
 8002910:	b530      	push	{r4, r5, lr}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	eb0d 0002 	add.w	r0, sp, r2
 800291a:	f029 f832 	bl	802b982 <memset>
  if(timHandle->Instance==TIM1)
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	4a31      	ldr	r2, [pc, #196]	; (80029e8 <HAL_TIM_MspPostInit+0xdc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d12f      	bne.n	8002986 <HAL_TIM_MspPostInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <HAL_TIM_MspPostInit+0xe0>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
    /**TIM1 GPIO Configuration
    PK1     ------> TIM1_CH1
    PJ10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002928:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800292a:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800292c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800292e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002932:	482f      	ldr	r0, [pc, #188]	; (80029f0 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002938:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800293c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002940:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002944:	9201      	str	r2, [sp, #4]
 8002946:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002948:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800294c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002950:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002958:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800295a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002966:	f008 fa6d 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USR_LED_1_Pin;
 800296a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(USR_LED_1_GPIO_Port, &GPIO_InitStruct);
 800296e:	a905      	add	r1, sp, #20
 8002970:	4820      	ldr	r0, [pc, #128]	; (80029f4 <HAL_TIM_MspPostInit+0xe8>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002972:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800297e:	f008 fa61 	bl	800ae44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002982:	b00b      	add	sp, #44	; 0x2c
 8002984:	bd30      	pop	{r4, r5, pc}
  else if(timHandle->Instance==TIM5)
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_TIM_MspPostInit+0xec>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d114      	bne.n	80029b6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_TIM_MspPostInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2108      	movs	r1, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	481a      	ldr	r0, [pc, #104]	; (80029fc <HAL_TIM_MspPostInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800299e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	9303      	str	r3, [sp, #12]
 80029a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029b0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	a905      	add	r1, sp, #20
 80029b4:	e7e3      	b.n	800297e <HAL_TIM_MspPostInit+0x72>
  else if(timHandle->Instance==TIM15)
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <HAL_TIM_MspPostInit+0xf4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d1e2      	bne.n	8002982 <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_TIM_MspPostInit+0xe0>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029be:	a905      	add	r1, sp, #20
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029c6:	f042 0210 	orr.w	r2, r2, #16
 80029ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	9304      	str	r3, [sp, #16]
 80029da:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80029e2:	2304      	movs	r3, #4
 80029e4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e6:	e7ca      	b.n	800297e <HAL_TIM_MspPostInit+0x72>
 80029e8:	40010000 	.word	0x40010000
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58022800 	.word	0x58022800
 80029f4:	58022400 	.word	0x58022400
 80029f8:	40000c00 	.word	0x40000c00
 80029fc:	58020000 	.word	0x58020000
 8002a00:	40014000 	.word	0x40014000
 8002a04:	58021000 	.word	0x58021000

08002a08 <MX_TIM1_Init>:
{
 8002a08:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0a:	2400      	movs	r4, #0
{
 8002a0c:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0e:	221c      	movs	r2, #28
 8002a10:	4621      	mov	r1, r4
 8002a12:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a14:	9403      	str	r4, [sp, #12]
 8002a16:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1a:	f028 ffb2 	bl	802b982 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a1e:	222c      	movs	r2, #44	; 0x2c
 8002a20:	4621      	mov	r1, r4
 8002a22:	eb0d 0002 	add.w	r0, sp, r2
 8002a26:	f028 ffac 	bl	802b982 <memset>
  htim1.Instance = TIM1;
 8002a2a:	482b      	ldr	r0, [pc, #172]	; (8002ad8 <MX_TIM1_Init+0xd0>)
 8002a2c:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <MX_TIM1_Init+0xd4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 0;
 8002a30:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 65535;
 8002a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a40:	f00e fa4e 	bl	8010ee0 <HAL_TIM_PWM_Init>
 8002a44:	b108      	cbz	r0, 8002a4a <MX_TIM1_Init+0x42>
    Error_Handler();
 8002a46:	f7ff f91e 	bl	8001c86 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002a4a:	4823      	ldr	r0, [pc, #140]	; (8002ad8 <MX_TIM1_Init+0xd0>)
 8002a4c:	f00e fa18 	bl	8010e80 <HAL_TIM_OC_Init>
 8002a50:	b108      	cbz	r0, 8002a56 <MX_TIM1_Init+0x4e>
    Error_Handler();
 8002a52:	f7ff f918 	bl	8001c86 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a56:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a58:	a901      	add	r1, sp, #4
 8002a5a:	481f      	ldr	r0, [pc, #124]	; (8002ad8 <MX_TIM1_Init+0xd0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5c:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a5e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a62:	f00e fc07 	bl	8011274 <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	b108      	cbz	r0, 8002a6c <MX_TIM1_Init+0x64>
    Error_Handler();
 8002a68:	f7ff f90d 	bl	8001c86 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a6c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	a904      	add	r1, sp, #16
 8002a72:	4819      	ldr	r0, [pc, #100]	; (8002ad8 <MX_TIM1_Init+0xd0>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a74:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8002a76:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a7a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a7e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a82:	f00e fad5 	bl	8011030 <HAL_TIM_PWM_ConfigChannel>
 8002a86:	b108      	cbz	r0, 8002a8c <MX_TIM1_Init+0x84>
    Error_Handler();
 8002a88:	f7ff f8fd 	bl	8001c86 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a8c:	2400      	movs	r4, #0
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a8e:	2204      	movs	r2, #4
 8002a90:	a904      	add	r1, sp, #16
 8002a92:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <MX_TIM1_Init+0xd0>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a94:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a96:	f00e fa99 	bl	8010fcc <HAL_TIM_OC_ConfigChannel>
 8002a9a:	b108      	cbz	r0, 8002aa0 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002a9c:	f7ff f8f3 	bl	8001c86 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002aa4:	a90b      	add	r1, sp, #44	; 0x2c
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_TIM1_Init+0xd0>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002aa8:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002aaa:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002aac:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002aae:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002aba:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002abe:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ac2:	f00e fc23 	bl	801130c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ac6:	b108      	cbz	r0, 8002acc <MX_TIM1_Init+0xc4>
    Error_Handler();
 8002ac8:	f7ff f8dd 	bl	8001c86 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <MX_TIM1_Init+0xd0>)
 8002ace:	f7ff ff1d 	bl	800290c <HAL_TIM_MspPostInit>
}
 8002ad2:	b016      	add	sp, #88	; 0x58
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	bf00      	nop
 8002ad8:	240081ec 	.word	0x240081ec
 8002adc:	40010000 	.word	0x40010000

08002ae0 <MX_TIM5_Init>:
{
 8002ae0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae2:	2400      	movs	r4, #0
{
 8002ae4:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ae6:	221c      	movs	r2, #28
 8002ae8:	4621      	mov	r1, r4
 8002aea:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	9402      	str	r4, [sp, #8]
 8002aee:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002af2:	f028 ff46 	bl	802b982 <memset>
  htim5.Instance = TIM5;
 8002af6:	4816      	ldr	r0, [pc, #88]	; (8002b50 <MX_TIM5_Init+0x70>)
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <MX_TIM5_Init+0x74>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	6084      	str	r4, [r0, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afc:	6184      	str	r4, [r0, #24]
  htim5.Init.Prescaler = 0;
 8002afe:	e9c0 3400 	strd	r3, r4, [r0]
  htim5.Init.Period = 4294967295;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b06:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b0a:	f00e f9e9 	bl	8010ee0 <HAL_TIM_PWM_Init>
 8002b0e:	b108      	cbz	r0, 8002b14 <MX_TIM5_Init+0x34>
    Error_Handler();
 8002b10:	f7ff f8b9 	bl	8001c86 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b14:	4669      	mov	r1, sp
 8002b16:	480e      	ldr	r0, [pc, #56]	; (8002b50 <MX_TIM5_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b18:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b1c:	f00e fbaa 	bl	8011274 <HAL_TIMEx_MasterConfigSynchronization>
 8002b20:	b108      	cbz	r0, 8002b26 <MX_TIM5_Init+0x46>
    Error_Handler();
 8002b22:	f7ff f8b0 	bl	8001c86 <Error_Handler>
  sConfigOC.Pulse = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	2260      	movs	r2, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <MX_TIM5_Init+0x70>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b2c:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b2e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002b30:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b34:	220c      	movs	r2, #12
 8002b36:	eb0d 0102 	add.w	r1, sp, r2
 8002b3a:	f00e fa79 	bl	8011030 <HAL_TIM_PWM_ConfigChannel>
 8002b3e:	b108      	cbz	r0, 8002b44 <MX_TIM5_Init+0x64>
    Error_Handler();
 8002b40:	f7ff f8a1 	bl	8001c86 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <MX_TIM5_Init+0x70>)
 8002b46:	f7ff fee1 	bl	800290c <HAL_TIM_MspPostInit>
}
 8002b4a:	b00a      	add	sp, #40	; 0x28
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	bf00      	nop
 8002b50:	24008284 	.word	0x24008284
 8002b54:	40000c00 	.word	0x40000c00

08002b58 <MX_TIM15_Init>:
{
 8002b58:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b5a:	2400      	movs	r4, #0
{
 8002b5c:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5e:	221c      	movs	r2, #28
 8002b60:	4621      	mov	r1, r4
 8002b62:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b64:	9403      	str	r4, [sp, #12]
 8002b66:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b6a:	f028 ff0a 	bl	802b982 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b6e:	222c      	movs	r2, #44	; 0x2c
 8002b70:	4621      	mov	r1, r4
 8002b72:	eb0d 0002 	add.w	r0, sp, r2
 8002b76:	f028 ff04 	bl	802b982 <memset>
  htim15.Instance = TIM15;
 8002b7a:	4821      	ldr	r0, [pc, #132]	; (8002c00 <MX_TIM15_Init+0xa8>)
  htim15.Init.Prescaler = 4;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	4921      	ldr	r1, [pc, #132]	; (8002c04 <MX_TIM15_Init+0xac>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	6084      	str	r4, [r0, #8]
  htim15.Init.Prescaler = 4;
 8002b82:	e9c0 1300 	strd	r1, r3, [r0]
  htim15.Init.Period = 999;
 8002b86:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002b92:	f00e f9a5 	bl	8010ee0 <HAL_TIM_PWM_Init>
 8002b96:	b108      	cbz	r0, 8002b9c <MX_TIM15_Init+0x44>
    Error_Handler();
 8002b98:	f7ff f875 	bl	8001c86 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b9c:	a901      	add	r1, sp, #4
 8002b9e:	4818      	ldr	r0, [pc, #96]	; (8002c00 <MX_TIM15_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba0:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002ba4:	f00e fb66 	bl	8011274 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	b108      	cbz	r0, 8002bae <MX_TIM15_Init+0x56>
    Error_Handler();
 8002baa:	f7ff f86c 	bl	8001c86 <Error_Handler>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bae:	2400      	movs	r4, #0
  sConfigOC.Pulse = 998;
 8002bb0:	2260      	movs	r2, #96	; 0x60
 8002bb2:	f240 33e6 	movw	r3, #998	; 0x3e6
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bb6:	a904      	add	r1, sp, #16
 8002bb8:	4811      	ldr	r0, [pc, #68]	; (8002c00 <MX_TIM15_Init+0xa8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bba:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 998;
 8002bbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc0:	4622      	mov	r2, r4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bc6:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bca:	f00e fa31 	bl	8011030 <HAL_TIM_PWM_ConfigChannel>
 8002bce:	b108      	cbz	r0, 8002bd4 <MX_TIM15_Init+0x7c>
    Error_Handler();
 8002bd0:	f7ff f859 	bl	8001c86 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002bd8:	a90b      	add	r1, sp, #44	; 0x2c
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <MX_TIM15_Init+0xa8>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bdc:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bde:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002be0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002be4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002be8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002bec:	f00e fb8e 	bl	801130c <HAL_TIMEx_ConfigBreakDeadTime>
 8002bf0:	b108      	cbz	r0, 8002bf6 <MX_TIM15_Init+0x9e>
    Error_Handler();
 8002bf2:	f7ff f848 	bl	8001c86 <Error_Handler>
  HAL_TIM_MspPostInit(&htim15);
 8002bf6:	4802      	ldr	r0, [pc, #8]	; (8002c00 <MX_TIM15_Init+0xa8>)
 8002bf8:	f7ff fe88 	bl	800290c <HAL_TIM_MspPostInit>
}
 8002bfc:	b016      	add	sp, #88	; 0x58
 8002bfe:	bd10      	pop	{r4, pc}
 8002c00:	24008238 	.word	0x24008238
 8002c04:	40014000 	.word	0x40014000

08002c08 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c08:	b508      	push	{r3, lr}
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c0a:	4817      	ldr	r0, [pc, #92]	; (8002c68 <MX_UART4_Init+0x60>)
  huart4.Init.BaudRate = 115200;
 8002c0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <MX_UART4_Init+0x64>)
 8002c12:	e9c0 2300 	strd	r2, r3, [r0]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	2300      	movs	r3, #0
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c18:	220c      	movs	r2, #12
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002c1a:	4619      	mov	r1, r3
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c1c:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002c22:	461a      	mov	r2, r3
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c24:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c28:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c2c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002c30:	f00e feec 	bl	8011a0c <HAL_RS485Ex_Init>
 8002c34:	b108      	cbz	r0, 8002c3a <MX_UART4_Init+0x32>
  {
    Error_Handler();
 8002c36:	f7ff f826 	bl	8001c86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	480a      	ldr	r0, [pc, #40]	; (8002c68 <MX_UART4_Init+0x60>)
 8002c3e:	f00e ff3f 	bl	8011ac0 <HAL_UARTEx_SetTxFifoThreshold>
 8002c42:	b108      	cbz	r0, 8002c48 <MX_UART4_Init+0x40>
  {
    Error_Handler();
 8002c44:	f7ff f81f 	bl	8001c86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4807      	ldr	r0, [pc, #28]	; (8002c68 <MX_UART4_Init+0x60>)
 8002c4c:	f00e ff58 	bl	8011b00 <HAL_UARTEx_SetRxFifoThreshold>
 8002c50:	b108      	cbz	r0, 8002c56 <MX_UART4_Init+0x4e>
  {
    Error_Handler();
 8002c52:	f7ff f818 	bl	8001c86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002c56:	4804      	ldr	r0, [pc, #16]	; (8002c68 <MX_UART4_Init+0x60>)
 8002c58:	f00e ff17 	bl	8011a8a <HAL_UARTEx_DisableFifoMode>
 8002c5c:	b118      	cbz	r0, 8002c66 <MX_UART4_Init+0x5e>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002c62:	f7ff b810 	b.w	8001c86 <Error_Handler>
}
 8002c66:	bd08      	pop	{r3, pc}
 8002c68:	240083b0 	.word	0x240083b0
 8002c6c:	40004c00 	.word	0x40004c00

08002c70 <MX_UART8_Init>:
  /* USER CODE END UART8_Init 1 */
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002c70:	4770      	bx	lr
	...

08002c74 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c74:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c76:	4816      	ldr	r0, [pc, #88]	; (8002cd0 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 115200;
 8002c78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c7c:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c7e:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c82:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c84:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c86:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c8a:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c90:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c94:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c98:	f00e fe65 	bl	8011966 <HAL_UART_Init>
 8002c9c:	b108      	cbz	r0, 8002ca2 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8002c9e:	f7fe fff2 	bl	8001c86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <MX_USART1_UART_Init+0x5c>)
 8002ca6:	f00e ff0b 	bl	8011ac0 <HAL_UARTEx_SetTxFifoThreshold>
 8002caa:	b108      	cbz	r0, 8002cb0 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 8002cac:	f7fe ffeb 	bl	8001c86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4807      	ldr	r0, [pc, #28]	; (8002cd0 <MX_USART1_UART_Init+0x5c>)
 8002cb4:	f00e ff24 	bl	8011b00 <HAL_UARTEx_SetRxFifoThreshold>
 8002cb8:	b108      	cbz	r0, 8002cbe <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002cba:	f7fe ffe4 	bl	8001c86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002cbe:	4804      	ldr	r0, [pc, #16]	; (8002cd0 <MX_USART1_UART_Init+0x5c>)
 8002cc0:	f00e fee3 	bl	8011a8a <HAL_UARTEx_DisableFifoMode>
 8002cc4:	b118      	cbz	r0, 8002cce <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002cca:	f7fe bfdc 	b.w	8001c86 <Error_Handler>
}
 8002cce:	bd08      	pop	{r3, pc}
 8002cd0:	2400831c 	.word	0x2400831c
 8002cd4:	40011000 	.word	0x40011000

08002cd8 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	b0be      	sub	sp, #248	; 0xf8
 8002cdc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	2214      	movs	r2, #20
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	a807      	add	r0, sp, #28
 8002ce4:	f028 fe4d 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce8:	22c8      	movs	r2, #200	; 0xc8
 8002cea:	2100      	movs	r1, #0
 8002cec:	a80c      	add	r0, sp, #48	; 0x30
 8002cee:	f028 fe48 	bl	802b982 <memset>
  if(uartHandle->Instance==UART4)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <HAL_UART_MspInit+0x180>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d149      	bne.n	8002d8e <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfe:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d04:	f00b fe4e 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002d08:	b108      	cbz	r0, 8002d0e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8002d0a:	f7fe ffbc 	bl	8001c86 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_UART_MspInit+0x184>)
    PA15 (JTDI)     ------> UART4_DE
    PB8     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d14:	2508      	movs	r5, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d16:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1a:	a907      	add	r1, sp, #28
 8002d1c:	4850      	ldr	r0, [pc, #320]	; (8002e60 <HAL_UART_MspInit+0x188>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d1e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002d22:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002d26:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d2a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002d2e:	9200      	str	r2, [sp, #0]
 8002d30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d42:	f002 0201 	and.w	r2, r2, #1
 8002d46:	9201      	str	r2, [sp, #4]
 8002d48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d4e:	f042 0202 	orr.w	r2, r2, #2
 8002d52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d5a:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	9302      	str	r3, [sp, #8]
 8002d62:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	f248 0301 	movw	r3, #32769	; 0x8001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f008 f868 	bl	800ae44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d74:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	a907      	add	r1, sp, #28
 8002d7a:	483a      	ldr	r0, [pc, #232]	; (8002e64 <HAL_UART_MspInit+0x18c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d7c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d86:	f008 f85d 	bl	800ae44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d8a:	b03e      	add	sp, #248	; 0xf8
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART1)
 8002d8e:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <HAL_UART_MspInit+0x190>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12f      	bne.n	8002df4 <HAL_UART_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d94:	2201      	movs	r2, #1
 8002d96:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d98:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9e:	f00b fe01 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	b108      	cbz	r0, 8002da8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002da4:	f7fe ff6f 	bl	8001c86 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_UART_MspInit+0x184>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	482c      	ldr	r0, [pc, #176]	; (8002e60 <HAL_UART_MspInit+0x188>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002db4:	f042 0210 	orr.w	r2, r2, #16
 8002db8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002dbc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002dc0:	f002 0210 	and.w	r2, r2, #16
 8002dc4:	9203      	str	r2, [sp, #12]
 8002dc6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	9304      	str	r3, [sp, #16]
 8002dde:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dee:	2307      	movs	r3, #7
 8002df0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	e7c8      	b.n	8002d86 <HAL_UART_MspInit+0xae>
  else if(uartHandle->Instance==USART2)
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <HAL_UART_MspInit+0x194>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d1c7      	bne.n	8002d8a <HAL_UART_MspInit+0xb2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dfe:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e04:	f00b fdce 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	b108      	cbz	r0, 8002e0e <HAL_UART_MspInit+0x136>
      Error_Handler();
 8002e0a:	f7fe ff3c 	bl	8001c86 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_UART_MspInit+0x184>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e10:	a907      	add	r1, sp, #28
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <HAL_UART_MspInit+0x198>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e14:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e1c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002e20:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e24:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002e28:	9205      	str	r2, [sp, #20]
 8002e2a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e30:	f042 0208 	orr.w	r2, r2, #8
 8002e34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2278      	movs	r2, #120	; 0x78
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	9306      	str	r3, [sp, #24]
 8002e44:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e52:	2307      	movs	r3, #7
 8002e54:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	e796      	b.n	8002d86 <HAL_UART_MspInit+0xae>
 8002e58:	40004c00 	.word	0x40004c00
 8002e5c:	58024400 	.word	0x58024400
 8002e60:	58020000 	.word	0x58020000
 8002e64:	58020400 	.word	0x58020400
 8002e68:	40011000 	.word	0x40011000
 8002e6c:	40004400 	.word	0x40004400
 8002e70:	58020c00 	.word	0x58020c00

08002e74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002e74:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002e76:	4903      	ldr	r1, [pc, #12]	; (8002e84 <MX_FATFS_Init+0x10>)
 8002e78:	4803      	ldr	r0, [pc, #12]	; (8002e88 <MX_FATFS_Init+0x14>)
 8002e7a:	f00f fe5b 	bl	8012b34 <FATFS_LinkDriver>
 8002e7e:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <MX_FATFS_Init+0x18>)
 8002e80:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002e82:	bd08      	pop	{r3, pc}
 8002e84:	24008444 	.word	0x24008444
 8002e88:	0802e97c 	.word	0x0802e97c
 8002e8c:	24008448 	.word	0x24008448

08002e90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8002e90:	b508      	push	{r3, lr}
 8002e92:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8002e94:	460a      	mov	r2, r1
 8002e96:	4601      	mov	r1, r0
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <BSP_SD_ReadBlocks_DMA+0x18>)
 8002e9a:	f00c ff87 	bl	800fdac <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8002e9e:	3800      	subs	r0, #0
 8002ea0:	bf18      	it	ne
 8002ea2:	2001      	movne	r0, #1
 8002ea4:	bd08      	pop	{r3, pc}
 8002ea6:	bf00      	nop
 8002ea8:	24008010 	.word	0x24008010

08002eac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002eac:	b508      	push	{r3, lr}
 8002eae:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8002eb0:	460a      	mov	r2, r1
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <BSP_SD_WriteBlocks_DMA+0x18>)
 8002eb6:	f00c ffe3 	bl	800fe80 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8002eba:	3800      	subs	r0, #0
 8002ebc:	bf18      	it	ne
 8002ebe:	2001      	movne	r0, #1
 8002ec0:	bd08      	pop	{r3, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24008010 	.word	0x24008010

08002ec8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002ec8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <BSP_SD_GetCardState+0x10>)
 8002ecc:	f00d fba0 	bl	8010610 <HAL_SD_GetCardState>
}
 8002ed0:	3804      	subs	r0, #4
 8002ed2:	bf18      	it	ne
 8002ed4:	2001      	movne	r0, #1
 8002ed6:	bd08      	pop	{r3, pc}
 8002ed8:	24008010 	.word	0x24008010

08002edc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002edc:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002ede:	4801      	ldr	r0, [pc, #4]	; (8002ee4 <BSP_SD_GetCardInfo+0x8>)
 8002ee0:	f00d bacc 	b.w	801047c <HAL_SD_GetCardInfo>
 8002ee4:	24008010 	.word	0x24008010

08002ee8 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8002ee8:	2301      	movs	r3, #1
{
 8002eea:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8002eec:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8002ef0:	f000 f81e 	bl	8002f30 <BSP_PlatformIsDetected>
 8002ef4:	b908      	cbnz	r0, 8002efa <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8002ef6:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8002efa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002efe:	b003      	add	sp, #12
 8002f00:	f85d fb04 	ldr.w	pc, [sp], #4

08002f04 <BSP_SD_Init>:
{
 8002f04:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002f06:	f7ff ffef 	bl	8002ee8 <BSP_SD_IsDetected>
 8002f0a:	2801      	cmp	r0, #1
 8002f0c:	d10c      	bne.n	8002f28 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8002f0e:	4807      	ldr	r0, [pc, #28]	; (8002f2c <BSP_SD_Init+0x28>)
 8002f10:	f00d fb92 	bl	8010638 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8002f14:	b938      	cbnz	r0, 8002f26 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f1a:	4804      	ldr	r0, [pc, #16]	; (8002f2c <BSP_SD_Init+0x28>)
 8002f1c:	f00d fac0 	bl	80104a0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8002f20:	3800      	subs	r0, #0
 8002f22:	bf18      	it	ne
 8002f24:	2001      	movne	r0, #1
}
 8002f26:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8002f28:	2002      	movs	r0, #2
 8002f2a:	e7fc      	b.n	8002f26 <BSP_SD_Init+0x22>
 8002f2c:	24008010 	.word	0x24008010

08002f30 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002f30:	2108      	movs	r1, #8
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 8002f34:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002f36:	f008 f90f 	bl	800b158 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8002f3a:	fab0 f080 	clz	r0, r0
 8002f3e:	0940      	lsrs	r0, r0, #5
 8002f40:	bd08      	pop	{r3, pc}
 8002f42:	bf00      	nop
 8002f44:	58021000 	.word	0x58021000

08002f48 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <SD_ioctl+0x50>)
{
 8002f4a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002f4c:	781c      	ldrb	r4, [r3, #0]
{
 8002f4e:	b08b      	sub	sp, #44	; 0x2c
 8002f50:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002f52:	f014 0401 	ands.w	r4, r4, #1
 8002f56:	d11b      	bne.n	8002f90 <SD_ioctl+0x48>

  switch (cmd)
 8002f58:	2903      	cmp	r1, #3
 8002f5a:	d803      	bhi.n	8002f64 <SD_ioctl+0x1c>
 8002f5c:	e8df f001 	tbb	[pc, r1]
 8002f60:	120c061a 	.word	0x120c061a
 8002f64:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8002f66:	4620      	mov	r0, r4
 8002f68:	b00b      	add	sp, #44	; 0x2c
 8002f6a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8002f6c:	a801      	add	r0, sp, #4
 8002f6e:	f7ff ffb5 	bl	8002edc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002f72:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002f74:	602b      	str	r3, [r5, #0]
    break;
 8002f76:	e7f6      	b.n	8002f66 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8002f78:	a801      	add	r0, sp, #4
 8002f7a:	f7ff ffaf 	bl	8002edc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002f7e:	9b08      	ldr	r3, [sp, #32]
 8002f80:	802b      	strh	r3, [r5, #0]
    break;
 8002f82:	e7f0      	b.n	8002f66 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8002f84:	a801      	add	r0, sp, #4
 8002f86:	f7ff ffa9 	bl	8002edc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002f8a:	9b08      	ldr	r3, [sp, #32]
 8002f8c:	0a5b      	lsrs	r3, r3, #9
 8002f8e:	e7f1      	b.n	8002f74 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002f90:	2403      	movs	r4, #3
 8002f92:	e7e8      	b.n	8002f66 <SD_ioctl+0x1e>
    res = RES_OK;
 8002f94:	460c      	mov	r4, r1
 8002f96:	e7e6      	b.n	8002f66 <SD_ioctl+0x1e>
 8002f98:	24000004 	.word	0x24000004

08002f9c <SD_status>:
{
 8002f9c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	4c05      	ldr	r4, [pc, #20]	; (8002fb8 <SD_status+0x1c>)
 8002fa2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002fa4:	f7ff ff90 	bl	8002ec8 <BSP_SD_GetCardState>
 8002fa8:	b918      	cbnz	r0, 8002fb2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8002faa:	7823      	ldrb	r3, [r4, #0]
 8002fac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fb0:	7023      	strb	r3, [r4, #0]
  return Stat;
 8002fb2:	7820      	ldrb	r0, [r4, #0]
}
 8002fb4:	bd10      	pop	{r4, pc}
 8002fb6:	bf00      	nop
 8002fb8:	24000004 	.word	0x24000004

08002fbc <SD_CheckStatusWithTimeout.constprop.0>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8002fbc:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 8002fbe:	f00f fe05 	bl	8012bcc <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 8002fc2:	f247 552f 	movw	r5, #29999	; 0x752f
  timer = osKernelGetTickCount();
 8002fc6:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 8002fc8:	f00f fe00 	bl	8012bcc <osKernelGetTickCount>
 8002fcc:	1b03      	subs	r3, r0, r4
 8002fce:	42ab      	cmp	r3, r5
 8002fd0:	d902      	bls.n	8002fd8 <SD_CheckStatusWithTimeout.constprop.0+0x1c>
  return -1;
 8002fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd6:	e003      	b.n	8002fe0 <SD_CheckStatusWithTimeout.constprop.0+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002fd8:	f7ff ff76 	bl	8002ec8 <BSP_SD_GetCardState>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1f3      	bne.n	8002fc8 <SD_CheckStatusWithTimeout.constprop.0+0xc>
}
 8002fe0:	bd38      	pop	{r3, r4, r5, pc}
	...

08002fe4 <SD_write>:
{
 8002fe4:	b530      	push	{r4, r5, lr}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	460c      	mov	r4, r1
 8002fea:	9201      	str	r2, [sp, #4]
 8002fec:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002fee:	f7ff ffe5 	bl	8002fbc <SD_CheckStatusWithTimeout.constprop.0>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8002ff8:	da02      	bge.n	8003000 <SD_write+0x1c>
  DRESULT res = RES_ERROR;
 8002ffa:	2001      	movs	r0, #1
}
 8002ffc:	b005      	add	sp, #20
 8002ffe:	bd30      	pop	{r4, r5, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ff53 	bl	8002eac <BSP_SD_WriteBlocks_DMA>
 8003006:	4602      	mov	r2, r0
 8003008:	2800      	cmp	r0, #0
 800300a:	d1f6      	bne.n	8002ffa <SD_write+0x16>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800300c:	480e      	ldr	r0, [pc, #56]	; (8003048 <SD_write+0x64>)
 800300e:	f247 5330 	movw	r3, #30000	; 0x7530
 8003012:	f10d 010e 	add.w	r1, sp, #14
 8003016:	6800      	ldr	r0, [r0, #0]
 8003018:	f00f ffb2 	bl	8012f80 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800301c:	2800      	cmp	r0, #0
 800301e:	d1ec      	bne.n	8002ffa <SD_write+0x16>
 8003020:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d1e8      	bne.n	8002ffa <SD_write+0x16>
        timer = osKernelGetTickCount();
 8003028:	f00f fdd0 	bl	8012bcc <osKernelGetTickCount>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800302c:	f247 552f 	movw	r5, #29999	; 0x752f
        timer = osKernelGetTickCount();
 8003030:	4604      	mov	r4, r0
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8003032:	f00f fdcb 	bl	8012bcc <osKernelGetTickCount>
 8003036:	1b03      	subs	r3, r0, r4
 8003038:	42ab      	cmp	r3, r5
 800303a:	d8de      	bhi.n	8002ffa <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800303c:	f7ff ff44 	bl	8002ec8 <BSP_SD_GetCardState>
 8003040:	2800      	cmp	r0, #0
 8003042:	d1f6      	bne.n	8003032 <SD_write+0x4e>
 8003044:	e7da      	b.n	8002ffc <SD_write+0x18>
 8003046:	bf00      	nop
 8003048:	2400844c 	.word	0x2400844c

0800304c <SD_read>:
{
 800304c:	b530      	push	{r4, r5, lr}
 800304e:	b085      	sub	sp, #20
 8003050:	460c      	mov	r4, r1
 8003052:	9201      	str	r2, [sp, #4]
 8003054:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8003056:	f7ff ffb1 	bl	8002fbc <SD_CheckStatusWithTimeout.constprop.0>
 800305a:	2800      	cmp	r0, #0
 800305c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8003060:	da02      	bge.n	8003068 <SD_read+0x1c>
  DRESULT res = RES_ERROR;
 8003062:	2001      	movs	r0, #1
}
 8003064:	b005      	add	sp, #20
 8003066:	bd30      	pop	{r4, r5, pc}
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ff11 	bl	8002e90 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800306e:	4602      	mov	r2, r0
 8003070:	2800      	cmp	r0, #0
 8003072:	d1f6      	bne.n	8003062 <SD_read+0x16>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8003074:	480e      	ldr	r0, [pc, #56]	; (80030b0 <SD_read+0x64>)
 8003076:	f247 5330 	movw	r3, #30000	; 0x7530
 800307a:	f10d 010e 	add.w	r1, sp, #14
 800307e:	6800      	ldr	r0, [r0, #0]
 8003080:	f00f ff7e 	bl	8012f80 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8003084:	2800      	cmp	r0, #0
 8003086:	d1ec      	bne.n	8003062 <SD_read+0x16>
 8003088:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d1e8      	bne.n	8003062 <SD_read+0x16>
            timer = osKernelGetTickCount();
 8003090:	f00f fd9c 	bl	8012bcc <osKernelGetTickCount>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8003094:	f247 552f 	movw	r5, #29999	; 0x752f
            timer = osKernelGetTickCount();
 8003098:	4604      	mov	r4, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800309a:	f00f fd97 	bl	8012bcc <osKernelGetTickCount>
 800309e:	1b03      	subs	r3, r0, r4
 80030a0:	42ab      	cmp	r3, r5
 80030a2:	d8de      	bhi.n	8003062 <SD_read+0x16>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80030a4:	f7ff ff10 	bl	8002ec8 <BSP_SD_GetCardState>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d1f6      	bne.n	800309a <SD_read+0x4e>
 80030ac:	e7da      	b.n	8003064 <SD_read+0x18>
 80030ae:	bf00      	nop
 80030b0:	2400844c 	.word	0x2400844c

080030b4 <SD_initialize>:
{
 80030b4:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 80030b6:	4c13      	ldr	r4, [pc, #76]	; (8003104 <SD_initialize+0x50>)
 80030b8:	2501      	movs	r5, #1
 80030ba:	7025      	strb	r5, [r4, #0]
  if(osKernelGetState() == osKernelRunning)
 80030bc:	f00f fd5c 	bl	8012b78 <osKernelGetState>
 80030c0:	2802      	cmp	r0, #2
 80030c2:	d11d      	bne.n	8003100 <SD_initialize+0x4c>
    if(BSP_SD_Init() == MSD_OK)
 80030c4:	f7ff ff1e 	bl	8002f04 <BSP_SD_Init>
 80030c8:	b950      	cbnz	r0, 80030e0 <SD_initialize+0x2c>
  Stat = STA_NOINIT;
 80030ca:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80030cc:	f7ff fefc 	bl	8002ec8 <BSP_SD_GetCardState>
 80030d0:	b918      	cbnz	r0, 80030da <SD_initialize+0x26>
    Stat &= ~STA_NOINIT;
 80030d2:	7823      	ldrb	r3, [r4, #0]
 80030d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80030d8:	7023      	strb	r3, [r4, #0]
  return Stat;
 80030da:	7823      	ldrb	r3, [r4, #0]
 80030dc:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 80030de:	7023      	strb	r3, [r4, #0]
    if (Stat != STA_NOINIT)
 80030e0:	7823      	ldrb	r3, [r4, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00c      	beq.n	8003100 <SD_initialize+0x4c>
      if (SDQueueID == NULL)
 80030e6:	4d08      	ldr	r5, [pc, #32]	; (8003108 <SD_initialize+0x54>)
 80030e8:	682a      	ldr	r2, [r5, #0]
 80030ea:	b94a      	cbnz	r2, 8003100 <SD_initialize+0x4c>
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80030ec:	2102      	movs	r1, #2
 80030ee:	200a      	movs	r0, #10
 80030f0:	f00f fedb 	bl	8012eaa <osMessageQueueNew>
 80030f4:	6028      	str	r0, [r5, #0]
      if (SDQueueID == NULL)
 80030f6:	b918      	cbnz	r0, 8003100 <SD_initialize+0x4c>
        Stat |= STA_NOINIT;
 80030f8:	7823      	ldrb	r3, [r4, #0]
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003100:	7820      	ldrb	r0, [r4, #0]
}
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	24000004 	.word	0x24000004
 8003108:	2400844c 	.word	0x2400844c

0800310c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800310c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003110:	f006 fdde 	bl	8009cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003116:	490d      	ldr	r1, [pc, #52]	; (800314c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003118:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800311a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800311c:	e002      	b.n	8003124 <LoopCopyDataInit>

0800311e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800311e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003122:	3304      	adds	r3, #4

08003124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003128:	d3f9      	bcc.n	800311e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800312c:	4c0a      	ldr	r4, [pc, #40]	; (8003158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003130:	e001      	b.n	8003136 <LoopFillZerobss>

08003132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003134:	3204      	adds	r2, #4

08003136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003138:	d3fb      	bcc.n	8003132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800313a:	f028 fd33 	bl	802bba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800313e:	f7fe fce9 	bl	8001b14 <main>
  bx  lr
 8003142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003144:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003148:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800314c:	24000144 	.word	0x24000144
  ldr r2, =_sidata
 8003150:	08030bd0 	.word	0x08030bd0
  ldr r2, =_sbss
 8003154:	24007944 	.word	0x24007944
  ldr r4, =_ebss
 8003158:	2402ba9c 	.word	0x2402ba9c

0800315c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800315c:	e7fe      	b.n	800315c <ADC3_IRQHandler>

0800315e <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 800315e:	4770      	bx	lr

08003160 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8003160:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8003162:	f002 fefd 	bl	8005f60 <touchgfx_components_init>
  touchgfx_init();
}
 8003166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 800316a:	f002 becf 	b.w	8005f0c <touchgfx_init>

0800316e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800316e:	f002 beff 	b.w	8005f70 <touchgfx_taskEntry>
	...

08003174 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
    {
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
    }
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	0802e9b0 	.word	0x0802e9b0

08003194 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    }
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ffe9 	bl	8003174 <_ZN8touchgfx15TouchControllerD1Ev>
 80031a2:	2104      	movs	r1, #4
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f028 f9ca 	bl	802b53e <_ZdlPvj>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_ZN20STM32TouchController4initEv>:
volatile uint8_t TouchINT_irq = 0;
int32_t X_touch;
int32_t Y_touch;

void STM32TouchController::init()
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 80031bc:	2201      	movs	r2, #1
 80031be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031c2:	4812      	ldr	r0, [pc, #72]	; (800320c <_ZN20STM32TouchController4initEv+0x58>)
 80031c4:	f007 ffce 	bl	800b164 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80031c8:	2064      	movs	r0, #100	; 0x64
 80031ca:	f006 fe2d 	bl	8009e28 <HAL_Delay>
    HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031d4:	480d      	ldr	r0, [pc, #52]	; (800320c <_ZN20STM32TouchController4initEv+0x58>)
 80031d6:	f007 ffc5 	bl	800b164 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80031da:	2064      	movs	r0, #100	; 0x64
 80031dc:	f006 fe24 	bl	8009e28 <HAL_Delay>
    HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 80031e0:	2201      	movs	r2, #1
 80031e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031e6:	4809      	ldr	r0, [pc, #36]	; (800320c <_ZN20STM32TouchController4initEv+0x58>)
 80031e8:	f007 ffbc 	bl	800b164 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80031ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031f0:	f006 fe1a 	bl	8009e28 <HAL_Delay>



    HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2107      	movs	r1, #7
 80031f8:	2009      	movs	r0, #9
 80031fa:	f007 fa41 	bl	800a680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80031fe:	2009      	movs	r0, #9
 8003200:	f007 fa70 	bl	800a6e4 <HAL_NVIC_EnableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58020800 	.word	0x58020800

08003210 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	uint8_t rx_buf[16] = {0};
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]

	    if (TouchINT_irq)
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xd4>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d04c      	beq.n	80032da <_ZN20STM32TouchController11sampleTouchERlS0_+0xca>
	   // if (! HAL_GPIO_ReadPin( CTP_INT_GPIO_Port, CTP_INT_Pin ) )
	    {

	        TouchINT_irq = 0;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xd4>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]

	        if (HAL_OK !=  HAL_I2C_Master_Receive(&hi2c1, (0x41 << 1), rx_buf, 16, 100))
 8003246:	f107 0210 	add.w	r2, r7, #16
 800324a:	2364      	movs	r3, #100	; 0x64
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2310      	movs	r3, #16
 8003250:	2182      	movs	r1, #130	; 0x82
 8003252:	4825      	ldr	r0, [pc, #148]	; (80032e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xd8>)
 8003254:	f008 fe4c 	bl	800bef0 <HAL_I2C_Master_Receive>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <_ZN20STM32TouchController11sampleTouchERlS0_+0x5c>
	        {
	        	return false;
 8003268:	2300      	movs	r3, #0
 800326a:	e037      	b.n	80032dc <_ZN20STM32TouchController11sampleTouchERlS0_+0xcc>
	        }
	        if (rx_buf[0] == 0x48)
 800326c:	7c3b      	ldrb	r3, [r7, #16]
 800326e:	2b48      	cmp	r3, #72	; 0x48
 8003270:	d131      	bne.n	80032d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc6>
	        {
	            X_touch = 0;
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
	            X_touch = rx_buf[3] & 0x0F;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 8003280:	6013      	str	r3, [r2, #0]
	            X_touch <<= 8;
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 800328a:	6013      	str	r3, [r2, #0]
	            X_touch |= rx_buf[2];
 800328c:	7cbb      	ldrb	r3, [r7, #18]
 800328e:	461a      	mov	r2, r3
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 8003298:	6013      	str	r3, [r2, #0]
	            Y_touch = 0;
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
	            Y_touch = rx_buf[5] & 0x0F;
 80032a0:	7d7b      	ldrb	r3, [r7, #21]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 80032a8:	6013      	str	r3, [r2, #0]
	            Y_touch <<= 8;
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 80032b2:	6013      	str	r3, [r2, #0]
	            Y_touch |= rx_buf[4];
 80032b4:	7d3b      	ldrb	r3, [r7, #20]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	4a0c      	ldr	r2, [pc, #48]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 80032c0:	6013      	str	r3, [r2, #0]
	            *(int32_t*)&x = X_touch;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xdc>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	601a      	str	r2, [r3, #0]
	            *(int32_t*)&y = Y_touch;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe0>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
	        return true;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e002      	b.n	80032dc <_ZN20STM32TouchController11sampleTouchERlS0_+0xcc>

	        }
	        else
	        {
	            return false;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <_ZN20STM32TouchController11sampleTouchERlS0_+0xcc>




	    }
    return false;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	24008450 	.word	0x24008450
 80032e8:	24007c80 	.word	0x24007c80
 80032ec:	24008454 	.word	0x24008454
 80032f0:	24008458 	.word	0x24008458

080032f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == CTP_INT_Pin)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d102      	bne.n	800330a <HAL_GPIO_EXTI_Callback+0x16>
    {
    	TouchINT_irq = 1;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_GPIO_EXTI_Callback+0x24>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]

    }
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	24008450 	.word	0x24008450

0800331c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff21 	bl	8003174 <_ZN8touchgfx15TouchControllerD1Ev>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	0802e998 	.word	0x0802e998

08003340 <_ZN20STM32TouchControllerD0Ev>:
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ffe7 	bl	800331c <_ZN20STM32TouchControllerD1Ev>
 800334e:	2104      	movs	r1, #4
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f028 f8f4 	bl	802b53e <_ZdlPvj>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d80c      	bhi.n	800339a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	08003399 	.word	0x08003399
 800338c:	08003399 	.word	0x08003399
 8003390:	08003399 	.word	0x08003399
 8003394:	08003399 	.word	0x08003399
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8003398:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d80c      	bhi.n	80033d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033d1 	.word	0x080033d1
 80033c8:	080033d1 	.word	0x080033d1
 80033cc:	080033d1 	.word	0x080033d1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80033d0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d80c      	bhi.n	800340a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003409 	.word	0x08003409
 8003400:	08003409 	.word	0x08003409
 8003404:	08003409 	.word	0x08003409
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8003408:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop

08003418 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    {
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
    }
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	0802fc30 	.word	0x0802fc30

08003438 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    }
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ffe9 	bl	8003418 <_ZN8touchgfx3HALD1Ev>
 8003446:	217c      	movs	r1, #124	; 0x7c
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f028 f878 	bl	802b53e <_ZdlPvj>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	429a      	cmp	r2, r3
 8003498:	d304      	bcc.n	80034a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	883a      	ldrh	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d205      	bcs.n	80034b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80034a8:	219e      	movs	r1, #158	; 0x9e
 80034aa:	480a      	ldr	r0, [pc, #40]	; (80034d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80034ac:	f028 f876 	bl	802b59c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80034b8:	883b      	ldrh	r3, [r7, #0]
 80034ba:	8013      	strh	r3, [r2, #0]
    }
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	2402ae60 	.word	0x2402ae60
 80034c8:	2402ae62 	.word	0x2402ae62
 80034cc:	0802c6b0 	.word	0x0802c6b0
 80034d0:	0802c714 	.word	0x0802c714
 80034d4:	0802c758 	.word	0x0802c758
 80034d8:	2402ae66 	.word	0x2402ae66
 80034dc:	2402ae68 	.word	0x2402ae68

080034e0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4610      	mov	r0, r2
 8003500:	4798      	blx	r3
 8003502:	4603      	mov	r3, r0
 8003504:	e000      	b.n	8003508 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8003506:	2300      	movs	r3, #0
    }
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f014 ff77 	bl	801840c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	33ac      	adds	r3, #172	; 0xac
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
    }
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800353c:	2300      	movs	r3, #0
    }
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8003564:	f240 21d2 	movw	r1, #722	; 0x2d2
 8003568:	480f      	ldr	r0, [pc, #60]	; (80035a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800356a:	f028 f817 	bl	802b59c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8003588:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	338c      	adds	r3, #140	; 0x8c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	4798      	blx	r3
    }
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	0802c7ac 	.word	0x0802c7ac
 80035a4:	0802c7e4 	.word	0x0802c7e4
 80035a8:	0802c758 	.word	0x0802c758
 80035ac:	2402ae6a 	.word	0x2402ae6a

080035b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80035ce:	701a      	strb	r2, [r3, #0]
    }
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	2402ae6b 	.word	0x2402ae6b

080035e0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80035e8:	2300      	movs	r3, #0
    }
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	4610      	mov	r0, r2
 8003612:	4798      	blx	r3
        }
    }
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8003624:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3318      	adds	r3, #24
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4610      	mov	r0, r2
 800364c:	4798      	blx	r3
 800364e:	4603      	mov	r3, r0
    }
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800366c:	429a      	cmp	r2, r3
 800366e:	d011      	beq.n	8003694 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11e      	bne.n	80036b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8003684:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8003686:	4a11      	ldr	r2, [pc, #68]	; (80036cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8003688:	89bb      	ldrh	r3, [r7, #12]
 800368a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8003692:	e010      	b.n	80036b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00c      	beq.n	80036b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80036a8:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80036ac:	89fb      	ldrh	r3, [r7, #14]
 80036ae:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
    }
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2402ae64 	.word	0x2402ae64
 80036c8:	2402ae62 	.word	0x2402ae62
 80036cc:	2402ae60 	.word	0x2402ae60

080036d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f014 f8f3 	bl	80178c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
    {
        HAL::unlockFrameBuffer();
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f014 fa20 	bl	8017b38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3310      	adds	r3, #16
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4610      	mov	r0, r2
 8003708:	4798      	blx	r3
    }
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	4a05      	ldr	r2, [pc, #20]	; (8003734 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fe77 	bl	8003418 <_ZN8touchgfx3HALD1Ev>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	0802eeb8 	.word	0x0802eeb8

08003738 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ffe7 	bl	8003714 <_ZN20TouchGFXGeneratedHALD1Ev>
 8003746:	217c      	movs	r1, #124	; 0x7c
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f027 fef8 	bl	802b53e <_ZdlPvj>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ffb4 	bl	80036d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	f003 f8f4 	bl	8006968 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f9a4 	bl	8006ae0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8003798:	4603      	mov	r3, r0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 f9a3 	bl	8006afc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 f9ab 	bl	8006b28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	f003 f9a8 	bl	8006b44 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	f003 f8e7 	bl	80069dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4618      	mov	r0, r3
 8003822:	f003 f8eb 	bl	80069fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f003 f8ed 	bl	8006a18 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f003 f8ef 	bl	8006a34 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4618      	mov	r0, r3
 800386a:	f003 f911 	bl	8006a90 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800386e:	4603      	mov	r3, r0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 f912 	bl	8006aac <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <_ZN11TouchGFXHALD1Ev+0x20>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff37 	bl	8003714 <_ZN20TouchGFXGeneratedHALD1Ev>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0802e9c8 	.word	0x0802e9c8

080038b4 <_ZN11TouchGFXHALD0Ev>:
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffe7 	bl	8003890 <_ZN11TouchGFXHALD1Ev>
 80038c2:	217c      	movs	r1, #124	; 0x7c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f027 fe3a 	bl	802b53e <_ZdlPvj>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    {
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <_ZN12MJPEGDecoderD1Ev+0x1c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
    }
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	0802eae4 	.word	0x0802eae4

080038f4 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    }
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ffe9 	bl	80038d4 <_ZN12MJPEGDecoderD1Ev>
 8003902:	2104      	movs	r1, #4
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f027 fe1a 	bl	802b53e <_ZdlPvj>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZN8touchgfx13DMA_Interface12isDMARunningEv>:
    /**
     * Query if the DMA is running.
     *
     * @return true if a DMA operation is currently in progress.
     */
    bool isDMARunning()
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    {
        return isRunning;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7a1b      	ldrb	r3, [r3, #8]
    }
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_ZNK8touchgfx13DMA_Interface11getReservedEv>:
     * Gets whether a DMA operation is reserved by rendering. Used to allow/disallow
     * other users of DMA2D whom are drawing into the framebuffer, e.g. video thread.
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    {
        return isReserved;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7a9b      	ldrb	r3, [r3, #10]
 8003938:	b2db      	uxtb	r3, r3
    }
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	0802eae4 	.word	0x0802eae4

08003998 <_ZN20HardwareMJPEGDecoderC1Ev>:
    uint32_t LastLineHeight;
    uint32_t MCU_pr_line;
    uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ffe8 	bl	8003978 <_ZN12MJPEGDecoderC1Ev>
 80039a8:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <_ZN20HardwareMJPEGDecoderC1Ev+0x94>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	621a      	str	r2, [r3, #32]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	635a      	str	r2, [r3, #52]	; 0x34
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    /* Clear video info */
    videoInfo.frame_height = 0;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]

    /* Create decoding semaphore */
    semDecodingDone = SEM_CREATE();
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	2001      	movs	r0, #1
 8003a16:	f00f f9ab 	bl	8012d70 <osSemaphoreNew>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0802eaa0 	.word	0x0802eaa0
 8003a30:	24008488 	.word	0x24008488

08003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        /* Assuming data is in buffer! */
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	1acb      	subs	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e004      	b.n	8003a66 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4413      	add	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f027 ff91 	bl	802b992 <strncmp>
 8003a70:	4603      	mov	r3, r0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d024      	beq.n	8003ad6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        /* Assuming data is in buffer! */
        const uint32_t index = offset - aviBufferStartOffset;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	ea41 0203 	orr.w	r2, r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3302      	adds	r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3303      	adds	r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	e016      	b.n	8003b04 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	431a      	orrs	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3302      	adds	r3, #2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3303      	adds	r3, #3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	4313      	orrs	r3, r2
    }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d013      	beq.n	8003b4a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        /* Assuming data is in buffer! */
        const uint32_t index = offset - aviBufferStartOffset;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	430b      	orrs	r3, r1
 8003b48:	e00c      	b.n	8003b64 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	4313      	orrs	r3, r2
    }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d033      	beq.n	8003bec <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d909      	bls.n	8003ba2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2209      	movs	r2, #9
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 8003b9a:	2196      	movs	r1, #150	; 0x96
 8003b9c:	4819      	ldr	r0, [pc, #100]	; (8003c04 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 8003b9e:	f027 fcfd 	bl	802b59c <__assert_func>
        }

        reader->seek(offset);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f083 0301 	eor.w	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	220d      	movs	r2, #13
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	e003      	b.n	8003bf4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4413      	add	r3, r2
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	0802c834 	.word	0x0802c834
 8003c00:	0802c848 	.word	0x0802c848
 8003c04:	0802c88c 	.word	0x0802c88c

08003c08 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08e      	sub	sp, #56	; 0x38
 8003c0c:	af04      	add	r7, sp, #16
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	460b      	mov	r3, r1
 8003c18:	80fb      	strh	r3, [r7, #6]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8003c26:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8003c28:	4a4e      	ldr	r2, [pc, #312]	; (8003d64 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 8003c2a:	21a8      	movs	r1, #168	; 0xa8
 8003c2c:	484e      	ldr	r0, [pc, #312]	; (8003d68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8003c2e:	f027 fcb5 	bl	802b59c <__assert_func>

    /* find next frame and decode it */
    readData(currentMovieOffset, 8);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2208      	movs	r2, #8
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff98 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff ff62 	bl	8003b10 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8003c4c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	3302      	adds	r3, #2
 8003c54:	4619      	mov	r1, r3
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff ff5a 	bl	8003b10 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8003c5c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ff07 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8003c6c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 8003c6e:	f243 0330 	movw	r3, #12336	; 0x3030
 8003c72:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8003c74:	f246 3364 	movw	r3, #25444	; 0x6364
 8003c78:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    /* play frame if we have it all */
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4413      	add	r3, r2
 8003c82:	f103 0208 	add.w	r2, r3, #8
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d255      	bcs.n	8003d3a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f243 0230 	movw	r2, #12336	; 0x3030
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d126      	bne.n	8003ce6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f246 3264 	movw	r2, #25444	; 0x6364
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d121      	bne.n	8003ce6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01e      	beq.n	8003ce6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f103 0208 	add.w	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	619a      	str	r2, [r3, #24]
            /* decode frame */
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff57 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8003cc2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	9302      	str	r3, [sp, #8]
 8003cc8:	88bb      	ldrh	r3, [r7, #4]
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fa8e 	bl	80041f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Advance to next frame */
        currentMovieOffset += chunkSize;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) /* Empty frame - Skip */
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
            currentMovieOffset += 8;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f103 0208 	add.w	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f023 0201 	bic.w	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d114      	bne.n	8003d4e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; /* start over */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d38:	e009      	b.n	8003d4e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1a      	ldr	r2, [r3, #32]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8003d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d52:	f083 0301 	eor.w	r3, r3, #1
 8003d56:	b2db      	uxtb	r3, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0802c8e8 	.word	0x0802c8e8
 8003d64:	0802c934 	.word	0x0802c934
 8003d68:	0802c88c 	.word	0x0802c88c

08003d6c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 8003d7c:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 8003d7e:	4a38      	ldr	r2, [pc, #224]	; (8003e60 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8003d80:	21dc      	movs	r1, #220	; 0xdc
 8003d82:	4838      	ldr	r0, [pc, #224]	; (8003e64 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8003d84:	f027 fc0a 	bl	802b59c <__assert_func>

    readData(currentMovieOffset, 8);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff feed 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fe6b 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8003da4:	6178      	str	r0, [r7, #20]

    /* increment until next video frame */
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8003da6:	e043      	b.n	8003e30 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc4>
    {
        /* increment one frame */
        currentMovieOffset += chunkSize + 8;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	f103 0208 	add.w	r2, r3, #8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f023 0201 	bic.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
        frameNumber++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	615a      	str	r2, [r3, #20]

        /* next chunk */
        readData(currentMovieOffset, 8);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fec9 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        /* check it is a video frame */
        uint32_t streamNo  = getU16(currentMovieOffset);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fe93 	bl	8003b10 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8003dea:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	3302      	adds	r3, #2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fe8b 	bl	8003b10 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8003dfa:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fe38 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8003e0a:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 8003e0c:	f243 0330 	movw	r3, #12336	; 0x3030
 8003e10:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8003e12:	f246 3364 	movw	r3, #25444	; 0x6364
 8003e16:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f243 0230 	movw	r2, #12336	; 0x3030
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d106      	bne.n	8003e30 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc4>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f246 3264 	movw	r2, #25444	; 0x6364
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc4>
        {
            /* Found next frame */
            return true;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e011      	b.n	8003e54 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe8>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4413      	add	r3, r2
 8003e38:	f103 0208 	add.w	r2, r3, #8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3b1      	bcc.n	8003da8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3c>
        }
    }

    /* skip back to first frame */
    frameNumber = 1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	619a      	str	r2, [r3, #24]
    return false;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0802c8e8 	.word	0x0802c8e8
 8003e60:	0802c990 	.word	0x0802c990
 8003e64:	0802c88c 	.word	0x0802c88c

08003e68 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; /* not using reader */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f834 	bl	8003ef4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6838      	ldr	r0, [r7, #0]
 8003eb4:	4798      	blx	r3
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f819 	bl	8003ef4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
    /*  Start from the start */
    currentMovieOffset = 0;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /*  Make header available in buffer */
    readData(0, 72);
 8003f0a:	2248      	movs	r2, #72	; 0x48
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fe2e 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    /*  Decode the movie header to find first frame */
    /*  Must be RIFF file */
    if (compare(currentMovieOffset, "RIFF", 4))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6999      	ldr	r1, [r3, #24]
 8003f18:	2304      	movs	r3, #4
 8003f1a:	4aa5      	ldr	r2, [pc, #660]	; (80041b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fd89 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2203      	movs	r2, #3
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 8003f3a:	4b9e      	ldr	r3, [pc, #632]	; (80041b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 8003f3c:	4a9e      	ldr	r2, [pc, #632]	; (80041b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8003f3e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003f42:	489e      	ldr	r0, [pc, #632]	; (80041bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8003f44:	f027 fb2a 	bl	802b59c <__assert_func>
    }

    /* skip fourcc and length */
    currentMovieOffset += 8;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f103 0208 	add.w	r2, r3, #8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6999      	ldr	r1, [r3, #24]
 8003f58:	2304      	movs	r3, #4
 8003f5a:	4a99      	ldr	r2, [pc, #612]	; (80041c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fd69 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 8003f7a:	4b92      	ldr	r3, [pc, #584]	; (80041c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 8003f7c:	4a8e      	ldr	r2, [pc, #568]	; (80041b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8003f7e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003f82:	488e      	ldr	r0, [pc, #568]	; (80041bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8003f84:	f027 fb0a 	bl	802b59c <__assert_func>
    }

    currentMovieOffset += 4;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	1d1a      	adds	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6999      	ldr	r1, [r3, #24]
 8003f96:	2304      	movs	r3, #4
 8003f98:	4a8b      	ldr	r2, [pc, #556]	; (80041c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fd4a 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf14      	ite	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	2300      	moveq	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2205      	movs	r2, #5
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8003fb8:	4b84      	ldr	r3, [pc, #528]	; (80041cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 8003fba:	4a7f      	ldr	r2, [pc, #508]	; (80041b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8003fbc:	f240 1133 	movw	r1, #307	; 0x133
 8003fc0:	487e      	ldr	r0, [pc, #504]	; (80041bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8003fc2:	f027 faeb 	bl	802b59c <__assert_func>
    }

    /* save AVI List info */
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fd53 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8003fd4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8003fe2:	4b7b      	ldr	r3, [pc, #492]	; (80041d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8003fe4:	4a74      	ldr	r2, [pc, #464]	; (80041b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8003fe6:	f240 1139 	movw	r1, #313	; 0x139
 8003fea:	4874      	ldr	r0, [pc, #464]	; (80041bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8003fec:	f027 fad6 	bl	802b59c <__assert_func>

    /* look into header to find frame rate */
    bool foundFrame = true;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 8003ffe:	2304      	movs	r3, #4
 8004000:	4a74      	ldr	r2, [pc, #464]	; (80041d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8004002:	6979      	ldr	r1, [r7, #20]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fd15 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf14      	ite	ne
 8004010:	2301      	movne	r3, #1
 8004012:	2300      	moveq	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2206      	movs	r2, #6
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3304      	adds	r3, #4
 800402c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 800402e:	2304      	movs	r3, #4
 8004030:	4a69      	ldr	r2, [pc, #420]	; (80041d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fcfd 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2207      	movs	r2, #7
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8004058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800405c:	2b00      	cmp	r3, #0
 800405e:	d028      	beq.n	80040b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; /* skip fourcc and cb in AVIMAINHEADER */
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3308      	adds	r3, #8
 8004064:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fd06 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800406e:	4603      	mov	r3, r0
 8004070:	4a5a      	ldr	r2, [pc, #360]	; (80041dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	099a      	lsrs	r2, r3, #6
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3310      	adds	r3, #16
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fcf9 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8004088:	4602      	mov	r2, r0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3320      	adds	r3, #32
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fcf0 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3324      	adds	r3, #36	; 0x24
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fce7 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80040ac:	4602      	mov	r2, r0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	611a      	str	r2, [r3, #16]
    }
    /* skip rest of AVI header, start from end of AVI List */

    /* look for list with 'movi' header */
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	3308      	adds	r3, #8
 80040ba:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 80040bc:	220c      	movs	r2, #12
 80040be:	6a39      	ldr	r1, [r7, #32]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fd55 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80040c6:	e011      	b.n	80040ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f8>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fcd3 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80040d4:	4603      	mov	r3, r0
 80040d6:	3308      	adds	r3, #8
 80040d8:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 80040e2:	220c      	movs	r2, #12
 80040e4:	6a39      	ldr	r1, [r7, #32]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fd42 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f103 0108 	add.w	r1, r3, #8
 80040f2:	2304      	movs	r3, #4
 80040f4:	4a3a      	ldr	r2, [pc, #232]	; (80041e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fc9c 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x226>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x226>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	6a3a      	ldr	r2, [r7, #32]
 8004112:	429a      	cmp	r2, r3
 8004114:	d201      	bcs.n	800411a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x226>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x228>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1d3      	bne.n	80040c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>
    }

    if (lastError != AVI_NO_ERROR)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	220a      	movs	r2, #10
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8004132:	e05e      	b.n	80041f2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    /* save first frame and end of last frame */
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f103 020c 	add.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fc98 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 800414a:	4602      	mov	r2, r0
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	4413      	add	r3, r2
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

    /* find idx */
    const uint32_t listSize = getU32(listOffset+4)+8;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fc8b 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8004164:	4603      	mov	r3, r0
 8004166:	3308      	adds	r3, #8
 8004168:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8004172:	2204      	movs	r2, #4
 8004174:	6a39      	ldr	r1, [r7, #32]
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff fcfa 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800417c:	2304      	movs	r3, #4
 800417e:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8004180:	6a39      	ldr	r1, [r7, #32]
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fc56 	bl	8003a34 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d027      	beq.n	80041e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    /* start on first frame */
    frameNumber = 1; /* next frame number is 1 */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]
 80041ac:	e021      	b.n	80041f2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 80041ae:	bf00      	nop
 80041b0:	0802c9c4 	.word	0x0802c9c4
 80041b4:	0802c9cc 	.word	0x0802c9cc
 80041b8:	0802c9e8 	.word	0x0802c9e8
 80041bc:	0802c88c 	.word	0x0802c88c
 80041c0:	0802ca18 	.word	0x0802ca18
 80041c4:	0802ca20 	.word	0x0802ca20
 80041c8:	0802ca38 	.word	0x0802ca38
 80041cc:	0802ca40 	.word	0x0802ca40
 80041d0:	0802ca58 	.word	0x0802ca58
 80041d4:	0802ca64 	.word	0x0802ca64
 80041d8:	0802ca6c 	.word	0x0802ca6c
 80041dc:	10624dd3 	.word	0x10624dd3
 80041e0:	0802ca74 	.word	0x0802ca74
 80041e4:	0802ca7c 	.word	0x0802ca7c
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	220b      	movs	r2, #11
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 80041f0:	bf00      	nop
}
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05c      	beq.n	80042c6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xce>
    {
        return;
    }

    if (outputBuffer) /* only decode if buffers are assigned. */
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d05a      	beq.n	80042c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd0>
    {
        /* Update JPEG conversion parameters */
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 8004214:	2202      	movs	r2, #2
 8004216:	611a      	str	r2, [r3, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800421e:	6013      	str	r3, [r2, #0]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2b00      	cmp	r3, #0
 800422a:	d006      	beq.n	800423a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        {
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 030f 	bic.w	r3, r3, #15
 8004234:	3310      	adds	r3, #16
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 8004238:	6013      	str	r3, [r2, #0]
        }
        JPEG_ConvertorParams.ScaledWidth = 640 * JPEG_ConvertorParams.bytes_pr_pixel;
 800423a:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	01db      	lsls	r3, r3, #7
 8004246:	461a      	mov	r2, r3
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800424a:	605a      	str	r2, [r3, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800424c:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 8004254:	60d3      	str	r3, [r2, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	f1c3 0310 	rsb	r3, r3, #16
 8004262:	4a1b      	ldr	r2, [pc, #108]	; (80042d0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 8004264:	6093      	str	r3, [r2, #8]

        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4819      	ldr	r0, [pc, #100]	; (80042d4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800426e:	f000 f8fb 	bl	8004468 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 8004278:	6013      	str	r3, [r2, #0]
        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800427a:	4816      	ldr	r0, [pc, #88]	; (80042d4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800427c:	f000 fab6 	bl	80047ec <JPEG_OutputHandler>
 8004280:	4603      	mov	r3, r0
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8004284:	6013      	str	r3, [r2, #0]

            /* If nothing to do, allow other tasks */
            if (JpegProcessing_End == 2)
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xae>
            {
                SEM_WAIT(semDecodingDone);
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f04f 31ff 	mov.w	r1, #4294967295
 80042a0:	4618      	mov	r0, r3
 80042a2:	f00e fdaf 	bl	8012e04 <osSemaphoreAcquire>
            }
        }
        while (JpegProcessing_End != 1);
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e0      	bne.n	800427a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x82>

        /* reset flag */
        Jpeg_HWDecodingEnd = 0;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
        DMA2D_CopyBufferEnd = 0;
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e000      	b.n	80042c8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd0>
        return;
 80042c6:	bf00      	nop
    }
}
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	24008494 	.word	0x24008494
 80042d4:	24007d7c 	.word	0x24007d7c
 80042d8:	2400847c 	.word	0x2400847c
 80042dc:	24008474 	.word	0x24008474
 80042e0:	24008488 	.word	0x24008488
 80042e4:	2400846c 	.word	0x2400846c
 80042e8:	24008490 	.word	0x24008490

080042ec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
    /*  Assuming that chunk is available and streamNo and chunkType is correct. */
    /*  Check by gotoNextFrame */
    readData(currentMovieOffset, 8);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2208      	movs	r2, #8
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fc34 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff fbb2 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8004316:	6178      	str	r0, [r7, #20]

    /*  Ensure whole frame is read */
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	3308      	adds	r3, #8
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4619      	mov	r1, r3
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fc24 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8004328:	6138      	str	r0, [r7, #16]

    if (frameBuffer) /* only decode if buffers are assigned. */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d014      	beq.n	800435a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x6e>
    {
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	6939      	ldr	r1, [r7, #16]
 8004336:	480b      	ldr	r0, [pc, #44]	; (8004364 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x78>)
 8004338:	f000 f896 	bl	8004468 <JPEG_Decode_DMA>

        do
        {
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800433c:	4809      	ldr	r0, [pc, #36]	; (8004364 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x78>)
 800433e:	f000 fa55 	bl	80047ec <JPEG_OutputHandler>
 8004342:	4603      	mov	r3, r0
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8004346:	6013      	str	r3, [r2, #0]
        }
        while (JpegProcessing_End == 0);
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>
    }
    return true;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	24007d7c 	.word	0x24007d7c
 8004368:	24008474 	.word	0x24008474

0800436c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	807b      	strh	r3, [r7, #2]
    assert(0);
 800437a:	4b03      	ldr	r3, [pc, #12]	; (8004388 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 800437c:	4a03      	ldr	r2, [pc, #12]	; (800438c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 800437e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8004382:	4803      	ldr	r0, [pc, #12]	; (8004390 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 8004384:	f027 f90a 	bl	802b59c <__assert_func>
 8004388:	0802ca84 	.word	0x0802ca84
 800438c:	0802ca88 	.word	0x0802ca88
 8004390:	0802c88c 	.word	0x0802c88c

08004394 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 80043a4:	2301      	movs	r3, #1
 80043a6:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	332c      	adds	r3, #44	; 0x2c
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bf8c      	ite	hi
 80043bc:	2301      	movhi	r3, #1
 80043be:	2300      	movls	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	332c      	adds	r3, #44	; 0x2c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
 80043d2:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	3308      	adds	r3, #8
 80043e2:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 80043e4:	2210      	movs	r2, #16
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fbc1 	bl	8003b70 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3308      	adds	r3, #8
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fb40 	bl	8003a7a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4413      	add	r3, r2
 8004402:	1f1a      	subs	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	615a      	str	r2, [r3, #20]
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]

}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 8004446:	b490      	push	{r4, r7}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4614      	mov	r4, r2
 8004456:	3304      	adds	r3, #4
 8004458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800445a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bc90      	pop	{r4, r7}
 8004466:	4770      	bx	lr

08004468 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 8004476:	4a27      	ldr	r2, [pc, #156]	; (8004514 <JPEG_Decode_DMA+0xac>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6013      	str	r3, [r2, #0]
    JPEG_output_is_paused = 0;
 800447c:	4b26      	ldr	r3, [pc, #152]	; (8004518 <JPEG_Decode_DMA+0xb0>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <JPEG_Decode_DMA+0xb4>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <JPEG_Decode_DMA+0xb8>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <JPEG_Decode_DMA+0xbc>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a24      	ldr	r2, [pc, #144]	; (8004528 <JPEG_Decode_DMA+0xc0>)
 8004498:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 800449a:	4a24      	ldr	r2, [pc, #144]	; (800452c <JPEG_Decode_DMA+0xc4>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <JPEG_Decode_DMA+0xc8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

    /* Init buffers */
    for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e016      	b.n	80044da <JPEG_Decode_DMA+0x72>
    {
        Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <JPEG_Decode_DMA+0xcc>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
        Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <JPEG_Decode_DMA+0xcc>)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	4413      	add	r3, r2
 80044c0:	3308      	adds	r3, #8
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
        Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <JPEG_Decode_DMA+0xcc>)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	4413      	add	r3, r2
 80044ce:	330c      	adds	r3, #12
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3301      	adds	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d9e5      	bls.n	80044ac <JPEG_Decode_DMA+0x44>
    }

    /* Do not return from this function until done with decoding all chunks. */
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80044e0:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <JPEG_Decode_DMA+0xb8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <JPEG_Decode_DMA+0xcc>)
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <JPEG_Decode_DMA+0xd0>)
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	01db      	lsls	r3, r3, #7
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	460b      	mov	r3, r1
 80044fe:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f008 f92b 	bl	800c760 <HAL_JPEG_Decode_DMA>

    return 0;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	2400845c 	.word	0x2400845c
 8004518:	24008470 	.word	0x24008470
 800451c:	2400848c 	.word	0x2400848c
 8004520:	24008480 	.word	0x24008480
 8004524:	24008460 	.word	0x24008460
 8004528:	24008468 	.word	0x24008468
 800452c:	24008464 	.word	0x24008464
 8004530:	24008484 	.word	0x24008484
 8004534:	24000008 	.word	0x24000008
 8004538:	24008494 	.word	0x24008494

0800453c <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
    uint32_t hMCU, vMCU;

    if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d12a      	bne.n	80045a4 <HAL_JPEG_InfoReadyCallback+0x68>
    {
        if ((pInfo->ImageWidth % 16) != 0)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_JPEG_InfoReadyCallback+0x2e>
            pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 030f 	bic.w	r3, r3, #15
 8004562:	f103 0210 	add.w	r2, r3, #16
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	60da      	str	r2, [r3, #12]

        if ((pInfo->ImageHeight % 16) != 0)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_JPEG_InfoReadyCallback+0x4a>
            pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	f103 0210 	add.w	r2, r3, #16
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	609a      	str	r2, [r3, #8]

        hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
        vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	60bb      	str	r3, [r7, #8]
        MCU_TotalNb = (hMCU * vMCU);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	4a24      	ldr	r2, [pc, #144]	; (8004630 <HAL_JPEG_InfoReadyCallback+0xf4>)
 80045a0:	6013      	str	r3, [r2, #0]

            if ((pInfo->ImageHeight % 8) != 0)
                pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
        }
    }
}
 80045a2:	e03f      	b.n	8004624 <HAL_JPEG_InfoReadyCallback+0xe8>
        if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d11b      	bne.n	80045e4 <HAL_JPEG_InfoReadyCallback+0xa8>
            if ((pInfo->ImageWidth % 16) != 0)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_JPEG_InfoReadyCallback+0x8c>
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f023 030f 	bic.w	r3, r3, #15
 80045c0:	f103 0210 	add.w	r2, r3, #16
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	60da      	str	r2, [r3, #12]
            if ((pInfo->ImageHeight % 8) != 0)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_JPEG_InfoReadyCallback+0xa8>
                pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 0307 	bic.w	r3, r3, #7
 80045dc:	f103 0208 	add.w	r2, r3, #8
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	609a      	str	r2, [r3, #8]
        if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d11b      	bne.n	8004624 <HAL_JPEG_InfoReadyCallback+0xe8>
            if ((pInfo->ImageWidth % 8) != 0)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_JPEG_InfoReadyCallback+0xcc>
                pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f023 0307 	bic.w	r3, r3, #7
 8004600:	f103 0208 	add.w	r2, r3, #8
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	60da      	str	r2, [r3, #12]
            if ((pInfo->ImageHeight % 8) != 0)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_JPEG_InfoReadyCallback+0xe8>
                pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 0307 	bic.w	r3, r3, #7
 800461c:	f103 0208 	add.w	r2, r3, #8
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	609a      	str	r2, [r3, #8]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	24008478 	.word	0x24008478

08004634 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
    /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
    JPEG_InputImageIndex += NbDecodedData;
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_JPEG_GetDataCallback+0x5c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	4413      	add	r3, r2
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <HAL_JPEG_GetDataCallback+0x5c>)
 8004648:	6013      	str	r3, [r2, #0]
    if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_JPEG_GetDataCallback+0x5c>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_JPEG_GetDataCallback+0x60>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d218      	bcs.n	8004688 <HAL_JPEG_GetDataCallback+0x54>
    {
        JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_JPEG_GetDataCallback+0x64>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	4413      	add	r3, r2
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <HAL_JPEG_GetDataCallback+0x64>)
 8004660:	6013      	str	r3, [r2, #0]
        uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_JPEG_GetDataCallback+0x60>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_JPEG_GetDataCallback+0x5c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	60fb      	str	r3, [r7, #12]
        HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_JPEG_GetDataCallback+0x64>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f5b3 4f50 	cmp.w	r3, #53248	; 0xd000
 800467a:	bf28      	it	cs
 800467c:	f44f 4350 	movcs.w	r3, #53248	; 0xd000
 8004680:	461a      	mov	r2, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f008 f8ce 	bl	800c824 <HAL_JPEG_ConfigInputBuffer>
    }
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	24008460 	.word	0x24008460
 8004694:	24008464 	.word	0x24008464
 8004698:	24008468 	.word	0x24008468

0800469c <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3d      	ldr	r2, [pc, #244]	; (80047a4 <HAL_JPEG_DataReadyCallback+0x108>)
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4413      	add	r3, r2
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80046b6:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <HAL_JPEG_DataReadyCallback+0x108>)
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	4413      	add	r3, r2
 80046c0:	3308      	adds	r3, #8
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
    const uint32_t MCU = MCU_BlockIndex;
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <HAL_JPEG_DataReadyCallback+0x10c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	617b      	str	r3, [r7, #20]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80046cc:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a34      	ldr	r2, [pc, #208]	; (80047a4 <HAL_JPEG_DataReadyCallback+0x108>)
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	4413      	add	r3, r2
 80046d6:	330c      	adds	r3, #12
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	601a      	str	r2, [r3, #0]

    MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80046dc:	4b33      	ldr	r3, [pc, #204]	; (80047ac <HAL_JPEG_DataReadyCallback+0x110>)
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_JPEG_DataReadyCallback+0x10c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <HAL_JPEG_DataReadyCallback+0x10c>)
 80046e8:	6013      	str	r3, [r2, #0]

    JPEG_OUT_Write_BufferIndex++;
 80046ea:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 80046f2:	6013      	str	r3, [r2, #0]
    if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80046f4:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf8c      	ite	hi
 80046fc:	2301      	movhi	r3, #1
 80046fe:	2300      	movls	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_JPEG_DataReadyCallback+0x70>
    {
        JPEG_OUT_Write_BufferIndex = 0;
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
    }

    /* if the other buffer is full, then ui thread might be converting it */
    if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <HAL_JPEG_DataReadyCallback+0x108>)
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	4413      	add	r3, r2
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <HAL_JPEG_DataReadyCallback+0x98>
    {
        HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8004726:	2102      	movs	r1, #2
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f008 f84d 	bl	800c7c8 <HAL_JPEG_Pause>
        JPEG_output_is_paused = 1;
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_JPEG_DataReadyCallback+0x114>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8004734:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_JPEG_DataReadyCallback+0x104>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <HAL_JPEG_DataReadyCallback+0x108>)
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <HAL_JPEG_DataReadyCallback+0x110>)
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	461a      	mov	r2, r3
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f008 f86a 	bl	800c82a <HAL_JPEG_ConfigOutputBuffer>

    /* Signal Hardware Decoding to wake up */
    if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8004756:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <HAL_JPEG_DataReadyCallback+0x118>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f8da 	bl	8003914 <_ZN8touchgfx13DMA_Interface12isDMARunningEv>
 8004760:	4603      	mov	r3, r0
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_JPEG_DataReadyCallback+0xea>
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_JPEG_DataReadyCallback+0x118>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f8db 	bl	800392c <_ZNK8touchgfx13DMA_Interface11getReservedEv>
 8004776:	4603      	mov	r3, r0
 8004778:	f083 0301 	eor.w	r3, r3, #1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_JPEG_DataReadyCallback+0xea>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_JPEG_DataReadyCallback+0xec>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_JPEG_DataReadyCallback+0xfa>
    {
        SEM_POST(semDecodingDone);
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_JPEG_DataReadyCallback+0x11c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f00e fb62 	bl	8012e5a <osSemaphoreRelease>
    }
}
 8004796:	bf00      	nop
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	24008480 	.word	0x24008480
 80047a4:	24000008 	.word	0x24000008
 80047a8:	24008484 	.word	0x24008484
 80047ac:	24008494 	.word	0x24008494
 80047b0:	24008470 	.word	0x24008470
 80047b4:	2400847c 	.word	0x2400847c
 80047b8:	24008488 	.word	0x24008488

080047bc <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	b672      	cpsid	i
}
 80047c6:	bf00      	nop
    __disable_irq();
    while (1)
 80047c8:	e7fe      	b.n	80047c8 <HAL_JPEG_ErrorCallback+0xc>
	...

080047cc <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
    Jpeg_HWDecodingEnd = 1;
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	2400846c 	.word	0x2400846c

080047ec <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <JPEG_OutputHandler+0xb4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <JPEG_OutputHandler+0x1c>
 80047fc:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <JPEG_OutputHandler+0xb8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <JPEG_OutputHandler+0x1c>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <JPEG_OutputHandler+0x1e>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <JPEG_OutputHandler+0x26>
    {
        return 1;
 800480e:	2301      	movs	r3, #1
 8004810:	e041      	b.n	8004896 <JPEG_OutputHandler+0xaa>
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if(!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8004812:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <JPEG_OutputHandler+0xbc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff f87c 	bl	8003914 <_ZN8touchgfx13DMA_Interface12isDMARunningEv>
 800481c:	4603      	mov	r3, r0
 800481e:	f083 0301 	eor.w	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <JPEG_OutputHandler+0x58>
 8004828:	4b20      	ldr	r3, [pc, #128]	; (80048ac <JPEG_OutputHandler+0xc0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <JPEG_OutputHandler+0xc4>)
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <JPEG_OutputHandler+0x58>
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <JPEG_OutputHandler+0xb8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <JPEG_OutputHandler+0x58>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <JPEG_OutputHandler+0x5a>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <JPEG_OutputHandler+0x70>
    {
        DMA2D_reference->start();
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <JPEG_OutputHandler+0xbc>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <JPEG_OutputHandler+0xbc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3310      	adds	r3, #16
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4610      	mov	r0, r2
 800485a:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <JPEG_OutputHandler+0xc8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10d      	bne.n	8004880 <JPEG_OutputHandler+0x94>
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <JPEG_OutputHandler+0xcc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <JPEG_OutputHandler+0xc4>)
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <JPEG_OutputHandler+0x94>
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <JPEG_OutputHandler+0xb4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <JPEG_OutputHandler+0x94>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <JPEG_OutputHandler+0x96>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <JPEG_OutputHandler+0xa8>
    {
        JPEG_output_is_paused = 0;
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <JPEG_OutputHandler+0xc8>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800488c:	2102      	movs	r1, #2
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f008 f9f8 	bl	800cc84 <HAL_JPEG_Resume>
    }

    return 2;
 8004894:	2302      	movs	r3, #2
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	2400846c 	.word	0x2400846c
 80048a4:	24008490 	.word	0x24008490
 80048a8:	2400847c 	.word	0x2400847c
 80048ac:	2400848c 	.word	0x2400848c
 80048b0:	24000008 	.word	0x24000008
 80048b4:	24008470 	.word	0x24008470
 80048b8:	24008480 	.word	0x24008480

080048bc <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	617b      	str	r3, [r7, #20]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80048e4:	fb01 f202 	mul.w	r2, r1, r2
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	fb03 f202 	mul.w	r2, r3, r2
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 8004906:	2202      	movs	r2, #2
 8004908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	4b1f      	ldr	r3, [pc, #124]	; (800498c <DMA2D_CopyBuffer+0xd0>)
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	429a      	cmp	r2, r3
 800491a:	d309      	bcc.n	8004930 <DMA2D_CopyBuffer+0x74>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	4917      	ldr	r1, [pc, #92]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	644b      	str	r3, [r1, #68]	; 0x44
 800492e:	e007      	b.n	8004940 <DMA2D_CopyBuffer+0x84>
    }
    else
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 800493a:	f043 0310 	orr.w	r3, r3, #16
 800493e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8004940:	4b13      	ldr	r3, [pc, #76]	; (8004990 <DMA2D_CopyBuffer+0xd4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4619      	mov	r1, r3
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	440b      	add	r3, r1
 800494c:	63d3      	str	r3, [r2, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 640 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <DMA2D_CopyBuffer+0xc8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	6413      	str	r3, [r2, #64]	; 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 8004964:	4a0b      	ldr	r2, [pc, #44]	; (8004994 <DMA2D_CopyBuffer+0xd8>)
 8004966:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 800496e:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <DMA2D_CopyBuffer+0xcc>)
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <DMA2D_CopyBuffer+0xdc>)
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	24008494 	.word	0x24008494
 8004988:	52001000 	.word	0x52001000
 800498c:	24008478 	.word	0x24008478
 8004990:	2400845c 	.word	0x2400845c
 8004994:	ff09000b 	.word	0xff09000b
 8004998:	00010201 	.word	0x00010201

0800499c <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    job.State = JPEG_BUFFER_EMPTY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
    job.DataBufferSize = 0;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]

    JPEG_OUT_Read_BufferIndex++;
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <DMA2D_ExternalJobCompleted+0x60>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	4a11      	ldr	r2, [pc, #68]	; (80049fc <DMA2D_ExternalJobCompleted+0x60>)
 80049b8:	6013      	str	r3, [r2, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <DMA2D_ExternalJobCompleted+0x60>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	bf8c      	ite	hi
 80049c2:	2301      	movhi	r3, #1
 80049c4:	2300      	movls	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <DMA2D_ExternalJobCompleted+0x36>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <DMA2D_ExternalJobCompleted+0x60>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <DMA2D_ExternalJobCompleted+0x64>)
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <DMA2D_ExternalJobCompleted+0x68>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	1acb      	subs	r3, r1, r3
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <DMA2D_ExternalJobCompleted+0x4e>
    {
        DMA2D_CopyBufferEnd = 1;
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <DMA2D_ExternalJobCompleted+0x6c>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <DMA2D_ExternalJobCompleted+0x70>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f00e fa33 	bl	8012e5a <osSemaphoreRelease>
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	2400848c 	.word	0x2400848c
 8004a00:	24008478 	.word	0x24008478
 8004a04:	24008494 	.word	0x24008494
 8004a08:	24008490 	.word	0x24008490
 8004a0c:	24008488 	.word	0x24008488

08004a10 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe ff57 	bl	80038d4 <_ZN12MJPEGDecoderD1Ev>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	0802eaa0 	.word	0x0802eaa0

08004a34 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ffe7 	bl	8004a10 <_ZN20HardwareMJPEGDecoderD1Ev>
 8004a42:	2148      	movs	r1, #72	; 0x48
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f026 fd7a 	bl	802b53e <_ZdlPvj>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f00e f987 	bl	8012d70 <osSemaphoreNew>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8004a66:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8004a74:	2128      	movs	r1, #40	; 0x28
 8004a76:	480e      	ldr	r0, [pc, #56]	; (8004ab0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8004a78:	f026 fd90 	bl	802b59c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2104      	movs	r1, #4
 8004a80:	2001      	movs	r0, #1
 8004a82:	f00e fa12 	bl	8012eaa <osMessageQueueNew>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8004a8a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8004a96:	4a05      	ldr	r2, [pc, #20]	; (8004aac <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	4805      	ldr	r0, [pc, #20]	; (8004ab0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8004a9c:	f026 fd7e 	bl	802b59c <__assert_func>
}
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	240084a8 	.word	0x240084a8
 8004aa8:	0802cae4 	.word	0x0802cae4
 8004aac:	0802cb30 	.word	0x0802cb30
 8004ab0:	0802cb60 	.word	0x0802cb60
 8004ab4:	240084ac 	.word	0x240084ac
 8004ab8:	0802cbb4 	.word	0x0802cbb4

08004abc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f00e f99b 	bl	8012e04 <osSemaphoreAcquire>
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	240084a8 	.word	0x240084a8

08004ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f00e f9ba 	bl	8012e5a <osSemaphoreRelease>
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	240084a8 	.word	0x240084a8

08004af0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f00e f982 	bl	8012e04 <osSemaphoreAcquire>
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	240084a8 	.word	0x240084a8

08004b08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f00e f9a2 	bl	8012e5a <osSemaphoreRelease>
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	240084a8 	.word	0x240084a8

08004b20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8004b2e:	f00e f9f7 	bl	8012f20 <osMessageQueuePut>
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	240084ac 	.word	0x240084ac
 8004b3c:	24000028 	.word	0x24000028

08004b40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	1d39      	adds	r1, r7, #4
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f00e fa16 	bl	8012f80 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	1d39      	adds	r1, r7, #4
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f00e fa0e 	bl	8012f80 <osMessageQueueGet>
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	240084ac 	.word	0x240084ac

08004b70 <__NVIC_DisableIRQ>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db12      	blt.n	8004ba8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	f003 021f 	and.w	r2, r3, #31
 8004b88:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <__NVIC_DisableIRQ+0x44>)
 8004b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2001      	movs	r0, #1
 8004b92:	fa00 f202 	lsl.w	r2, r0, r2
 8004b96:	3320      	adds	r3, #32
 8004b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b9c:	f3bf 8f4f 	dsb	sy
}
 8004ba0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ba2:	f3bf 8f6f 	isb	sy
}
 8004ba6:	bf00      	nop
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000e100 	.word	0xe000e100

08004bb8 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
        : color(0)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
    {
    }
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
    {
        return color;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
    }
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <_ZN8touchgfx9DMA_QueueD1Ev>:
    virtual ~DMA_Queue()
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    {
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
    }
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	0802eb74 	.word	0x0802eb74

08004c0c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
    }
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ffe9 	bl	8004bec <_ZN8touchgfx9DMA_QueueD1Ev>
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f026 fc8e 	bl	802b53e <_ZdlPvj>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void flush()
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
        waitForFrameBufferSemaphore();
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3344      	adds	r3, #68	; 0x44
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
    }
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    {
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
    }
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	0802fd08 	.word	0x0802fd08

08004c68 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
    }
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ffe9 	bl	8004c48 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8004c76:	210c      	movs	r1, #12
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f026 fc60 	bl	802b53e <_ZdlPvj>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	721a      	strb	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	725a      	strb	r2, [r3, #9]
    {
    }
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	0802fd08 	.word	0x0802fd08

08004cbc <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8004cc4:	2301      	movs	r3, #1
    }
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    {
        if(!started_by_external_job)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 8004ce2:	f083 0301 	eor.w	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d02e      	beq.n	8004d4a <_ZN8STM32DMA18signalDMAInterruptEv+0x76>
        {
            executeCompleted();
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3328      	adds	r3, #40	; 0x28
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4798      	blx	r3

            /* Start new external job if next buffer is full */
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isReserved && !isRunning)
 8004cfa:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <_ZN8STM32DMA18signalDMAInterruptEv+0xcc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <_ZN8STM32DMA18signalDMAInterruptEv+0xd0>)
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d114      	bne.n	8004d34 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <_ZN8STM32DMA18signalDMAInterruptEv+0xd4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d110      	bne.n	8004d34 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7a9b      	ldrb	r3, [r3, #10]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f083 0301 	eor.w	r3, r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7a1b      	ldrb	r3, [r3, #8]
 8004d26:	f083 0301 	eor.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <_ZN8STM32DMA18signalDMAInterruptEv+0x62>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02d      	beq.n	8004d96 <_ZN8STM32DMA18signalDMAInterruptEv+0xc2>
            {
                started_by_external_job = true;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8b6 	bl	8004eb4 <_ZN8STM32DMA18externalJobExecuteEv>
            {
                started_by_external_job = false;
                execute();
            }
        }
    }
 8004d48:	e025      	b.n	8004d96 <_ZN8STM32DMA18signalDMAInterruptEv+0xc2>
            externalJobCompleted();
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f896 	bl	8004e7c <_ZN8STM32DMA20externalJobCompletedEv>
            if (!queue.isEmpty() && isAllowed)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
 8004d60:	4603      	mov	r3, r0
 8004d62:	f083 0301 	eor.w	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d006      	beq.n	8004d7a <_ZN8STM32DMA18signalDMAInterruptEv+0xa6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	7a5b      	ldrb	r3, [r3, #9]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <_ZN8STM32DMA18signalDMAInterruptEv+0xa6>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <_ZN8STM32DMA18signalDMAInterruptEv+0xa8>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <_ZN8STM32DMA18signalDMAInterruptEv+0xc2>
                started_by_external_job = false;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                execute();
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4610      	mov	r0, r2
 8004d94:	4798      	blx	r3
    }
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2400848c 	.word	0x2400848c
 8004da4:	24000008 	.word	0x24000008
 8004da8:	24008490 	.word	0x24008490

08004dac <_ZN8STM32DMA5startEv>:

    virtual void start()
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 8004dba:	f04f 31ff 	mov.w	r1, #4294967295
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f00d ff96 	bl	8012cf0 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4798      	blx	r3
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f083 0301 	eor.w	r3, r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <_ZN8STM32DMA5startEv+0x50>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7a5b      	ldrb	r3, [r3, #9]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <_ZN8STM32DMA5startEv+0x50>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7a1b      	ldrb	r3, [r3, #8]
 8004dee:	f083 0301 	eor.w	r3, r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <_ZN8STM32DMA5startEv+0x50>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <_ZN8STM32DMA5startEv+0x52>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3324      	adds	r3, #36	; 0x24
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
 8004e18:	e022      	b.n	8004e60 <_ZN8STM32DMA5startEv+0xb4>
        }
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isReserved && !isRunning)
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <_ZN8STM32DMA5startEv+0xc8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <_ZN8STM32DMA5startEv+0xcc>)
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	4413      	add	r3, r2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d110      	bne.n	8004e4c <_ZN8STM32DMA5startEv+0xa0>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7a9b      	ldrb	r3, [r3, #10]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f083 0301 	eor.w	r3, r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <_ZN8STM32DMA5startEv+0xa0>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	7a1b      	ldrb	r3, [r3, #8]
 8004e3e:	f083 0301 	eor.w	r3, r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <_ZN8STM32DMA5startEv+0xa0>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <_ZN8STM32DMA5startEv+0xa2>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <_ZN8STM32DMA5startEv+0xb4>
        {
            started_by_external_job = true;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f82a 	bl	8004eb4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f00d ff64 	bl	8012d34 <osMutexRelease>
    }
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	2400848c 	.word	0x2400848c
 8004e78:	24000008 	.word	0x24000008

08004e7c <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
    {
        if (isRunning)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7a1b      	ldrb	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
        {
            isRunning = false;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	721a      	strb	r2, [r3, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <_ZN8STM32DMA20externalJobCompletedEv+0x30>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <_ZN8STM32DMA20externalJobCompletedEv+0x34>)
 8004e9a:	4413      	add	r3, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fd7d 	bl	800499c <DMA2D_ExternalJobCompleted>
        }
    }
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2400848c 	.word	0x2400848c
 8004eb0:	24000008 	.word	0x24000008

08004eb4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	721a      	strb	r2, [r3, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <_ZN8STM32DMA18externalJobExecuteEv+0x28>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <_ZN8STM32DMA18externalJobExecuteEv+0x2c>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fcf5 	bl	80048bc <DMA2D_CopyBuffer>
    }
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	2400848c 	.word	0x2400848c
 8004ee0:	24000008 	.word	0x24000008

08004ee4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
        return instance;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
    }
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	2402ae6c 	.word	0x2402ae6c

08004efc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4610      	mov	r0, r2
 8004f14:	4798      	blx	r3
    }
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8004f24:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <DMA2D_IRQHandler+0x54>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d019      	beq.n	8004f6e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <DMA2D_IRQHandler+0x54>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf14      	ite	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	2300      	moveq	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00e      	beq.n	8004f6e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <DMA2D_IRQHandler+0x54>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <DMA2D_IRQHandler+0x54>)
 8004f56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f5a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <DMA2D_IRQHandler+0x54>)
 8004f5e:	2202      	movs	r2, #2
 8004f60:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8004f62:	f7ff ffbf 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ffc7 	bl	8004efc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	52001000 	.word	0x52001000

08004f78 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	330c      	adds	r3, #12
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fe17 	bl	8004bb8 <_ZN8touchgfx9colortypeC1Ev>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8004f94:	b5b0      	push	{r4, r5, r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7ff fe6f 	bl	8004c88 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <_ZN8STM32DMAC1Ev+0x70>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f103 000c 	add.w	r0, r3, #12
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3320      	adds	r3, #32
 8004fba:	2260      	movs	r2, #96	; 0x60
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f013 fb5f 	bl	8018680 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3320      	adds	r3, #32
 8004fc6:	245f      	movs	r4, #95	; 0x5f
 8004fc8:	461d      	mov	r5, r3
 8004fca:	e004      	b.n	8004fd6 <_ZN8STM32DMAC1Ev+0x42>
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f7ff ffd3 	bl	8004f78 <_ZN8touchgfx6BlitOpC1Ev>
 8004fd2:	3524      	adds	r5, #36	; 0x24
 8004fd4:	3c01      	subs	r4, #1
 8004fd6:	2c00      	cmp	r4, #0
 8004fd8:	daf8      	bge.n	8004fcc <_ZN8STM32DMAC1Ev+0x38>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 8004fea:	2000      	movs	r0, #0
 8004fec:	f00d fe48 	bl	8012c80 <osMutexNew>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bdb0      	pop	{r4, r5, r7, pc}
 8005002:	bf00      	nop
 8005004:	0802eb24 	.word	0x0802eb24

08005008 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <_ZN8STM32DMAD1Ev+0x30>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8005016:	205a      	movs	r0, #90	; 0x5a
 8005018:	f7ff fdaa 	bl	8004b70 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	330c      	adds	r3, #12
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fac9 	bl	80055b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fe0d 	bl	8004c48 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0802eb24 	.word	0x0802eb24

0800503c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
}
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ffdf 	bl	8005008 <_ZN8STM32DMAD1Ev>
 800504a:	f640 51a8 	movw	r1, #3496	; 0xda8
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f026 fa75 	bl	802b53e <_ZdlPvj>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 800506a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800506e:	4a12      	ldr	r2, [pc, #72]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8005070:	f043 0310 	orr.w	r3, r3, #16
 8005074:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 800507a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8005088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 800508c:	f043 0310 	orr.w	r3, r3, #16
 8005090:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8005094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005096:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <_ZN8STM32DMA10initializeEv+0x58>)
 8005098:	f023 0310 	bic.w	r3, r3, #16
 800509c:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800509e:	2200      	movs	r2, #0
 80050a0:	2105      	movs	r1, #5
 80050a2:	205a      	movs	r0, #90	; 0x5a
 80050a4:	f005 faec 	bl	800a680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80050a8:	205a      	movs	r0, #90	; 0x5a
 80050aa:	f005 fb1b 	bl	800a6e4 <HAL_NVIC_EnableIRQ>
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400

080050bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

    switch (format)
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	2b0b      	cmp	r3, #11
 80050d0:	d826      	bhi.n	8005120 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	08005115 	.word	0x08005115
 80050dc:	0800510f 	.word	0x0800510f
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005121 	.word	0x08005121
 80050e8:	08005121 	.word	0x08005121
 80050ec:	08005121 	.word	0x08005121
 80050f0:	08005121 	.word	0x08005121
 80050f4:	0800511b 	.word	0x0800511b
 80050f8:	0800511b 	.word	0x0800511b
 80050fc:	0800511b 	.word	0x0800511b
 8005100:	0800511b 	.word	0x0800511b
 8005104:	0800511b 	.word	0x0800511b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
        break;
 800510c:	e00e      	b.n	800512c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800510e:	2301      	movs	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
        break;
 8005112:	e00b      	b.n	800512c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8005114:	2302      	movs	r3, #2
 8005116:	60fb      	str	r3, [r7, #12]
        break;
 8005118:	e008      	b.n	800512c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800511a:	2305      	movs	r3, #5
 800511c:	60fb      	str	r3, [r7, #12]
        break;
 800511e:	e005      	b.n	800512c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8005122:	4a06      	ldr	r2, [pc, #24]	; (800513c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8005124:	216e      	movs	r1, #110	; 0x6e
 8005126:	4806      	ldr	r0, [pc, #24]	; (8005140 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8005128:	f026 fa38 	bl	802b59c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	0802cbf8 	.word	0x0802cbf8
 800513c:	0802cc14 	.word	0x0802cc14
 8005140:	0802cc60 	.word	0x0802cc60

08005144 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]

    switch (format)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b0a      	cmp	r3, #10
 8005158:	d821      	bhi.n	800519e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005199 	.word	0x08005199
 8005164:	08005193 	.word	0x08005193
 8005168:	0800518d 	.word	0x0800518d
 800516c:	0800519f 	.word	0x0800519f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	0800519f 	.word	0x0800519f
 8005178:	0800519f 	.word	0x0800519f
 800517c:	08005193 	.word	0x08005193
 8005180:	08005193 	.word	0x08005193
 8005184:	08005193 	.word	0x08005193
 8005188:	08005193 	.word	0x08005193
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
        break;
 8005190:	e00b      	b.n	80051aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8005192:	2301      	movs	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
        break;
 8005196:	e008      	b.n	80051aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8005198:	2302      	movs	r3, #2
 800519a:	60fb      	str	r3, [r7, #12]
        break;
 800519c:	e005      	b.n	80051aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80051a0:	4a05      	ldr	r2, [pc, #20]	; (80051b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80051a2:	218f      	movs	r1, #143	; 0x8f
 80051a4:	4805      	ldr	r0, [pc, #20]	; (80051bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80051a6:	f026 f9f9 	bl	802b59c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	0802cbf8 	.word	0x0802cbf8
 80051b8:	0802ccb0 	.word	0x0802ccb0
 80051bc:	0802cc60 	.word	0x0802cc60

080051c0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80051c8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	7f5b      	ldrb	r3, [r3, #29]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff67 	bl	80050bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80051ee:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	7f9b      	ldrb	r3, [r3, #30]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ff60 	bl	80050bc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80051fc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	7f9b      	ldrb	r3, [r3, #30]
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ff9d 	bl	8005144 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800520a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	8b5b      	ldrh	r3, [r3, #26]
 8005210:	461a      	mov	r2, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	8a9b      	ldrh	r3, [r3, #20]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	4b92      	ldr	r3, [pc, #584]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	8b5b      	ldrh	r3, [r3, #26]
 8005220:	461a      	mov	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	8a9b      	ldrh	r3, [r3, #20]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	4b8e      	ldr	r3, [pc, #568]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800522a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	8b1b      	ldrh	r3, [r3, #24]
 8005230:	461a      	mov	r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	8a9b      	ldrh	r3, [r3, #20]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	4b8a      	ldr	r3, [pc, #552]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800523a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800523c:	4a89      	ldr	r2, [pc, #548]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	8adb      	ldrh	r3, [r3, #22]
 8005246:	461a      	mov	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	8a9b      	ldrh	r3, [r3, #20]
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	431a      	orrs	r2, r3
 8005250:	4b84      	ldr	r3, [pc, #528]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	4b82      	ldr	r3, [pc, #520]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800525a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b80      	ldr	r3, [pc, #512]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005262:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526c:	d036      	beq.n	80052dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800526e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005272:	f200 80e2 	bhi.w	800543a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d014      	beq.n	80052a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 800527c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005280:	f200 80db 	bhi.w	800543a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d059      	beq.n	800533c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	f200 80d6 	bhi.w	800543a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	f000 80be 	beq.w	8005410 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	f200 80d0 	bhi.w	800543a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800529a:	2b04      	cmp	r3, #4
 800529c:	d039      	beq.n	8005312 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 800529e:	2b20      	cmp	r3, #32
 80052a0:	f000 80b6 	beq.w	8005410 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80052a4:	e0c9      	b.n	800543a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	7f1b      	ldrb	r3, [r3, #28]
 80052aa:	061b      	lsls	r3, r3, #24
 80052ac:	4619      	mov	r1, r3
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052b0:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80052b2:	430b      	orrs	r3, r1
 80052b4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	4c6a      	ldr	r4, [pc, #424]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fc89 	bl	8004bd4 <_ZNK8touchgfx9colortypecvmEv>
 80052c2:	4603      	mov	r3, r0
 80052c4:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80052c6:	4a67      	ldr	r2, [pc, #412]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	4b64      	ldr	r3, [pc, #400]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052d2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80052d4:	4b63      	ldr	r3, [pc, #396]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052d6:	4a65      	ldr	r2, [pc, #404]	; (800546c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80052d8:	601a      	str	r2, [r3, #0]
        break;
 80052da:	e0da      	b.n	8005492 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	7f1b      	ldrb	r3, [r3, #28]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	4619      	mov	r1, r3
 80052e4:	4a5f      	ldr	r2, [pc, #380]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052e6:	4b62      	ldr	r3, [pc, #392]	; (8005470 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	4c5c      	ldr	r4, [pc, #368]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fc6e 	bl	8004bd4 <_ZNK8touchgfx9colortypecvmEv>
 80052f8:	4603      	mov	r3, r0
 80052fa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80052fc:	4a59      	ldr	r2, [pc, #356]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	4b57      	ldr	r3, [pc, #348]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005308:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800530a:	4b56      	ldr	r3, [pc, #344]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800530c:	4a57      	ldr	r2, [pc, #348]	; (800546c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800530e:	601a      	str	r2, [r3, #0]
        break;
 8005310:	e0bf      	b.n	8005492 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	7f1b      	ldrb	r3, [r3, #28]
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	461a      	mov	r2, r3
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	4a51      	ldr	r2, [pc, #324]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005324:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005326:	4a4f      	ldr	r2, [pc, #316]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	4b4c      	ldr	r3, [pc, #304]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005332:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005334:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005336:	4a4d      	ldr	r2, [pc, #308]	; (800546c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005338:	601a      	str	r2, [r3, #0]
        break;
 800533a:	e0aa      	b.n	8005492 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800533c:	2301      	movs	r3, #1
 800533e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	4b46      	ldr	r3, [pc, #280]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	7f1b      	ldrb	r3, [r3, #28]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	461a      	mov	r2, r3
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4313      	orrs	r3, r2
 800535a:	4a42      	ldr	r2, [pc, #264]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800535c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005360:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	4b3d      	ldr	r3, [pc, #244]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800536e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 800537a:	2b01      	cmp	r3, #1
 800537c:	d00d      	beq.n	800539a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 800537e:	e020      	b.n	80053c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8005380:	4b38      	ldr	r3, [pc, #224]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8005386:	4013      	ands	r3, r2
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	8852      	ldrh	r2, [r2, #2]
 800538c:	3a01      	subs	r2, #1
 800538e:	0212      	lsls	r2, r2, #8
 8005390:	4611      	mov	r1, r2
 8005392:	4a34      	ldr	r2, [pc, #208]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005394:	430b      	orrs	r3, r1
 8005396:	61d3      	str	r3, [r2, #28]
                break;
 8005398:	e01a      	b.n	80053d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	7f1b      	ldrb	r3, [r3, #28]
 800539e:	2bff      	cmp	r3, #255	; 0xff
 80053a0:	d101      	bne.n	80053a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 80053a2:	2300      	movs	r3, #0
 80053a4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80053a6:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	4b32      	ldr	r3, [pc, #200]	; (8005474 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	8852      	ldrh	r2, [r2, #2]
 80053b2:	3a01      	subs	r2, #1
 80053b4:	0212      	lsls	r2, r2, #8
 80053b6:	4313      	orrs	r3, r2
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80053ba:	f043 0310 	orr.w	r3, r3, #16
 80053be:	61d3      	str	r3, [r2, #28]
                break;
 80053c0:	e006      	b.n	80053d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80053c2:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80053c4:	4a2d      	ldr	r2, [pc, #180]	; (800547c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80053c6:	f240 1119 	movw	r1, #281	; 0x119
 80053ca:	482d      	ldr	r0, [pc, #180]	; (8005480 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80053cc:	f026 f8e6 	bl	802b59c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80053d0:	4b24      	ldr	r3, [pc, #144]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4a23      	ldr	r2, [pc, #140]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80053d6:	f043 0320 	orr.w	r3, r3, #32
 80053da:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80053dc:	bf00      	nop
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f4      	bne.n	80053de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80053f6:	2210      	movs	r2, #16
 80053f8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 80053fa:	7ffb      	ldrb	r3, [r7, #31]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005400:	4b18      	ldr	r3, [pc, #96]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005404:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8005406:	e044      	b.n	8005492 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8005408:	4b16      	ldr	r3, [pc, #88]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800540a:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800540c:	601a      	str	r2, [r3, #0]
        break;
 800540e:	e040      	b.n	8005492 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	7f1b      	ldrb	r3, [r3, #28]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	461a      	mov	r2, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	4313      	orrs	r3, r2
 800541c:	4a11      	ldr	r2, [pc, #68]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800541e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005422:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005424:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005430:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005434:	4a0d      	ldr	r2, [pc, #52]	; (800546c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8005436:	601a      	str	r2, [r3, #0]
        break;
 8005438:	e02b      	b.n	8005492 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	7f1b      	ldrb	r3, [r3, #28]
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	461a      	mov	r2, r3
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	4313      	orrs	r3, r2
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8005448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	7f5a      	ldrb	r2, [r3, #29]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	7f9b      	ldrb	r3, [r3, #30]
 8005456:	429a      	cmp	r2, r3
 8005458:	d016      	beq.n	8005488 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800545a:	4b02      	ldr	r3, [pc, #8]	; (8005464 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800545c:	4a09      	ldr	r2, [pc, #36]	; (8005484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800545e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8005460:	e016      	b.n	8005490 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8005462:	bf00      	nop
 8005464:	52001000 	.word	0x52001000
 8005468:	0002000a 	.word	0x0002000a
 800546c:	00020201 	.word	0x00020201
 8005470:	00020009 	.word	0x00020009
 8005474:	ffff00ef 	.word	0xffff00ef
 8005478:	0802ccfc 	.word	0x0802ccfc
 800547c:	0802cd18 	.word	0x0802cd18
 8005480:	0802cc60 	.word	0x0802cc60
 8005484:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800548a:	f240 2201 	movw	r2, #513	; 0x201
 800548e:	601a      	str	r2, [r3, #0]
        break;
 8005490:	bf00      	nop
    }
}
 8005492:	bf00      	nop
 8005494:	3724      	adds	r7, #36	; 0x24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}
 800549a:	bf00      	nop
 800549c:	52001000 	.word	0x52001000

080054a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	7f9b      	ldrb	r3, [r3, #30]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fe47 	bl	8005144 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80054b6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80054b8:	4a3b      	ldr	r2, [pc, #236]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	8adb      	ldrh	r3, [r3, #22]
 80054c2:	461a      	mov	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	8a9b      	ldrh	r3, [r3, #20]
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80054d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	8b5b      	ldrh	r3, [r3, #26]
 80054dc:	461a      	mov	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	8a9b      	ldrh	r3, [r3, #20]
 80054e2:	1ad2      	subs	r2, r2, r3
 80054e4:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d12e      	bne.n	800554e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	8b5b      	ldrh	r3, [r3, #26]
 80054f4:	461a      	mov	r2, r3
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	8a9b      	ldrh	r3, [r3, #20]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80054fe:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	8b5b      	ldrh	r3, [r3, #26]
 8005504:	461a      	mov	r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	8a9b      	ldrh	r3, [r3, #20]
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	4b26      	ldr	r3, [pc, #152]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800550e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	7f1b      	ldrb	r3, [r3, #28]
 800551a:	061b      	lsls	r3, r3, #24
 800551c:	4619      	mov	r1, r3
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005520:	4b22      	ldr	r3, [pc, #136]	; (80055ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8005522:	430b      	orrs	r3, r1
 8005524:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	4c1f      	ldr	r4, [pc, #124]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fb51 	bl	8004bd4 <_ZNK8touchgfx9colortypecvmEv>
 8005532:	4603      	mov	r3, r0
 8005534:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800553c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005544:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8005546:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005548:	4a19      	ldr	r2, [pc, #100]	; (80055b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800554a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800554c:	e027      	b.n	800559e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800554e:	4a16      	ldr	r2, [pc, #88]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8005554:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fb38 	bl	8004bd4 <_ZNK8touchgfx9colortypecvmEv>
 8005564:	4603      	mov	r3, r0
 8005566:	0a1b      	lsrs	r3, r3, #8
 8005568:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fb2f 	bl	8004bd4 <_ZNK8touchgfx9colortypecvmEv>
 8005576:	4603      	mov	r3, r0
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800557e:	431c      	orrs	r4, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff fb25 	bl	8004bd4 <_ZNK8touchgfx9colortypecvmEv>
 800558a:	4603      	mov	r3, r0
 800558c:	08db      	lsrs	r3, r3, #3
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8005594:	4323      	orrs	r3, r4
 8005596:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800559a:	4a06      	ldr	r2, [pc, #24]	; (80055b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 800559c:	601a      	str	r2, [r3, #0]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	52001000 	.word	0x52001000
 80055ac:	00010009 	.word	0x00010009
 80055b0:	00020201 	.word	0x00020201
 80055b4:	00030201 	.word	0x00030201

080055b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fb0f 	bl	8004bec <_ZN8touchgfx9DMA_QueueD1Ev>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	0802fd58 	.word	0x0802fd58

080055dc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ffe7 	bl	80055b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80055ea:	2114      	movs	r1, #20
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f025 ffa6 	bl	802b53e <_ZdlPvj>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	805a      	strh	r2, [r3, #2]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	809a      	strh	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	80da      	strh	r2, [r3, #6]
    {
    }
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8005634:	4a04      	ldr	r2, [pc, #16]	; (8005648 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
    }
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	2402aec8 	.word	0x2402aec8

0800564c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    {
 8005654:	4a04      	ldr	r2, [pc, #16]	; (8005668 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
    }
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	0802edc0 	.word	0x0802edc0

0800566c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
    }
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ffe9 	bl	800564c <_ZN8touchgfx12FontProviderD1Ev>
 800567a:	2104      	movs	r1, #4
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f025 ff5e 	bl	802b53e <_ZdlPvj>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800569a:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	611a      	str	r2, [r3, #16]
    {
    }
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	0802edb0 	.word	0x0802edb0

080056cc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    {
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	601a      	str	r2, [r3, #0]
    }
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	0802edb0 	.word	0x0802edb0

080056ec <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    }
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ffe9 	bl	80056cc <_ZN8touchgfx7MVPHeapD1Ev>
 80056fa:	2114      	movs	r1, #20
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f025 ff1e 	bl	802b53e <_ZdlPvj>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
    {
    }
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
    {
    }
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
    {
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
    }
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	0802ed88 	.word	0x0802ed88

080057b0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
    }
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ffe9 	bl	8005790 <_ZN8touchgfx15UIEventListenerD1Ev>
 80057be:	2104      	movs	r1, #4
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f025 febc 	bl	802b53e <_ZdlPvj>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
    {
 80057d8:	4a04      	ldr	r2, [pc, #16]	; (80057ec <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
    }
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	0802ff70 	.word	0x0802ff70

080057f0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    }
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ffe9 	bl	80057d0 <_ZN8touchgfx3LCDD1Ev>
 80057fe:	2108      	movs	r1, #8
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f025 fe9c 	bl	802b53e <_ZdlPvj>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    {
    }
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800584e:	6810      	ldr	r0, [r2, #0]
 8005850:	6851      	ldr	r1, [r2, #4]
 8005852:	c303      	stmia	r3!, {r0, r1}
    }
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    {
 8005868:	4a04      	ldr	r2, [pc, #16]	; (800587c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
    }
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	0802ed70 	.word	0x0802ed70

08005880 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
    }
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ffe9 	bl	8005860 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800588e:	2104      	movs	r1, #4
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f025 fe54 	bl	802b53e <_ZdlPvj>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
            : startX(0),
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	801a      	strh	r2, [r3, #0]
              startY(0),
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	805a      	strh	r2, [r3, #2]
              downX(0),
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	809a      	strh	r2, [r3, #4]
              downY(0),
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	739a      	strb	r2, [r3, #14]
        {
        }
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ffd5 	bl	80058a0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	611a      	str	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	829a      	strh	r2, [r3, #20]
    {
    }
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800591a:	4a55      	ldr	r2, [pc, #340]	; (8005a70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]
          gestures(),
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	331c      	adds	r3, #28
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff ffcc 	bl	80058e6 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3350      	adds	r3, #80	; 0x50
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fe2f 	bl	80055fc <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8005a26:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8005a2c:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8005a2e:	8b3b      	ldrh	r3, [r7, #24]
 8005a30:	8013      	strh	r3, [r2, #0]
 8005a32:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8005a38:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8005a3a:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8005a3c:	8bbb      	ldrh	r3, [r7, #28]
 8005a3e:	8013      	strh	r3, [r2, #0]
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8005a42:	881a      	ldrh	r2, [r3, #0]
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8005a46:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8005a4e:	8b3a      	ldrh	r2, [r7, #24]
 8005a50:	8bbb      	ldrh	r3, [r7, #28]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	bf34      	ite	cc
 8005a56:	2301      	movcc	r3, #1
 8005a58:	2300      	movcs	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	0802fc30 	.word	0x0802fc30
 8005a74:	2402ae6c 	.word	0x2402ae6c
 8005a78:	2402ae60 	.word	0x2402ae60
 8005a7c:	2402ae66 	.word	0x2402ae66
 8005a80:	2402ae62 	.word	0x2402ae62
 8005a84:	2402ae68 	.word	0x2402ae68
 8005a88:	2402ae64 	.word	0x2402ae64

08005a8c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	4a05      	ldr	r2, [pc, #20]	; (8005aac <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fe77 	bl	8005790 <_ZN8touchgfx15UIEventListenerD1Ev>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	0802ffc8 	.word	0x0802ffc8

08005ab0 <_ZN8touchgfx11ApplicationD0Ev>:
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ffe7 	bl	8005a8c <_ZN8touchgfx11ApplicationD1Ev>
 8005abe:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f025 fd3b 	bl	802b53e <_ZdlPvj>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f804 	bl	8005ae8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00f      	beq.n	8005b1a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00e      	beq.n	8005b3e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4610      	mov	r0, r2
 8005b34:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff97 	bl	8005a8c <_ZN8touchgfx11ApplicationD1Ev>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	0802ed1c 	.word	0x0802ed1c

08005b6c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ffe7 	bl	8005b48 <_ZN8touchgfx14MVPApplicationD1Ev>
 8005b7a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f025 fcdd 	bl	802b53e <_ZdlPvj>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fb1b 	bl	80061e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff ffcb 	bl	8005b48 <_ZN8touchgfx14MVPApplicationD1Ev>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	0802ecb0 	.word	0x0802ecb0

08005bc0 <_ZN23FrontendApplicationBaseD0Ev>:
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ffe1 	bl	8005b90 <_ZN23FrontendApplicationBaseD1Ev>
 8005bce:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f025 fcb3 	bl	802b53e <_ZdlPvj>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f002 f9c6 	bl	8007f7c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <_ZN19FrontendApplicationD1Ev+0x20>)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ffc1 	bl	8005b90 <_ZN23FrontendApplicationBaseD1Ev>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	0802ec5c 	.word	0x0802ec5c

08005c1c <_ZN19FrontendApplicationD0Ev>:
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ffe7 	bl	8005bf8 <_ZN19FrontendApplicationD1Ev>
 8005c2a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f025 fc85 	bl	802b53e <_ZdlPvj>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 ff07 	bl	8009a60 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f014 ff2b 	bl	801aab0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f002 f984 	bl	8007f7c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	f7ff fcf9 	bl	800568c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8005c9a:	4a04      	ldr	r2, [pc, #16]	; (8005cac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]
    {

    }
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	0802ec48 	.word	0x0802ec48

08005cb0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__tcf_0+0xc>)
 8005cb6:	f000 f965 	bl	8005f84 <_ZN12FrontendHeapD1Ev>
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	240084b0 	.word	0x240084b0

08005cc0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8005cc4:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3bf 8f5b 	dmb	ish
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d013      	beq.n	8005d06 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8005cde:	480b      	ldr	r0, [pc, #44]	; (8005d0c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8005ce0:	f025 fc2f 	bl	802b542 <__cxa_guard_acquire>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf14      	ite	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	2300      	moveq	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8005cf4:	4806      	ldr	r0, [pc, #24]	; (8005d10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8005cf6:	f000 f867 	bl	8005dc8 <_ZN12FrontendHeapC1Ev>
 8005cfa:	4806      	ldr	r0, [pc, #24]	; (8005d14 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8005cfc:	f025 fc6c 	bl	802b5d8 <atexit>
 8005d00:	4802      	ldr	r0, [pc, #8]	; (8005d0c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8005d02:	f025 fc2a 	bl	802b55a <__cxa_guard_release>
        return instance;
 8005d06:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	24008960 	.word	0x24008960
 8005d10:	240084b0 	.word	0x240084b0
 8005d14:	08005cb1 	.word	0x08005cb1

08005d18 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	4a05      	ldr	r2, [pc, #20]	; (8005d38 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fccf 	bl	80056cc <_ZN8touchgfx7MVPHeapD1Ev>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	0802ec48 	.word	0x0802ec48

08005d3c <_ZN16FrontendHeapBaseD0Ev>:
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ffe7 	bl	8005d18 <_ZN16FrontendHeapBaseD1Ev>
 8005d4a:	2114      	movs	r1, #20
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f025 fbf6 	bl	802b53e <_ZdlPvj>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f010 fc14 	bl	8016594 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8005d6c:	4a03      	ldr	r2, [pc, #12]	; (8005d7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	0802ec14 	.word	0x0802ec14

08005d80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f010 fc02 	bl	8016594 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8005d90:	4a03      	ldr	r2, [pc, #12]	; (8005da0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	0802ebe0 	.word	0x0802ebe0

08005da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f010 fbf0 	bl	8016594 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8005db4:	4a03      	ldr	r2, [pc, #12]	; (8005dc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	0802ebac 	.word	0x0802ebac

08005dc8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f103 0114 	add.w	r1, r3, #20
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f503 744f 	add.w	r4, r3, #828	; 0x33c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f503 7355 	add.w	r3, r3, #852	; 0x354
                     app(model, *this)
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4623      	mov	r3, r4
 8005dee:	f7ff ff45 	bl	8005c7c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8005df2:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <_ZN12FrontendHeapC1Ev+0x8c>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3314      	adds	r3, #20
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ffad 	bl	8005d5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	332c      	adds	r3, #44	; 0x2c
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff ffba 	bl	8005d80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff ffc6 	bl	8005da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fe10 	bl	8009a44 <_ZN5ModelC1Ev>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	4619      	mov	r1, r3
 8005e34:	f003 fdf0 	bl	8009a18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7ff ff0d 	bl	8005c62 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd90      	pop	{r4, r7, pc}
 8005e52:	bf00      	nop
 8005e54:	0802eb98 	.word	0x0802eb98

08005e58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	8bbb      	ldrh	r3, [r7, #28]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	8b3b      	ldrh	r3, [r7, #24]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	f7ff fd49 	bl	800590c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8005e7a:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]
    }
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0802eeb8 	.word	0x0802eeb8

08005e90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	8bbb      	ldrh	r3, [r7, #28]
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	8b3b      	ldrh	r3, [r7, #24]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	f7ff ffd3 	bl	8005e58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8005eb2:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]
    }
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	0802e9c8 	.word	0x0802e9c8

08005ec8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	0802e9b0 	.word	0x0802e9b0

08005ee8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff ffe8 	bl	8005ec8 <_ZN8touchgfx15TouchControllerC1Ev>
 8005ef8:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	0802e998 	.word	0x0802e998

08005f0c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 1280, 800);

void touchgfx_init()
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8005f12:	f001 fdf7 	bl	8007b04 <_ZN14BitmapDatabase11getInstanceEv>
 8005f16:	4604      	mov	r4, r0
 8005f18:	f001 fdfe 	bl	8007b18 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	2300      	movs	r3, #0
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	2200      	movs	r2, #0
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f017 fead 	bl	801dc88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8005f2e:	4809      	ldr	r0, [pc, #36]	; (8005f54 <touchgfx_init+0x48>)
 8005f30:	f7ff fb7c 	bl	800562c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8005f34:	2000      	movs	r0, #0
 8005f36:	f003 fcc3 	bl	80098c0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <touchgfx_init+0x4c>)
 8005f3c:	f017 fe0c 	bl	801db58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8005f40:	f7ff febe 	bl	8005cc0 <_ZN12FrontendHeap11getInstanceEv>
 8005f44:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8005f46:	4805      	ldr	r0, [pc, #20]	; (8005f5c <touchgfx_init+0x50>)
 8005f48:	f7fd fc12 	bl	8003770 <_ZN11TouchGFXHAL10initializeEv>
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}
 8005f54:	24009794 	.word	0x24009794
 8005f58:	2400002c 	.word	0x2400002c
 8005f5c:	24009798 	.word	0x24009798

08005f60 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8005f74:	4802      	ldr	r0, [pc, #8]	; (8005f80 <touchgfx_taskEntry+0x10>)
 8005f76:	f011 fd10 	bl	801799a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	24009798 	.word	0x24009798

08005f84 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fe2d 	bl	8005bf8 <_ZN19FrontendApplicationD1Ev>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 f827 	bl	8005ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	332c      	adds	r3, #44	; 0x2c
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 f844 	bl	800603c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f863 	bl	8006084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fea9 	bl	8005d18 <_ZN16FrontendHeapBaseD1Ev>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	0802eb98 	.word	0x0802eb98

08005fd4 <_ZN12FrontendHeapD0Ev>:
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ffd1 	bl	8005f84 <_ZN12FrontendHeapD1Ev>
 8005fe2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f025 faa9 	bl	802b53e <_ZdlPvj>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	4a05      	ldr	r2, [pc, #20]	; (8006018 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	f010 fac1 	bl	8016590 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	0802ebac 	.word	0x0802ebac

0800601c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ffe7 	bl	8005ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800602a:	2114      	movs	r1, #20
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f025 fa86 	bl	802b53e <_ZdlPvj>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	4a05      	ldr	r2, [pc, #20]	; (800605c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	f010 fa9f 	bl	8016590 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	0802ebe0 	.word	0x0802ebe0

08006060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff ffe7 	bl	800603c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800606e:	f44f 7144 	mov.w	r1, #784	; 0x310
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f025 fa63 	bl	802b53e <_ZdlPvj>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	f010 fa7b 	bl	8016590 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0802ec14 	.word	0x0802ec14

080060a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ffe7 	bl	8006084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80060b6:	2118      	movs	r1, #24
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f025 fa40 	bl	802b53e <_ZdlPvj>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	4a05      	ldr	r2, [pc, #20]	; (80060e8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fab7 	bl	800564c <_ZN8touchgfx12FontProviderD1Ev>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	0802ef94 	.word	0x0802ef94

080060ec <_ZN23ApplicationFontProviderD0Ev>:
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ffe7 	bl	80060c8 <_ZN23ApplicationFontProviderD1Ev>
 80060fa:	2104      	movs	r1, #4
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f025 fa1e 	bl	802b53e <_ZdlPvj>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	4a05      	ldr	r2, [pc, #20]	; (800612c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fb57 	bl	80057d0 <_ZN8touchgfx3LCDD1Ev>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	080303d8 	.word	0x080303d8

08006130 <_ZN8touchgfx8LCD16bppD0Ev>:
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ffe7 	bl	800610c <_ZN8touchgfx8LCD16bppD1Ev>
 800613e:	2184      	movs	r1, #132	; 0x84
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f025 f9fc 	bl	802b53e <_ZdlPvj>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_Z41__static_initialization_and_destruction_0ii>:
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af02      	add	r7, sp, #8
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d119      	bne.n	8006194 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006166:	4293      	cmp	r3, r2
 8006168:	d114      	bne.n	8006194 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800616a:	4818      	ldr	r0, [pc, #96]	; (80061cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800616c:	f7ff febc 	bl	8005ee8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8006170:	4817      	ldr	r0, [pc, #92]	; (80061d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006172:	f7fe ff0f 	bl	8004f94 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8006176:	4817      	ldr	r0, [pc, #92]	; (80061d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006178:	f01c f858 	bl	802222c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 1280, 800);
 800617c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4b10      	ldr	r3, [pc, #64]	; (80061cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800618a:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800618c:	4910      	ldr	r1, [pc, #64]	; (80061d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800618e:	4812      	ldr	r0, [pc, #72]	; (80061d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006190:	f7ff fe7e 	bl	8005e90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d113      	bne.n	80061c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d10e      	bne.n	80061c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80061a4:	480c      	ldr	r0, [pc, #48]	; (80061d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80061a6:	f7fd fb73 	bl	8003890 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80061aa:	480c      	ldr	r0, [pc, #48]	; (80061dc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80061ac:	f7ff ff8c 	bl	80060c8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80061b0:	4808      	ldr	r0, [pc, #32]	; (80061d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80061b2:	f7ff ffab 	bl	800610c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80061b6:	4806      	ldr	r0, [pc, #24]	; (80061d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80061b8:	f7fe ff26 	bl	8005008 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80061bc:	4803      	ldr	r0, [pc, #12]	; (80061cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80061be:	f7fd f8ad 	bl	800331c <_ZN20STM32TouchControllerD1Ev>
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	24008964 	.word	0x24008964
 80061d0:	24008968 	.word	0x24008968
 80061d4:	24009710 	.word	0x24009710
 80061d8:	24009798 	.word	0x24009798
 80061dc:	2400002c 	.word	0x2400002c

080061e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	4a05      	ldr	r2, [pc, #20]	; (8006200 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fb35 	bl	8005860 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	0802ed04 	.word	0x0802ed04

08006204 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff ffe7 	bl	80061e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8006212:	2110      	movs	r1, #16
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f025 f992 	bl	802b53e <_ZdlPvj>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800622c:	2301      	movs	r3, #1
    }
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8006242:	230c      	movs	r3, #12
    }
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	4613      	mov	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	3308      	adds	r3, #8
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4413      	add	r3, r2
    }
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	4613      	mov	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	3308      	adds	r3, #8
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	4413      	add	r3, r2
    }
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80062a8:	2301      	movs	r3, #1
    }
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80062be:	f44f 7342 	mov.w	r3, #776	; 0x308
    }
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80062da:	887b      	ldrh	r3, [r7, #2]
 80062dc:	f44f 7242 	mov.w	r2, #776	; 0x308
 80062e0:	fb02 f303 	mul.w	r3, r2, r3
 80062e4:	3308      	adds	r3, #8
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
    }
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006302:	887b      	ldrh	r3, [r7, #2]
 8006304:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	3308      	adds	r3, #8
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4413      	add	r3, r2
    }
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8006326:	2301      	movs	r3, #1
    }
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800633c:	2310      	movs	r3, #16
    }
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006356:	887b      	ldrh	r3, [r7, #2]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	3308      	adds	r3, #8
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4413      	add	r3, r2
    }
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8006378:	887b      	ldrh	r3, [r7, #2]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	3308      	adds	r3, #8
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4413      	add	r3, r2
    }
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	68d2      	ldr	r2, [r2, #12]
 800639e:	1052      	asrs	r2, r2, #1
 80063a0:	1899      	adds	r1, r3, r2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	e00a      	b.n	80063ca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	68d2      	ldr	r2, [r2, #12]
 80063bc:	1052      	asrs	r2, r2, #1
 80063be:	4413      	add	r3, r2
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6892      	ldr	r2, [r2, #8]
 80063c6:	4413      	add	r3, r2
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4608      	mov	r0, r1
 80063cc:	4798      	blx	r3
    }
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d010      	beq.n	8006408 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d001      	beq.n	8006408 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8006408:	2300      	movs	r3, #0
    }
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <_GLOBAL__sub_I_touchgfx_init>:
 8006416:	b580      	push	{r7, lr}
 8006418:	af00      	add	r7, sp, #0
 800641a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800641e:	2001      	movs	r0, #1
 8006420:	f7ff fe96 	bl	8006150 <_Z41__static_initialization_and_destruction_0ii>
 8006424:	bd80      	pop	{r7, pc}

08006426 <_GLOBAL__sub_D_touchgfx_init>:
 8006426:	b580      	push	{r7, lr}
 8006428:	af00      	add	r7, sp, #0
 800642a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800642e:	2000      	movs	r0, #0
 8006430:	f7ff fe8e 	bl	8006150 <_Z41__static_initialization_and_destruction_0ii>
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
        : color(col)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	601a      	str	r2, [r3, #0]
    }
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4603      	mov	r3, r0
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	460b      	mov	r3, r1
 8006468:	813b      	strh	r3, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	897a      	ldrh	r2, [r7, #10]
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	893a      	ldrh	r2, [r7, #8]
 8006478:	805a      	strh	r2, [r3, #2]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	809a      	strh	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8b3a      	ldrh	r2, [r7, #24]
 8006484:	80da      	strh	r2, [r3, #6]
    {
    }
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
    {
 800649c:	4a04      	ldr	r2, [pc, #16]	; (80064b0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	601a      	str	r2, [r3, #0]
    }
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	0803001c 	.word	0x0803001c

080064b4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    }
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ffe9 	bl	8006494 <_ZN8touchgfx8DrawableD1Ev>
 80064c2:	2128      	movs	r1, #40	; 0x28
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f025 f83a 	bl	802b53e <_ZdlPvj>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3314      	adds	r3, #20
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
        }
    }
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006502:	2300      	movs	r3, #0
    }
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	809a      	strh	r2, [r3, #4]
    }
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	887a      	ldrh	r2, [r7, #2]
 800653e:	80da      	strh	r2, [r3, #6]
    }
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	887a      	ldrh	r2, [r7, #2]
 800655c:	811a      	strh	r2, [r3, #8]
    }
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	887a      	ldrh	r2, [r7, #2]
 800657a:	815a      	strh	r2, [r3, #10]
    }
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
    {
    }
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
    {
    }
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	807b      	strh	r3, [r7, #2]
 8006632:	4613      	mov	r3, r2
 8006634:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3354      	adds	r3, #84	; 0x54
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	8879      	ldrh	r1, [r7, #2]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8006646:	b292      	uxth	r2, r2
 8006648:	1a8a      	subs	r2, r1, r2
 800664a:	b292      	uxth	r2, r2
 800664c:	b210      	sxth	r0, r2
 800664e:	8839      	ldrh	r1, [r7, #0]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006656:	b292      	uxth	r2, r2
 8006658:	1a8a      	subs	r2, r1, r2
 800665a:	b292      	uxth	r2, r2
 800665c:	b212      	sxth	r2, r2
 800665e:	4601      	mov	r1, r0
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
    }
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800667a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006682:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800668a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff ffe1 	bl	800666c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	601a      	str	r2, [r3, #0]
    }
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3320      	adds	r3, #32
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
    }
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <_ZN8touchgfx3HAL3lcdEv+0x22>
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fc:	e002      	b.n	8006704 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
    }
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	2402ae6c 	.word	0x2402ae6c

08006714 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
    }
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800673c:	3301      	adds	r3, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	817b      	strh	r3, [r7, #10]
 8006760:	4613      	mov	r3, r2
 8006762:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff ff43 	bl	80065f2 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ff49 	bl	800660c <_ZNK8touchgfx8Drawable11isTouchableEv>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]
        }
    }
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	4a05      	ldr	r2, [pc, #20]	; (80067b8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fe73 	bl	8006494 <_ZN8touchgfx8DrawableD1Ev>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	0802ee50 	.word	0x0802ee50

080067bc <_ZN8touchgfx6WidgetD0Ev>:
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ffe7 	bl	8006798 <_ZN8touchgfx6WidgetD1Ev>
 80067ca:	2128      	movs	r1, #40	; 0x28
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f024 feb6 	bl	802b53e <_ZdlPvj>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
    {
 80067e4:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
    }
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	0802ee14 	.word	0x0802ee14

080067fc <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    }
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ffe9 	bl	80067dc <_ZN8touchgfx15VideoControllerD1Ev>
 800680a:	2104      	movs	r1, #4
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f024 fe96 	bl	802b53e <_ZdlPvj>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma) { this->dma = &dma; }
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	645a      	str	r2, [r3, #68]	; 0x44
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	461a      	mov	r2, r3
 8006862:	4603      	mov	r3, r0
 8006864:	72fb      	strb	r3, [r7, #11]
 8006866:	460b      	mov	r3, r1
 8006868:	813b      	strh	r3, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	7afa      	ldrb	r2, [r7, #11]
 8006872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	893a      	ldrh	r2, [r7, #8]
 800687a:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <__NVIC_EnableIRQ>:
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800689a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	db0b      	blt.n	80068ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	f003 021f 	and.w	r2, r3, #31
 80068a8:	4907      	ldr	r1, [pc, #28]	; (80068c8 <__NVIC_EnableIRQ+0x38>)
 80068aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	2001      	movs	r0, #1
 80068b2:	fa00 f202 	lsl.w	r2, r0, r2
 80068b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e100 	.word	0xe000e100

080068cc <__NVIC_DisableIRQ>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	db12      	blt.n	8006904 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	f003 021f 	and.w	r2, r3, #31
 80068e4:	490a      	ldr	r1, [pc, #40]	; (8006910 <__NVIC_DisableIRQ+0x44>)
 80068e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	2001      	movs	r0, #1
 80068ee:	fa00 f202 	lsl.w	r2, r0, r2
 80068f2:	3320      	adds	r3, #32
 80068f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80068f8:	f3bf 8f4f 	dsb	sy
}
 80068fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80068fe:	f3bf 8f6f 	isb	sy
}
 8006902:	bf00      	nop
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	e000e100 	.word	0xe000e100

08006914 <__NVIC_SetPriority>:
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006924:	2b00      	cmp	r3, #0
 8006926:	db0a      	blt.n	800693e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	490c      	ldr	r1, [pc, #48]	; (8006960 <__NVIC_SetPriority+0x4c>)
 800692e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006932:	0112      	lsls	r2, r2, #4
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	440b      	add	r3, r1
 8006938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800693c:	e00a      	b.n	8006954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	4908      	ldr	r1, [pc, #32]	; (8006964 <__NVIC_SetPriority+0x50>)
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	3b04      	subs	r3, #4
 800694c:	0112      	lsls	r2, r2, #4
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	440b      	add	r3, r1
 8006952:	761a      	strb	r2, [r3, #24]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	e000e100 	.word	0xe000e100
 8006964:	e000ed00 	.word	0xe000ed00

08006968 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8006968:	b5b0      	push	{r4, r5, r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4618      	mov	r0, r3
 8006974:	f010 fffd 	bl	8017972 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8006978:	687d      	ldr	r5, [r7, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3364      	adds	r3, #100	; 0x64
 8006980:	681c      	ldr	r4, [r3, #0]
 8006982:	f013 fff9 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 8006986:	4603      	mov	r3, r0
 8006988:	4619      	mov	r1, r3
 800698a:	4628      	mov	r0, r5
 800698c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD02EE000, (void*)0);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3388      	adds	r3, #136	; 0x88
 8006996:	681c      	ldr	r4, [r3, #0]
 8006998:	2300      	movs	r3, #0
 800699a:	4a0c      	ldr	r2, [pc, #48]	; (80069cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 800699c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80069a0:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4619      	mov	r1, r3
 80069a8:	4809      	ldr	r0, [pc, #36]	; (80069d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80069aa:	f7ff ff37 	bl	800681c <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 80069ae:	2200      	movs	r2, #0
 80069b0:	4907      	ldr	r1, [pc, #28]	; (80069d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 80069b2:	4808      	ldr	r0, [pc, #32]	; (80069d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80069b4:	f000 fa3c 	bl	8006e30 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 80069b8:	f44f 2216 	mov.w	r2, #614400	; 0x96000
 80069bc:	4906      	ldr	r1, [pc, #24]	; (80069d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 80069be:	4805      	ldr	r0, [pc, #20]	; (80069d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 80069c0:	f000 fa56 	bl	8006e70 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bdb0      	pop	{r4, r5, r7, pc}
 80069cc:	d02ee000 	.word	0xd02ee000
 80069d0:	24009814 	.word	0x24009814
 80069d4:	2400985c 	.word	0x2400985c
 80069d8:	d05dc000 	.word	0xd05dc000

080069dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80069e4:	2109      	movs	r1, #9
 80069e6:	205a      	movs	r0, #90	; 0x5a
 80069e8:	f7ff ff94 	bl	8006914 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80069ec:	2109      	movs	r1, #9
 80069ee:	2058      	movs	r0, #88	; 0x58
 80069f0:	f7ff ff90 	bl	8006914 <__NVIC_SetPriority>
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8006a04:	205a      	movs	r0, #90	; 0x5a
 8006a06:	f7ff ff43 	bl	8006890 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8006a0a:	2058      	movs	r0, #88	; 0x58
 8006a0c:	f7ff ff40 	bl	8006890 <__NVIC_EnableIRQ>
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8006a20:	205a      	movs	r0, #90	; 0x5a
 8006a22:	f7ff ff53 	bl	80068cc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8006a26:	2058      	movs	r0, #88	; 0x58
 8006a28:	f7ff ff50 	bl	80068cc <__NVIC_DisableIRQ>
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8006a4e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8006a62:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8006a64:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8006a66:	881a      	ldrh	r2, [r3, #0]
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	50001000 	.word	0x50001000
 8006a88:	240098a4 	.word	0x240098a4
 8006a8c:	240098a6 	.word	0x240098a6

08006a90 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f010 ff50 	bl	8017940 <_ZN8touchgfx3HAL10beginFrameEv>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f010 ff4e 	bl	8017958 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8006abc:	4807      	ldr	r0, [pc, #28]	; (8006adc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 8006abe:	f000 f9ed 	bl	8006e9c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>
    dma.start();
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3310      	adds	r3, #16
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	2400985c 	.word	0x2400985c

08006ae0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8006ae8:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	50001084 	.word	0x50001084

08006afc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8006b06:	4a06      	ldr	r2, [pc, #24]	; (8006b20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	50001084 	.word	0x50001084
 8006b24:	50001000 	.word	0x50001000

08006b28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f010 fecb 	bl	80178d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	f011 f82c 	bl	8017bb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8006b5e:	4603      	mov	r3, r0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2301      	movne	r3, #1
 8006b7e:	2300      	moveq	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03a      	beq.n	8006bfc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006b86:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006b8e:	f3bf 8f4f 	dsb	sy
}
 8006b92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8006b94:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8006b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b9a:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	0b5b      	lsrs	r3, r3, #13
 8006ba0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006ba4:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bae:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006bb8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006bbe:	4912      	ldr	r1, [pc, #72]	; (8006c08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	60fa      	str	r2, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1ea      	bne.n	8006bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1e5a      	subs	r2, r3, #1
 8006bde:	613a      	str	r2, [r7, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bf14      	ite	ne
 8006be4:	2301      	movne	r3, #1
 8006be6:	2300      	moveq	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1db      	bne.n	8006ba6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006bee:	f3bf 8f4f 	dsb	sy
}
 8006bf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bf4:	f3bf 8f6f 	isb	sy
}
 8006bf8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8006bfa:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	e000ed00 	.word	0xe000ed00

08006c0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8006c14:	4b25      	ldr	r3, [pc, #148]	; (8006cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d03a      	beq.n	8006ca0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006c2a:	4b20      	ldr	r3, [pc, #128]	; (8006cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006c32:	f3bf 8f4f 	dsb	sy
}
 8006c36:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8006c38:	4b1c      	ldr	r3, [pc, #112]	; (8006cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8006c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c3e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	0b5b      	lsrs	r3, r3, #13
 8006c44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c48:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	08db      	lsrs	r3, r3, #3
 8006c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c52:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006c5c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8006c62:	4912      	ldr	r1, [pc, #72]	; (8006cac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1e5a      	subs	r2, r3, #1
 8006c6e:	60fa      	str	r2, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1ea      	bne.n	8006c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1e5a      	subs	r2, r3, #1
 8006c82:	613a      	str	r2, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1db      	bne.n	8006c4a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006c92:	f3bf 8f4f 	dsb	sy
}
 8006c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c98:	f3bf 8f6f 	isb	sy
}
 8006c9c:	bf00      	nop
}
 8006c9e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	e000ed00 	.word	0xe000ed00

08006cb0 <videoTaskFunc>:

extern "C" void videoTaskFunc(void* argument)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8006cb8:	4803      	ldr	r0, [pc, #12]	; (8006cc8 <videoTaskFunc+0x18>)
 8006cba:	f000 f934 	bl	8006f26 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	2400985c 	.word	0x2400985c

08006ccc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8006cd4:	f7fe f906 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d132      	bne.n	8006d4e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_LTDC_LineEventCallback+0x8c>)
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	4a1b      	ldr	r2, [pc, #108]	; (8006d5c <HAL_LTDC_LineEventCallback+0x90>)
 8006cee:	8812      	ldrh	r2, [r2, #0]
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	bf0c      	ite	eq
 8006cf4:	2301      	moveq	r3, #1
 8006cf6:	2300      	movne	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d017      	beq.n	8006d2e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8006cfe:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <HAL_LTDC_LineEventCallback+0x94>)
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f006 faef 	bl	800d2e8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8006d0a:	f7fe f8eb 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fd0c 	bl	800672e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8006d16:	f7fd ff03 	bl	8004b20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8006d1a:	f7fe f8e3 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f011 fb73 	bl	801840c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8006d26:	2000      	movs	r0, #0
 8006d28:	f7fc fb22 	bl	8003370 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8006d2c:	e010      	b.n	8006d50 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <HAL_LTDC_LineEventCallback+0x90>)
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f006 fad7 	bl	800d2e8 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8006d3a:	f7fe f8d3 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fcbd 	bl	80066c0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8006d46:	2000      	movs	r0, #0
 8006d48:	f7fc fb2e 	bl	80033a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8006d4c:	e000      	b.n	8006d50 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8006d4e:	bf00      	nop
        }
    }
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	50001000 	.word	0x50001000
 8006d5c:	240098a4 	.word	0x240098a4
 8006d60:	240098a6 	.word	0x240098a6

08006d64 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	0802ee14 	.word	0x0802ee14

08006d84 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 8006d84:	b5b0      	push	{r4, r5, r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff ffe8 	bl	8006d64 <_ZN8touchgfx15VideoControllerC1Ev>
 8006d94:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0xa8>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	2400      	movs	r4, #0
 8006da0:	461d      	mov	r5, r3
 8006da2:	e004      	b.n	8006dae <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x2a>
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f973 	bl	8007090 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 8006daa:	3524      	adds	r5, #36	; 0x24
 8006dac:	3c01      	subs	r4, #1
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	daf8      	bge.n	8006da4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x20>
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	641a      	str	r2, [r3, #64]	; 0x40
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3308      	adds	r3, #8
 8006dec:	2204      	movs	r2, #4
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f024 fdc6 	bl	802b982 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f024 fdbf 	bl	802b982 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	2001      	movs	r0, #1
 8006e0a:	f00b ffb1 	bl	8012d70 <osSemaphoreNew>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8006e14:	2000      	movs	r0, #0
 8006e16:	f00b ff33 	bl	8012c80 <osMutexNew>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bdb0      	pop	{r4, r5, r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	0802edd4 	.word	0x0802edd4

08006e30 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d006      	beq.n	8006e50 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x20>
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x34>)
 8006e44:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x38>)
 8006e46:	f240 1103 	movw	r1, #259	; 0x103
 8006e4a:	4808      	ldr	r0, [pc, #32]	; (8006e6c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x3c>)
 8006e4c:	f024 fba6 	bl	802b59c <__assert_func>
        mjpegDecoders[index] = &decoder;
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	605a      	str	r2, [r3, #4]
    }
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	0802cfe8 	.word	0x0802cfe8
 8006e68:	0802cffc 	.word	0x0802cffc
 8006e6c:	0802d164 	.word	0x0802d164

08006e70 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>:

    void endFrame()
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	e01f      	b.n	8006eea <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4e>
        {
            Stream& stream = streams[i];
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	7f5b      	ldrb	r3, [r3, #29]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x32>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	7f9b      	ldrb	r3, [r3, #30]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x48>
            {
                if (decodeForNextTick(stream))
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f915 	bl	8007100 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x48>
                {
                    stream.doDecode = true;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0dc      	beq.n	8006eaa <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0xe>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	4618      	mov	r0, r3
 8006efe:	f00b ffac 	bl	8012e5a <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f10:	4618      	mov	r0, r3
 8006f12:	f00b ff0f 	bl	8012d34 <osMutexRelease>
            uiHasMutex = false;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 8006f26:	b5b0      	push	{r4, r5, r7, lr}
 8006f28:	b08a      	sub	sp, #40	; 0x28
 8006f2a:	af02      	add	r7, sp, #8
 8006f2c:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f04f 31ff 	mov.w	r1, #4294967295
 8006f36:	4618      	mov	r0, r3
 8006f38:	f00b ff64 	bl	8012e04 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	f04f 31ff 	mov.w	r1, #4294967295
 8006f44:	4618      	mov	r0, r3
 8006f46:	f00b fed3 	bl	8012cf0 <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	e014      	b.n	8006f7a <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x54>
            {
                Stream& stream = streams[i];
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3304      	adds	r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
                if (stream.doDecode)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                {
                    stream.doInvalidateOnNextTick = true;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	3301      	adds	r3, #1
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0e7      	beq.n	8006f50 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x2a>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	e07b      	b.n	800707e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x158>
            {
                Stream& stream = streams[i];
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	3308      	adds	r3, #8
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	3304      	adds	r3, #4
 8006f98:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d069      	beq.n	8007078 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x152>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	613b      	str	r3, [r7, #16]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00c      	beq.n	8006fd2 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3324      	adds	r3, #36	; 0x24
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	6952      	ldr	r2, [r2, #20]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	615a      	str	r2, [r3, #20]
 8006fd0:	e01f      	b.n	8007012 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xec>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01b      	beq.n	8007012 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xec>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8006fda:	693d      	ldr	r5, [r7, #16]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3324      	adds	r3, #36	; 0x24
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3328      	adds	r3, #40	; 0x28
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6938      	ldr	r0, [r7, #16]
 8006fee:	4798      	blx	r3
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	441a      	add	r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2200      	movs	r2, #0
 8007010:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3314      	adds	r3, #20
 8007018:	681c      	ldr	r4, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	3202      	adds	r2, #2
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800702e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007032:	6938      	ldr	r0, [r7, #16]
 8007034:	47a0      	blx	r4
 8007036:	4603      	mov	r3, r0
 8007038:	461a      	mov	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x144>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3328      	adds	r3, #40	; 0x28
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6938      	ldr	r0, [r7, #16]
 800705e:	4798      	blx	r3
 8007060:	4603      	mov	r3, r0
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e002      	b.n	8007070 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14a>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	3301      	adds	r3, #1
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d080      	beq.n	8006f86 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x60>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	4618      	mov	r0, r3
 800708a:	f00b fe53 	bl	8012d34 <osMutexRelease>
        while (1)
 800708e:	e74e      	b.n	8006f2e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x8>

08007090 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	611a      	str	r2, [r3, #16]
                   seek_to_frame(0), skip_frames(0),
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	615a      	str	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	619a      	str	r2, [r3, #24]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	775a      	strb	r2, [r3, #29]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	779a      	strb	r2, [r3, #30]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	77da      	strb	r2, [r3, #31]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2020 	strb.w	r2, [r3, #32]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	68d2      	ldr	r2, [r2, #12]
 8007112:	fb03 f202 	mul.w	r2, r3, r2
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6849      	ldr	r1, [r1, #4]
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	429a      	cmp	r2, r3
 8007124:	d322      	bcc.n	800716c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01b      	beq.n	8007168 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	68d2      	ldr	r2, [r2, #12]
 8007138:	fb03 f202 	mul.w	r2, r3, r2
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6849      	ldr	r1, [r1, #4]
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	1e5a      	subs	r2, r3, #1
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 800716c:	2300      	movs	r3, #0
    }
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
	...

0800717c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	4a05      	ldr	r2, [pc, #20]	; (800719c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev+0x20>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fb25 	bl	80067dc <_ZN8touchgfx15VideoControllerD1Ev>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	0802edd4 	.word	0x0802edd4

080071a0 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff ffe7 	bl	800717c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
 80071ae:	2148      	movs	r1, #72	; 0x48
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f024 f9c4 	bl	802b53e <_ZdlPvj>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10a      	bne.n	80071e6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d105      	bne.n	80071e6 <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 80071da:	480c      	ldr	r0, [pc, #48]	; (800720c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80071dc:	f7fc fbdc 	bl	8003998 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 640, 480, 640 * 2U, Bitmap::RGB565> videoController;
 80071e0:	480b      	ldr	r0, [pc, #44]	; (8007210 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80071e2:	f7ff fdcf 	bl	8006d84 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d105      	bne.n	8007202 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80071f6:	4806      	ldr	r0, [pc, #24]	; (8007210 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80071f8:	f7ff ffc0 	bl	800717c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 80071fc:	4803      	ldr	r0, [pc, #12]	; (800720c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80071fe:	f7fd fc07 	bl	8004a10 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	24009814 	.word	0x24009814
 8007210:	2400985c 	.word	0x2400985c

08007214 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 800721e:	f44f 2316 	mov.w	r3, #614400	; 0x96000
 8007222:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fa81 	bl	800772c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>
 800722a:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	3328      	adds	r3, #40	; 0x28
 800723c:	2201      	movs	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	f503 2216 	add.w	r2, r3, #614400	; 0x96000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007250:	440b      	add	r3, r1
 8007252:	429a      	cmp	r2, r3
 8007254:	d905      	bls.n	8007262 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8007258:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 800725a:	2152      	movs	r1, #82	; 0x52
 800725c:	4812      	ldr	r0, [pc, #72]	; (80072a8 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x94>)
 800725e:	f024 f99d 	bl	802b59c <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	3202      	adds	r2, #2
 800726c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	f503 2216 	add.w	r2, r3, #614400	; 0x96000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 800727c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007280:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007284:	2100      	movs	r1, #0
 8007286:	6838      	ldr	r0, [r7, #0]
 8007288:	f7ff fae4 	bl	8006854 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 800728c:	2100      	movs	r1, #0
 800728e:	6838      	ldr	r0, [r7, #0]
 8007290:	f7ff fad2 	bl	8006838 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8007294:	68bb      	ldr	r3, [r7, #8]
    }
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	0802d1b0 	.word	0x0802d1b0
 80072a4:	0802d1ec 	.word	0x0802d1ec
 80072a8:	0802d164 	.word	0x0802d164

080072ac <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	f04f 31ff 	mov.w	r1, #4294967295
 80072be:	4618      	mov	r0, r3
 80072c0:	f00b fd16 	bl	8012cf0 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	4618      	mov	r0, r3
 80072ca:	f00b fd33 	bl	8012d34 <osMutexRelease>
        streams[handle].isActive = false;
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	4613      	mov	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3328      	adds	r3, #40	; 0x28
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80072e6:	2300      	movs	r3, #0
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	e013      	b.n	8007314 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x68>
            oneIsActive |= streams[i].isActive;
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3328      	adds	r3, #40	; 0x28
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	4313      	orrs	r3, r2
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf14      	ite	ne
 8007308:	2301      	movne	r3, #1
 800730a:	2300      	moveq	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	3301      	adds	r3, #1
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0e8      	beq.n	80072ec <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x40>
        if (oneIsActive == false)
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x54>)
 8007346:	4a10      	ldr	r2, [pc, #64]	; (8007388 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x58>)
 8007348:	2182      	movs	r1, #130	; 0x82
 800734a:	4810      	ldr	r0, [pc, #64]	; (800738c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x5c>)
 800734c:	f024 f926 	bl	802b59c <__assert_func>
        Stream& stream = streams[handle];
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	3308      	adds	r3, #8
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	3304      	adds	r3, #4
 8007362:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2200      	movs	r2, #0
 8007368:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	60da      	str	r2, [r3, #12]
    }
 800737c:	bf00      	nop
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	0802d390 	.word	0x0802d390
 8007388:	0802d3a4 	.word	0x0802d3a4
 800738c:	0802d164 	.word	0x0802d164

08007390 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 80073a2:	4b29      	ldr	r3, [pc, #164]	; (8007448 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 80073a4:	4a29      	ldr	r2, [pc, #164]	; (800744c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 80073a6:	21d0      	movs	r1, #208	; 0xd0
 80073a8:	4829      	ldr	r0, [pc, #164]	; (8007450 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 80073aa:	f024 f8f7 	bl	802b59c <__assert_func>
        Stream& stream = streams[handle];
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	3308      	adds	r3, #8
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	7f5b      	ldrb	r3, [r3, #29]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80073ca:	f7fd fd8b 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 80073ce:	4603      	mov	r3, r0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff f99f 	bl	8006714 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	441a      	add	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	7fdb      	ldrb	r3, [r3, #31]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d029      	beq.n	800743e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	3202      	adds	r2, #2
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff fa1e 	bl	8006838 <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4610      	mov	r0, r2
 8007408:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007416:	f083 0301 	eor.w	r3, r3, #1
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007426:	f083 0301 	eor.w	r3, r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2200      	movs	r2, #0
 8007434:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800743c:	e000      	b.n	8007440 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 800743e:	2301      	movs	r3, #1
    }
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	0802d390 	.word	0x0802d390
 800744c:	0802d560 	.word	0x0802d560
 8007450:	0802d164 	.word	0x0802d164

08007454 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00e      	beq.n	800748a <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007470:	f04f 31ff 	mov.w	r1, #4294967295
 8007474:	4618      	mov	r0, r3
 8007476:	f00b fc3b 	bl	8012cf0 <osMutexAcquire>
            firstDrawThisFrame = false;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x20>
 80074a8:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x64>)
 80074aa:	4a14      	ldr	r2, [pc, #80]	; (80074fc <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x68>)
 80074ac:	2190      	movs	r1, #144	; 0x90
 80074ae:	4814      	ldr	r0, [pc, #80]	; (8007500 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x6c>)
 80074b0:	f024 f874 	bl	802b59c <__assert_func>
        Stream& stream = streams[handle];
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3308      	adds	r3, #8
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	6858      	ldr	r0, [r3, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4798      	blx	r3
    }
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	0802d390 	.word	0x0802d390
 80074fc:	0802d704 	.word	0x0802d704
 8007500:	0802d164 	.word	0x0802d164

08007504 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	6858      	ldr	r0, [r3, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4798      	blx	r3
    }
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	4613      	mov	r3, r2
 8007546:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 800754e:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8007550:	4a3a      	ldr	r2, [pc, #232]	; (800763c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8007552:	21a2      	movs	r1, #162	; 0xa2
 8007554:	483a      	ldr	r0, [pc, #232]	; (8007640 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8007556:	f024 f821 	bl	802b59c <__assert_func>
        Stream& stream = streams[handle];
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4613      	mov	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3308      	adds	r3, #8
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	617b      	str	r3, [r7, #20]
        switch (cmd)
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	2b05      	cmp	r3, #5
 8007572:	d85c      	bhi.n	800762e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007595 	.word	0x08007595
 8007580:	080075d5 	.word	0x080075d5
 8007584:	080075dd 	.word	0x080075dd
 8007588:	080075f1 	.word	0x080075f1
 800758c:	0800760b 	.word	0x0800760b
 8007590:	08007619 	.word	0x08007619
            if (mjpegDecoders[handle]->hasVideo())
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	6859      	ldr	r1, [r3, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3310      	adds	r3, #16
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4608      	mov	r0, r1
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d039      	beq.n	800762c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2201      	movs	r2, #1
 80075bc:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2200      	movs	r2, #0
 80075d0:	609a      	str	r2, [r3, #8]
            break;
 80075d2:	e02b      	b.n	800762c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2200      	movs	r2, #0
 80075d8:	775a      	strb	r2, [r3, #29]
            break;
 80075da:	e028      	b.n	800762e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2200      	movs	r2, #0
 80075e6:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	609a      	str	r2, [r3, #8]
            break;
 80075ee:	e01e      	b.n	800762e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2201      	movs	r2, #1
 80075fa:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2200      	movs	r2, #0
 8007606:	609a      	str	r2, [r3, #8]
            break;
 8007608:	e011      	b.n	800762e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2201      	movs	r2, #1
 8007614:	615a      	str	r2, [r3, #20]
            break;
 8007616:	e00a      	b.n	800762e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	bf14      	ite	ne
 800761e:	2301      	movne	r3, #1
 8007620:	2300      	moveq	r3, #0
 8007622:	b2da      	uxtb	r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 800762a:	e000      	b.n	800762e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 800762c:	bf00      	nop
    }
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	0802d390 	.word	0x0802d390
 800763c:	0802d8e0 	.word	0x0802d8e0
 8007640:	0802d164 	.word	0x0802d164

08007644 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x3c>)
 8007656:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x40>)
 8007658:	2179      	movs	r1, #121	; 0x79
 800765a:	480b      	ldr	r0, [pc, #44]	; (8007688 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x44>)
 800765c:	f023 ff9e 	bl	802b59c <__assert_func>
        const Stream& stream = streams[handle];
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	4613      	mov	r3, r2
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	3308      	adds	r3, #8
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4413      	add	r3, r2
 8007670:	3304      	adds	r3, #4
 8007672:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
    }
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	0802d390 	.word	0x0802d390
 8007684:	0802dab4 	.word	0x0802dab4
 8007688:	0802d164 	.word	0x0802d164

0800768c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d006      	beq.n	80076ac <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 80076a0:	4a0d      	ldr	r2, [pc, #52]	; (80076d8 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 80076a2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80076a6:	480d      	ldr	r0, [pc, #52]	; (80076dc <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 80076a8:	f023 ff78 	bl	802b59c <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	6858      	ldr	r0, [r3, #4]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3330      	adds	r3, #48	; 0x30
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4798      	blx	r3
    }
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	0802d390 	.word	0x0802d390
 80076d8:	0802dc6c 	.word	0x0802dc6c
 80076dc:	0802d164 	.word	0x0802d164

080076e0 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1e>
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x40>)
 80076f2:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x44>)
 80076f4:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80076f8:	480b      	ldr	r0, [pc, #44]	; (8007728 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x48>)
 80076fa:	f023 ff4f 	bl	802b59c <__assert_func>
        Stream& stream = streams[handle];
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	3308      	adds	r3, #8
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	3304      	adds	r3, #4
 8007710:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	7f5b      	ldrb	r3, [r3, #29]
    }
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	0802d390 	.word	0x0802d390
 8007724:	0802de1c 	.word	0x0802de1c
 8007728:	0802d164 	.word	0x0802d164

0800772c <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>:

    Handle getFreeHandle()
 800772c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772e:	b08d      	sub	sp, #52	; 0x34
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8007734:	2300      	movs	r3, #0
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007738:	e034      	b.n	80077a4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x78>
        {
            if (streams[i].isActive == false)
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800773e:	4613      	mov	r3, r2
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	3328      	adds	r3, #40	; 0x28
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d126      	bne.n	800779e <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x72>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8007750:	f107 0308 	add.w	r3, r7, #8
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff fc9b 	bl	8007090 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 800775a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800775c:	4613      	mov	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3308      	adds	r3, #8
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	3304      	adds	r3, #4
 800776c:	f107 0408 	add.w	r4, r7, #8
 8007770:	469c      	mov	ip, r3
 8007772:	f104 0e20 	add.w	lr, r4, #32
 8007776:	4665      	mov	r5, ip
 8007778:	4626      	mov	r6, r4
 800777a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800777c:	6028      	str	r0, [r5, #0]
 800777e:	6069      	str	r1, [r5, #4]
 8007780:	60aa      	str	r2, [r5, #8]
 8007782:	60eb      	str	r3, [r5, #12]
 8007784:	3410      	adds	r4, #16
 8007786:	f10c 0c10 	add.w	ip, ip, #16
 800778a:	4574      	cmp	r4, lr
 800778c:	d1f3      	bne.n	8007776 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x4a>
 800778e:	4663      	mov	r3, ip
 8007790:	4622      	mov	r2, r4
 8007792:	8811      	ldrh	r1, [r2, #0]
 8007794:	7892      	ldrb	r2, [r2, #2]
 8007796:	8019      	strh	r1, [r3, #0]
 8007798:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	e00c      	b.n	80077b8 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	3301      	adds	r3, #1
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0c7      	beq.n	800773a <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0xe>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x94>)
 80077ac:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x98>)
 80077ae:	f240 11c5 	movw	r1, #453	; 0x1c5
 80077b2:	4805      	ldr	r0, [pc, #20]	; (80077c8 <_ZN25DedicatedBufferControllerILm1ELm640ELm480ELm1280ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x9c>)
 80077b4:	f023 fef2 	bl	802b59c <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 80077b8:	4618      	mov	r0, r3
 80077ba:	3734      	adds	r7, #52	; 0x34
 80077bc:	46bd      	mov	sp, r7
 80077be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c0:	0802dfa8 	.word	0x0802dfa8
 80077c4:	0802dfd8 	.word	0x0802dfd8
 80077c8:	0802d164 	.word	0x0802d164

080077cc <_GLOBAL__sub_I_mjpegdecoder1>:
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077d4:	2001      	movs	r0, #1
 80077d6:	f7ff fcf3 	bl	80071c0 <_Z41__static_initialization_and_destruction_0ii>
 80077da:	bd80      	pop	{r7, pc}

080077dc <_GLOBAL__sub_D_mjpegdecoder1>:
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
 80077e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077e4:	2000      	movs	r0, #0
 80077e6:	f7ff fceb 	bl	80071c0 <_Z41__static_initialization_and_destruction_0ii>
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80077ec:	2904      	cmp	r1, #4
 80077ee:	d00a      	beq.n	8007806 <USBH_UserProcess+0x1a>
 80077f0:	2905      	cmp	r1, #5
 80077f2:	d004      	beq.n	80077fe <USBH_UserProcess+0x12>
 80077f4:	2902      	cmp	r1, #2
 80077f6:	d105      	bne.n	8007804 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <USBH_UserProcess+0x20>)
 80077fa:	7019      	strb	r1, [r3, #0]
  break;
 80077fc:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80077fe:	4b03      	ldr	r3, [pc, #12]	; (800780c <USBH_UserProcess+0x20>)
 8007800:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007802:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007804:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8007806:	4b01      	ldr	r3, [pc, #4]	; (800780c <USBH_UserProcess+0x20>)
 8007808:	2201      	movs	r2, #1
 800780a:	e7fa      	b.n	8007802 <USBH_UserProcess+0x16>
 800780c:	240098a8 	.word	0x240098a8

08007810 <MX_USB_HOST_Init>:
{
 8007810:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8007812:	2200      	movs	r2, #0
 8007814:	490b      	ldr	r1, [pc, #44]	; (8007844 <MX_USB_HOST_Init+0x34>)
 8007816:	480c      	ldr	r0, [pc, #48]	; (8007848 <MX_USB_HOST_Init+0x38>)
 8007818:	f00d fc00 	bl	801501c <USBH_Init>
 800781c:	b108      	cbz	r0, 8007822 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800781e:	f7fa fa32 	bl	8001c86 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8007822:	490a      	ldr	r1, [pc, #40]	; (800784c <MX_USB_HOST_Init+0x3c>)
 8007824:	4808      	ldr	r0, [pc, #32]	; (8007848 <MX_USB_HOST_Init+0x38>)
 8007826:	f00d fc31 	bl	801508c <USBH_RegisterClass>
 800782a:	b108      	cbz	r0, 8007830 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800782c:	f7fa fa2b 	bl	8001c86 <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8007830:	4805      	ldr	r0, [pc, #20]	; (8007848 <MX_USB_HOST_Init+0x38>)
 8007832:	f00d fc5d 	bl	80150f0 <USBH_Start>
 8007836:	b118      	cbz	r0, 8007840 <MX_USB_HOST_Init+0x30>
}
 8007838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800783c:	f7fa ba23 	b.w	8001c86 <Error_Handler>
}
 8007840:	bd08      	pop	{r3, pc}
 8007842:	bf00      	nop
 8007844:	080077ed 	.word	0x080077ed
 8007848:	240098ac 	.word	0x240098ac
 800784c:	24000044 	.word	0x24000044

08007850 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007850:	b530      	push	{r4, r5, lr}
 8007852:	b0bb      	sub	sp, #236	; 0xec
 8007854:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007856:	2214      	movs	r2, #20
 8007858:	2100      	movs	r1, #0
 800785a:	a803      	add	r0, sp, #12
 800785c:	f024 f891 	bl	802b982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007860:	22c8      	movs	r2, #200	; 0xc8
 8007862:	2100      	movs	r1, #0
 8007864:	a808      	add	r0, sp, #32
 8007866:	f024 f88c 	bl	802b982 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	4b22      	ldr	r3, [pc, #136]	; (80078f8 <HAL_HCD_MspInit+0xa8>)
 800786e:	429a      	cmp	r2, r3
 8007870:	d140      	bne.n	80078f4 <HAL_HCD_MspInit+0xa4>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007872:	2300      	movs	r3, #0
 8007874:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007878:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800787a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800787e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8007882:	932b      	str	r3, [sp, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007884:	f007 f88e 	bl	800e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8007888:	b108      	cbz	r0, 800788e <HAL_HCD_MspInit+0x3e>
    {
      Error_Handler();
 800788a:	f7fa f9fc 	bl	8001c86 <Error_Handler>

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800788e:	4c1b      	ldr	r4, [pc, #108]	; (80078fc <HAL_HCD_MspInit+0xac>)
    HAL_PWREx_EnableUSBVoltageDetector();
 8007890:	f005 ff8e 	bl	800d7b0 <HAL_PWREx_EnableUSBVoltageDetector>
    /**USB_OTG_HS GPIO Configuration
    PB15     ------> USB_OTG_HS_DP
    PB14     ------> USB_OTG_HS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007894:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007898:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800789a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800789e:	4818      	ldr	r0, [pc, #96]	; (8007900 <HAL_HCD_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078a0:	f043 0302 	orr.w	r3, r3, #2
 80078a4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80078a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b4:	2302      	movs	r3, #2
 80078b6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80078c0:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c2:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 80078c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c8:	f003 fabc 	bl	800ae44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80078cc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80078d0:	204d      	movs	r0, #77	; 0x4d
 80078d2:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80078d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80078d8:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80078da:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80078de:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80078e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e6:	9302      	str	r3, [sp, #8]
 80078e8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80078ea:	f002 fec9 	bl	800a680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80078ee:	204d      	movs	r0, #77	; 0x4d
 80078f0:	f002 fef8 	bl	800a6e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80078f4:	b03b      	add	sp, #236	; 0xec
 80078f6:	bd30      	pop	{r4, r5, pc}
 80078f8:	40040000 	.word	0x40040000
 80078fc:	58024400 	.word	0x58024400
 8007900:	58020400 	.word	0x58020400

08007904 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8007904:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007908:	f00d be25 	b.w	8015556 <USBH_LL_IncTimer>

0800790c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800790c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007910:	f00d be40 	b.w	8015594 <USBH_LL_Connect>

08007914 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8007914:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007918:	f00d be51 	b.w	80155be <USBH_LL_Disconnect>

0800791c <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800791c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007920:	f00d be6d 	b.w	80155fe <USBH_LL_NotifyURBChange>

08007924 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8007924:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007928:	f00d be23 	b.w	8015572 <USBH_LL_PortEnabled>

0800792c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800792c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007930:	f00d be2c 	b.w	801558c <USBH_LL_PortDisabled>

08007934 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007934:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8007936:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
{
 800793a:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 800793c:	b9e3      	cbnz	r3, 8007978 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800793e:	480f      	ldr	r0, [pc, #60]	; (800797c <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8007940:	4a0f      	ldr	r2, [pc, #60]	; (8007980 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;
 8007942:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8007946:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8007948:	2210      	movs	r2, #16
  hhcd_USB_OTG_HS.pData = phost;
 800794a:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800794e:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8007950:	2201      	movs	r2, #1
  hhcd_USB_OTG_HS.Init.dma_enable = ENABLE;
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8007952:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8007954:	6343      	str	r3, [r0, #52]	; 0x34
  hhcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 8007956:	e9c0 2203 	strd	r2, r2, [r0, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800795a:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800795c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8007960:	f003 fc59 	bl	800b216 <HAL_HCD_Init>
 8007964:	b108      	cbz	r0, 800796a <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8007966:	f7fa f98e 	bl	8001c86 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800796a:	4804      	ldr	r0, [pc, #16]	; (800797c <USBH_LL_Init+0x48>)
 800796c:	f004 f907 	bl	800bb7e <HAL_HCD_GetCurrentFrame>
 8007970:	4601      	mov	r1, r0
 8007972:	4620      	mov	r0, r4
 8007974:	f00d fdec 	bl	8015550 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8007978:	2000      	movs	r0, #0
 800797a:	bd10      	pop	{r4, pc}
 800797c:	24009c90 	.word	0x24009c90
 8007980:	40040000 	.word	0x40040000

08007984 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007984:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007986:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800798a:	f004 f8fb 	bl	800bb84 <HAL_HCD_GetCurrentSpeed>
 800798e:	2803      	cmp	r0, #3
 8007990:	bf28      	it	cs
 8007992:	2001      	movcs	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8007994:	b2c0      	uxtb	r0, r0
 8007996:	bd08      	pop	{r3, pc}

08007998 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007998:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800799c:	f004 b8ea 	b.w	800bb74 <HAL_HCD_HC_GetXferCount>

080079a0 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80079a0:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80079a4:	f004 b8e0 	b.w	800bb68 <HAL_HCD_HC_GetURBState>

080079a8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079a8:	b508      	push	{r3, lr}
  if (phost->id == HOST_HS) {
 80079aa:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80079ae:	b913      	cbnz	r3, 80079b6 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 80079b0:	4608      	mov	r0, r1
 80079b2:	f000 f879 	bl	8007aa8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079b6:	20c8      	movs	r0, #200	; 0xc8
 80079b8:	f002 fa36 	bl	8009e28 <HAL_Delay>
  return USBH_OK;
}
 80079bc:	2000      	movs	r0, #0
 80079be:	bd08      	pop	{r3, pc}

080079c0 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079c0:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80079c4:	202c      	movs	r0, #44	; 0x2c
 80079c6:	fb00 3101 	mla	r1, r0, r1, r3
 80079ca:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80079ce:	b11b      	cbz	r3, 80079d8 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079d0:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80079d4:	2000      	movs	r0, #0
 80079d6:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80079d8:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 80079dc:	e7fa      	b.n	80079d4 <USBH_LL_SetToggle+0x14>

080079de <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079de:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 80079e2:	222c      	movs	r2, #44	; 0x2c
 80079e4:	fb02 3101 	mla	r1, r2, r1, r3
 80079e8:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80079ec:	b113      	cbz	r3, 80079f4 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80079ee:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 80079f2:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80079f4:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle;
}
 80079f8:	4770      	bx	lr

080079fa <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80079fa:	f002 ba15 	b.w	8009e28 <HAL_Delay>
	...

08007a00 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8007a00:	2803      	cmp	r0, #3
 8007a02:	bf9a      	itte	ls
 8007a04:	4b01      	ldrls	r3, [pc, #4]	; (8007a0c <USBH_Get_USB_Status+0xc>)
 8007a06:	5c18      	ldrbls	r0, [r3, r0]
{
 8007a08:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007a0a:	4770      	bx	lr
 8007a0c:	0802ef88 	.word	0x0802ef88

08007a10 <USBH_LL_Start>:
{
 8007a10:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8007a12:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a16:	f004 f87d 	bl	800bb14 <HAL_HCD_Start>
}
 8007a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8007a1e:	f7ff bfef 	b.w	8007a00 <USBH_Get_USB_Status>

08007a22 <USBH_LL_Stop>:
{
 8007a22:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8007a24:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a28:	f004 f889 	bl	800bb3e <HAL_HCD_Stop>
}
 8007a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8007a30:	f7ff bfe6 	b.w	8007a00 <USBH_Get_USB_Status>

08007a34 <USBH_LL_ResetPort>:
{
 8007a34:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007a36:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a3a:	f004 f892 	bl	800bb62 <HAL_HCD_ResetPort>
}
 8007a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8007a42:	f7ff bfdd 	b.w	8007a00 <USBH_Get_USB_Status>

08007a46 <USBH_LL_OpenPipe>:
{
 8007a46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a48:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8007a4c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 8007a50:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a54:	9400      	str	r4, [sp, #0]
 8007a56:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8007a5a:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a5e:	f003 fb92 	bl	800b186 <HAL_HCD_HC_Init>
}
 8007a62:	b004      	add	sp, #16
 8007a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8007a68:	f7ff bfca 	b.w	8007a00 <USBH_Get_USB_Status>

08007a6c <USBH_LL_ClosePipe>:
{
 8007a6c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a6e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a72:	f003 fbbe 	bl	800b1f2 <HAL_HCD_HC_Halt>
}
 8007a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8007a7a:	f7ff bfc1 	b.w	8007a00 <USBH_Get_USB_Status>

08007a7e <USBH_LL_SubmitURB>:
{
 8007a7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a80:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8007a84:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8007a88:	f89d 4020 	ldrb.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007a8c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8007a90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a92:	e9cd 4500 	strd	r4, r5, [sp]
 8007a96:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a9a:	f003 fc09 	bl	800b2b0 <HAL_HCD_HC_SubmitRequest>
}
 8007a9e:	b004      	add	sp, #16
 8007aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007aa4:	f7ff bfac 	b.w	8007a00 <USBH_Get_USB_Status>

08007aa8 <MX_DriverVbusHS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_10,(GPIO_PinState)data);
 8007aa8:	fab0 f280 	clz	r2, r0
 8007aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ab0:	4801      	ldr	r0, [pc, #4]	; (8007ab8 <MX_DriverVbusHS+0x10>)
 8007ab2:	0952      	lsrs	r2, r2, #5
 8007ab4:	f003 bb56 	b.w	800b164 <HAL_GPIO_WritePin>
 8007ab8:	58021400 	.word	0x58021400

08007abc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8007ac8:	887b      	ldrh	r3, [r7, #2]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d010      	beq.n	8007af0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	dc13      	bgt.n	8007afa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d005      	beq.n	8007ae6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8007ada:	e00e      	b.n	8007afa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8007adc:	f001 ff68 	bl	80099b0 <_ZN17TypedTextDatabase8getFontsEv>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	e00a      	b.n	8007afc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8007ae6:	f001 ff63 	bl	80099b0 <_ZN17TypedTextDatabase8getFontsEv>
 8007aea:	4603      	mov	r3, r0
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	e005      	b.n	8007afc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8007af0:	f001 ff5e 	bl	80099b0 <_ZN17TypedTextDatabase8getFontsEv>
 8007af4:	4603      	mov	r3, r0
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	e000      	b.n	8007afc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8007afa:	2300      	movs	r3, #0
    }
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
    return bitmap_database;
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	0802efa0 	.word	0x0802efa0

08007b18 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8007b1c:	2305      	movs	r3, #5
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
    {
 8007b30:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
    }
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	0802f27c 	.word	0x0802f27c

08007b48 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
    }
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ffe9 	bl	8007b28 <_ZN8touchgfx4FontD1Ev>
 8007b56:	2114      	movs	r1, #20
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f023 fcf0 	bl	802b53e <_ZdlPvj>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e010      	b.n	8007ba0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	681c      	ldr	r4, [r3, #0]
 8007b8e:	f107 030f 	add.w	r3, r7, #15
 8007b92:	f107 0210 	add.w	r2, r7, #16
 8007b96:	8879      	ldrh	r1, [r7, #2]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	47a0      	blx	r4
 8007b9c:	6178      	str	r0, [r7, #20]
        return glyph;
 8007b9e:	697b      	ldr	r3, [r7, #20]
    }
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}

08007ba8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	89db      	ldrh	r3, [r3, #14]
    }
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8a1b      	ldrh	r3, [r3, #16]
    }
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	88db      	ldrh	r3, [r3, #6]
    }
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	889b      	ldrh	r3, [r3, #4]
    }
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7a9b      	ldrb	r3, [r3, #10]
 8007c14:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007c18:	b2db      	uxtb	r3, r3
    }
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7a9b      	ldrb	r3, [r3, #10]
 8007c32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007c36:	b2db      	uxtb	r3, r3
    }
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4a05      	ldr	r2, [pc, #20]	; (8007c64 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff ff67 	bl	8007b28 <_ZN8touchgfx4FontD1Ev>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	08030084 	.word	0x08030084

08007c68 <_ZN8touchgfx9ConstFontD0Ev>:
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ffe7 	bl	8007c44 <_ZN8touchgfx9ConstFontD1Ev>
 8007c76:	211c      	movs	r1, #28
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f023 fc60 	bl	802b53e <_ZdlPvj>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ffd3 	bl	8007c44 <_ZN8touchgfx9ConstFontD1Ev>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0802f064 	.word	0x0802f064

08007cac <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff ffe7 	bl	8007c88 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007cba:	212c      	movs	r1, #44	; 0x2c
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f023 fc3e 	bl	802b53e <_ZdlPvj>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
    {
 8007cd4:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
    }
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	0802f00c 	.word	0x0802f00c

08007cec <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
    }
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ffe9 	bl	8007ccc <_ZN8touchgfx9TypedTextD1Ev>
 8007cfa:	2108      	movs	r1, #8
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f023 fc1e 	bl	802b53e <_ZdlPvj>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4618      	mov	r0, r3
 8007d32:	f012 fe5f 	bl	801a9f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8007d48:	4a07      	ldr	r2, [pc, #28]	; (8007d68 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	721a      	strb	r2, [r3, #8]
    {
    }
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	0802f040 	.word	0x0802f040

08007d6c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
    {
 8007d74:	4a04      	ldr	r2, [pc, #16]	; (8007d88 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	601a      	str	r2, [r3, #0]
    }
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	0802f040 	.word	0x0802f040

08007d8c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
    }
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff ffe9 	bl	8007d6c <_ZN8touchgfx10TransitionD1Ev>
 8007d9a:	210c      	movs	r1, #12
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f023 fbce 	bl	802b53e <_ZdlPvj>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
    {
    }
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    {
    }
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
    {
    }
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8007df0:	f012 fdc2 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 8007df4:	4603      	mov	r3, r0
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	323c      	adds	r2, #60	; 0x3c
 8007dfa:	6812      	ldr	r2, [r2, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	4790      	blx	r2
    }
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	605a      	str	r2, [r3, #4]
    }
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f012 feb2 	bl	801ab98 <_ZN8touchgfx11ApplicationC1Ev>
 8007e34:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8007e4e:	6013      	str	r3, [r2, #0]
    }
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	0802ed1c 	.word	0x0802ed1c
 8007e60:	2402aeb8 	.word	0x2402aeb8

08007e64 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	601a      	str	r2, [r3, #0]
    }
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	721a      	strb	r2, [r3, #8]
    }
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	605a      	str	r2, [r3, #4]
    }
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff ffac 	bl	8007e24 <_ZN8touchgfx14MVPApplicationC1Ev>
 8007ecc:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 f8a5 	bl	8008028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8007eee:	f7fc fff9 	bl	8004ee4 <_ZN8touchgfx3HAL11getInstanceEv>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	3208      	adds	r2, #8
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	2100      	movs	r1, #0
 8007efc:	4618      	mov	r0, r3
 8007efe:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8007f00:	2000      	movs	r0, #0
 8007f02:	f001 fcdd 	bl	80098c0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8007f06:	f7fe fbe9 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f01b ffbc 	bl	8023e8a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8007f12:	f7fe fbe3 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f01c f831 	bl	8023f80 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	0802ecb0 	.word	0x0802ecb0

08007f2c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff ffe9 	bl	8007f2c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	3208      	adds	r2, #8
 8007f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b089      	sub	sp, #36	; 0x24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8007f8a:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	f107 0008 	add.w	r0, r7, #8
 8007f96:	f107 0318 	add.w	r3, r7, #24
 8007f9a:	cb0c      	ldmia	r3, {r2, r3}
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	f000 f85f 	bl	8008060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8007fa2:	f107 0308 	add.w	r3, r7, #8
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7ff ffcb 	bl	8007f44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe f914 	bl	80061e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8007fc4:	bf00      	nop
 8007fc6:	3724      	adds	r7, #36	; 0x24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd90      	pop	{r4, r7, pc}
 8007fcc:	08007fd1 	.word	0x08007fd1

08007fd0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4b04      	ldr	r3, [pc, #16]	; (8008000 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8007ff0:	4804      	ldr	r0, [pc, #16]	; (8008004 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8007ff2:	f000 f867 	bl	80080c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	2402aeac 	.word	0x2402aeac
 8008004:	2402aea8 	.word	0x2402aea8

08008008 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	4a04      	ldr	r2, [pc, #16]	; (8008024 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	0802ed70 	.word	0x0802ed70

08008028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff ffe8 	bl	8008008 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008038:	4a08      	ldr	r2, [pc, #32]	; (800805c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	60da      	str	r2, [r3, #12]
    }
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	0802ed04 	.word	0x0802ed04

08008060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4639      	mov	r1, r7
 800806c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff ffc8 	bl	8008008 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8008078:	4a08      	ldr	r2, [pc, #32]	; (800809c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	605a      	str	r2, [r3, #4]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3308      	adds	r3, #8
 8008088:	463a      	mov	r2, r7
 800808a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800808e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	0802ed04 	.word	0x0802ed04

080080a0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fe48 	bl	8007d40 <_ZN8touchgfx10TransitionC1Ev>
 80080b0:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	0802f01c 	.word	0x0802f01c

080080c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80080c4:	b590      	push	{r4, r7, lr}
 80080c6:	b08f      	sub	sp, #60	; 0x3c
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3320      	adds	r3, #32
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	4603      	mov	r3, r0
 80080e6:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 80080ea:	d205      	bcs.n	80080f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80080ec:	4b7d      	ldr	r3, [pc, #500]	; (80082e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80080ee:	4a7e      	ldr	r2, [pc, #504]	; (80082e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80080f0:	21a3      	movs	r1, #163	; 0xa3
 80080f2:	487e      	ldr	r0, [pc, #504]	; (80082ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80080f4:	f023 fa52 	bl	802b59c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3320      	adds	r3, #32
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4610      	mov	r0, r2
 8008108:	4798      	blx	r3
 800810a:	4603      	mov	r3, r0
 800810c:	2b0f      	cmp	r3, #15
 800810e:	d805      	bhi.n	800811c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8008110:	4b77      	ldr	r3, [pc, #476]	; (80082f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8008112:	4a75      	ldr	r2, [pc, #468]	; (80082e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008114:	21a4      	movs	r1, #164	; 0xa4
 8008116:	4875      	ldr	r0, [pc, #468]	; (80082ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8008118:	f023 fa40 	bl	802b59c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3320      	adds	r3, #32
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d805      	bhi.n	8008140 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8008134:	4b6f      	ldr	r3, [pc, #444]	; (80082f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8008136:	4a6c      	ldr	r2, [pc, #432]	; (80082e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8008138:	21a5      	movs	r1, #165	; 0xa5
 800813a:	486c      	ldr	r0, [pc, #432]	; (80082ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800813c:	f023 fa2e 	bl	802b59c <__assert_func>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800814c:	f012 fc14 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 8008150:	4603      	mov	r3, r0
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fde6 	bl	8007d24 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4610      	mov	r0, r2
 8008170:	4798      	blx	r3
    if (*currentTrans)
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4610      	mov	r0, r2
 8008188:	4798      	blx	r3
    if (*currentScreen)
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d008      	beq.n	80081a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
    if (*currentPresenter)
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d008      	beq.n	80081be <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3304      	adds	r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4610      	mov	r0, r2
 80081bc:	4798      	blx	r3
    if (*currentScreen)
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4610      	mov	r0, r2
 80081d4:	4798      	blx	r3
    if (*currentPresenter)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d008      	beq.n	80081f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
}
 80081f0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f87d 	bl	80082f8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80081fe:	4603      	mov	r3, r0
 8008200:	4619      	mov	r1, r3
 8008202:	200c      	movs	r0, #12
 8008204:	f7ff fd82 	bl	8007d0c <_ZnwjPv>
 8008208:	4604      	mov	r4, r0
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff ff48 	bl	80080a0 <_ZN8touchgfx12NoTransitionC1Ev>
 8008210:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f880 	bl	800831e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800821e:	4603      	mov	r3, r0
 8008220:	4619      	mov	r1, r3
 8008222:	f44f 7042 	mov.w	r0, #776	; 0x308
 8008226:	f7ff fd71 	bl	8007d0c <_ZnwjPv>
 800822a:	4604      	mov	r4, r0
 800822c:	4620      	mov	r0, r4
 800822e:	f001 fd25 	bl	8009c7c <_ZN11Screen1ViewC1Ev>
 8008232:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f882 	bl	8008344 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8008240:	4603      	mov	r3, r0
 8008242:	4619      	mov	r1, r3
 8008244:	2010      	movs	r0, #16
 8008246:	f7ff fd61 	bl	8007d0c <_ZnwjPv>
 800824a:	4604      	mov	r4, r0
 800824c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800824e:	4620      	mov	r0, r4
 8008250:	f001 fcbc 	bl	8009bcc <_ZN16Screen1PresenterC1ER11Screen1View>
 8008254:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800825a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008260:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008266:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	3304      	adds	r3, #4
 8008272:	e000      	b.n	8008276 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8008274:	2300      	movs	r3, #0
 8008276:	4619      	mov	r1, r3
 8008278:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800827a:	f7ff fdf3 	bl	8007e64 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	3304      	adds	r3, #4
 8008282:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fe08 	bl	8007e9a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800828e:	4618      	mov	r0, r3
 8008290:	f000 f86b 	bl	800836a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69f8      	ldr	r0, [r7, #28]
 80082aa:	4798      	blx	r3
    newPresenter->activate();
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69b8      	ldr	r0, [r7, #24]
 80082b4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80082b6:	6979      	ldr	r1, [r7, #20]
 80082b8:	69f8      	ldr	r0, [r7, #28]
 80082ba:	f014 f939 	bl	801c530 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3310      	adds	r3, #16
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6978      	ldr	r0, [r7, #20]
 80082c8:	4798      	blx	r3
    newTransition->invalidate();
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3314      	adds	r3, #20
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6978      	ldr	r0, [r7, #20]
 80082d4:	4798      	blx	r3
}
 80082d6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80082da:	4618      	mov	r0, r3
 80082dc:	373c      	adds	r7, #60	; 0x3c
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd90      	pop	{r4, r7, pc}
 80082e2:	bf00      	nop
 80082e4:	0802e160 	.word	0x0802e160
 80082e8:	0802e1f0 	.word	0x0802e1f0
 80082ec:	0802e2f4 	.word	0x0802e2f4
 80082f0:	0802e34c 	.word	0x0802e34c
 80082f4:	0802e3f0 	.word	0x0802e3f0

080082f8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	887a      	ldrh	r2, [r7, #2]
 800830e:	4611      	mov	r1, r2
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
 8008314:	4603      	mov	r3, r0
    }
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	887a      	ldrh	r2, [r7, #2]
 8008334:	4611      	mov	r1, r2
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
 800833a:	4603      	mov	r3, r0
    }
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3324      	adds	r3, #36	; 0x24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	887a      	ldrh	r2, [r7, #2]
 800835a:	4611      	mov	r1, r2
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4798      	blx	r3
 8008360:	4603      	mov	r3, r0
    }
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <_ZN8touchgfx12NoTransitionD1Ev>:
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	4a05      	ldr	r2, [pc, #20]	; (80083a8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fce7 	bl	8007d6c <_ZN8touchgfx10TransitionD1Ev>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	0802f01c 	.word	0x0802f01c

080083ac <_ZN8touchgfx12NoTransitionD0Ev>:
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff ffe7 	bl	8008388 <_ZN8touchgfx12NoTransitionD1Ev>
 80083ba:	210c      	movs	r1, #12
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f023 f8be 	bl	802b53e <_ZdlPvj>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	; 0x38
 8008400:	af0a      	add	r7, sp, #40	; 0x28
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	460b      	mov	r3, r1
 800840c:	80fb      	strh	r3, [r7, #6]
 800840e:	4613      	mov	r3, r2
 8008410:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	88b9      	ldrh	r1, [r7, #4]
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800841c:	9308      	str	r3, [sp, #32]
 800841e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008426:	9306      	str	r3, [sp, #24]
 8008428:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800842c:	9305      	str	r3, [sp, #20]
 800842e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800843e:	9302      	str	r3, [sp, #8]
 8008440:	7f3b      	ldrb	r3, [r7, #28]
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	8b3b      	ldrh	r3, [r7, #24]
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	460b      	mov	r3, r1
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	f013 fc04 	bl	801bc58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008450:	4a09      	ldr	r2, [pc, #36]	; (8008478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800845a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008460:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008466:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846c:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	0802f064 	.word	0x0802f064

0800847c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	889b      	ldrh	r3, [r3, #4]
 8008490:	0adb      	lsrs	r3, r3, #11
 8008492:	b29b      	uxth	r3, r3
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4413      	add	r3, r2
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80084ae:	b480      	push	{r7}
 80084b0:	b089      	sub	sp, #36	; 0x24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	460b      	mov	r3, r1
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7b1b      	ldrb	r3, [r3, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e031      	b.n	8008532 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1a      	ldr	r2, [r3, #32]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	7b5b      	ldrb	r3, [r3, #13]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	b21b      	sxth	r3, r3
 80084de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084e2:	b219      	sxth	r1, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	7adb      	ldrb	r3, [r3, #11]
 80084e8:	b21b      	sxth	r3, r3
 80084ea:	430b      	orrs	r3, r1
 80084ec:	b21b      	sxth	r3, r3
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	7b1b      	ldrb	r3, [r3, #12]
 80084fa:	837b      	strh	r3, [r7, #26]
 80084fc:	e013      	b.n	8008526 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	897a      	ldrh	r2, [r7, #10]
 8008504:	429a      	cmp	r2, r3
 8008506:	d103      	bne.n	8008510 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800850e:	e010      	b.n	8008532 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	897a      	ldrh	r2, [r7, #10]
 8008516:	429a      	cmp	r2, r3
 8008518:	d309      	bcc.n	800852e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800851a:	8b7b      	ldrh	r3, [r7, #26]
 800851c:	3b01      	subs	r3, #1
 800851e:	837b      	strh	r3, [r7, #26]
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	3304      	adds	r3, #4
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	8b7b      	ldrh	r3, [r7, #26]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e8      	bne.n	80084fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800852c:	e000      	b.n	8008530 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800852e:	bf00      	nop
        }
    }
    return 0;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3724      	adds	r7, #36	; 0x24
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	887a      	ldrh	r2, [r7, #2]
 800854e:	801a      	strh	r2, [r3, #0]
    {
    }
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
    {
        return dragNewX - dragOldX;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008574:	b29b      	uxth	r3, r3
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	b29b      	uxth	r3, r3
 800857a:	b21b      	sxth	r3, r3
    }
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    {
        return dragNewY - dragOldY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008596:	b29a      	uxth	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	b21b      	sxth	r3, r3
    }
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
          visible(true)
 80085bc:	4a14      	ldr	r2, [pc, #80]	; (8008610 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
        : rect(),
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd f818 	bl	80055fc <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	330c      	adds	r3, #12
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fd f813 	bl	80055fc <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	0803001c 	.word	0x0803001c

08008614 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	4608      	mov	r0, r1
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	4603      	mov	r3, r0
 8008624:	817b      	strh	r3, [r7, #10]
 8008626:	460b      	mov	r3, r1
 8008628:	813b      	strh	r3, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800862e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008632:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008636:	4619      	mov	r1, r3
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f80c 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800863e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f822 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	807b      	strh	r3, [r7, #2]
 8008662:	4613      	mov	r3, r2
 8008664:	803b      	strh	r3, [r7, #0]
        setX(x);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3330      	adds	r3, #48	; 0x30
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008672:	4611      	mov	r1, r2
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
        setY(y);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3334      	adds	r3, #52	; 0x34
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008684:	4611      	mov	r1, r2
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
    }
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	807b      	strh	r3, [r7, #2]
 800869e:	4613      	mov	r3, r2
 80086a0:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3338      	adds	r3, #56	; 0x38
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80086ae:	4611      	mov	r1, r2
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
        setHeight(height);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	333c      	adds	r3, #60	; 0x3c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80086c0:	4611      	mov	r1, r2
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	4798      	blx	r3
    }
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
    {
 8008710:	4a06      	ldr	r2, [pc, #24]	; (800872c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3304      	adds	r3, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fcb0 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
    }
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	08030120 	.word	0x08030120

08008730 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
    }
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ffe5 	bl	8008708 <_ZN8touchgfx6ScreenD1Ev>
 800873e:	213c      	movs	r1, #60	; 0x3c
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f022 fefc 	bl	802b53e <_ZdlPvj>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
    {
    }
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
    {
    }
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
    {
    }
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
    {
    }
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3304      	adds	r3, #4
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f00e fb5d 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <_ZN8touchgfx6WidgetC1Ev>:
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fee6 	bl	80085b4 <_ZN8touchgfx8DrawableC1Ev>
 80087e8:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	0802ee50 	.word	0x0802ee50

080087fc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4618      	mov	r0, r3
 8008808:	2326      	movs	r3, #38	; 0x26
 800880a:	461a      	mov	r2, r3
 800880c:	2100      	movs	r1, #0
 800880e:	f023 f8b8 	bl	802b982 <memset>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff ffdf 	bl	80087d8 <_ZN8touchgfx6WidgetC1Ev>
 800881a:	4a09      	ldr	r2, [pc, #36]	; (8008840 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	22ff      	movs	r2, #255	; 0xff
 8008824:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3328      	adds	r3, #40	; 0x28
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd fe01 	bl	8006436 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	0802fe0c 	.word	0x0802fe0c

08008844 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800886c:	4a06      	ldr	r2, [pc, #24]	; (8008888 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	887a      	ldrh	r2, [r7, #2]
 8008876:	809a      	strh	r2, [r3, #4]
    }
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	0802f00c 	.word	0x0802f00c

0800888c <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800888c:	b590      	push	{r4, r7, lr}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6178      	str	r0, [r7, #20]
 8008894:	460b      	mov	r3, r1
 8008896:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fd fe53 	bl	800654c <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3384      	adds	r3, #132	; 0x84
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	697c      	ldr	r4, [r7, #20]
 80088b0:	463a      	mov	r2, r7
 80088b2:	6979      	ldr	r1, [r7, #20]
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80088bc:	463a      	mov	r2, r7
 80088be:	ca07      	ldmia	r2, {r0, r1, r2}
 80088c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80088c4:	bf00      	nop
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd90      	pop	{r4, r7, pc}

080088cc <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6178      	str	r0, [r7, #20]
 80088d4:	460b      	mov	r3, r1
 80088d6:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fd fe42 	bl	800656a <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3384      	adds	r3, #132	; 0x84
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	697c      	ldr	r4, [r7, #20]
 80088f0:	463a      	mov	r2, r7
 80088f2:	6979      	ldr	r1, [r7, #20]
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80088fc:	463a      	mov	r2, r7
 80088fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	bd90      	pop	{r4, r7, pc}

0800890c <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7fc fe70 	bl	80055fc <_ZN8touchgfx4RectC1Ev>
    }
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8008944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8008950:	687e      	ldr	r6, [r7, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3334      	adds	r3, #52	; 0x34
 8008958:	681c      	ldr	r4, [r3, #0]
 800895a:	887d      	ldrh	r5, [r7, #2]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f867 	bl	8008a30 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8008962:	4603      	mov	r3, r0
 8008964:	60fb      	str	r3, [r7, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d105      	bne.n	800897a <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800896e:	4b1b      	ldr	r3, [pc, #108]	; (80089dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8008970:	4a1b      	ldr	r2, [pc, #108]	; (80089e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8008972:	216c      	movs	r1, #108	; 0x6c
 8008974:	481b      	ldr	r0, [pc, #108]	; (80089e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8008976:	f022 fe11 	bl	802b59c <__assert_func>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	889a      	ldrh	r2, [r3, #4]
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	bf34      	ite	cc
 800898a:	2301      	movcc	r3, #1
 800898c:	2300      	movcs	r3, #0
 800898e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8008994:	4b15      	ldr	r3, [pc, #84]	; (80089ec <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8008996:	4a12      	ldr	r2, [pc, #72]	; (80089e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8008998:	216d      	movs	r1, #109	; 0x6d
 800899a:	4812      	ldr	r0, [pc, #72]	; (80089e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800899c:	f022 fdfe 	bl	802b59c <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80089a0:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 80089a6:	6819      	ldr	r1, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	889b      	ldrh	r3, [r3, #4]
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	440b      	add	r3, r1
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	3230      	adds	r2, #48	; 0x30
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	4790      	blx	r2
 80089c2:	4603      	mov	r3, r0
 80089c4:	1aeb      	subs	r3, r5, r3
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	b21b      	sxth	r3, r3
 80089ca:	4619      	mov	r1, r3
 80089cc:	4630      	mov	r0, r6
 80089ce:	47a0      	blx	r4
    }
 80089d0:	bf00      	nop
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d8:	2402aebc 	.word	0x2402aebc
 80089dc:	0802e494 	.word	0x0802e494
 80089e0:	0802e4d8 	.word	0x0802e4d8
 80089e4:	0802e514 	.word	0x0802e514
 80089e8:	2402aec0 	.word	0x2402aec0
 80089ec:	0802e56c 	.word	0x0802e56c
 80089f0:	2402aec4 	.word	0x2402aec4

080089f4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	807b      	strh	r3, [r7, #2]
 8008a00:	4613      	mov	r3, r2
 8008a02:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3330      	adds	r3, #48	; 0x30
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8008a12:	4610      	mov	r0, r2
 8008a14:	4798      	blx	r3
        setBaselineY(baselineY);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3364      	adds	r3, #100	; 0x64
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008a22:	4611      	mov	r1, r2
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	4798      	blx	r3
    }
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3328      	adds	r3, #40	; 0x28
    }
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008a50:	2300      	movs	r3, #0
    }
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af02      	add	r7, sp, #8
 8008a64:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	f7fd fced 	bl	8006454 <_ZN8touchgfx4RectC1Essss>
              text(0)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	609a      	str	r2, [r3, #8]
        {
        }
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3328      	adds	r3, #40	; 0x28
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff f914 	bl	8007ccc <_ZN8touchgfx9TypedTextD1Ev>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd fe76 	bl	8006798 <_ZN8touchgfx6WidgetD1Ev>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	0802fd7c 	.word	0x0802fd7c

08008abc <_ZN8touchgfx8TextAreaD0Ev>:
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff ffe1 	bl	8008a8c <_ZN8touchgfx8TextAreaD1Ev>
 8008aca:	2148      	movs	r1, #72	; 0x48
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f022 fd36 	bl	802b53e <_ZdlPvj>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fd fcf4 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff ffad 	bl	8008a5e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	4a05      	ldr	r2, [pc, #20]	; (8008b2c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff ffb5 	bl	8008a8c <_ZN8touchgfx8TextAreaD1Ev>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	0802fe74 	.word	0x0802fe74

08008b30 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff ffe7 	bl	8008b0c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8008b3e:	2148      	movs	r1, #72	; 0x48
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f022 fcfc 	bl	802b53e <_ZdlPvj>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
     *
     * @return The display mode.
     *
     * @see DisplayMode, setDisplayMode
     */
    virtual DisplayMode getDisplayMode() const
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
    {
        return displayMode;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    }
 8008b96:	4618      	mov	r0, r3
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
    /**
     * Gets text width of the currently displayed DigitalClock.
     *
     * @return The text width of the currently displayed DigitalClock.
     */
    virtual uint16_t getTextWidth() const
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
    {
        return text.getTextWidth();
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3334      	adds	r3, #52	; 0x34
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f00f fdb4 	bl	801871c <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8008bb4:	4603      	mov	r3, r0
    }
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:

    virtual void invalidateContent() const
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
    {
        if (getAlpha() > 0)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	33b0      	adds	r3, #176	; 0xb0
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x2c>
        {
            AbstractClock::invalidateContent();
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fd fc75 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4618      	mov	r0, r3
 8008c02:	2326      	movs	r3, #38	; 0x26
 8008c04:	461a      	mov	r2, r3
 8008c06:	2100      	movs	r1, #0
 8008c08:	f022 febb 	bl	802b982 <memset>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff fde2 	bl	80087d8 <_ZN8touchgfx6WidgetC1Ev>
 8008c14:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	8812      	ldrh	r2, [r2, #0]
 8008c20:	84da      	strh	r2, [r3, #38]	; 0x26
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	22ff      	movs	r2, #255	; 0xff
 8008c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f010 f967 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	0802ff04 	.word	0x0802ff04

08008c40 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	4a05      	ldr	r2, [pc, #20]	; (8008c60 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff fd59 	bl	8008708 <_ZN8touchgfx6ScreenD1Ev>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	0802f1b8 	.word	0x0802f1b8

08008c64 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff ffe7 	bl	8008c40 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8008c72:	2140      	movs	r1, #64	; 0x40
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f022 fc62 	bl	802b53e <_ZdlPvj>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase()
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b093      	sub	sp, #76	; 0x4c
 8008c88:	af02      	add	r7, sp, #8
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f9e0 	bl	8009054 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8008c94:	4ac9      	ldr	r2, [pc, #804]	; (8008fbc <_ZN15Screen1ViewBaseC1Ev+0x338>)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3340      	adds	r3, #64	; 0x40
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff fdac 	bl	80087fc <_ZN8touchgfx3BoxC1Ev>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	336c      	adds	r3, #108	; 0x6c
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fa77 	bl	800919c <_ZN8touchgfx9DraggableINS_12DigitalClockEEC1Ev>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f00e fd6b 	bl	8017790 <_ZN8touchgfx6SliderC1Ev>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f00d fd2f 	bl	8016724 <_ZN8touchgfx11BoxProgressC1Ev>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f503 7437 	add.w	r4, r3, #732	; 0x2dc
 8008ccc:	f107 0308 	add.w	r3, r7, #8
 8008cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff fc32 	bl	800853e <_ZN8touchgfx6BitmapC1Et>
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f7ff ff87 	bl	8008bf4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    __background.setPosition(0, 0, 1280, 800);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008cec:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f7ff fc8b 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008d16:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	431a      	orrs	r2, r3
 8008d26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fd fb7d 	bl	8006436 <_ZN8touchgfx9colortypeC1Em>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7ff fd7f 	bl	8008844 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3340      	adds	r3, #64	; 0x40
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f7ff fd32 	bl	80087b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    digitalClock1.setPosition(0, 0, 100, 25);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008d5a:	2319      	movs	r3, #25
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2364      	movs	r3, #100	; 0x64
 8008d60:	2200      	movs	r2, #0
 8008d62:	2100      	movs	r1, #0
 8008d64:	f7ff fc56 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFromRGB(153, 21, 21));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008d6e:	2399      	movs	r3, #153	; 0x99
 8008d70:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8008d74:	2315      	movs	r3, #21
 8008d76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d7a:	2315      	movs	r3, #21
 8008d7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008d80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	461a      	mov	r2, r3
 8008d88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008d94:	4313      	orrs	r3, r2
 8008d96:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fd fb48 	bl	8006436 <_ZN8touchgfx9colortypeC1Em>
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	4619      	mov	r1, r3
 8008daa:	4620      	mov	r0, r4
 8008dac:	f00d fef2 	bl	8016b94 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ABAJ));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8008db6:	f107 030c 	add.w	r3, r7, #12
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fd4f 	bl	8008860 <_ZN8touchgfx9TypedTextC1Et>
 8008dc2:	f107 030c 	add.w	r3, r7, #12
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f00d feeb 	bl	8016ba4 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 8008dce:	f107 030c 	add.w	r3, r7, #12
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe ff7a 	bl	8007ccc <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	336c      	adds	r3, #108	; 0x6c
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4618      	mov	r0, r3
 8008de0:	f00d ffde 	bl	8016da0 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_12_HOUR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	336c      	adds	r3, #108	; 0x6c
 8008de8:	2102      	movs	r1, #2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff febc 	bl	8008b68 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime12Hour(10, 10, 0, true);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008df6:	2301      	movs	r3, #1
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	210a      	movs	r1, #10
 8008e00:	f00d ffeb 	bl	8016dda <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>
    add(digitalClock1);
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	336c      	adds	r3, #108	; 0x6c
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7ff fcd3 	bl	80087b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    slider1.setXY(0, 0);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fc1a 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_TRACK_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_DARK_ID));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8008e28:	f107 0314 	add.w	r3, r7, #20
 8008e2c:	2104      	movs	r1, #4
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fb85 	bl	800853e <_ZN8touchgfx6BitmapC1Et>
 8008e34:	f107 0318 	add.w	r3, r7, #24
 8008e38:	2102      	movs	r1, #2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff fb7f 	bl	800853e <_ZN8touchgfx6BitmapC1Et>
 8008e40:	f107 031c 	add.w	r3, r7, #28
 8008e44:	2103      	movs	r1, #3
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff fb79 	bl	800853e <_ZN8touchgfx6BitmapC1Et>
 8008e4c:	f107 031c 	add.w	r3, r7, #28
 8008e50:	f107 0218 	add.w	r2, r7, #24
 8008e54:	f107 0114 	add.w	r1, r7, #20
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f00e fcf3 	bl	8017844 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 300);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8008e64:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	220b      	movs	r2, #11
 8008e72:	2110      	movs	r1, #16
 8008e74:	f00e fc07 	bl	8017686 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    slider1.setValueRange(0, 100);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008e7e:	2264      	movs	r2, #100	; 0x64
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f00e fac5 	bl	8017412 <_ZN8touchgfx6Slider13setValueRangeEss>
    slider1.setValue(0);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f00e fa86 	bl	80173a2 <_ZN8touchgfx6Slider8setValueEs>
    add(slider1);
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f7ff fc89 	bl	80087b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    boxProgress1.setXY(0, 0);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fbd0 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(0, 0, 300, 10);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8008ebc:	230a      	movs	r3, #10
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	f00d fb85 	bl	80165d6 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2264      	movs	r2, #100	; 0x64
 8008eda:	2100      	movs	r1, #0
 8008edc:	f00d fc92 	bl	8016804 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f00d fc6a 	bl	80167c2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_MEDIUM_ID));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8008ef4:	f107 0320 	add.w	r3, r7, #32
 8008ef8:	2101      	movs	r1, #1
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff fb1f 	bl	800853e <_ZN8touchgfx6BitmapC1Et>
 8008f00:	f107 0320 	add.w	r3, r7, #32
 8008f04:	4619      	mov	r1, r3
 8008f06:	4620      	mov	r0, r4
 8008f08:	f00d fda2 	bl	8016a50 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(0, 240, 255));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8008f12:	2300      	movs	r3, #0
 8008f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008f18:	23f0      	movs	r3, #240	; 0xf0
 8008f1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008f1e:	23ff      	movs	r3, #255	; 0xff
 8008f20:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	431a      	orrs	r2, r3
 8008f34:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd fa76 	bl	8006436 <_ZN8touchgfx9colortypeC1Em>
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f00d fb33 	bl	80165ba <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f5a:	213c      	movs	r1, #60	; 0x3c
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f00d fb52 	bl	8016606 <_ZN8touchgfx11BoxProgress8setValueEi>
    add(boxProgress1);
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	f7ff fc23 	bl	80087b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff fb6a 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_POLY_ID));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f503 7437 	add.w	r4, r3, #732	; 0x2dc
 8008f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff fad5 	bl	800853e <_ZN8touchgfx6BitmapC1Et>
 8008f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f00f ffb0 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7ff fc04 	bl	80087b8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3744      	adds	r7, #68	; 0x44
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd90      	pop	{r4, r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	0802f0c4 	.word	0x0802f0c4

08008fc0 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	4a13      	ldr	r2, [pc, #76]	; (8009018 <_ZN15Screen1ViewBaseD1Ev+0x58>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 f9e9 	bl	80093ac <_ZN8touchgfx5ImageD1Ev>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f9bb 	bl	800935c <_ZN8touchgfx11BoxProgressD1Ev>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f931 	bl	8009254 <_ZN8touchgfx6SliderD1Ev>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	336c      	adds	r3, #108	; 0x6c
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f8e8 	bl	80091cc <_ZN8touchgfx9DraggableINS_12DigitalClockEED1Ev>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3340      	adds	r3, #64	; 0x40
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f905 	bl	8009210 <_ZN8touchgfx3BoxD1Ev>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fe19 	bl	8008c40 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	0802f0c4 	.word	0x0802f0c4

0800901c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
}
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff ffcb 	bl	8008fc0 <_ZN15Screen1ViewBaseD1Ev>
 800902a:	f44f 7142 	mov.w	r1, #776	; 0x308
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f022 fa85 	bl	802b53e <_ZdlPvj>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]

}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4618      	mov	r0, r3
 8009060:	f013 f8ba 	bl	801c1d8 <_ZN8touchgfx6ScreenC1Ev>
 8009064:	4a05      	ldr	r2, [pc, #20]	; (800907c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	0802f1b8 	.word	0x0802f1b8

08009080 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	4a05      	ldr	r2, [pc, #20]	; (80090a0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd f9ff 	bl	8006494 <_ZN8touchgfx8DrawableD1Ev>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	0802fac8 	.word	0x0802fac8

080090a4 <_ZN8touchgfx9ContainerD0Ev>:
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff ffe7 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
 80090b2:	212c      	movs	r1, #44	; 0x2c
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f022 fa42 	bl	802b53e <_ZdlPvj>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	4a05      	ldr	r2, [pc, #20]	; (80090e4 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff ffd3 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	0802fa2c 	.word	0x0802fa2c

080090e8 <_ZN8touchgfx13AbstractClockD0Ev>:
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ffe7 	bl	80090c4 <_ZN8touchgfx13AbstractClockD1Ev>
 80090f6:	2130      	movs	r1, #48	; 0x30
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f022 fa20 	bl	802b53e <_ZdlPvj>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	4a05      	ldr	r2, [pc, #20]	; (8009128 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fcf7 	bl	8008b0c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	0802f1ec 	.word	0x0802f1ec

0800912c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ffe7 	bl	8009108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800913a:	214c      	movs	r1, #76	; 0x4c
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f022 f9fe 	bl	802b53e <_ZdlPvj>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	4a08      	ldr	r2, [pc, #32]	; (8009178 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3334      	adds	r3, #52	; 0x34
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ffd2 	bl	8009108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff ffac 	bl	80090c4 <_ZN8touchgfx13AbstractClockD1Ev>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	0802f96c 	.word	0x0802f96c

0800917c <_ZN8touchgfx12DigitalClockD0Ev>:
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff ffe1 	bl	800914c <_ZN8touchgfx12DigitalClockD1Ev>
 800918a:	2198      	movs	r1, #152	; 0x98
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f022 f9d6 	bl	802b53e <_ZdlPvj>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <_ZN8touchgfx9DraggableINS_12DigitalClockEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
        : T()
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f00d fdac 	bl	8016d04 <_ZN8touchgfx12DigitalClockC1Ev>
 80091ac:	4a06      	ldr	r2, [pc, #24]	; (80091c8 <_ZN8touchgfx9DraggableINS_12DigitalClockEEC1Ev+0x2c>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2101      	movs	r1, #1
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff fa89 	bl	80086ce <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	0802f0f8 	.word	0x0802f0f8

080091cc <_ZN8touchgfx9DraggableINS_12DigitalClockEED1Ev>:
class Draggable : public T
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	4a05      	ldr	r2, [pc, #20]	; (80091ec <_ZN8touchgfx9DraggableINS_12DigitalClockEED1Ev+0x20>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff ffb5 	bl	800914c <_ZN8touchgfx12DigitalClockD1Ev>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	0802f0f8 	.word	0x0802f0f8

080091f0 <_ZN8touchgfx9DraggableINS_12DigitalClockEED0Ev>:
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff ffe7 	bl	80091cc <_ZN8touchgfx9DraggableINS_12DigitalClockEED1Ev>
 80091fe:	2198      	movs	r1, #152	; 0x98
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f022 f99c 	bl	802b53e <_ZdlPvj>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	4a05      	ldr	r2, [pc, #20]	; (8009230 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fd fab9 	bl	8006798 <_ZN8touchgfx6WidgetD1Ev>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	0802fe0c 	.word	0x0802fe0c

08009234 <_ZN8touchgfx3BoxD0Ev>:
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff ffe7 	bl	8009210 <_ZN8touchgfx3BoxD1Ev>
 8009242:	212c      	movs	r1, #44	; 0x2c
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f022 f97a 	bl	802b53e <_ZdlPvj>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <_ZN8touchgfx6SliderD1Ev>:
 * indicator. The other is used on the other side. They can be used in indicating the
 * part of the slider value range that is currently selected.
 *
 * The slider operates on an integer value range that can be set by the user.
 */
class Slider : public Container
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	4a0f      	ldr	r2, [pc, #60]	; (800929c <_ZN8touchgfx6SliderD1Ev+0x48>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	33b8      	adds	r3, #184	; 0xb8
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff ff0a 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	338c      	adds	r3, #140	; 0x8c
 8009270:	4618      	mov	r0, r3
 8009272:	f000 f89b 	bl	80093ac <_ZN8touchgfx5ImageD1Ev>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3360      	adds	r3, #96	; 0x60
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f896 	bl	80093ac <_ZN8touchgfx5ImageD1Ev>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3334      	adds	r3, #52	; 0x34
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f891 	bl	80093ac <_ZN8touchgfx5ImageD1Ev>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff fef7 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	0802fb58 	.word	0x0802fb58

080092a0 <_ZN8touchgfx6SliderD0Ev>:
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff ffd3 	bl	8009254 <_ZN8touchgfx6SliderD1Ev>
 80092ae:	21f4      	movs	r1, #244	; 0xf4
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f022 f944 	bl	802b53e <_ZdlPvj>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	4a0a      	ldr	r2, [pc, #40]	; (80092f4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3358      	adds	r3, #88	; 0x58
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fed4 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	332c      	adds	r3, #44	; 0x2c
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f865 	bl	80093ac <_ZN8touchgfx5ImageD1Ev>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff fecb 	bl	8009080 <_ZN8touchgfx9ContainerD1Ev>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	0802f844 	.word	0x0802f844

080092f8 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff ffdd 	bl	80092c0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009306:	21b4      	movs	r1, #180	; 0xb4
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f022 f918 	bl	802b53e <_ZdlPvj>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	4a05      	ldr	r2, [pc, #20]	; (8009338 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff ffc9 	bl	80092c0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	0802f768 	.word	0x0802f768

0800933c <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ffe7 	bl	8009318 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 800934a:	21b8      	movs	r1, #184	; 0xb8
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f022 f8f6 	bl	802b53e <_ZdlPvj>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	4a08      	ldr	r2, [pc, #32]	; (8009388 <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	33b8      	adds	r3, #184	; 0xb8
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff ff4e 	bl	8009210 <_ZN8touchgfx3BoxD1Ev>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff ffce 	bl	8009318 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	0802f684 	.word	0x0802f684

0800938c <_ZN8touchgfx11BoxProgressD0Ev>:
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff ffe1 	bl	800935c <_ZN8touchgfx11BoxProgressD1Ev>
 800939a:	21e4      	movs	r1, #228	; 0xe4
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f022 f8ce 	bl	802b53e <_ZdlPvj>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	4a05      	ldr	r2, [pc, #20]	; (80093cc <_ZN8touchgfx5ImageD1Ev+0x20>)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fd f9eb 	bl	8006798 <_ZN8touchgfx6WidgetD1Ev>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	0802ff04 	.word	0x0802ff04

080093d0 <_ZN8touchgfx5ImageD0Ev>:
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ffe7 	bl	80093ac <_ZN8touchgfx5ImageD1Ev>
 80093de:	212c      	movs	r1, #44	; 0x2c
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f022 f8ac 	bl	802b53e <_ZdlPvj>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <_ZN8touchgfx9DraggableINS_12DigitalClockEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  event The drag event.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80093f0:	b5b0      	push	{r4, r5, r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(event);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fd f8e2 	bl	80065c8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(event.getDeltaX(), event.getDeltaY());
 8009404:	687c      	ldr	r4, [r7, #4]
 8009406:	6838      	ldr	r0, [r7, #0]
 8009408:	f7ff f8a9 	bl	800855e <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800940c:	4603      	mov	r3, r0
 800940e:	461d      	mov	r5, r3
 8009410:	6838      	ldr	r0, [r7, #0]
 8009412:	f7ff f8b9 	bl	8008588 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	4629      	mov	r1, r5
 800941c:	4620      	mov	r0, r4
 800941e:	f012 fbef 	bl	801bc00 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800942c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__tcf_0+0xc>)
 8009432:	f7fe fc29 	bl	8007c88 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009436:	bd80      	pop	{r7, pc}
 8009438:	24009f94 	.word	0x24009f94

0800943c <_Z23getFont_verdana_10_4bppv>:
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08e      	sub	sp, #56	; 0x38
 8009440:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f3bf 8f5b 	dmb	ish
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	bf0c      	ite	eq
 8009452:	2301      	moveq	r3, #1
 8009454:	2300      	movne	r3, #0
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d030      	beq.n	80094be <_Z23getFont_verdana_10_4bppv+0x82>
 800945c:	481a      	ldr	r0, [pc, #104]	; (80094c8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800945e:	f022 f870 	bl	802b542 <__cxa_guard_acquire>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	bf14      	ite	ne
 8009468:	2301      	movne	r3, #1
 800946a:	2300      	moveq	r3, #0
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d025      	beq.n	80094be <_Z23getFont_verdana_10_4bppv+0x82>
 8009472:	2300      	movs	r3, #0
 8009474:	930c      	str	r3, [sp, #48]	; 0x30
 8009476:	2300      	movs	r3, #0
 8009478:	930b      	str	r3, [sp, #44]	; 0x2c
 800947a:	2300      	movs	r3, #0
 800947c:	930a      	str	r3, [sp, #40]	; 0x28
 800947e:	233f      	movs	r3, #63	; 0x3f
 8009480:	9309      	str	r3, [sp, #36]	; 0x24
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <_Z23getFont_verdana_10_4bppv+0x90>)
 8009484:	9308      	str	r3, [sp, #32]
 8009486:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8009488:	9307      	str	r3, [sp, #28]
 800948a:	2300      	movs	r3, #0
 800948c:	9306      	str	r3, [sp, #24]
 800948e:	2300      	movs	r3, #0
 8009490:	9305      	str	r3, [sp, #20]
 8009492:	2301      	movs	r3, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	2304      	movs	r3, #4
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	2300      	movs	r3, #0
 800949c:	9302      	str	r3, [sp, #8]
 800949e:	2300      	movs	r3, #0
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	230a      	movs	r3, #10
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	230a      	movs	r3, #10
 80094a8:	2201      	movs	r2, #1
 80094aa:	490a      	ldr	r1, [pc, #40]	; (80094d4 <_Z23getFont_verdana_10_4bppv+0x98>)
 80094ac:	480a      	ldr	r0, [pc, #40]	; (80094d8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 80094ae:	f7fe ffa5 	bl	80083fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80094b2:	480a      	ldr	r0, [pc, #40]	; (80094dc <_Z23getFont_verdana_10_4bppv+0xa0>)
 80094b4:	f022 f890 	bl	802b5d8 <atexit>
 80094b8:	4803      	ldr	r0, [pc, #12]	; (80094c8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80094ba:	f022 f84e 	bl	802b55a <__cxa_guard_release>
    return verdana_10_4bpp;
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	24009fc0 	.word	0x24009fc0
 80094cc:	08030b7c 	.word	0x08030b7c
 80094d0:	08030b88 	.word	0x08030b88
 80094d4:	08030a7c 	.word	0x08030a7c
 80094d8:	24009f94 	.word	0x24009f94
 80094dc:	0800942d 	.word	0x0800942d

080094e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	4801      	ldr	r0, [pc, #4]	; (80094ec <__tcf_0+0xc>)
 80094e6:	f7fe fbcf 	bl	8007c88 <_ZN8touchgfx13GeneratedFontD1Ev>
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	24009fc4 	.word	0x24009fc4

080094f0 <_Z23getFont_verdana_20_4bppv>:
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08e      	sub	sp, #56	; 0x38
 80094f4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 16, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f3bf 8f5b 	dmb	ish
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	bf0c      	ite	eq
 8009506:	2301      	moveq	r3, #1
 8009508:	2300      	movne	r3, #0
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d030      	beq.n	8009572 <_Z23getFont_verdana_20_4bppv+0x82>
 8009510:	481a      	ldr	r0, [pc, #104]	; (800957c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009512:	f022 f816 	bl	802b542 <__cxa_guard_acquire>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	bf14      	ite	ne
 800951c:	2301      	movne	r3, #1
 800951e:	2300      	moveq	r3, #0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d025      	beq.n	8009572 <_Z23getFont_verdana_20_4bppv+0x82>
 8009526:	2300      	movs	r3, #0
 8009528:	930c      	str	r3, [sp, #48]	; 0x30
 800952a:	2300      	movs	r3, #0
 800952c:	930b      	str	r3, [sp, #44]	; 0x2c
 800952e:	2300      	movs	r3, #0
 8009530:	930a      	str	r3, [sp, #40]	; 0x28
 8009532:	233f      	movs	r3, #63	; 0x3f
 8009534:	9309      	str	r3, [sp, #36]	; 0x24
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009538:	9308      	str	r3, [sp, #32]
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <_Z23getFont_verdana_20_4bppv+0x94>)
 800953c:	9307      	str	r3, [sp, #28]
 800953e:	2300      	movs	r3, #0
 8009540:	9306      	str	r3, [sp, #24]
 8009542:	2300      	movs	r3, #0
 8009544:	9305      	str	r3, [sp, #20]
 8009546:	2301      	movs	r3, #1
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	2304      	movs	r3, #4
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	2300      	movs	r3, #0
 8009550:	9302      	str	r3, [sp, #8]
 8009552:	2300      	movs	r3, #0
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	2314      	movs	r3, #20
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	2314      	movs	r3, #20
 800955c:	2210      	movs	r2, #16
 800955e:	490a      	ldr	r1, [pc, #40]	; (8009588 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009560:	480a      	ldr	r0, [pc, #40]	; (800958c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8009562:	f7fe ff4b 	bl	80083fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009566:	480a      	ldr	r0, [pc, #40]	; (8009590 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8009568:	f022 f836 	bl	802b5d8 <atexit>
 800956c:	4803      	ldr	r0, [pc, #12]	; (800957c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800956e:	f021 fff4 	bl	802b55a <__cxa_guard_release>
    return verdana_20_4bpp;
 8009572:	4b06      	ldr	r3, [pc, #24]	; (800958c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009574:	4618      	mov	r0, r3
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	24009ff0 	.word	0x24009ff0
 8009580:	08030b80 	.word	0x08030b80
 8009584:	08030b8c 	.word	0x08030b8c
 8009588:	08030a8c 	.word	0x08030a8c
 800958c:	24009fc4 	.word	0x24009fc4
 8009590:	080094e1 	.word	0x080094e1

08009594 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
 8009598:	4801      	ldr	r0, [pc, #4]	; (80095a0 <__tcf_0+0xc>)
 800959a:	f7fe fb75 	bl	8007c88 <_ZN8touchgfx13GeneratedFontD1Ev>
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	24009ff4 	.word	0x24009ff4

080095a4 <_Z23getFont_verdana_40_4bppv>:
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08e      	sub	sp, #56	; 0x38
 80095a8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80095aa:	4b21      	ldr	r3, [pc, #132]	; (8009630 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f3bf 8f5b 	dmb	ish
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	bf0c      	ite	eq
 80095ba:	2301      	moveq	r3, #1
 80095bc:	2300      	movne	r3, #0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d030      	beq.n	8009626 <_Z23getFont_verdana_40_4bppv+0x82>
 80095c4:	481a      	ldr	r0, [pc, #104]	; (8009630 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80095c6:	f021 ffbc 	bl	802b542 <__cxa_guard_acquire>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bf14      	ite	ne
 80095d0:	2301      	movne	r3, #1
 80095d2:	2300      	moveq	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d025      	beq.n	8009626 <_Z23getFont_verdana_40_4bppv+0x82>
 80095da:	2300      	movs	r3, #0
 80095dc:	930c      	str	r3, [sp, #48]	; 0x30
 80095de:	2300      	movs	r3, #0
 80095e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e2:	2300      	movs	r3, #0
 80095e4:	930a      	str	r3, [sp, #40]	; 0x28
 80095e6:	233f      	movs	r3, #63	; 0x3f
 80095e8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ea:	4b12      	ldr	r3, [pc, #72]	; (8009634 <_Z23getFont_verdana_40_4bppv+0x90>)
 80095ec:	9308      	str	r3, [sp, #32]
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <_Z23getFont_verdana_40_4bppv+0x94>)
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	2300      	movs	r3, #0
 80095f4:	9306      	str	r3, [sp, #24]
 80095f6:	2300      	movs	r3, #0
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	2301      	movs	r3, #1
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	2304      	movs	r3, #4
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	2300      	movs	r3, #0
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	2300      	movs	r3, #0
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	2328      	movs	r3, #40	; 0x28
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	2328      	movs	r3, #40	; 0x28
 8009610:	2201      	movs	r2, #1
 8009612:	490a      	ldr	r1, [pc, #40]	; (800963c <_Z23getFont_verdana_40_4bppv+0x98>)
 8009614:	480a      	ldr	r0, [pc, #40]	; (8009640 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8009616:	f7fe fef1 	bl	80083fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800961a:	480a      	ldr	r0, [pc, #40]	; (8009644 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800961c:	f021 ffdc 	bl	802b5d8 <atexit>
 8009620:	4803      	ldr	r0, [pc, #12]	; (8009630 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009622:	f021 ff9a 	bl	802b55a <__cxa_guard_release>
    return verdana_40_4bpp;
 8009626:	4b06      	ldr	r3, [pc, #24]	; (8009640 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8009628:	4618      	mov	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	2400a020 	.word	0x2400a020
 8009634:	08030b84 	.word	0x08030b84
 8009638:	08030b90 	.word	0x08030b90
 800963c:	08030b6c 	.word	0x08030b6c
 8009640:	24009ff4 	.word	0x24009ff4
 8009644:	08009595 	.word	0x08009595

08009648 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	460b      	mov	r3, r1
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8009656:	2300      	movs	r3, #0
    }
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800966c:	2300      	movs	r3, #0
    }
 800966e:	4618      	mov	r0, r3
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009682:	2300      	movs	r3, #0
    }
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4613      	mov	r3, r2
 800969c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800969e:	4a07      	ldr	r2, [pc, #28]	; (80096bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80096a4:	4a06      	ldr	r2, [pc, #24]	; (80096c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80096aa:	4a06      	ldr	r2, [pc, #24]	; (80096c4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80096ac:	88fb      	ldrh	r3, [r7, #6]
 80096ae:	8013      	strh	r3, [r2, #0]
    }
 80096b0:	bf00      	nop
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	2402aebc 	.word	0x2402aebc
 80096c0:	2402aec4 	.word	0x2402aec4
 80096c4:	2402aec0 	.word	0x2402aec0

080096c8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80096c8:	b40e      	push	{r1, r2, r3}
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80096d2:	f107 0320 	add.w	r3, r7, #32
 80096d6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	2100      	movs	r1, #0
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f012 f8e2 	bl	801b8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80096e4:	4603      	mov	r3, r0
 80096e6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80096e8:	89fb      	ldrh	r3, [r7, #14]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f4:	b003      	add	sp, #12
 80096f6:	4770      	bx	lr

080096f8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80096f8:	b40c      	push	{r2, r3}
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009706:	f107 031c 	add.w	r3, r7, #28
 800970a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800970c:	78f9      	ldrb	r1, [r7, #3]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f012 f8c8 	bl	801b8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009718:	4603      	mov	r3, r0
 800971a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800971c:	89fb      	ldrh	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009728:	b002      	add	sp, #8
 800972a:	4770      	bx	lr

0800972c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	; 0x28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973c:	2b00      	cmp	r3, #0
 800973e:	d016      	beq.n	800976e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3322      	adds	r3, #34	; 0x22
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	8adb      	ldrh	r3, [r3, #22]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d105      	bne.n	800975a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800974e:	4b43      	ldr	r3, [pc, #268]	; (800985c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009750:	4a43      	ldr	r2, [pc, #268]	; (8009860 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009752:	21c5      	movs	r1, #197	; 0xc5
 8009754:	4843      	ldr	r0, [pc, #268]	; (8009864 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009756:	f021 ff21 	bl	802b59c <__assert_func>
            return buffer[pos];
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	8a9b      	ldrh	r3, [r3, #20]
 800975e:	461a      	mov	r2, r3
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800976e:	2300      	movs	r3, #0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d06a      	beq.n	800984a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f013 fc39 	bl	801cfec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3322      	adds	r3, #34	; 0x22
 800977e:	623b      	str	r3, [r7, #32]
 8009780:	2301      	movs	r3, #1
 8009782:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	8adb      	ldrh	r3, [r3, #22]
 8009788:	8bfa      	ldrh	r2, [r7, #30]
 800978a:	429a      	cmp	r2, r3
 800978c:	d305      	bcc.n	800979a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800978e:	4b36      	ldr	r3, [pc, #216]	; (8009868 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009790:	4a36      	ldr	r2, [pc, #216]	; (800986c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009792:	21cb      	movs	r1, #203	; 0xcb
 8009794:	4833      	ldr	r0, [pc, #204]	; (8009864 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009796:	f021 ff01 	bl	802b59c <__assert_func>
            const uint16_t index = pos + offset;
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	8a9a      	ldrh	r2, [r3, #20]
 800979e:	8bfb      	ldrh	r3, [r7, #30]
 80097a0:	4413      	add	r3, r2
 80097a2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80097a4:	8bbb      	ldrh	r3, [r7, #28]
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d801      	bhi.n	80097ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80097aa:	8bbb      	ldrh	r3, [r7, #28]
 80097ac:	e001      	b.n	80097b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80097ae:	8bbb      	ldrh	r3, [r7, #28]
 80097b0:	3b0a      	subs	r3, #10
 80097b2:	6a3a      	ldr	r2, [r7, #32]
 80097b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b8:	f640 123f 	movw	r2, #2367	; 0x93f
 80097bc:	4293      	cmp	r3, r2
 80097be:	bf0c      	ite	eq
 80097c0:	2301      	moveq	r3, #1
 80097c2:	2300      	movne	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d03f      	beq.n	800984a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3322      	adds	r3, #34	; 0x22
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	3222      	adds	r2, #34	; 0x22
 80097d2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	8ad2      	ldrh	r2, [r2, #22]
 80097d8:	2a00      	cmp	r2, #0
 80097da:	d105      	bne.n	80097e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80097dc:	4b1f      	ldr	r3, [pc, #124]	; (800985c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80097de:	4a20      	ldr	r2, [pc, #128]	; (8009860 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80097e0:	21c5      	movs	r1, #197	; 0xc5
 80097e2:	4820      	ldr	r0, [pc, #128]	; (8009864 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80097e4:	f021 feda 	bl	802b59c <__assert_func>
            return buffer[pos];
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	8a92      	ldrh	r2, [r2, #20]
 80097ec:	4611      	mov	r1, r2
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	4613      	mov	r3, r2
 80097f8:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	8adb      	ldrh	r3, [r3, #22]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d806      	bhi.n	8009810 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009802:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009804:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009806:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800980a:	4816      	ldr	r0, [pc, #88]	; (8009864 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800980c:	f021 fec6 	bl	802b59c <__assert_func>
            const uint16_t index = pos + 1;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	8a9b      	ldrh	r3, [r3, #20]
 8009814:	3301      	adds	r3, #1
 8009816:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009818:	89bb      	ldrh	r3, [r7, #12]
 800981a:	2b09      	cmp	r3, #9
 800981c:	d801      	bhi.n	8009822 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800981e:	89bb      	ldrh	r3, [r7, #12]
 8009820:	e000      	b.n	8009824 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009822:	2300      	movs	r3, #0
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	89f9      	ldrh	r1, [r7, #14]
 8009828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800982c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3322      	adds	r3, #34	; 0x22
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	f640 133f 	movw	r3, #2367	; 0x93f
 8009838:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	8a9b      	ldrh	r3, [r3, #20]
 800983e:	4619      	mov	r1, r3
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	8afa      	ldrh	r2, [r7, #22]
 8009844:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009848:	bf00      	nop
        }
    }
    return getNextChar();
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f013 fad0 	bl	801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3728      	adds	r7, #40	; 0x28
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	0802e5ac 	.word	0x0802e5ac
 8009860:	0802e5b8 	.word	0x0802e5b8
 8009864:	0802e664 	.word	0x0802e664
 8009868:	0802e6bc 	.word	0x0802e6bc
 800986c:	0802e6cc 	.word	0x0802e6cc
 8009870:	0802e7a0 	.word	0x0802e7a0
 8009874:	0802e7ac 	.word	0x0802e7ac

08009878 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f013 fa7e 	bl	801cd82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009886:	bf00      	nop
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b088      	sub	sp, #32
 8009892:	af02      	add	r7, sp, #8
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	1d38      	adds	r0, r7, #4
 8009898:	e880 0006 	stmia.w	r0, {r1, r2}
 800989c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800989e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098a2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80098a4:	1d39      	adds	r1, r7, #4
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f010 fc08 	bl	801a0c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80098b8:	bf00      	nop
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80098ce:	88fb      	ldrh	r3, [r7, #6]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d127      	bne.n	8009924 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	4a1e      	ldr	r2, [pc, #120]	; (8009950 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80098d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d016      	beq.n	800990e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80098e0:	88fb      	ldrh	r3, [r7, #6]
 80098e2:	4a1b      	ldr	r2, [pc, #108]	; (8009950 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80098e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098e8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	4a18      	ldr	r2, [pc, #96]	; (8009954 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80098f4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4413      	add	r3, r2
 80098fe:	4a16      	ldr	r2, [pc, #88]	; (8009958 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009900:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	4413      	add	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	e00a      	b.n	8009924 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800990e:	4b11      	ldr	r3, [pc, #68]	; (8009954 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009910:	4a12      	ldr	r2, [pc, #72]	; (800995c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8009912:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009914:	4a12      	ldr	r2, [pc, #72]	; (8009960 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009916:	4b10      	ldr	r3, [pc, #64]	; (8009958 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009918:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	4a11      	ldr	r2, [pc, #68]	; (8009964 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800991e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009922:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800992a:	4a0f      	ldr	r2, [pc, #60]	; (8009968 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800992c:	88fb      	ldrh	r3, [r7, #6]
 800992e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8009930:	f000 f83e 	bl	80099b0 <_ZN17TypedTextDatabase8getFontsEv>
 8009934:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009936:	f000 f833 	bl	80099a0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800993a:	4603      	mov	r3, r0
 800993c:	461a      	mov	r2, r3
 800993e:	4621      	mov	r1, r4
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fea5 	bl	8009690 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8009946:	bf00      	nop
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	bd90      	pop	{r4, r7, pc}
 800994e:	bf00      	nop
 8009950:	2400a024 	.word	0x2400a024
 8009954:	2400a02c 	.word	0x2400a02c
 8009958:	2400a030 	.word	0x2400a030
 800995c:	08030b98 	.word	0x08030b98
 8009960:	08030b94 	.word	0x08030b94
 8009964:	08030ba0 	.word	0x08030ba0
 8009968:	2400a028 	.word	0x2400a028

0800996c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009978:	4b07      	ldr	r3, [pc, #28]	; (8009998 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	4b07      	ldr	r3, [pc, #28]	; (800999c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	887b      	ldrh	r3, [r7, #2]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	4413      	add	r3, r2
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	2400a02c 	.word	0x2400a02c
 800999c:	2400a030 	.word	0x2400a030

080099a0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80099a4:	2301      	movs	r3, #1
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80099b4:	4b02      	ldr	r3, [pc, #8]	; (80099c0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	2400a034 	.word	0x2400a034

080099c4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d113      	bne.n	80099fc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099da:	4293      	cmp	r3, r2
 80099dc:	d10e      	bne.n	80099fc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80099de:	f7ff fd87 	bl	80094f0 <_Z23getFont_verdana_20_4bppv>
 80099e2:	4603      	mov	r3, r0
};
 80099e4:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80099e6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80099e8:	f7ff fddc 	bl	80095a4 <_Z23getFont_verdana_40_4bppv>
 80099ec:	4603      	mov	r3, r0
};
 80099ee:	4a05      	ldr	r2, [pc, #20]	; (8009a04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80099f0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80099f2:	f7ff fd23 	bl	800943c <_Z23getFont_verdana_10_4bppv>
 80099f6:	4603      	mov	r3, r0
};
 80099f8:	4a02      	ldr	r2, [pc, #8]	; (8009a04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80099fa:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	2400a034 	.word	0x2400a034

08009a08 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009a10:	2001      	movs	r0, #1
 8009a12:	f7ff ffd7 	bl	80099c4 <_Z41__static_initialization_and_destruction_0ii>
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fa44 	bl	8007eb8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009a30:	4a03      	ldr	r2, [pc, #12]	; (8009a40 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	601a      	str	r2, [r3, #0]
{

}
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	0802ec5c 	.word	0x0802ec5c

08009a44 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
{

}
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <_ZN5Model4tickEv>:

void Model::tick()
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]

}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    {
    }
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    {
    }
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
    {
 8009aa4:	4a04      	ldr	r2, [pc, #16]	; (8009ab8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
    }
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	0802f310 	.word	0x0802f310

08009abc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
    }
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff ffe9 	bl	8009a9c <_ZN8touchgfx9PresenterD1Ev>
 8009aca:	2104      	movs	r1, #4
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f021 fd36 	bl	802b53e <_ZdlPvj>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
    {
 8009ae4:	4a04      	ldr	r2, [pc, #16]	; (8009af8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
    }
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	0802f310 	.word	0x0802f310

08009afc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	4a06      	ldr	r2, [pc, #24]	; (8009b20 <_ZN13ModelListenerC1Ev+0x24>)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	605a      	str	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	0802f300 	.word	0x0802f300

08009b24 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	4a04      	ldr	r2, [pc, #16]	; (8009b40 <_ZN13ModelListenerD1Ev+0x1c>)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	0802f300 	.word	0x0802f300

08009b44 <_ZN13ModelListenerD0Ev>:
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ffe9 	bl	8009b24 <_ZN13ModelListenerD1Ev>
 8009b52:	2108      	movs	r1, #8
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f021 fcf2 	bl	802b53e <_ZdlPvj>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <_ZN16Screen1PresenterD1Ev+0x30>)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	4a09      	ldr	r2, [pc, #36]	; (8009b98 <_ZN16Screen1PresenterD1Ev+0x34>)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	605a      	str	r2, [r3, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff ffd1 	bl	8009b24 <_ZN13ModelListenerD1Ev>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff ff89 	bl	8009a9c <_ZN8touchgfx9PresenterD1Ev>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	0802f2d8 	.word	0x0802f2d8
 8009b98:	0802f2f0 	.word	0x0802f2f0

08009b9c <_ZThn4_N16Screen1PresenterD1Ev>:
 8009b9c:	f1a0 0004 	sub.w	r0, r0, #4
 8009ba0:	e7e0      	b.n	8009b64 <_ZN16Screen1PresenterD1Ev>
 8009ba2:	bf00      	nop

08009ba4 <_ZN16Screen1PresenterD0Ev>:
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ffd9 	bl	8009b64 <_ZN16Screen1PresenterD1Ev>
 8009bb2:	2110      	movs	r1, #16
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f021 fcc2 	bl	802b53e <_ZdlPvj>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <_ZThn4_N16Screen1PresenterD0Ev>:
 8009bc4:	f1a0 0004 	sub.w	r0, r0, #4
 8009bc8:	e7ec      	b.n	8009ba4 <_ZN16Screen1PresenterD0Ev>
	...

08009bcc <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
    : view(v)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ff7f 	bl	8009adc <_ZN8touchgfx9PresenterC1Ev>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3304      	adds	r3, #4
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff ff8a 	bl	8009afc <_ZN13ModelListenerC1Ev>
 8009be8:	4a06      	ldr	r2, [pc, #24]	; (8009c04 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	4a06      	ldr	r2, [pc, #24]	; (8009c08 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	605a      	str	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	60da      	str	r2, [r3, #12]
{

}
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	0802f2d8 	.word	0x0802f2d8
 8009c08:	0802f2f0 	.word	0x0802f2f0

08009c0c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	4a05      	ldr	r2, [pc, #20]	; (8009c54 <_ZN11Screen1ViewD1Ev+0x20>)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff f9bb 	bl	8008fc0 <_ZN15Screen1ViewBaseD1Ev>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	0802f328 	.word	0x0802f328

08009c58 <_ZN11Screen1ViewD0Ev>:
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff ffe7 	bl	8009c34 <_ZN11Screen1ViewD1Ev>
 8009c66:	f44f 7142 	mov.w	r1, #776	; 0x308
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f021 fc67 	bl	802b53e <_ZdlPvj>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fffc 	bl	8008c84 <_ZN15Screen1ViewBaseC1Ev>
 8009c8c:	4a03      	ldr	r2, [pc, #12]	; (8009c9c <_ZN11Screen1ViewC1Ev+0x20>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
{

}
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	0802f328 	.word	0x0802f328

08009ca0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff f9c7 	bl	800903e <_ZN15Screen1ViewBase11setupScreenEv>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fd58 	bl	8008778 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009cd0:	4b2b      	ldr	r3, [pc, #172]	; (8009d80 <SystemInit+0xb0>)
 8009cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009cd6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	f042 0210 	orr.w	r2, r2, #16
 8009ce4:	611a      	str	r2, [r3, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009ce6:	4a27      	ldr	r2, [pc, #156]	; (8009d84 <SystemInit+0xb4>)
 8009ce8:	6813      	ldr	r3, [r2, #0]
 8009cea:	f003 030f 	and.w	r3, r3, #15
 8009cee:	2b06      	cmp	r3, #6
 8009cf0:	d805      	bhi.n	8009cfe <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009cf2:	6813      	ldr	r3, [r2, #0]
 8009cf4:	f023 030f 	bic.w	r3, r3, #15
 8009cf8:	f043 0307 	orr.w	r3, r3, #7
 8009cfc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009cfe:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <SystemInit+0xb8>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	f042 0201 	orr.w	r2, r2, #1
 8009d06:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009d08:	2200      	movs	r2, #0
 8009d0a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009d0c:	4a1f      	ldr	r2, [pc, #124]	; (8009d8c <SystemInit+0xbc>)
 8009d0e:	6819      	ldr	r1, [r3, #0]
 8009d10:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009d12:	491c      	ldr	r1, [pc, #112]	; (8009d84 <SystemInit+0xb4>)
  RCC->CR &= 0xEAF6ED7FU;
 8009d14:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009d16:	680a      	ldr	r2, [r1, #0]
 8009d18:	0712      	lsls	r2, r2, #28
 8009d1a:	d505      	bpl.n	8009d28 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009d1c:	680a      	ldr	r2, [r1, #0]
 8009d1e:	f022 020f 	bic.w	r2, r2, #15
 8009d22:	f042 0207 	orr.w	r2, r2, #7
 8009d26:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009d28:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009d2a:	4919      	ldr	r1, [pc, #100]	; (8009d90 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8009d2c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8009d2e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8009d30:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8009d32:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009d34:	4917      	ldr	r1, [pc, #92]	; (8009d94 <SystemInit+0xc4>)
 8009d36:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009d38:	4917      	ldr	r1, [pc, #92]	; (8009d98 <SystemInit+0xc8>)
 8009d3a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009d3e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009d40:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009d42:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009d44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009d46:	6819      	ldr	r1, [r3, #0]
 8009d48:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009d4c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009d4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8009d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d54:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8009d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d5c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <SystemInit+0xcc>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	0c1b      	lsrs	r3, r3, #16
 8009d66:	041b      	lsls	r3, r3, #16
 8009d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d6c:	d203      	bcs.n	8009d76 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009d6e:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <SystemInit+0xd0>)
 8009d70:	2201      	movs	r2, #1
 8009d72:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <SystemInit+0xd4>)
 8009d78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009d7c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8009d7e:	4770      	bx	lr
 8009d80:	e000ed00 	.word	0xe000ed00
 8009d84:	52002000 	.word	0x52002000
 8009d88:	58024400 	.word	0x58024400
 8009d8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009d90:	02020200 	.word	0x02020200
 8009d94:	01ff0000 	.word	0x01ff0000
 8009d98:	01010280 	.word	0x01010280
 8009d9c:	5c001000 	.word	0x5c001000
 8009da0:	51008000 	.word	0x51008000
 8009da4:	52004000 	.word	0x52004000

08009da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009da8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009daa:	2003      	movs	r0, #3
 8009dac:	f000 fc56 	bl	800a65c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009db0:	f004 fad0 	bl	800e354 <HAL_RCC_GetSysClockFreq>
 8009db4:	490f      	ldr	r1, [pc, #60]	; (8009df4 <HAL_Init+0x4c>)
 8009db6:	4a10      	ldr	r2, [pc, #64]	; (8009df8 <HAL_Init+0x50>)
 8009db8:	698b      	ldr	r3, [r1, #24]
 8009dba:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009dbe:	5cd3      	ldrb	r3, [r2, r3]
 8009dc0:	f003 031f 	and.w	r3, r3, #31
 8009dc4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dc6:	698b      	ldr	r3, [r1, #24]
 8009dc8:	f003 030f 	and.w	r3, r3, #15
 8009dcc:	5cd3      	ldrb	r3, [r2, r3]
 8009dce:	4a0b      	ldr	r2, [pc, #44]	; (8009dfc <HAL_Init+0x54>)
 8009dd0:	f003 031f 	and.w	r3, r3, #31
 8009dd4:	fa20 f303 	lsr.w	r3, r0, r3
 8009dd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dda:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <HAL_Init+0x58>)
 8009ddc:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009dde:	2004      	movs	r0, #4
 8009de0:	f7f8 fc16 	bl	8002610 <HAL_InitTick>
 8009de4:	4604      	mov	r4, r0
 8009de6:	b918      	cbnz	r0, 8009df0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009de8:	f7f8 fbf0 	bl	80025cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8009dec:	4620      	mov	r0, r4
 8009dee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009df0:	2401      	movs	r4, #1
 8009df2:	e7fb      	b.n	8009dec <HAL_Init+0x44>
 8009df4:	58024400 	.word	0x58024400
 8009df8:	0802f354 	.word	0x0802f354
 8009dfc:	24000034 	.word	0x24000034
 8009e00:	24000030 	.word	0x24000030

08009e04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8009e04:	4a03      	ldr	r2, [pc, #12]	; (8009e14 <HAL_IncTick+0x10>)
 8009e06:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <HAL_IncTick+0x14>)
 8009e08:	6811      	ldr	r1, [r2, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	440b      	add	r3, r1
 8009e0e:	6013      	str	r3, [r2, #0]
}
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	2400a040 	.word	0x2400a040
 8009e18:	24000038 	.word	0x24000038

08009e1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009e1c:	4b01      	ldr	r3, [pc, #4]	; (8009e24 <HAL_GetTick+0x8>)
 8009e1e:	6818      	ldr	r0, [r3, #0]
}
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	2400a040 	.word	0x2400a040

08009e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009e2c:	f7ff fff6 	bl	8009e1c <HAL_GetTick>
 8009e30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e32:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8009e34:	bf1e      	ittt	ne
 8009e36:	4b04      	ldrne	r3, [pc, #16]	; (8009e48 <HAL_Delay+0x20>)
 8009e38:	781b      	ldrbne	r3, [r3, #0]
 8009e3a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009e3c:	f7ff ffee 	bl	8009e1c <HAL_GetTick>
 8009e40:	1b43      	subs	r3, r0, r5
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	d3fa      	bcc.n	8009e3c <HAL_Delay+0x14>
  {
  }
}
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	24000038 	.word	0x24000038

08009e4c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8009e4c:	4b01      	ldr	r3, [pc, #4]	; (8009e54 <HAL_GetREVID+0x8>)
 8009e4e:	6818      	ldr	r0, [r3, #0]
}
 8009e50:	0c00      	lsrs	r0, r0, #16
 8009e52:	4770      	bx	lr
 8009e54:	5c001000 	.word	0x5c001000

08009e58 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8009e58:	4a03      	ldr	r2, [pc, #12]	; (8009e68 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8009e5a:	6853      	ldr	r3, [r2, #4]
 8009e5c:	ea23 0000 	bic.w	r0, r3, r0
 8009e60:	4301      	orrs	r1, r0
 8009e62:	6051      	str	r1, [r2, #4]
}
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	58000400 	.word	0x58000400

08009e6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009e6c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009e6e:	0dcc      	lsrs	r4, r1, #23
 8009e70:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8009e72:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8009e76:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009e78:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8009e7c:	408d      	lsls	r5, r1
 8009e7e:	408a      	lsls	r2, r1
 8009e80:	5903      	ldr	r3, [r0, r4]
 8009e82:	ea23 0305 	bic.w	r3, r3, r5
 8009e86:	4313      	orrs	r3, r2
 8009e88:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009e8a:	bd30      	pop	{r4, r5, pc}

08009e8c <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009e8c:	6880      	ldr	r0, [r0, #8]
}
 8009e8e:	f000 0001 	and.w	r0, r0, #1
 8009e92:	4770      	bx	lr

08009e94 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009e94:	6880      	ldr	r0, [r0, #8]
}
 8009e96:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8009e9a:	4770      	bx	lr

08009e9c <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009e9c:	2300      	movs	r3, #0
{
 8009e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8009ea0:	9301      	str	r3, [sp, #4]
{
 8009ea2:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ea4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8009ea8:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	f000 81c5 	beq.w	800a23a <HAL_ADC_ConfigChannel+0x39e>
 8009eb0:	2301      	movs	r3, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009eb2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8009eb4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7ff ffeb 	bl	8009e94 <LL_ADC_REG_IsConversionOngoing>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 81b6 	bne.w	800a230 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8009ec4:	680a      	ldr	r2, [r1, #0]
 8009ec6:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8009eca:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d169      	bne.n	8009fa6 <HAL_ADC_ConfigChannel+0x10a>
 8009ed2:	408b      	lsls	r3, r1
 8009ed4:	69e2      	ldr	r2, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009ed6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8009eda:	271f      	movs	r7, #31
 8009edc:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009ede:	6872      	ldr	r2, [r6, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009ee0:	0990      	lsrs	r0, r2, #6
  MODIFY_REG(*preg,
 8009ee2:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8009ee6:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009ee8:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8009eec:	4097      	lsls	r7, r2
 8009eee:	4091      	lsls	r1, r2
 8009ef0:	f85c 3000 	ldr.w	r3, [ip, r0]
 8009ef4:	ea23 0307 	bic.w	r3, r3, r7
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009efe:	4620      	mov	r0, r4
 8009f00:	f7ff ffc8 	bl	8009e94 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009f04:	68a3      	ldr	r3, [r4, #8]
 8009f06:	f003 0308 	and.w	r3, r3, #8
 8009f0a:	4318      	orrs	r0, r3
 8009f0c:	d13f      	bne.n	8009f8e <HAL_ADC_ConfigChannel+0xf2>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009f0e:	68b2      	ldr	r2, [r6, #8]
 8009f10:	4620      	mov	r0, r4
 8009f12:	6831      	ldr	r1, [r6, #0]
 8009f14:	f7ff ffaa 	bl	8009e6c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009f18:	4bb8      	ldr	r3, [pc, #736]	; (800a1fc <HAL_ADC_ConfigChannel+0x360>)
 8009f1a:	6972      	ldr	r2, [r6, #20]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f26:	68e3      	ldr	r3, [r4, #12]
 8009f28:	d146      	bne.n	8009fb8 <HAL_ADC_ConfigChannel+0x11c>
 8009f2a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8009f2e:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009f30:	6937      	ldr	r7, [r6, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009f32:	409a      	lsls	r2, r3
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009f34:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009f36:	2f04      	cmp	r7, #4
 8009f38:	d046      	beq.n	8009fc8 <HAL_ADC_ConfigChannel+0x12c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f3a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
 8009f3e:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8009f42:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 8009f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8009f52:	7e72      	ldrb	r2, [r6, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f54:	6931      	ldr	r1, [r6, #16]
 8009f56:	1e57      	subs	r7, r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8009f58:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8009f5c:	427a      	negs	r2, r7
 8009f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f62:	417a      	adcs	r2, r7
 8009f64:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8009f68:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8009f6c:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009f6e:	6931      	ldr	r1, [r6, #16]
 8009f70:	f103 3cff 	add.w	ip, r3, #4294967295
 8009f74:	6922      	ldr	r2, [r4, #16]
 8009f76:	f001 011f 	and.w	r1, r1, #31
 8009f7a:	f1dc 0300 	rsbs	r3, ip, #0
 8009f7e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8009f82:	eb43 030c 	adc.w	r3, r3, ip
 8009f86:	02db      	lsls	r3, r3, #11
 8009f88:	408b      	lsls	r3, r1
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7ff ff7c 	bl	8009e8c <LL_ADC_IsEnabled>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d03e      	beq.n	800a016 <HAL_ADC_ConfigChannel+0x17a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f98:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	b003      	add	sp, #12
 8009fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fa6:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8009faa:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f002 021f 	and.w	r2, r2, #31
 8009fb4:	4093      	lsls	r3, r2
 8009fb6:	e78d      	b.n	8009ed4 <HAL_ADC_ConfigChannel+0x38>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009fb8:	f013 0f10 	tst.w	r3, #16
 8009fbc:	68e3      	ldr	r3, [r4, #12]
 8009fbe:	d0b4      	beq.n	8009f2a <HAL_ADC_ConfigChannel+0x8e>
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	f003 0308 	and.w	r3, r3, #8
 8009fc6:	e7b3      	b.n	8009f30 <HAL_ADC_ConfigChannel+0x94>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009fc8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009fca:	068a      	lsls	r2, r1, #26
 8009fcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8009fd0:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8009fd4:	d103      	bne.n	8009fde <HAL_ADC_ConfigChannel+0x142>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8009fd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fdc:	6623      	str	r3, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d103      	bne.n	8009ff0 <HAL_ADC_ConfigChannel+0x154>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8009fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fee:	6663      	str	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8009ff0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ff2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d103      	bne.n	800a002 <HAL_ADC_ConfigChannel+0x166>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8009ffa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a000:	66a3      	str	r3, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a002:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a004:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800a008:	429a      	cmp	r2, r3
 800a00a:	d1c0      	bne.n	8009f8e <HAL_ADC_ConfigChannel+0xf2>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a00c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a00e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a012:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a014:	e7bb      	b.n	8009f8e <HAL_ADC_ConfigChannel+0xf2>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a016:	68f7      	ldr	r7, [r6, #12]
 800a018:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800a01a:	f007 0c18 	and.w	ip, r7, #24
 800a01e:	4a78      	ldr	r2, [pc, #480]	; (800a200 <HAL_ADC_ConfigChannel+0x364>)
 800a020:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 800a024:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800a028:	fa22 f20c 	lsr.w	r2, r2, ip
 800a02c:	ea21 0100 	bic.w	r1, r1, r0
 800a030:	401a      	ands	r2, r3
 800a032:	430a      	orrs	r2, r1
 800a034:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a038:	4a72      	ldr	r2, [pc, #456]	; (800a204 <HAL_ADC_ConfigChannel+0x368>)
 800a03a:	4297      	cmp	r7, r2
 800a03c:	d145      	bne.n	800a0ca <HAL_ADC_ConfigChannel+0x22e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a03e:	b9d0      	cbnz	r0, 800a076 <HAL_ADC_ConfigChannel+0x1da>
 800a040:	0e9a      	lsrs	r2, r3, #26
 800a042:	2101      	movs	r1, #1
 800a044:	3201      	adds	r2, #1
 800a046:	f002 071f 	and.w	r7, r2, #31
 800a04a:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a04c:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a04e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800a052:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a056:	d929      	bls.n	800a0ac <HAL_ADC_ConfigChannel+0x210>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a058:	4311      	orrs	r1, r2
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f040 808b 	bne.w	800a176 <HAL_ADC_ConfigChannel+0x2da>
 800a060:	0e9b      	lsrs	r3, r3, #26
 800a062:	3301      	adds	r3, #1
 800a064:	f003 031f 	and.w	r3, r3, #31
 800a068:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a06c:	3b1e      	subs	r3, #30
 800a06e:	051b      	lsls	r3, r3, #20
 800a070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a074:	e024      	b.n	800a0c0 <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a076:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800a07a:	b132      	cbz	r2, 800a08a <HAL_ADC_ConfigChannel+0x1ee>
  return __builtin_clz(value);
 800a07c:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a080:	3201      	adds	r2, #1
 800a082:	f002 021f 	and.w	r2, r2, #31
 800a086:	2a09      	cmp	r2, #9
 800a088:	d863      	bhi.n	800a152 <HAL_ADC_ConfigChannel+0x2b6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a08a:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800a08e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a092:	3201      	adds	r2, #1
 800a094:	0692      	lsls	r2, r2, #26
 800a096:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a09a:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 800a09e:	fab7 f787 	clz	r7, r7
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	3701      	adds	r7, #1
 800a0a6:	f007 071f 	and.w	r7, r7, #31
 800a0aa:	40b9      	lsls	r1, r7
 800a0ac:	4311      	orrs	r1, r2
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d14a      	bne.n	800a148 <HAL_ADC_ConfigChannel+0x2ac>
 800a0b2:	0e9b      	lsrs	r3, r3, #26
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	f003 031f 	and.w	r3, r3, #31
 800a0ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a0be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0c0:	4319      	orrs	r1, r3
 800a0c2:	68b2      	ldr	r2, [r6, #8]
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7ff fed1 	bl	8009e6c <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a0ca:	6832      	ldr	r2, [r6, #0]
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	f6bf af63 	bge.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a0d2:	494d      	ldr	r1, [pc, #308]	; (800a208 <HAL_ADC_ConfigChannel+0x36c>)
 800a0d4:	428c      	cmp	r4, r1
 800a0d6:	d05b      	beq.n	800a190 <HAL_ADC_ConfigChannel+0x2f4>
 800a0d8:	4e4c      	ldr	r6, [pc, #304]	; (800a20c <HAL_ADC_ConfigChannel+0x370>)
 800a0da:	4b4d      	ldr	r3, [pc, #308]	; (800a210 <HAL_ADC_ConfigChannel+0x374>)
 800a0dc:	484d      	ldr	r0, [pc, #308]	; (800a214 <HAL_ADC_ConfigChannel+0x378>)
 800a0de:	42b4      	cmp	r4, r6
 800a0e0:	bf18      	it	ne
 800a0e2:	4603      	movne	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a0e4:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	d002      	beq.n	800a0f0 <HAL_ADC_ConfigChannel+0x254>
 800a0ea:	4948      	ldr	r1, [pc, #288]	; (800a20c <HAL_ADC_ConfigChannel+0x370>)
 800a0ec:	428c      	cmp	r4, r1
 800a0ee:	d151      	bne.n	800a194 <HAL_ADC_ConfigChannel+0x2f8>
 800a0f0:	4845      	ldr	r0, [pc, #276]	; (800a208 <HAL_ADC_ConfigChannel+0x36c>)
 800a0f2:	f7ff fecb 	bl	8009e8c <LL_ADC_IsEnabled>
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4844      	ldr	r0, [pc, #272]	; (800a20c <HAL_ADC_ConfigChannel+0x370>)
 800a0fa:	f7ff fec7 	bl	8009e8c <LL_ADC_IsEnabled>
 800a0fe:	4308      	orrs	r0, r1
 800a100:	d14d      	bne.n	800a19e <HAL_ADC_ConfigChannel+0x302>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a102:	4845      	ldr	r0, [pc, #276]	; (800a218 <HAL_ADC_ConfigChannel+0x37c>)
 800a104:	f003 71e0 	and.w	r1, r3, #29360128	; 0x1c00000
 800a108:	4282      	cmp	r2, r0
 800a10a:	d14e      	bne.n	800a1aa <HAL_ADC_ConfigChannel+0x30e>
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	f53f af43 	bmi.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a112:	4b42      	ldr	r3, [pc, #264]	; (800a21c <HAL_ADC_ConfigChannel+0x380>)
 800a114:	429c      	cmp	r4, r3
 800a116:	f47f af3f 	bne.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a11a:	4a3e      	ldr	r2, [pc, #248]	; (800a214 <HAL_ADC_ConfigChannel+0x378>)
 800a11c:	6893      	ldr	r3, [r2, #8]
 800a11e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800a122:	430b      	orrs	r3, r1
 800a124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a128:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a12a:	4b3d      	ldr	r3, [pc, #244]	; (800a220 <HAL_ADC_ConfigChannel+0x384>)
 800a12c:	4a3d      	ldr	r2, [pc, #244]	; (800a224 <HAL_ADC_ConfigChannel+0x388>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	fbb3 f3f2 	udiv	r3, r3, r2
 800a134:	3301      	adds	r3, #1
 800a136:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 800a138:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800a13a:	9b01      	ldr	r3, [sp, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f43f af2b 	beq.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
                wait_loop_index--;
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	3b01      	subs	r3, #1
 800a146:	e7f7      	b.n	800a138 <HAL_ADC_ConfigChannel+0x29c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a148:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800a14c:	fab3 f383 	clz	r3, r3
 800a150:	e7b0      	b.n	800a0b4 <HAL_ADC_ConfigChannel+0x218>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a152:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800a156:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a15a:	3201      	adds	r2, #1
 800a15c:	0692      	lsls	r2, r2, #26
 800a15e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a162:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 800a166:	fab7 f787 	clz	r7, r7
 800a16a:	2101      	movs	r1, #1
 800a16c:	3701      	adds	r7, #1
 800a16e:	f007 071f 	and.w	r7, r7, #31
 800a172:	40b9      	lsls	r1, r7
 800a174:	e770      	b.n	800a058 <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a176:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800a17a:	fab2 f282 	clz	r2, r2
 800a17e:	2303      	movs	r3, #3
 800a180:	f06f 001d 	mvn.w	r0, #29
 800a184:	3201      	adds	r2, #1
 800a186:	f002 021f 	and.w	r2, r2, #31
 800a18a:	fb13 0302 	smlabb	r3, r3, r2, r0
 800a18e:	e76e      	b.n	800a06e <HAL_ADC_ConfigChannel+0x1d2>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a190:	4b1f      	ldr	r3, [pc, #124]	; (800a210 <HAL_ADC_ConfigChannel+0x374>)
 800a192:	e7a7      	b.n	800a0e4 <HAL_ADC_ConfigChannel+0x248>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a194:	4821      	ldr	r0, [pc, #132]	; (800a21c <HAL_ADC_ConfigChannel+0x380>)
 800a196:	f7ff fe79 	bl	8009e8c <LL_ADC_IsEnabled>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d0b1      	beq.n	800a102 <HAL_ADC_ConfigChannel+0x266>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a19e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a1a0:	f043 0320 	orr.w	r3, r3, #32
 800a1a4:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e6f7      	b.n	8009f9a <HAL_ADC_ConfigChannel+0xfe>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a1aa:	481f      	ldr	r0, [pc, #124]	; (800a228 <HAL_ADC_ConfigChannel+0x38c>)
 800a1ac:	4282      	cmp	r2, r0
 800a1ae:	d110      	bne.n	800a1d2 <HAL_ADC_ConfigChannel+0x336>
 800a1b0:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 800a1b4:	f47f aef0 	bne.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1b8:	4a18      	ldr	r2, [pc, #96]	; (800a21c <HAL_ADC_ConfigChannel+0x380>)
 800a1ba:	4294      	cmp	r4, r2
 800a1bc:	f47f aeec 	bne.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
 800a1c0:	4814      	ldr	r0, [pc, #80]	; (800a214 <HAL_ADC_ConfigChannel+0x378>)
 800a1c2:	6882      	ldr	r2, [r0, #8]
 800a1c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a1ce:	6082      	str	r2, [r0, #8]
}
 800a1d0:	e6e3      	b.n	8009f9a <HAL_ADC_ConfigChannel+0xfe>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a1d2:	4816      	ldr	r0, [pc, #88]	; (800a22c <HAL_ADC_ConfigChannel+0x390>)
 800a1d4:	4282      	cmp	r2, r0
 800a1d6:	f47f aedf 	bne.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
 800a1da:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800a1de:	f47f aedb 	bne.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
            if (ADC_VREFINT_INSTANCE(hadc))
 800a1e2:	4a0e      	ldr	r2, [pc, #56]	; (800a21c <HAL_ADC_ConfigChannel+0x380>)
 800a1e4:	4294      	cmp	r4, r2
 800a1e6:	f47f aed7 	bne.w	8009f98 <HAL_ADC_ConfigChannel+0xfc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a1ea:	480a      	ldr	r0, [pc, #40]	; (800a214 <HAL_ADC_ConfigChannel+0x378>)
 800a1ec:	6882      	ldr	r2, [r0, #8]
 800a1ee:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a1f8:	e7e9      	b.n	800a1ce <HAL_ADC_ConfigChannel+0x332>
 800a1fa:	bf00      	nop
 800a1fc:	5c001000 	.word	0x5c001000
 800a200:	000fffff 	.word	0x000fffff
 800a204:	47ff0000 	.word	0x47ff0000
 800a208:	40022000 	.word	0x40022000
 800a20c:	40022100 	.word	0x40022100
 800a210:	40022300 	.word	0x40022300
 800a214:	58026300 	.word	0x58026300
 800a218:	cb840000 	.word	0xcb840000
 800a21c:	58026000 	.word	0x58026000
 800a220:	24000030 	.word	0x24000030
 800a224:	00030d40 	.word	0x00030d40
 800a228:	c7520000 	.word	0xc7520000
 800a22c:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a230:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800a232:	f042 0220 	orr.w	r2, r2, #32
 800a236:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800a238:	e6af      	b.n	8009f9a <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 800a23a:	2302      	movs	r3, #2
 800a23c:	e6b0      	b.n	8009fa0 <HAL_ADC_ConfigChannel+0x104>
 800a23e:	bf00      	nop

0800a240 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800a240:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a242:	4a43      	ldr	r2, [pc, #268]	; (800a350 <ADC_ConfigureBoostMode+0x110>)
{
 800a244:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a246:	6803      	ldr	r3, [r0, #0]
 800a248:	4293      	cmp	r3, r2
 800a24a:	d003      	beq.n	800a254 <ADC_ConfigureBoostMode+0x14>
 800a24c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800a250:	4293      	cmp	r3, r2
 800a252:	d125      	bne.n	800a2a0 <ADC_ConfigureBoostMode+0x60>
 800a254:	4b3f      	ldr	r3, [pc, #252]	; (800a354 <ADC_ConfigureBoostMode+0x114>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800a25c:	bf14      	ite	ne
 800a25e:	2301      	movne	r3, #1
 800a260:	2300      	moveq	r3, #0
 800a262:	b9fb      	cbnz	r3, 800a2a4 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800a264:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a268:	2100      	movs	r1, #0
 800a26a:	f005 fadd 	bl	800f828 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800a26e:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800a270:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800a272:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800a276:	d04a      	beq.n	800a30e <ADC_ConfigureBoostMode+0xce>
 800a278:	d83f      	bhi.n	800a2fa <ADC_ConfigureBoostMode+0xba>
 800a27a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800a27e:	d044      	beq.n	800a30a <ADC_ConfigureBoostMode+0xca>
 800a280:	d836      	bhi.n	800a2f0 <ADC_ConfigureBoostMode+0xb0>
 800a282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a286:	d008      	beq.n	800a29a <ADC_ConfigureBoostMode+0x5a>
 800a288:	d82c      	bhi.n	800a2e4 <ADC_ConfigureBoostMode+0xa4>
 800a28a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a28e:	d004      	beq.n	800a29a <ADC_ConfigureBoostMode+0x5a>
 800a290:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a294:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800a298:	d116      	bne.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800a29a:	0c9b      	lsrs	r3, r3, #18
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	e00f      	b.n	800a2c0 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800a2a0:	4b2d      	ldr	r3, [pc, #180]	; (800a358 <ADC_ConfigureBoostMode+0x118>)
 800a2a2:	e7d8      	b.n	800a256 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 800a2a4:	f004 fa1e 	bl	800e6e4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800a2a8:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800a2aa:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800a2ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2b0:	d005      	beq.n	800a2be <ADC_ConfigureBoostMode+0x7e>
 800a2b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2b6:	d006      	beq.n	800a2c6 <ADC_ConfigureBoostMode+0x86>
 800a2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2bc:	d104      	bne.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800a2be:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800a2c0:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 800a2c4:	e000      	b.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 800a2c6:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800a2c8:	f7ff fdc0 	bl	8009e4c <HAL_GetREVID>
 800a2cc:	f241 0303 	movw	r3, #4099	; 0x1003
 800a2d0:	4298      	cmp	r0, r3
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	d823      	bhi.n	800a31e <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 800a2d6:	4a21      	ldr	r2, [pc, #132]	; (800a35c <ADC_ConfigureBoostMode+0x11c>)
 800a2d8:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800a2da:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 800a2dc:	d91b      	bls.n	800a316 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800a2de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2e2:	e01a      	b.n	800a31a <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 800a2e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800a2e8:	d0d7      	beq.n	800a29a <ADC_ConfigureBoostMode+0x5a>
 800a2ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800a2ee:	e7d3      	b.n	800a298 <ADC_ConfigureBoostMode+0x58>
 800a2f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2f4:	d1e8      	bne.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 800a2f6:	0944      	lsrs	r4, r0, #5
        break;
 800a2f8:	e7e6      	b.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 800a2fa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800a2fe:	d008      	beq.n	800a312 <ADC_ConfigureBoostMode+0xd2>
 800a300:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800a304:	d1e0      	bne.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 800a306:	0a04      	lsrs	r4, r0, #8
        break;
 800a308:	e7de      	b.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 800a30a:	0904      	lsrs	r4, r0, #4
        break;
 800a30c:	e7dc      	b.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 800a30e:	0984      	lsrs	r4, r0, #6
        break;
 800a310:	e7da      	b.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 800a312:	09c4      	lsrs	r4, r0, #7
        break;
 800a314:	e7d8      	b.n	800a2c8 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800a316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a31a:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800a31c:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 800a31e:	4a10      	ldr	r2, [pc, #64]	; (800a360 <ADC_ConfigureBoostMode+0x120>)
 800a320:	4294      	cmp	r4, r2
 800a322:	d803      	bhi.n	800a32c <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800a324:	689a      	ldr	r2, [r3, #8]
 800a326:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a32a:	e7f6      	b.n	800a31a <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 800a32c:	4a0d      	ldr	r2, [pc, #52]	; (800a364 <ADC_ConfigureBoostMode+0x124>)
 800a32e:	4294      	cmp	r4, r2
 800a330:	d803      	bhi.n	800a33a <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a338:	e7d1      	b.n	800a2de <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 800a33a:	4a0b      	ldr	r2, [pc, #44]	; (800a368 <ADC_ConfigureBoostMode+0x128>)
 800a33c:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	bf96      	itet	ls
 800a342:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a346:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800a34a:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800a34e:	e7e4      	b.n	800a31a <ADC_ConfigureBoostMode+0xda>
 800a350:	40022000 	.word	0x40022000
 800a354:	40022300 	.word	0x40022300
 800a358:	58026300 	.word	0x58026300
 800a35c:	01312d00 	.word	0x01312d00
 800a360:	00bebc21 	.word	0x00bebc21
 800a364:	017d7841 	.word	0x017d7841
 800a368:	02faf081 	.word	0x02faf081

0800a36c <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 800a36c:	2300      	movs	r3, #0
{
 800a36e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 800a370:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800a372:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800a374:	2800      	cmp	r0, #0
 800a376:	f000 80f0 	beq.w	800a55a <HAL_ADC_Init+0x1ee>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a37a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800a37c:	b925      	cbnz	r5, 800a388 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800a37e:	f7f6 fa07 	bl	8000790 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800a382:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800a384:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a388:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	0090      	lsls	r0, r2, #2
 800a38e:	d505      	bpl.n	800a39c <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800a396:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a39a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	00d1      	lsls	r1, r2, #3
 800a3a0:	f140 809d 	bpl.w	800a4de <HAL_ADC_Init+0x172>
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	00d2      	lsls	r2, r2, #3
 800a3a8:	f100 80af 	bmi.w	800a50a <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800a3ae:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3b0:	f042 0210 	orr.w	r2, r2, #16
 800a3b4:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a3b8:	f042 0201 	orr.w	r2, r2, #1
 800a3bc:	65a2      	str	r2, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fd68 	bl	8009e94 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a3c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a3c6:	f002 0210 	and.w	r2, r2, #16
 800a3ca:	4310      	orrs	r0, r2
 800a3cc:	f040 80c1 	bne.w	800a552 <HAL_ADC_Init+0x1e6>
    ADC_STATE_CLR_SET(hadc->State,
 800a3d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3d2:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 800a3d4:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800a3d8:	f042 0202 	orr.w	r2, r2, #2
 800a3dc:	6562      	str	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3de:	f7ff fd55 	bl	8009e8c <LL_ADC_IsEnabled>
 800a3e2:	b980      	cbnz	r0, 800a406 <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a3e4:	4e5e      	ldr	r6, [pc, #376]	; (800a560 <HAL_ADC_Init+0x1f4>)
 800a3e6:	495f      	ldr	r1, [pc, #380]	; (800a564 <HAL_ADC_Init+0x1f8>)
 800a3e8:	42b3      	cmp	r3, r6
 800a3ea:	d002      	beq.n	800a3f2 <HAL_ADC_Init+0x86>
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	f040 808e 	bne.w	800a50e <HAL_ADC_Init+0x1a2>
 800a3f2:	485b      	ldr	r0, [pc, #364]	; (800a560 <HAL_ADC_Init+0x1f4>)
 800a3f4:	f7ff fd4a 	bl	8009e8c <LL_ADC_IsEnabled>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	485a      	ldr	r0, [pc, #360]	; (800a564 <HAL_ADC_Init+0x1f8>)
 800a3fc:	f7ff fd46 	bl	8009e8c <LL_ADC_IsEnabled>
 800a400:	4310      	orrs	r0, r2
 800a402:	f000 8092 	beq.w	800a52a <HAL_ADC_Init+0x1be>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800a406:	f7ff fd21 	bl	8009e4c <HAL_GetREVID>
 800a40a:	f241 0303 	movw	r3, #4099	; 0x1003
 800a40e:	7f21      	ldrb	r1, [r4, #28]
 800a410:	4298      	cmp	r0, r3
 800a412:	7d62      	ldrb	r2, [r4, #21]
 800a414:	68a0      	ldr	r0, [r4, #8]
 800a416:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a418:	f240 808d 	bls.w	800a536 <HAL_ADC_Init+0x1ca>
 800a41c:	2810      	cmp	r0, #16
 800a41e:	f040 808a 	bne.w	800a536 <HAL_ADC_Init+0x1ca>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a422:	0352      	lsls	r2, r2, #13
 800a424:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a428:	431a      	orrs	r2, r3
 800a42a:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a42e:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a430:	bf02      	ittt	eq
 800a432:	6a22      	ldreq	r2, [r4, #32]
 800a434:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a438:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a43c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a43e:	b122      	cbz	r2, 800a44a <HAL_ADC_Init+0xde>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a440:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a444:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a446:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a448:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a44a:	6822      	ldr	r2, [r4, #0]
 800a44c:	4946      	ldr	r1, [pc, #280]	; (800a568 <HAL_ADC_Init+0x1fc>)
 800a44e:	68d0      	ldr	r0, [r2, #12]
 800a450:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a452:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a454:	4319      	orrs	r1, r3
 800a456:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a458:	f7ff fd1c 	bl	8009e94 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a45c:	6893      	ldr	r3, [r2, #8]
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	4318      	orrs	r0, r3
 800a464:	d127      	bne.n	800a4b6 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a466:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a468:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a46a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a46e:	f023 0303 	bic.w	r3, r3, #3
 800a472:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 800a476:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a478:	430b      	orrs	r3, r1
 800a47a:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800a47c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800a480:	2b01      	cmp	r3, #1
 800a482:	d15e      	bne.n	800a542 <HAL_ADC_Init+0x1d6>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800a484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a486:	6910      	ldr	r0, [r2, #16]
 800a488:	1e59      	subs	r1, r3, #1
 800a48a:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 800a48e:	4333      	orrs	r3, r6
 800a490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a494:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a496:	430b      	orrs	r3, r1
 800a498:	4934      	ldr	r1, [pc, #208]	; (800a56c <HAL_ADC_Init+0x200>)
 800a49a:	4001      	ands	r1, r0
 800a49c:	430b      	orrs	r3, r1
 800a49e:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a4a2:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800a4a4:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800a4a6:	6913      	ldr	r3, [r2, #16]
 800a4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 800a4b2:	f7ff fec5 	bl	800a240 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a4b6:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a4b8:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d145      	bne.n	800a54a <HAL_ADC_Init+0x1de>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a4be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a4c0:	69a3      	ldr	r3, [r4, #24]
 800a4c2:	f021 010f 	bic.w	r1, r1, #15
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a4ca:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a4cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4ce:	f023 0303 	bic.w	r3, r3, #3
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	6563      	str	r3, [r4, #84]	; 0x54
}
 800a4d8:	4628      	mov	r0, r5
 800a4da:	b002      	add	sp, #8
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800a4de:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a4e0:	4923      	ldr	r1, [pc, #140]	; (800a570 <HAL_ADC_Init+0x204>)
 800a4e2:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800a4e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a4ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a4ee:	609a      	str	r2, [r3, #8]
 800a4f0:	4a20      	ldr	r2, [pc, #128]	; (800a574 <HAL_ADC_Init+0x208>)
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	fbb2 f2f1 	udiv	r2, r2, r1
 800a4f8:	3201      	adds	r2, #1
      wait_loop_index--;
 800a4fa:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 800a4fc:	9a01      	ldr	r2, [sp, #4]
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	f43f af50 	beq.w	800a3a4 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	3a01      	subs	r2, #1
 800a508:	e7f7      	b.n	800a4fa <HAL_ADC_Init+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a50a:	2500      	movs	r5, #0
 800a50c:	e757      	b.n	800a3be <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a50e:	481a      	ldr	r0, [pc, #104]	; (800a578 <HAL_ADC_Init+0x20c>)
 800a510:	f7ff fcbc 	bl	8009e8c <LL_ADC_IsEnabled>
 800a514:	2800      	cmp	r0, #0
 800a516:	f47f af76 	bne.w	800a406 <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a51a:	4a18      	ldr	r2, [pc, #96]	; (800a57c <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a51c:	6893      	ldr	r3, [r2, #8]
 800a51e:	6861      	ldr	r1, [r4, #4]
 800a520:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a524:	430b      	orrs	r3, r1
 800a526:	6093      	str	r3, [r2, #8]
}
 800a528:	e76d      	b.n	800a406 <HAL_ADC_Init+0x9a>
 800a52a:	42b3      	cmp	r3, r6
 800a52c:	d001      	beq.n	800a532 <HAL_ADC_Init+0x1c6>
 800a52e:	428b      	cmp	r3, r1
 800a530:	d1f3      	bne.n	800a51a <HAL_ADC_Init+0x1ae>
 800a532:	4a13      	ldr	r2, [pc, #76]	; (800a580 <HAL_ADC_Init+0x214>)
 800a534:	e7f2      	b.n	800a51c <HAL_ADC_Init+0x1b0>
                  hadc->Init.Overrun                                                    |
 800a536:	4303      	orrs	r3, r0
 800a538:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a53c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a540:	e775      	b.n	800a42e <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a542:	6913      	ldr	r3, [r2, #16]
 800a544:	f023 0301 	bic.w	r3, r3, #1
 800a548:	e7ab      	b.n	800a4a2 <HAL_ADC_Init+0x136>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a54a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a54c:	f023 030f 	bic.w	r3, r3, #15
 800a550:	e7bb      	b.n	800a4ca <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a552:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a554:	f043 0310 	orr.w	r3, r3, #16
 800a558:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800a55a:	2501      	movs	r5, #1
 800a55c:	e7bc      	b.n	800a4d8 <HAL_ADC_Init+0x16c>
 800a55e:	bf00      	nop
 800a560:	40022000 	.word	0x40022000
 800a564:	40022100 	.word	0x40022100
 800a568:	fff0c003 	.word	0xfff0c003
 800a56c:	fc00f81e 	.word	0xfc00f81e
 800a570:	00030d40 	.word	0x00030d40
 800a574:	24000030 	.word	0x24000030
 800a578:	58026000 	.word	0x58026000
 800a57c:	58026300 	.word	0x58026300
 800a580:	40022300 	.word	0x40022300

0800a584 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a584:	6880      	ldr	r0, [r0, #8]
}
 800a586:	f000 0001 	and.w	r0, r0, #1
 800a58a:	4770      	bx	lr

0800a58c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a58c:	6880      	ldr	r0, [r0, #8]
}
 800a58e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800a592:	4770      	bx	lr

0800a594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a594:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a596:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800a59a:	b09a      	sub	sp, #104	; 0x68
 800a59c:	4602      	mov	r2, r0
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a59e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d052      	beq.n	800a64a <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 800a5a4:	2301      	movs	r3, #1

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a5a6:	4c2a      	ldr	r4, [pc, #168]	; (800a650 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  __HAL_LOCK(hadc);
 800a5a8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800a5ac:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a5ae:	6816      	ldr	r6, [r2, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800a5b0:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a5b2:	42a6      	cmp	r6, r4
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800a5b4:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a5b6:	d10d      	bne.n	800a5d4 <HAL_ADCEx_MultiModeConfigChannel+0x40>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a5b8:	4826      	ldr	r0, [pc, #152]	; (800a654 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800a5ba:	f7ff ffe7 	bl	800a58c <LL_ADC_REG_IsConversionOngoing>
 800a5be:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f7ff ffe3 	bl	800a58c <LL_ADC_REG_IsConversionOngoing>
 800a5c6:	4320      	orrs	r0, r4
 800a5c8:	d00d      	beq.n	800a5e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a5ca:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800a5cc:	f041 0120 	orr.w	r1, r1, #32
 800a5d0:	6551      	str	r1, [r2, #84]	; 0x54
 800a5d2:	e027      	b.n	800a624 <HAL_ADCEx_MultiModeConfigChannel+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a5d4:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800a5d6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    return HAL_ERROR;
 800a5da:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a5dc:	f041 0120 	orr.w	r1, r1, #32
 800a5e0:	6551      	str	r1, [r2, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800a5e2:	b01a      	add	sp, #104	; 0x68
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a5e6:	4c1c      	ldr	r4, [pc, #112]	; (800a658 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800a5e8:	68a3      	ldr	r3, [r4, #8]
 800a5ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a5ee:	b1dd      	cbz	r5, 800a628 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800a5f0:	6848      	ldr	r0, [r1, #4]
 800a5f2:	4303      	orrs	r3, r0
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5f4:	4630      	mov	r0, r6
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800a5f6:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5f8:	f7ff ffc4 	bl	800a584 <LL_ADC_IsEnabled>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4815      	ldr	r0, [pc, #84]	; (800a654 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800a600:	f7ff ffc0 	bl	800a584 <LL_ADC_IsEnabled>
 800a604:	4303      	orrs	r3, r0
 800a606:	d004      	beq.n	800a612 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a608:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800a60a:	2300      	movs	r3, #0
 800a60c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 800a610:	e7e7      	b.n	800a5e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 800a612:	6889      	ldr	r1, [r1, #8]
 800a614:	68a0      	ldr	r0, [r4, #8]
 800a616:	430d      	orrs	r5, r1
 800a618:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 800a61c:	f021 010f 	bic.w	r1, r1, #15
 800a620:	430d      	orrs	r5, r1
 800a622:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 800a624:	4618      	mov	r0, r3
 800a626:	e7f0      	b.n	800a60a <HAL_ADCEx_MultiModeConfigChannel+0x76>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800a628:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7ff ffaa 	bl	800a584 <LL_ADC_IsEnabled>
 800a630:	4603      	mov	r3, r0
 800a632:	4808      	ldr	r0, [pc, #32]	; (800a654 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800a634:	f7ff ffa6 	bl	800a584 <LL_ADC_IsEnabled>
 800a638:	4303      	orrs	r3, r0
 800a63a:	d1e5      	bne.n	800a608 <HAL_ADCEx_MultiModeConfigChannel+0x74>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a63c:	68a1      	ldr	r1, [r4, #8]
 800a63e:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 800a642:	f021 010f 	bic.w	r1, r1, #15
 800a646:	60a1      	str	r1, [r4, #8]
 800a648:	e7ec      	b.n	800a624 <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
 800a64a:	2002      	movs	r0, #2
 800a64c:	e7c9      	b.n	800a5e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800a64e:	bf00      	nop
 800a650:	40022000 	.word	0x40022000
 800a654:	40022100 	.word	0x40022100
 800a658:	40022300 	.word	0x40022300

0800a65c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a65c:	4907      	ldr	r1, [pc, #28]	; (800a67c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a65e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a660:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a662:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a66a:	0412      	lsls	r2, r2, #16
 800a66c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a66e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800a678:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a67a:	4770      	bx	lr
 800a67c:	e000ed00 	.word	0xe000ed00

0800a680 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a680:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a682:	b530      	push	{r4, r5, lr}
 800a684:	68dc      	ldr	r4, [r3, #12]
 800a686:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a68a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a68e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a690:	2b04      	cmp	r3, #4
 800a692:	bf28      	it	cs
 800a694:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a696:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a698:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a69c:	bf8c      	ite	hi
 800a69e:	3c03      	subhi	r4, #3
 800a6a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6a2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800a6a6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6a8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6ac:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6b0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6b4:	fa03 f304 	lsl.w	r3, r3, r4
 800a6b8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a6c0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a6c2:	db06      	blt.n	800a6d2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800a6c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800a6cc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a6d0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6d2:	f000 000f 	and.w	r0, r0, #15
 800a6d6:	4a02      	ldr	r2, [pc, #8]	; (800a6e0 <HAL_NVIC_SetPriority+0x60>)
 800a6d8:	5413      	strb	r3, [r2, r0]
 800a6da:	e7f9      	b.n	800a6d0 <HAL_NVIC_SetPriority+0x50>
 800a6dc:	e000ed00 	.word	0xe000ed00
 800a6e0:	e000ed14 	.word	0xe000ed14

0800a6e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	db07      	blt.n	800a6f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	0941      	lsrs	r1, r0, #5
 800a6ec:	f000 001f 	and.w	r0, r0, #31
 800a6f0:	4a02      	ldr	r2, [pc, #8]	; (800a6fc <HAL_NVIC_EnableIRQ+0x18>)
 800a6f2:	4083      	lsls	r3, r0
 800a6f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	e000e100 	.word	0xe000e100

0800a700 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a700:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a702:	4604      	mov	r4, r0
 800a704:	b908      	cbnz	r0, 800a70a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800a706:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a708:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a70a:	7f43      	ldrb	r3, [r0, #29]
 800a70c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a710:	b913      	cbnz	r3, 800a718 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800a712:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a714:	f7f6 f8c8 	bl	80008a8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a718:	2302      	movs	r3, #2
 800a71a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a71c:	7923      	ldrb	r3, [r4, #4]
 800a71e:	b9e3      	cbnz	r3, 800a75a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	4a13      	ldr	r2, [pc, #76]	; (800a770 <HAL_CRC_Init+0x70>)
 800a724:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	f022 0218 	bic.w	r2, r2, #24
 800a72c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a72e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a730:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a732:	b9d2      	cbnz	r2, 800a76a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a734:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a738:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800a73a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a73c:	689a      	ldr	r2, [r3, #8]
 800a73e:	6961      	ldr	r1, [r4, #20]
 800a740:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a744:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a746:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a748:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a74a:	689a      	ldr	r2, [r3, #8]
 800a74c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a750:	430a      	orrs	r2, r1
 800a752:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a754:	2301      	movs	r3, #1
 800a756:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800a758:	e7d6      	b.n	800a708 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a75a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 f808 	bl	800a774 <HAL_CRCEx_Polynomial_Set>
 800a764:	2800      	cmp	r0, #0
 800a766:	d0e2      	beq.n	800a72e <HAL_CRC_Init+0x2e>
 800a768:	e7cd      	b.n	800a706 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a76a:	6922      	ldr	r2, [r4, #16]
 800a76c:	e7e4      	b.n	800a738 <HAL_CRC_Init+0x38>
 800a76e:	bf00      	nop
 800a770:	04c11db7 	.word	0x04c11db7

0800a774 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a774:	07cb      	lsls	r3, r1, #31
{
 800a776:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a778:	d50c      	bpl.n	800a794 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a77a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a77c:	3b01      	subs	r3, #1
 800a77e:	d31c      	bcc.n	800a7ba <HAL_CRCEx_Polynomial_Set+0x46>
 800a780:	fa21 f403 	lsr.w	r4, r1, r3
 800a784:	07e4      	lsls	r4, r4, #31
 800a786:	d5f9      	bpl.n	800a77c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800a788:	2a10      	cmp	r2, #16
 800a78a:	d012      	beq.n	800a7b2 <HAL_CRCEx_Polynomial_Set+0x3e>
 800a78c:	d804      	bhi.n	800a798 <HAL_CRCEx_Polynomial_Set+0x24>
 800a78e:	b13a      	cbz	r2, 800a7a0 <HAL_CRCEx_Polynomial_Set+0x2c>
 800a790:	2a08      	cmp	r2, #8
 800a792:	d010      	beq.n	800a7b6 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 800a794:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800a796:	e00b      	b.n	800a7b0 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 800a798:	2a18      	cmp	r2, #24
 800a79a:	d1fb      	bne.n	800a794 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800a79c:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800a79e:	d8f9      	bhi.n	800a794 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a7a0:	6800      	ldr	r0, [r0, #0]
 800a7a2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a7a4:	6883      	ldr	r3, [r0, #8]
 800a7a6:	f023 0318 	bic.w	r3, r3, #24
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	6083      	str	r3, [r0, #8]
 800a7ae:	2000      	movs	r0, #0
}
 800a7b0:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800a7b2:	2b07      	cmp	r3, #7
 800a7b4:	e7f3      	b.n	800a79e <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 800a7b6:	2b0f      	cmp	r3, #15
 800a7b8:	e7f1      	b.n	800a79e <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	d1ea      	bne.n	800a794 <HAL_CRCEx_Polynomial_Set+0x20>
 800a7be:	e7ef      	b.n	800a7a0 <HAL_CRCEx_Polynomial_Set+0x2c>

0800a7c0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a7c0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	b168      	cbz	r0, 800a7e2 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a7c6:	7903      	ldrb	r3, [r0, #4]
 800a7c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a7cc:	b913      	cbnz	r3, 800a7d4 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a7ce:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a7d0:	f7f6 f8ae 	bl	8000930 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a7d4:	2302      	movs	r3, #2

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a7d6:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800a7d8:	7123      	strb	r3, [r4, #4]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a7da:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a7dc:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800a7de:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800a7e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	e7fc      	b.n	800a7e0 <HAL_DAC_Init+0x20>
	...

0800a7e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	4616      	mov	r6, r2
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a7ee:	7942      	ldrb	r2, [r0, #5]
{
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 800a7f4:	2a01      	cmp	r2, #1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800a7f6:	680b      	ldr	r3, [r1, #0]
  __HAL_LOCK(hdac);
 800a7f8:	f04f 0002 	mov.w	r0, #2
 800a7fc:	d07c      	beq.n	800a8f8 <HAL_DAC_ConfigChannel+0x110>
 800a7fe:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a800:	2b04      	cmp	r3, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 800a802:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 800a804:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a806:	d127      	bne.n	800a858 <HAL_DAC_ConfigChannel+0x70>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800a808:	f7ff fb08 	bl	8009e1c <HAL_GetTick>
 800a80c:	4607      	mov	r7, r0

    if (Channel == DAC_CHANNEL_1)
 800a80e:	2e00      	cmp	r6, #0
 800a810:	d17d      	bne.n	800a90e <HAL_DAC_ConfigChannel+0x126>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a812:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800a92c <HAL_DAC_ConfigChannel+0x144>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81a:	ea13 0f08 	tst.w	r3, r8
 800a81e:	d15b      	bne.n	800a8d8 <HAL_DAC_ConfigChannel+0xf0>

            return HAL_TIMEOUT;
          }
        }
      }
      HAL_Delay(1);
 800a820:	2001      	movs	r0, #1
 800a822:	f7ff fb01 	bl	8009e28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	69aa      	ldr	r2, [r5, #24]
 800a82a:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	f006 0110 	and.w	r1, r6, #16
 800a832:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800a836:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a838:	4088      	lsls	r0, r1
 800a83a:	ea23 0300 	bic.w	r3, r3, r0
 800a83e:	69e8      	ldr	r0, [r5, #28]
 800a840:	4088      	lsls	r0, r1
 800a842:	4303      	orrs	r3, r0
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800a844:	20ff      	movs	r0, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800a846:	6493      	str	r3, [r2, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800a848:	4088      	lsls	r0, r1
 800a84a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a84c:	ea23 0300 	bic.w	r3, r3, r0
 800a850:	6a28      	ldr	r0, [r5, #32]
 800a852:	4088      	lsls	r0, r1
 800a854:	4303      	orrs	r3, r0
 800a856:	64d3      	str	r3, [r2, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a858:	6929      	ldr	r1, [r5, #16]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800a85a:	f006 0210 	and.w	r2, r6, #16
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a85e:	6823      	ldr	r3, [r4, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a860:	2901      	cmp	r1, #1
 800a862:	d108      	bne.n	800a876 <HAL_DAC_ConfigChannel+0x8e>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a864:	211f      	movs	r1, #31
    tmpreg1 = hdac->Instance->CCR;
 800a866:	6b98      	ldr	r0, [r3, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a868:	4091      	lsls	r1, r2
 800a86a:	ea20 0001 	bic.w	r0, r0, r1
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a86e:	6969      	ldr	r1, [r5, #20]
 800a870:	4091      	lsls	r1, r2
 800a872:	4301      	orrs	r1, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a874:	6399      	str	r1, [r3, #56]	; 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a876:	2107      	movs	r1, #7
  tmpreg1 = hdac->Instance->MCR;
 800a878:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a87a:	4091      	lsls	r1, r2
 800a87c:	ea26 0601 	bic.w	r6, r6, r1
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a880:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800a884:	2801      	cmp	r0, #1
 800a886:	d04d      	beq.n	800a924 <HAL_DAC_ConfigChannel+0x13c>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800a888:	2802      	cmp	r0, #2
 800a88a:	d04d      	beq.n	800a928 <HAL_DAC_ConfigChannel+0x140>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a88c:	fab1 f081 	clz	r0, r1
 800a890:	0940      	lsrs	r0, r0, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a892:	682f      	ldr	r7, [r5, #0]
 800a894:	4339      	orrs	r1, r7
 800a896:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a898:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a89c:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a89e:	4090      	lsls	r0, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a8a0:	4331      	orrs	r1, r6
  hdac->Instance->MCR = tmpreg1;
 800a8a2:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a8a4:	6819      	ldr	r1, [r3, #0]
 800a8a6:	ea21 0100 	bic.w	r1, r1, r0
 800a8aa:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a8ac:	f640 71fe 	movw	r1, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800a8b0:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a8b2:	4091      	lsls	r1, r2
 800a8b4:	ea20 0001 	bic.w	r0, r0, r1
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a8b8:	6869      	ldr	r1, [r5, #4]
 800a8ba:	4091      	lsls	r1, r2
 800a8bc:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a8be:	20c0      	movs	r0, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 800a8c0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a8c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a8c6:	6819      	ldr	r1, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a8c8:	2000      	movs	r0, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800a8ca:	ea21 0202 	bic.w	r2, r1, r2
 800a8ce:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800a8d0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdac);
 800a8d2:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_READY;
 800a8d4:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800a8d6:	e00f      	b.n	800a8f8 <HAL_DAC_ConfigChannel+0x110>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a8d8:	f7ff faa0 	bl	8009e1c <HAL_GetTick>
 800a8dc:	1bc0      	subs	r0, r0, r7
 800a8de:	2801      	cmp	r0, #1
 800a8e0:	d999      	bls.n	800a816 <HAL_DAC_ConfigChannel+0x2e>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e6:	ea13 0f08 	tst.w	r3, r8
 800a8ea:	d094      	beq.n	800a816 <HAL_DAC_ConfigChannel+0x2e>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a8ec:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a8ee:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a8f0:	f043 0308 	orr.w	r3, r3, #8
 800a8f4:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a8f6:	7120      	strb	r0, [r4, #4]
}
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a8fc:	f7ff fa8e 	bl	8009e1c <HAL_GetTick>
 800a900:	1bc0      	subs	r0, r0, r7
 800a902:	2801      	cmp	r0, #1
 800a904:	d903      	bls.n	800a90e <HAL_DAC_ConfigChannel+0x126>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	dbee      	blt.n	800a8ec <HAL_DAC_ConfigChannel+0x104>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a912:	2b00      	cmp	r3, #0
 800a914:	dbf2      	blt.n	800a8fc <HAL_DAC_ConfigChannel+0x114>
      HAL_Delay(1U);
 800a916:	2001      	movs	r0, #1
 800a918:	f7ff fa86 	bl	8009e28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	69aa      	ldr	r2, [r5, #24]
 800a920:	645a      	str	r2, [r3, #68]	; 0x44
 800a922:	e783      	b.n	800a82c <HAL_DAC_ConfigChannel+0x44>
    connectOnChip = 0x00000000UL;
 800a924:	2000      	movs	r0, #0
 800a926:	e7b4      	b.n	800a892 <HAL_DAC_ConfigChannel+0xaa>
    connectOnChip = DAC_MCR_MODE1_0;
 800a928:	2001      	movs	r0, #1
 800a92a:	e7b2      	b.n	800a892 <HAL_DAC_ConfigChannel+0xaa>
 800a92c:	20008000 	.word	0x20008000

0800a930 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a930:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a932:	4604      	mov	r4, r0
 800a934:	2800      	cmp	r0, #0
 800a936:	d036      	beq.n	800a9a6 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a938:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a93c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a940:	b91b      	cbnz	r3, 800a94a <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a942:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a946:	f7f6 f84d 	bl	80009e4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a94a:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a94c:	69e0      	ldr	r0, [r4, #28]
 800a94e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a950:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a958:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a95a:	6819      	ldr	r1, [r3, #0]
 800a95c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800a960:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a964:	430a      	orrs	r2, r1
 800a966:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a968:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a96a:	68a2      	ldr	r2, [r4, #8]
 800a96c:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800a970:	4302      	orrs	r2, r0
 800a972:	f021 0101 	bic.w	r1, r1, #1
 800a976:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a978:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a97a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a97c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a97e:	0c12      	lsrs	r2, r2, #16
 800a980:	0412      	lsls	r2, r2, #16
 800a982:	430a      	orrs	r2, r1
 800a984:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a988:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800a98c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800a990:	0552      	lsls	r2, r2, #21
 800a992:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a996:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a998:	430a      	orrs	r2, r1
 800a99a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a99c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a99e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a9a0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800a9a4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e7fc      	b.n	800a9a4 <HAL_DMA2D_Init+0x74>
	...

0800a9ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a9ac:	b570      	push	{r4, r5, r6, lr}
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a9ae:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	f04f 0302 	mov.w	r3, #2
 800a9b8:	d032      	beq.n	800aa20 <HAL_DMA2D_ConfigLayer+0x74>
 800a9ba:	2201      	movs	r2, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a9bc:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800a9c0:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a9c4:	221c      	movs	r2, #28
 800a9c6:	fb02 0201 	mla	r2, r2, r1, r0
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a9ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a9cc:	e9d2 450b 	ldrd	r4, r5, [r2, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a9d0:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a9d2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a9d6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800a9d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a9da:	4323      	orrs	r3, r4
 800a9dc:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a9e0:	f1a4 0509 	sub.w	r5, r4, #9
 800a9e4:	2d01      	cmp	r5, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a9e6:	bf96      	itet	ls
 800a9e8:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a9ec:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a9f0:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a9f2:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a9f4:	b9b1      	cbnz	r1, 800aa24 <HAL_DMA2D_ConfigLayer+0x78>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a9f6:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a9f8:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a9fa:	4919      	ldr	r1, [pc, #100]	; (800aa60 <HAL_DMA2D_ConfigLayer+0xb4>)
 800a9fc:	ea01 0104 	and.w	r1, r1, r4
 800aa00:	ea41 0103 	orr.w	r1, r1, r3
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800aa04:	6a83      	ldr	r3, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800aa06:	6251      	str	r1, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800aa08:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aa0a:	d803      	bhi.n	800aa14 <HAL_DMA2D_ConfigLayer+0x68>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800aa0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aa0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa12:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  __HAL_LOCK(hdma2d);
 800aa20:	4618      	mov	r0, r3

  return HAL_OK;
}
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800aa24:	2c0b      	cmp	r4, #11
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800aa26:	bf05      	ittet	eq
 800aa28:	241c      	moveq	r4, #28
      regMask  |= DMA2D_FGPFCCR_CSS;
 800aa2a:	4e0e      	ldreq	r6, [pc, #56]	; (800aa64 <HAL_DMA2D_ConfigLayer+0xb8>)
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800aa2c:	4e0e      	ldrne	r6, [pc, #56]	; (800aa68 <HAL_DMA2D_ConfigLayer+0xbc>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800aa2e:	fb04 0401 	mlaeq	r4, r4, r1, r0
 800aa32:	bf04      	itt	eq
 800aa34:	6c24      	ldreq	r4, [r4, #64]	; 0x40
 800aa36:	ea43 4384 	orreq.w	r3, r3, r4, lsl #18
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800aa3a:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aa3c:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800aa3e:	ea24 0406 	bic.w	r4, r4, r6
 800aa42:	ea43 0304 	orr.w	r3, r3, r4
 800aa46:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800aa48:	f04f 031c 	mov.w	r3, #28
 800aa4c:	fb03 0101 	mla	r1, r3, r1, r0
 800aa50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800aa52:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aa54:	d8de      	bhi.n	800aa14 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800aa56:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800aa58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa5c:	6213      	str	r3, [r2, #32]
 800aa5e:	e7d9      	b.n	800aa14 <HAL_DMA2D_ConfigLayer+0x68>
 800aa60:	00ccfff0 	.word	0x00ccfff0
 800aa64:	ff3f000f 	.word	0xff3f000f
 800aa68:	ff33000f 	.word	0xff33000f

0800aa6c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	b099      	sub	sp, #100	; 0x64
 800aa72:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800aa74:	224c      	movs	r2, #76	; 0x4c
 800aa76:	49c9      	ldr	r1, [pc, #804]	; (800ad9c <HAL_FDCAN_Init+0x330>)
 800aa78:	a805      	add	r0, sp, #20
 800aa7a:	f021 f8b9 	bl	802bbf0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	f000 81b5 	beq.w	800adee <HAL_FDCAN_Init+0x382>
  {
    return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800aa84:	4bc6      	ldr	r3, [pc, #792]	; (800ada0 <HAL_FDCAN_Init+0x334>)
 800aa86:	6822      	ldr	r2, [r4, #0]
 800aa88:	429a      	cmp	r2, r3
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800aa8a:	bf04      	itt	eq
 800aa8c:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 800aa90:	6063      	streq	r3, [r4, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800aa92:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800aa96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aa9a:	b923      	cbnz	r3, 800aaa6 <HAL_FDCAN_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800aa9c:	4620      	mov	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
 800aa9e:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 800aaa2:	f7f6 f817 	bl	8000ad4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	6993      	ldr	r3, [r2, #24]
 800aaaa:	f023 0310 	bic.w	r3, r3, #16
 800aaae:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aab0:	f7ff f9b4 	bl	8009e1c <HAL_GetTick>
 800aab4:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	0711      	lsls	r1, r2, #28
 800aabc:	f100 8188 	bmi.w	800add0 <HAL_FDCAN_Init+0x364>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800aac0:	699a      	ldr	r2, [r3, #24]
 800aac2:	f042 0201 	orr.w	r2, r2, #1
 800aac6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aac8:	f7ff f9a8 	bl	8009e1c <HAL_GetTick>
 800aacc:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	07d2      	lsls	r2, r2, #31
 800aad4:	f140 818d 	bpl.w	800adf2 <HAL_FDCAN_Init+0x386>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	f042 0202 	orr.w	r2, r2, #2
 800aade:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800aae0:	7c22      	ldrb	r2, [r4, #16]
 800aae2:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800aae4:	699a      	ldr	r2, [r3, #24]
 800aae6:	bf0c      	ite	eq
 800aae8:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800aaec:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800aaf0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800aaf2:	7c62      	ldrb	r2, [r4, #17]
 800aaf4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800aaf6:	699a      	ldr	r2, [r3, #24]
 800aaf8:	bf0c      	ite	eq
 800aafa:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800aafe:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800ab02:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800ab04:	7ca2      	ldrb	r2, [r4, #18]
 800ab06:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800ab08:	699a      	ldr	r2, [r3, #24]
 800ab0a:	bf0c      	ite	eq
 800ab0c:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800ab10:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800ab14:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800ab16:	699a      	ldr	r2, [r3, #24]
 800ab18:	68a0      	ldr	r0, [r4, #8]
 800ab1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ab1e:	4302      	orrs	r2, r0
 800ab20:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800ab22:	699a      	ldr	r2, [r3, #24]
 800ab24:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800ab28:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800ab2a:	691a      	ldr	r2, [r3, #16]
 800ab2c:	f022 0210 	bic.w	r2, r2, #16
 800ab30:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800ab32:	68e2      	ldr	r2, [r4, #12]
 800ab34:	2a01      	cmp	r2, #1
 800ab36:	f040 8163 	bne.w	800ae00 <HAL_FDCAN_Init+0x394>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800ab3a:	699a      	ldr	r2, [r3, #24]
 800ab3c:	f042 0204 	orr.w	r2, r2, #4
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800ab40:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800ab42:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800ab44:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800ab48:	f102 31ff 	add.w	r1, r2, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800ab4c:	69e2      	ldr	r2, [r4, #28]
 800ab4e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ab52:	ea4f 2202 	mov.w	r2, r2, lsl #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800ab56:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800ab5a:	6a21      	ldr	r1, [r4, #32]
 800ab5c:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800ab60:	ea42 0201 	orr.w	r2, r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800ab64:	6961      	ldr	r1, [r4, #20]
 800ab66:	f101 31ff 	add.w	r1, r1, #4294967295
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800ab6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800ab6e:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800ab70:	d10e      	bne.n	800ab90 <HAL_FDCAN_Init+0x124>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800ab72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ab74:	1e51      	subs	r1, r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800ab76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ab78:	3a01      	subs	r2, #1
 800ab7a:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800ab7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800ab80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ab82:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800ab84:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800ab86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab88:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800ab8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800ab8e:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800ab90:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800ab92:	b12d      	cbz	r5, 800aba0 <HAL_FDCAN_Init+0x134>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800ab94:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800ab98:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800aba0:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800aba4:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800aba8:	eb15 0f0a 	cmn.w	r5, sl
 800abac:	d00b      	beq.n	800abc6 <HAL_FDCAN_Init+0x15a>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800abae:	a918      	add	r1, sp, #96	; 0x60
 800abb0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800abb4:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 800abb8:	f022 0207 	bic.w	r2, r2, #7
 800abbc:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800abc6:	e9d4 7210 	ldrd	r7, r2, [r4, #64]	; 0x40
 800abca:	9203      	str	r2, [sp, #12]
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800abcc:	b167      	cbz	r7, 800abe8 <HAL_FDCAN_Init+0x17c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800abce:	a818      	add	r0, sp, #96	; 0x60
 800abd0:	9903      	ldr	r1, [sp, #12]
 800abd2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800abd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abda:	f022 0207 	bic.w	r2, r2, #7
 800abde:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800abe8:	e9d4 6912 	ldrd	r6, r9, [r4, #72]	; 0x48
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800abec:	b166      	cbz	r6, 800ac08 <HAL_FDCAN_Init+0x19c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800abee:	a918      	add	r1, sp, #96	; 0x60
 800abf0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800abf4:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 800abf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800abfc:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800ac00:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800ac04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800ac08:	6d22      	ldr	r2, [r4, #80]	; 0x50
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800ac0a:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800ac0e:	9202      	str	r2, [sp, #8]
 800ac10:	b162      	cbz	r2, 800ac2c <HAL_FDCAN_Init+0x1c0>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800ac12:	a918      	add	r1, sp, #96	; 0x60
 800ac14:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800ac18:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 800ac1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ac20:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800ac24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ac28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800ac2c:	4a5c      	ldr	r2, [pc, #368]	; (800ada0 <HAL_FDCAN_Init+0x334>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d104      	bne.n	800ac3c <HAL_FDCAN_Init+0x1d0>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800ac32:	6861      	ldr	r1, [r4, #4]
 800ac34:	688a      	ldr	r2, [r1, #8]
 800ac36:	f022 0203 	bic.w	r2, r2, #3
 800ac3a:	608a      	str	r2, [r1, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800ac3c:	2200      	movs	r2, #0
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800ac3e:	4859      	ldr	r0, [pc, #356]	; (800ada4 <HAL_FDCAN_Init+0x338>)
  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800ac40:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ac44:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
  hfdcan->LatestTxFifoQRequest = 0U;
 800ac48:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800ac4c:	f04f 0201 	mov.w	r2, #1
 800ac50:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  StartAddress = hfdcan->Init.MessageRAMOffset;
 800ac54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ac56:	9200      	str	r2, [sp, #0]
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800ac58:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ac5c:	9900      	ldr	r1, [sp, #0]
 800ac5e:	4002      	ands	r2, r0
 800ac60:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800ac64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800ac68:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800ac6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ac6e:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 800ac72:	9201      	str	r2, [sp, #4]
 800ac74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac78:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800ac7c:	9900      	ldr	r1, [sp, #0]
 800ac7e:	eb01 0e02 	add.w	lr, r1, r2
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800ac82:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800ac86:	9a03      	ldr	r2, [sp, #12]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800ac88:	4001      	ands	r1, r0
 800ac8a:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
 800ac8e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800ac92:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800ac96:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800ac9a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800ac9e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800aca2:	eb0e 0148 	add.w	r1, lr, r8, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800aca6:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 800acaa:	ea0e 0e00 	and.w	lr, lr, r0
 800acae:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 800acb2:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800acb6:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0
 800acba:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 800acbe:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800acc2:	4357      	muls	r7, r2
  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800acc4:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800acc6:	f8c3 e0a0 	str.w	lr, [r3, #160]	; 0xa0
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800acca:	4439      	add	r1, r7
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800accc:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800acd0:	fb02 fc0c 	mul.w	ip, r2, ip
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800acd4:	ea0e 0e00 	and.w	lr, lr, r0
 800acd8:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 800acdc:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800ace0:	f8d3 e0b0 	ldr.w	lr, [r3, #176]	; 0xb0
 800ace4:	f42e 0efe 	bic.w	lr, lr, #8323072	; 0x7f0000
 800ace8:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800acec:	fb09 f606 	mul.w	r6, r9, r6
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800acf0:	f8c3 e0b0 	str.w	lr, [r3, #176]	; 0xb0
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800acf4:	4431      	add	r1, r6
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800acf6:	f8d3 e0ac 	ldr.w	lr, [r3, #172]	; 0xac
 800acfa:	ea0e 0e00 	and.w	lr, lr, r0
 800acfe:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800ad02:	4461      	add	r1, ip
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800ad04:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800ad08:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 800ad0c:	ea0e 0e00 	and.w	lr, lr, r0
 800ad10:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
 800ad14:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800ad18:	f8d3 e0f0 	ldr.w	lr, [r3, #240]	; 0xf0
 800ad1c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ad20:	f42e 1e7c 	bic.w	lr, lr, #4128768	; 0x3f0000

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800ad24:	9a01      	ldr	r2, [sp, #4]
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800ad26:	eb01 0149 	add.w	r1, r1, r9, lsl #1
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800ad2a:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 800ad2e:	f8c3 e0f0 	str.w	lr, [r3, #240]	; 0xf0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800ad32:	f8d3 e0c0 	ldr.w	lr, [r3, #192]	; 0xc0
 800ad36:	ea0e 0e00 	and.w	lr, lr, r0
 800ad3a:	ea4e 0181 	orr.w	r1, lr, r1, lsl #2
 800ad3e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800ad42:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ad46:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 800ad4a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad4e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800ad52:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ad56:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 800ad5a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800ad5e:	fb0b f505 	mul.w	r5, fp, r5
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800ad62:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800ad66:	9b00      	ldr	r3, [sp, #0]
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800ad68:	fb0b f10a 	mul.w	r1, fp, sl
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800ad6c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800ad70:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 800ad74:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800ad76:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800ad7a:	66e3      	str	r3, [r4, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800ad7c:	6722      	str	r2, [r4, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800ad7e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800ad82:	6762      	str	r2, [r4, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800ad84:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800ad88:	67a2      	str	r2, [r4, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800ad8a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ad8e:	67e2      	str	r2, [r4, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800ad90:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ad94:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800ad98:	e006      	b.n	800ada8 <HAL_FDCAN_Init+0x33c>
 800ad9a:	bf00      	nop
 800ad9c:	0802e860 	.word	0x0802e860
 800ada0:	4000a000 	.word	0x4000a000
 800ada4:	ffff0003 	.word	0xffff0003
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800ada8:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
 800adac:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800adb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800adb4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800adb8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800adbc:	4a20      	ldr	r2, [pc, #128]	; (800ae40 <HAL_FDCAN_Init+0x3d4>)
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800adbe:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800adc2:	4295      	cmp	r5, r2
 800adc4:	d933      	bls.n	800ae2e <HAL_FDCAN_Init+0x3c2>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800adc6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800adca:	f043 0320 	orr.w	r3, r3, #32
 800adce:	e009      	b.n	800ade4 <HAL_FDCAN_Init+0x378>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800add0:	f7ff f824 	bl	8009e1c <HAL_GetTick>
 800add4:	1b40      	subs	r0, r0, r5
 800add6:	280a      	cmp	r0, #10
 800add8:	f67f ae6d 	bls.w	800aab6 <HAL_FDCAN_Init+0x4a>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800addc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ade0:	f043 0301 	orr.w	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800ade4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800ade8:	2303      	movs	r3, #3
 800adea:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
    return HAL_ERROR;
 800adee:	2001      	movs	r0, #1
 800adf0:	e022      	b.n	800ae38 <HAL_FDCAN_Init+0x3cc>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800adf2:	f7ff f813 	bl	8009e1c <HAL_GetTick>
 800adf6:	1b40      	subs	r0, r0, r5
 800adf8:	280a      	cmp	r0, #10
 800adfa:	f67f ae68 	bls.w	800aace <HAL_FDCAN_Init+0x62>
 800adfe:	e7ed      	b.n	800addc <HAL_FDCAN_Init+0x370>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	f43f ae9e 	beq.w	800ab42 <HAL_FDCAN_Init+0xd6>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800ae06:	2a02      	cmp	r2, #2
 800ae08:	d00a      	beq.n	800ae20 <HAL_FDCAN_Init+0x3b4>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800ae0a:	6999      	ldr	r1, [r3, #24]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800ae0c:	2a03      	cmp	r2, #3
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800ae0e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800ae12:	6199      	str	r1, [r3, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800ae14:	6919      	ldr	r1, [r3, #16]
 800ae16:	f041 0110 	orr.w	r1, r1, #16
 800ae1a:	6119      	str	r1, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800ae1c:	f47f ae91 	bne.w	800ab42 <HAL_FDCAN_Init+0xd6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800ae20:	699a      	ldr	r2, [r3, #24]
 800ae22:	f042 0220 	orr.w	r2, r2, #32
 800ae26:	e68b      	b.n	800ab40 <HAL_FDCAN_Init+0xd4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f843 2b04 	str.w	r2, [r3], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800ae2e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d3f8      	bcc.n	800ae28 <HAL_FDCAN_Init+0x3bc>
    }
  }

  /* Return function status */
  return HAL_OK;
 800ae36:	2000      	movs	r0, #0
}
 800ae38:	b019      	add	sp, #100	; 0x64
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	bf00      	nop
 800ae40:	4000d3fc 	.word	0x4000d3fc

0800ae44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800ae48:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae4a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800b014 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ae4e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ae52:	680a      	ldr	r2, [r1, #0]
 800ae54:	fa32 f503 	lsrs.w	r5, r2, r3
 800ae58:	d102      	bne.n	800ae60 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800ae5a:	b003      	add	sp, #12
 800ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ae60:	f04f 0e01 	mov.w	lr, #1
 800ae64:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800ae68:	ea1e 0202 	ands.w	r2, lr, r2
 800ae6c:	f000 80bc 	beq.w	800afe8 <HAL_GPIO_Init+0x1a4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae70:	684e      	ldr	r6, [r1, #4]
 800ae72:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae76:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae7a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae7e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae82:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae84:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae88:	2f01      	cmp	r7, #1
 800ae8a:	d834      	bhi.n	800aef6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800ae8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae8e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae92:	68cf      	ldr	r7, [r1, #12]
 800ae94:	fa07 f708 	lsl.w	r7, r7, r8
 800ae98:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800ae9c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800ae9e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aea0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aea4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800aea8:	409f      	lsls	r7, r3
 800aeaa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800aeae:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800aeb0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aeb2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aeb4:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aeb8:	688f      	ldr	r7, [r1, #8]
 800aeba:	fa07 f708 	lsl.w	r7, r7, r8
 800aebe:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 800aec2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aec4:	d119      	bne.n	800aefa <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800aec6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800aeca:	f003 0b07 	and.w	fp, r3, #7
 800aece:	f04f 0e0f 	mov.w	lr, #15
 800aed2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800aed6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800aeda:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800aede:	fa0e fe0b 	lsl.w	lr, lr, fp
 800aee2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800aee6:	690f      	ldr	r7, [r1, #16]
 800aee8:	fa07 f70b 	lsl.w	r7, r7, fp
 800aeec:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800aef0:	f8ca 7020 	str.w	r7, [sl, #32]
 800aef4:	e001      	b.n	800aefa <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aef6:	2d03      	cmp	r5, #3
 800aef8:	d1da      	bne.n	800aeb0 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800aefa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aefc:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800af00:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800af04:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800af08:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800af0c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800af0e:	d06b      	beq.n	800afe8 <HAL_GPIO_Init+0x1a4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af10:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800af14:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af18:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af1c:	f045 0502 	orr.w	r5, r5, #2
 800af20:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af28:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 800af2c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800af30:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800af34:	f005 0502 	and.w	r5, r5, #2
 800af38:	9501      	str	r5, [sp, #4]
 800af3a:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af3c:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800af3e:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af42:	fa05 f50c 	lsl.w	r5, r5, ip
 800af46:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af4a:	4d31      	ldr	r5, [pc, #196]	; (800b010 <HAL_GPIO_Init+0x1cc>)
 800af4c:	42a8      	cmp	r0, r5
 800af4e:	d04d      	beq.n	800afec <HAL_GPIO_Init+0x1a8>
 800af50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af54:	42a8      	cmp	r0, r5
 800af56:	d04b      	beq.n	800aff0 <HAL_GPIO_Init+0x1ac>
 800af58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af5c:	42a8      	cmp	r0, r5
 800af5e:	d049      	beq.n	800aff4 <HAL_GPIO_Init+0x1b0>
 800af60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af64:	42a8      	cmp	r0, r5
 800af66:	d047      	beq.n	800aff8 <HAL_GPIO_Init+0x1b4>
 800af68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af6c:	42a8      	cmp	r0, r5
 800af6e:	d045      	beq.n	800affc <HAL_GPIO_Init+0x1b8>
 800af70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af74:	42a8      	cmp	r0, r5
 800af76:	d043      	beq.n	800b000 <HAL_GPIO_Init+0x1bc>
 800af78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af7c:	42a8      	cmp	r0, r5
 800af7e:	d041      	beq.n	800b004 <HAL_GPIO_Init+0x1c0>
 800af80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af84:	42a8      	cmp	r0, r5
 800af86:	d03f      	beq.n	800b008 <HAL_GPIO_Init+0x1c4>
 800af88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af8c:	42a8      	cmp	r0, r5
 800af8e:	d03d      	beq.n	800b00c <HAL_GPIO_Init+0x1c8>
 800af90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800af94:	42a8      	cmp	r0, r5
 800af96:	bf0c      	ite	eq
 800af98:	2509      	moveq	r5, #9
 800af9a:	250a      	movne	r5, #10
 800af9c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800afa0:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800afa4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800afa8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800afaa:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800afae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800afb0:	bf0c      	ite	eq
 800afb2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800afb4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800afb6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800afba:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800afbc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800afbe:	bf0c      	ite	eq
 800afc0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800afc2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800afc4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800afc8:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800afca:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 800afce:	bf0c      	ite	eq
 800afd0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800afd2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800afd4:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800afd6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800afda:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800afde:	bf54      	ite	pl
 800afe0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800afe2:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800afe4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800afe8:	3301      	adds	r3, #1
 800afea:	e732      	b.n	800ae52 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800afec:	2500      	movs	r5, #0
 800afee:	e7d5      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800aff0:	2501      	movs	r5, #1
 800aff2:	e7d3      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800aff4:	2502      	movs	r5, #2
 800aff6:	e7d1      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800aff8:	2503      	movs	r5, #3
 800affa:	e7cf      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800affc:	2504      	movs	r5, #4
 800affe:	e7cd      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800b000:	2505      	movs	r5, #5
 800b002:	e7cb      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800b004:	2506      	movs	r5, #6
 800b006:	e7c9      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800b008:	2507      	movs	r5, #7
 800b00a:	e7c7      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800b00c:	2508      	movs	r5, #8
 800b00e:	e7c5      	b.n	800af9c <HAL_GPIO_Init+0x158>
 800b010:	58020000 	.word	0x58020000
 800b014:	58024400 	.word	0x58024400

0800b018 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b01c:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b01e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800b148 <HAL_GPIO_DeInit+0x130>
 800b022:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b14c <HAL_GPIO_DeInit+0x134>
 800b026:	f8df a128 	ldr.w	sl, [pc, #296]	; 800b150 <HAL_GPIO_DeInit+0x138>
 800b02a:	f8df b128 	ldr.w	fp, [pc, #296]	; 800b154 <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 800b02e:	fa31 f302 	lsrs.w	r3, r1, r2
 800b032:	d101      	bne.n	800b038 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b038:	2301      	movs	r3, #1
 800b03a:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 800b03e:	ea1c 0601 	ands.w	r6, ip, r1
 800b042:	d06b      	beq.n	800b11c <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b044:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b048:	f002 0703 	and.w	r7, r2, #3
 800b04c:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b04e:	4b3d      	ldr	r3, [pc, #244]	; (800b144 <HAL_GPIO_DeInit+0x12c>)
 800b050:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b054:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b056:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b058:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b05c:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b060:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b064:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b068:	d05a      	beq.n	800b120 <HAL_GPIO_DeInit+0x108>
 800b06a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b06e:	4298      	cmp	r0, r3
 800b070:	d058      	beq.n	800b124 <HAL_GPIO_DeInit+0x10c>
 800b072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b076:	4298      	cmp	r0, r3
 800b078:	d056      	beq.n	800b128 <HAL_GPIO_DeInit+0x110>
 800b07a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b07e:	4298      	cmp	r0, r3
 800b080:	d054      	beq.n	800b12c <HAL_GPIO_DeInit+0x114>
 800b082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b086:	4298      	cmp	r0, r3
 800b088:	d052      	beq.n	800b130 <HAL_GPIO_DeInit+0x118>
 800b08a:	4540      	cmp	r0, r8
 800b08c:	d052      	beq.n	800b134 <HAL_GPIO_DeInit+0x11c>
 800b08e:	4548      	cmp	r0, r9
 800b090:	d052      	beq.n	800b138 <HAL_GPIO_DeInit+0x120>
 800b092:	4550      	cmp	r0, sl
 800b094:	d052      	beq.n	800b13c <HAL_GPIO_DeInit+0x124>
 800b096:	4558      	cmp	r0, fp
 800b098:	d052      	beq.n	800b140 <HAL_GPIO_DeInit+0x128>
 800b09a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800b09e:	4298      	cmp	r0, r3
 800b0a0:	bf0c      	ite	eq
 800b0a2:	2309      	moveq	r3, #9
 800b0a4:	230a      	movne	r3, #10
 800b0a6:	40bb      	lsls	r3, r7
 800b0a8:	4573      	cmp	r3, lr
 800b0aa:	d119      	bne.n	800b0e0 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b0ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0b0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 800b0b4:	ea27 0706 	bic.w	r7, r7, r6
 800b0b8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b0bc:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 800b0c0:	ea27 0706 	bic.w	r7, r7, r6
 800b0c4:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800b0c8:	685f      	ldr	r7, [r3, #4]
 800b0ca:	ea27 0706 	bic.w	r7, r7, r6
 800b0ce:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b0d0:	681f      	ldr	r7, [r3, #0]
 800b0d2:	ea27 0706 	bic.w	r7, r7, r6
 800b0d6:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	ea23 0305 	bic.w	r3, r3, r5
 800b0de:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b0e0:	0055      	lsls	r5, r2, #1
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b0e6:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b0ea:	40ab      	lsls	r3, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b0ec:	260f      	movs	r6, #15
 800b0ee:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b0f0:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b0f2:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b0f4:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b0f6:	08d4      	lsrs	r4, r2, #3
 800b0f8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800b0fc:	6a25      	ldr	r5, [r4, #32]
 800b0fe:	ea25 0506 	bic.w	r5, r5, r6
 800b102:	6225      	str	r5, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b104:	68c4      	ldr	r4, [r0, #12]
 800b106:	ea24 0403 	bic.w	r4, r4, r3
 800b10a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b10c:	6844      	ldr	r4, [r0, #4]
 800b10e:	ea24 040c 	bic.w	r4, r4, ip
 800b112:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b114:	6884      	ldr	r4, [r0, #8]
 800b116:	ea24 0303 	bic.w	r3, r4, r3
 800b11a:	6083      	str	r3, [r0, #8]
    position++;
 800b11c:	3201      	adds	r2, #1
 800b11e:	e786      	b.n	800b02e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b120:	2300      	movs	r3, #0
 800b122:	e7c0      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b124:	2301      	movs	r3, #1
 800b126:	e7be      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b128:	2302      	movs	r3, #2
 800b12a:	e7bc      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b12c:	2303      	movs	r3, #3
 800b12e:	e7ba      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b130:	2304      	movs	r3, #4
 800b132:	e7b8      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b134:	2305      	movs	r3, #5
 800b136:	e7b6      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b138:	2306      	movs	r3, #6
 800b13a:	e7b4      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b13c:	2307      	movs	r3, #7
 800b13e:	e7b2      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b140:	2308      	movs	r3, #8
 800b142:	e7b0      	b.n	800b0a6 <HAL_GPIO_DeInit+0x8e>
 800b144:	58020000 	.word	0x58020000
 800b148:	58021400 	.word	0x58021400
 800b14c:	58021800 	.word	0x58021800
 800b150:	58021c00 	.word	0x58021c00
 800b154:	58022000 	.word	0x58022000

0800b158 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b158:	6903      	ldr	r3, [r0, #16]
 800b15a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b15c:	bf14      	ite	ne
 800b15e:	2001      	movne	r0, #1
 800b160:	2000      	moveq	r0, #0
 800b162:	4770      	bx	lr

0800b164 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b164:	b10a      	cbz	r2, 800b16a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b166:	6181      	str	r1, [r0, #24]
  }
}
 800b168:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b16a:	0409      	lsls	r1, r1, #16
 800b16c:	e7fb      	b.n	800b166 <HAL_GPIO_WritePin+0x2>

0800b16e <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b16e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b172:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800b176:	4201      	tst	r1, r0
{
 800b178:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b17a:	d003      	beq.n	800b184 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b17c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b180:	f7f8 f8b8 	bl	80032f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b184:	bd08      	pop	{r3, pc}

0800b186 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b186:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b18a:	4605      	mov	r5, r0
 800b18c:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800b18e:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 800b192:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 800b196:	2c01      	cmp	r4, #1
{
 800b198:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 800b19c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800b1a0:	d025      	beq.n	800b1ee <HAL_HCD_HC_Init+0x68>
 800b1a2:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 800b1a4:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 800b1a6:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800b1a8:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 800b1ac:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800b1b0:	242c      	movs	r4, #44	; 0x2c
 800b1b2:	fb04 5401 	mla	r4, r4, r1, r5
 800b1b6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800b1ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800b1be:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800b1c2:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800b1c6:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 800b1ca:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800b1ce:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800b1d2:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800b1d6:	6828      	ldr	r0, [r5, #0]
 800b1d8:	f8cd e000 	str.w	lr, [sp]
 800b1dc:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800b1e0:	f007 faaf 	bl	8012742 <USB_HC_Init>
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800b1e4:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 800b1e8:	b005      	add	sp, #20
 800b1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 800b1ee:	2002      	movs	r0, #2
 800b1f0:	e7fa      	b.n	800b1e8 <HAL_HCD_HC_Init+0x62>

0800b1f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800b1f2:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800b1f4:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 800b1f8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d009      	beq.n	800b212 <HAL_HCD_HC_Halt+0x20>
 800b1fe:	2301      	movs	r3, #1
 800b200:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800b204:	6800      	ldr	r0, [r0, #0]
 800b206:	f007 fb22 	bl	801284e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800b20a:	2000      	movs	r0, #0
 800b20c:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 800b210:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800b212:	2002      	movs	r0, #2
 800b214:	e7fc      	b.n	800b210 <HAL_HCD_HC_Halt+0x1e>

0800b216 <HAL_HCD_Init>:
{
 800b216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 800b21a:	4606      	mov	r6, r0
{
 800b21c:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 800b21e:	2800      	cmp	r0, #0
 800b220:	d043      	beq.n	800b2aa <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800b222:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 800b226:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800b228:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b22c:	b91b      	cbnz	r3, 800b236 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 800b22e:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 800b232:	f7fc fb0d 	bl	8007850 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800b236:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800b238:	466d      	mov	r5, sp
 800b23a:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800b23e:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
 800b240:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b244:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 800b246:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b248:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 800b24c:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 800b250:	bf08      	it	eq
 800b252:	60f3      	streq	r3, [r6, #12]
  __HAL_HCD_DISABLE(hhcd);
 800b254:	f007 f8e0 	bl	8012418 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800b258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b25a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b25c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b25e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b260:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b264:	e885 0003 	stmia.w	r5, {r0, r1}
 800b268:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800b26c:	6830      	ldr	r0, [r6, #0]
 800b26e:	f007 f883 	bl	8012378 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800b272:	f857 0b10 	ldr.w	r0, [r7], #16
 800b276:	2101      	movs	r1, #1
 800b278:	f007 f8d4 	bl	8012424 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800b27c:	46ec      	mov	ip, sp
 800b27e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b284:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b286:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b28a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b28e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b292:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800b296:	6830      	ldr	r0, [r6, #0]
 800b298:	f007 f980 	bl	801259c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800b29c:	2301      	movs	r3, #1
  return HAL_OK;
 800b29e:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 800b2a0:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
}
 800b2a4:	b00a      	add	sp, #40	; 0x28
 800b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e7fa      	b.n	800b2a4 <HAL_HCD_Init+0x8e>
	...

0800b2b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800b2b0:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 800b2b2:	262c      	movs	r6, #44	; 0x2c
{
 800b2b4:	f89d 7010 	ldrb.w	r7, [sp, #16]
 800b2b8:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 800b2ba:	fb06 0601 	mla	r6, r6, r1, r0
{
 800b2be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800b2c2:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800b2c6:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800b2ca:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 800b2ce:	b97f      	cbnz	r7, 800b2f0 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800b2d0:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800b2d2:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 800b2d4:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800b2d8:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
 800b2dc:	d03c      	beq.n	800b358 <HAL_HCD_HC_SubmitRequest+0xa8>
 800b2de:	42bb      	cmp	r3, r7
 800b2e0:	d03a      	beq.n	800b358 <HAL_HCD_HC_SubmitRequest+0xa8>
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d11f      	bne.n	800b326 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800b2e6:	232c      	movs	r3, #44	; 0x2c
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	fb03 0301 	mla	r3, r3, r1, r0
 800b2ee:	e030      	b.n	800b352 <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800b2f0:	f04f 0c02 	mov.w	ip, #2
 800b2f4:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d814      	bhi.n	800b326 <HAL_HCD_HC_SubmitRequest+0x76>
 800b2fc:	a601      	add	r6, pc, #4	; (adr r6, 800b304 <HAL_HCD_HC_SubmitRequest+0x54>)
 800b2fe:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b2e7 	.word	0x0800b2e7
 800b30c:	0800b359 	.word	0x0800b359
 800b310:	0800b359 	.word	0x0800b359
      if ((token == 1U) && (direction == 0U)) /*send data */
 800b314:	2f01      	cmp	r7, #1
 800b316:	d106      	bne.n	800b326 <HAL_HCD_HC_SubmitRequest+0x76>
 800b318:	b92a      	cbnz	r2, 800b326 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
 800b31a:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 800b31c:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 800b320:	b99c      	cbnz	r4, 800b34a <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
 800b322:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800b326:	222c      	movs	r2, #44	; 0x2c
 800b328:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 800b32c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800b330:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 800b332:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 800b334:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800b336:	645d      	str	r5, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800b338:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800b33a:	f8a3 4060 	strh.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 800b33e:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800b340:	7b02      	ldrb	r2, [r0, #12]
 800b342:	6800      	ldr	r0, [r0, #0]
}
 800b344:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800b346:	f007 baef 	b.w	8012928 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800b34a:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 800b34e:	2e00      	cmp	r6, #0
 800b350:	d1e9      	bne.n	800b326 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800b352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 800b356:	e7e6      	b.n	800b326 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
 800b358:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800b35a:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 800b35e:	b92a      	cbnz	r2, 800b36c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800b360:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 800b364:	2e00      	cmp	r6, #0
 800b366:	d0f4      	beq.n	800b352 <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800b368:	2202      	movs	r2, #2
 800b36a:	e7f2      	b.n	800b352 <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800b36c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800b370:	2a00      	cmp	r2, #0
 800b372:	d1f9      	bne.n	800b368 <HAL_HCD_HC_SubmitRequest+0xb8>
 800b374:	e7ed      	b.n	800b352 <HAL_HCD_HC_SubmitRequest+0xa2>
 800b376:	bf00      	nop

0800b378 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b37c:	f8d0 9000 	ldr.w	r9, [r0]
{
 800b380:	b085      	sub	sp, #20
 800b382:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800b384:	4648      	mov	r0, r9
 800b386:	f007 f904 	bl	8012592 <USB_GetMode>
 800b38a:	2801      	cmp	r0, #1
 800b38c:	f040 80f4 	bne.w	800b578 <HAL_HCD_IRQHandler+0x200>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800b390:	6820      	ldr	r0, [r4, #0]
 800b392:	f007 f8f2 	bl	801257a <USB_ReadInterrupts>
 800b396:	2800      	cmp	r0, #0
 800b398:	f000 80ee 	beq.w	800b578 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b39c:	6820      	ldr	r0, [r4, #0]
 800b39e:	f007 f8ec 	bl	801257a <USB_ReadInterrupts>
 800b3a2:	0281      	lsls	r1, r0, #10
 800b3a4:	d503      	bpl.n	800b3ae <HAL_HCD_IRQHandler+0x36>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b3ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	f007 f8e3 	bl	801257a <USB_ReadInterrupts>
 800b3b4:	02c2      	lsls	r2, r0, #11
 800b3b6:	d503      	bpl.n	800b3c0 <HAL_HCD_IRQHandler+0x48>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b3be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	f007 f8da 	bl	801257a <USB_ReadInterrupts>
 800b3c6:	0143      	lsls	r3, r0, #5
 800b3c8:	d503      	bpl.n	800b3d2 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b3d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	f007 f8d1 	bl	801257a <USB_ReadInterrupts>
 800b3d8:	0787      	lsls	r7, r0, #30
 800b3da:	d502      	bpl.n	800b3e2 <HAL_HCD_IRQHandler+0x6a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800b3e2:	6820      	ldr	r0, [r4, #0]
 800b3e4:	f007 f8c9 	bl	801257a <USB_ReadInterrupts>
 800b3e8:	0086      	lsls	r6, r0, #2
 800b3ea:	d518      	bpl.n	800b41e <HAL_HCD_IRQHandler+0xa6>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b3f2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800b3f4:	f8d9 3440 	ldr.w	r3, [r9, #1088]	; 0x440
 800b3f8:	07dd      	lsls	r5, r3, #31
 800b3fa:	d410      	bmi.n	800b41e <HAL_HCD_IRQHandler+0xa6>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800b3fc:	2110      	movs	r1, #16
 800b3fe:	4648      	mov	r0, r9
 800b400:	f007 f83e 	bl	8012480 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800b404:	4648      	mov	r0, r9
 800b406:	f007 f861 	bl	80124cc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b40a:	69a3      	ldr	r3, [r4, #24]
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d103      	bne.n	800b418 <HAL_HCD_IRQHandler+0xa0>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b410:	2101      	movs	r1, #1
 800b412:	6820      	ldr	r0, [r4, #0]
 800b414:	f007 f928 	bl	8012668 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800b418:	4620      	mov	r0, r4
 800b41a:	f7fc fa7b 	bl	8007914 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800b41e:	6820      	ldr	r0, [r4, #0]
 800b420:	f007 f8ab 	bl	801257a <USB_ReadInterrupts>
 800b424:	01c0      	lsls	r0, r0, #7
 800b426:	d53d      	bpl.n	800b4a4 <HAL_HCD_IRQHandler+0x12c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b428:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b42a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800b42e:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 800b430:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800b434:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b43c:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b43e:	9b02      	ldr	r3, [sp, #8]
 800b440:	0799      	lsls	r1, r3, #30
 800b442:	d509      	bpl.n	800b458 <HAL_HCD_IRQHandler+0xe0>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	07da      	lsls	r2, r3, #31
 800b448:	d502      	bpl.n	800b450 <HAL_HCD_IRQHandler+0xd8>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b44a:	4620      	mov	r0, r4
 800b44c:	f7fc fa5e 	bl	800790c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	f043 0302 	orr.w	r3, r3, #2
 800b456:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	071b      	lsls	r3, r3, #28
 800b45c:	d518      	bpl.n	800b490 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	f043 0308 	orr.w	r3, r3, #8
 800b464:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b466:	9b02      	ldr	r3, [sp, #8]
 800b468:	075f      	lsls	r7, r3, #29
 800b46a:	f140 8090 	bpl.w	800b58e <HAL_HCD_IRQHandler+0x216>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b46e:	69a1      	ldr	r1, [r4, #24]
 800b470:	2902      	cmp	r1, #2
 800b472:	f040 8084 	bne.w	800b57e <HAL_HCD_IRQHandler+0x206>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b476:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b478:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b47a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b47e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b482:	bf18      	it	ne
 800b484:	2101      	movne	r1, #1
 800b486:	f007 f8ef 	bl	8012668 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7fc fa4a 	bl	8007924 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	069e      	lsls	r6, r3, #26
 800b494:	d503      	bpl.n	800b49e <HAL_HCD_IRQHandler+0x126>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	f043 0320 	orr.w	r3, r3, #32
 800b49c:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800b4a4:	6820      	ldr	r0, [r4, #0]
 800b4a6:	f007 f868 	bl	801257a <USB_ReadInterrupts>
 800b4aa:	0705      	lsls	r5, r0, #28
 800b4ac:	d505      	bpl.n	800b4ba <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7fc fa28 	bl	8007904 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	2208      	movs	r2, #8
 800b4b8:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800b4ba:	6820      	ldr	r0, [r4, #0]
 800b4bc:	f007 f85d 	bl	801257a <USB_ReadInterrupts>
 800b4c0:	06c0      	lsls	r0, r0, #27
 800b4c2:	d542      	bpl.n	800b54a <HAL_HCD_IRQHandler+0x1d2>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b4c4:	6826      	ldr	r6, [r4, #0]
 800b4c6:	69b3      	ldr	r3, [r6, #24]
 800b4c8:	f023 0310 	bic.w	r3, r3, #16
 800b4cc:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 800b4ce:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b4d0:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d133      	bne.n	800b540 <HAL_HCD_IRQHandler+0x1c8>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4d8:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	d02e      	beq.n	800b540 <HAL_HCD_IRQHandler+0x1c8>
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800b4e2:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800b4e6:	252c      	movs	r5, #44	; 0x2c
 800b4e8:	fb05 4507 	mla	r5, r5, r7, r4
 800b4ec:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800b4ee:	b339      	cbz	r1, 800b540 <HAL_HCD_IRQHandler+0x1c8>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800b4f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b4f2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800b4f4:	4443      	add	r3, r8
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d84d      	bhi.n	800b596 <HAL_HCD_IRQHandler+0x21e>
          (void)USB_ReadPacket(hhcd->Instance,
 800b4fa:	4642      	mov	r2, r8
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f007 f81c 	bl	801253a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800b502:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b504:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b508:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800b50c:	4443      	add	r3, r8
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b50e:	017a      	lsls	r2, r7, #5
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b510:	4588      	cmp	r8, r1
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b512:	eb06 1747 	add.w	r7, r6, r7, lsl #5
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800b516:	646b      	str	r3, [r5, #68]	; 0x44
          hhcd->hc[chnum].xfer_count += pktcnt;
 800b518:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b51a:	4443      	add	r3, r8
 800b51c:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b51e:	693b      	ldr	r3, [r7, #16]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b520:	d10e      	bne.n	800b540 <HAL_HCD_IRQHandler+0x1c8>
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b522:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b526:	b15b      	cbz	r3, 800b540 <HAL_HCD_IRQHandler+0x1c8>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800b528:	58b3      	ldr	r3, [r6, r2]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b52a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b52e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800b532:	50b3      	str	r3, [r6, r2]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800b534:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800b538:	f083 0301 	eor.w	r3, r3, #1
 800b53c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b540:	6822      	ldr	r2, [r4, #0]
 800b542:	6993      	ldr	r3, [r2, #24]
 800b544:	f043 0310 	orr.w	r3, r3, #16
 800b548:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800b54a:	6820      	ldr	r0, [r4, #0]
 800b54c:	f007 f815 	bl	801257a <USB_ReadInterrupts>
 800b550:	0181      	lsls	r1, r0, #6
 800b552:	d511      	bpl.n	800b578 <HAL_HCD_IRQHandler+0x200>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800b554:	6820      	ldr	r0, [r4, #0]
 800b556:	f509 69a0 	add.w	r9, r9, #1280	; 0x500
 800b55a:	f007 f973 	bl	8012844 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800b55e:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800b562:	4683      	mov	fp, r0
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800b564:	f04f 0802 	mov.w	r8, #2
    if (hhcd->hc[chnum].state == HC_XFRC)
 800b568:	272c      	movs	r7, #44	; 0x2c
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800b56a:	68a3      	ldr	r3, [r4, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b56c:	6826      	ldr	r6, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800b56e:	4553      	cmp	r3, sl
 800b570:	d815      	bhi.n	800b59e <HAL_HCD_IRQHandler+0x226>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800b572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b576:	6173      	str	r3, [r6, #20]
}
 800b578:	b005      	add	sp, #20
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b57e:	6923      	ldr	r3, [r4, #16]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d182      	bne.n	800b48a <HAL_HCD_IRQHandler+0x112>
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800b584:	f64e 2260 	movw	r2, #60000	; 0xea60
 800b588:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800b58c:	e77d      	b.n	800b48a <HAL_HCD_IRQHandler+0x112>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b58e:	4620      	mov	r0, r4
 800b590:	f7fc f9cc 	bl	800792c <HAL_HCD_PortDisabled_Callback>
 800b594:	e77c      	b.n	800b490 <HAL_HCD_IRQHandler+0x118>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800b596:	2304      	movs	r3, #4
 800b598:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 800b59c:	e7d0      	b.n	800b540 <HAL_HCD_IRQHandler+0x1c8>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800b59e:	f00a 030f 	and.w	r3, sl, #15
 800b5a2:	fa2b f303 	lsr.w	r3, fp, r3
 800b5a6:	07da      	lsls	r2, r3, #31
 800b5a8:	f140 80ad 	bpl.w	800b706 <HAL_HCD_IRQHandler+0x38e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800b5ac:	f8d9 3000 	ldr.w	r3, [r9]
 800b5b0:	fa5f f58a 	uxtb.w	r5, sl
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800b5b4:	4630      	mov	r0, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800b5b6:	041b      	lsls	r3, r3, #16
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800b5b8:	4629      	mov	r1, r5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800b5ba:	f140 8152 	bpl.w	800b862 <HAL_HCD_IRQHandler+0x4ea>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800b5be:	f006 ffe0 	bl	8012582 <USB_ReadChInterrupts>
 800b5c2:	0742      	lsls	r2, r0, #29
 800b5c4:	d509      	bpl.n	800b5da <HAL_HCD_IRQHandler+0x262>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800b5c6:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800b5ca:	2204      	movs	r2, #4
 800b5cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800b5d0:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800b5d2:	2207      	movs	r2, #7
 800b5d4:	fb07 4305 	mla	r3, r7, r5, r4
 800b5d8:	e00f      	b.n	800b5fa <HAL_HCD_IRQHandler+0x282>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800b5da:	4629      	mov	r1, r5
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	f006 ffd0 	bl	8012582 <USB_ReadChInterrupts>
 800b5e2:	05c3      	lsls	r3, r0, #23
 800b5e4:	d522      	bpl.n	800b62c <HAL_HCD_IRQHandler+0x2b4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800b5e6:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800b5ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5ee:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800b5f2:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800b5f4:	2208      	movs	r2, #8
 800b5f6:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[chnum].state = HC_XACTERR;
 800b5fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b5fe:	4629      	mov	r1, r5
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	f007 f924 	bl	801284e <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800b606:	4629      	mov	r1, r5
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	f006 ffba 	bl	8012582 <USB_ReadChInterrupts>
 800b60e:	f410 7f00 	tst.w	r0, #512	; 0x200
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b612:	4629      	mov	r1, r5
 800b614:	6820      	ldr	r0, [r4, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800b616:	d036      	beq.n	800b686 <HAL_HCD_IRQHandler+0x30e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800b618:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b61c:	f007 f917 	bl	801284e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800b620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b624:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800b628:	60b3      	str	r3, [r6, #8]
 800b62a:	e06c      	b.n	800b706 <HAL_HCD_IRQHandler+0x38e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800b62c:	4629      	mov	r1, r5
 800b62e:	6820      	ldr	r0, [r4, #0]
 800b630:	f006 ffa7 	bl	8012582 <USB_ReadChInterrupts>
 800b634:	0700      	lsls	r0, r0, #28
 800b636:	d509      	bpl.n	800b64c <HAL_HCD_IRQHandler+0x2d4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800b638:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800b63c:	2208      	movs	r2, #8
 800b63e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800b642:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800b644:	2206      	movs	r2, #6
 800b646:	fb07 4305 	mla	r3, r7, r5, r4
 800b64a:	e7d6      	b.n	800b5fa <HAL_HCD_IRQHandler+0x282>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800b64c:	4629      	mov	r1, r5
 800b64e:	6820      	ldr	r0, [r4, #0]
 800b650:	f006 ff97 	bl	8012582 <USB_ReadChInterrupts>
 800b654:	0541      	lsls	r1, r0, #21
 800b656:	d50a      	bpl.n	800b66e <HAL_HCD_IRQHandler+0x2f6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800b658:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800b65c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b660:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800b664:	609a      	str	r2, [r3, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800b666:	2209      	movs	r2, #9
 800b668:	fb07 4305 	mla	r3, r7, r5, r4
 800b66c:	e7c5      	b.n	800b5fa <HAL_HCD_IRQHandler+0x282>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800b66e:	4629      	mov	r1, r5
 800b670:	6820      	ldr	r0, [r4, #0]
 800b672:	f006 ff86 	bl	8012582 <USB_ReadChInterrupts>
 800b676:	0602      	lsls	r2, r0, #24
 800b678:	d5c5      	bpl.n	800b606 <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800b67a:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 800b67e:	2280      	movs	r2, #128	; 0x80
 800b680:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800b684:	e7a4      	b.n	800b5d0 <HAL_HCD_IRQHandler+0x258>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800b686:	f006 ff7c 	bl	8012582 <USB_ReadChInterrupts>
 800b68a:	07c3      	lsls	r3, r0, #31
 800b68c:	d54d      	bpl.n	800b72a <HAL_HCD_IRQHandler+0x3b2>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800b68e:	f506 61a0 	add.w	r1, r6, #1280	; 0x500
 800b692:	2320      	movs	r3, #32
 800b694:	0168      	lsls	r0, r5, #5
 800b696:	eb01 1645 	add.w	r6, r1, r5, lsl #5
 800b69a:	60b3      	str	r3, [r6, #8]
    if (hhcd->Init.dma_enable != 0U)
 800b69c:	68e3      	ldr	r3, [r4, #12]
 800b69e:	b14b      	cbz	r3, 800b6b4 <HAL_HCD_IRQHandler+0x33c>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800b6a0:	6932      	ldr	r2, [r6, #16]
 800b6a2:	fb07 4c05 	mla	ip, r7, r5, r4
 800b6a6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800b6aa:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
    hhcd->hc[chnum].state = HC_XFRC;
 800b6b4:	fb07 4305 	mla	r3, r7, r5, r4
 800b6b8:	2201      	movs	r2, #1
    hhcd->hc[chnum].ErrCnt = 0U;
 800b6ba:	f04f 0c00 	mov.w	ip, #0
    hhcd->hc[chnum].state = HC_XFRC;
 800b6be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[chnum].ErrCnt = 0U;
 800b6c2:	f8c3 c05c 	str.w	ip, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800b6c6:	60b2      	str	r2, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b6c8:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800b6cc:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 800b6d0:	d11e      	bne.n	800b710 <HAL_HCD_IRQHandler+0x398>
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	6820      	ldr	r0, [r4, #0]
 800b6d6:	f007 f8ba 	bl	801284e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800b6da:	2310      	movs	r3, #16
 800b6dc:	60b3      	str	r3, [r6, #8]
    if (hhcd->Init.dma_enable == 1U)
 800b6de:	68e3      	ldr	r3, [r4, #12]
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800b6e0:	fb07 4505 	mla	r5, r7, r5, r4
    if (hhcd->Init.dma_enable == 1U)
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d108      	bne.n	800b6fa <HAL_HCD_IRQHandler+0x382>
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800b6e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b6ea:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6f6:	07de      	lsls	r6, r3, #31
 800b6f8:	d505      	bpl.n	800b706 <HAL_HCD_IRQHandler+0x38e>
      hhcd->hc[chnum].toggle_in ^= 1U;
 800b6fa:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800b6fe:	f083 0301 	eor.w	r3, r3, #1
 800b702:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800b706:	f10a 0a01 	add.w	sl, sl, #1
 800b70a:	f109 0920 	add.w	r9, r9, #32
 800b70e:	e72c      	b.n	800b56a <HAL_HCD_IRQHandler+0x1f2>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800b710:	2a01      	cmp	r2, #1
 800b712:	d1e4      	bne.n	800b6de <HAL_HCD_IRQHandler+0x366>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b714:	580e      	ldr	r6, [r1, r0]
 800b716:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800b71a:	500e      	str	r6, [r1, r0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b71c:	4629      	mov	r1, r5
 800b71e:	4620      	mov	r0, r4
      hhcd->hc[chnum].urb_state = URB_DONE;
 800b720:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b724:	f7fc f8fa 	bl	800791c <HAL_HCD_HC_NotifyURBChange_Callback>
 800b728:	e7d9      	b.n	800b6de <HAL_HCD_IRQHandler+0x366>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800b72a:	4629      	mov	r1, r5
 800b72c:	6820      	ldr	r0, [r4, #0]
 800b72e:	f006 ff28 	bl	8012582 <USB_ReadChInterrupts>
 800b732:	0680      	lsls	r0, r0, #26
 800b734:	d505      	bpl.n	800b742 <HAL_HCD_IRQHandler+0x3ca>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800b736:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b73a:	2320      	movs	r3, #32
 800b73c:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b740:	e772      	b.n	800b628 <HAL_HCD_IRQHandler+0x2b0>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800b742:	4629      	mov	r1, r5
 800b744:	6820      	ldr	r0, [r4, #0]
 800b746:	f006 ff1c 	bl	8012582 <USB_ReadChInterrupts>
 800b74a:	f010 0302 	ands.w	r3, r0, #2
 800b74e:	d04b      	beq.n	800b7e8 <HAL_HCD_IRQHandler+0x470>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800b750:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    if (hhcd->hc[chnum].state == HC_XFRC)
 800b754:	fb07 4205 	mla	r2, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800b758:	0169      	lsls	r1, r5, #5
 800b75a:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800b75e:	f8c3 8008 	str.w	r8, [r3, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800b762:	f892 3061 	ldrb.w	r3, [r2, #97]	; 0x61
 800b766:	2b01      	cmp	r3, #1
 800b768:	d10c      	bne.n	800b784 <HAL_HCD_IRQHandler+0x40c>
      hhcd->hc[chnum].urb_state = URB_DONE;
 800b76a:	f240 2301 	movw	r3, #513	; 0x201
 800b76e:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b772:	fb07 4305 	mla	r3, r7, r5, r4
 800b776:	4629      	mov	r1, r5
 800b778:	4620      	mov	r0, r4
 800b77a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800b77e:	f7fc f8cd 	bl	800791c <HAL_HCD_HC_NotifyURBChange_Callback>
 800b782:	e7c0      	b.n	800b706 <HAL_HCD_IRQHandler+0x38e>
    else if (hhcd->hc[chnum].state == HC_STALL)
 800b784:	3b02      	subs	r3, #2
 800b786:	2b07      	cmp	r3, #7
 800b788:	d8f3      	bhi.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
 800b78a:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <HAL_HCD_IRQHandler+0x418>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b707 	.word	0x0800b707
 800b794:	0800bad1 	.word	0x0800bad1
 800b798:	0800b7b1 	.word	0x0800b7b1
 800b79c:	0800bad1 	.word	0x0800bad1
 800b7a0:	0800bae5 	.word	0x0800bae5
 800b7a4:	0800baef 	.word	0x0800baef
 800b7a8:	0800b7d5 	.word	0x0800b7d5
 800b7ac:	0800baef 	.word	0x0800baef
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b7b0:	fb07 4305 	mla	r3, r7, r5, r4
 800b7b4:	f240 2202 	movw	r2, #514	; 0x202
 800b7b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b7bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b7c0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800b7c4:	d1d5      	bne.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800b7c6:	5873      	ldr	r3, [r6, r1]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b7c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b7cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800b7d0:	5073      	str	r3, [r6, r1]
 800b7d2:	e7ce      	b.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
      hhcd->hc[chnum].ErrCnt++;
 800b7d4:	fb07 4305 	mla	r3, r7, r5, r4
 800b7d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7da:	3201      	adds	r2, #1
 800b7dc:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800b7de:	f44f 7201 	mov.w	r2, #516	; 0x204
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800b7e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b7e6:	e7c4      	b.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	6820      	ldr	r0, [r4, #0]
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	f006 fec8 	bl	8012582 <USB_ReadChInterrupts>
 800b7f2:	f010 0240 	ands.w	r2, r0, #64	; 0x40
 800b7f6:	d00f      	beq.n	800b818 <HAL_HCD_IRQHandler+0x4a0>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b7f8:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b7fc:	2240      	movs	r2, #64	; 0x40
    hhcd->hc[chnum].state = HC_NYET;
 800b7fe:	2105      	movs	r1, #5
    hhcd->hc[chnum].ErrCnt = 0U;
 800b800:	9b01      	ldr	r3, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b802:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b806:	60b2      	str	r2, [r6, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800b808:	fb07 4205 	mla	r2, r7, r5, r4
 800b80c:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    hhcd->hc[chnum].ErrCnt = 0U;
 800b810:	65d3      	str	r3, [r2, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b812:	4629      	mov	r1, r5
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	e052      	b.n	800b8be <HAL_HCD_IRQHandler+0x546>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800b818:	4629      	mov	r1, r5
 800b81a:	6820      	ldr	r0, [r4, #0]
 800b81c:	9201      	str	r2, [sp, #4]
 800b81e:	f006 feb0 	bl	8012582 <USB_ReadChInterrupts>
 800b822:	06c1      	lsls	r1, r0, #27
 800b824:	f57f af6f 	bpl.w	800b706 <HAL_HCD_IRQHandler+0x38e>
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800b828:	fb07 4305 	mla	r3, r7, r5, r4
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b82c:	6820      	ldr	r0, [r4, #0]
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800b82e:	9a01      	ldr	r2, [sp, #4]
 800b830:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 800b834:	2903      	cmp	r1, #3
 800b836:	d107      	bne.n	800b848 <HAL_HCD_IRQHandler+0x4d0>
      hhcd->hc[chnum].ErrCnt = 0U;
 800b838:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[chnum].state = HC_NAK;
 800b83a:	2204      	movs	r2, #4
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b83c:	4629      	mov	r1, r5
        hhcd->hc[chnum].state = HC_NAK;
 800b83e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b842:	f007 f804 	bl	801284e <USB_HC_Halt>
 800b846:	e006      	b.n	800b856 <HAL_HCD_IRQHandler+0x4de>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b848:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
 800b84c:	d103      	bne.n	800b856 <HAL_HCD_IRQHandler+0x4de>
      if (hhcd->Init.dma_enable == 0U)
 800b84e:	68e2      	ldr	r2, [r4, #12]
      hhcd->hc[chnum].ErrCnt = 0U;
 800b850:	65d9      	str	r1, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 800b852:	2a00      	cmp	r2, #0
 800b854:	d0f1      	beq.n	800b83a <HAL_HCD_IRQHandler+0x4c2>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800b856:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b85a:	2310      	movs	r3, #16
 800b85c:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b860:	e6e2      	b.n	800b628 <HAL_HCD_IRQHandler+0x2b0>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800b862:	f006 fe8e 	bl	8012582 <USB_ReadChInterrupts>
 800b866:	f010 0304 	ands.w	r3, r0, #4
 800b86a:	d00b      	beq.n	800b884 <HAL_HCD_IRQHandler+0x50c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800b86c:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b870:	2304      	movs	r3, #4
    hhcd->hc[chnum].state = HC_XACTERR;
 800b872:	2207      	movs	r2, #7
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800b874:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b878:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800b87a:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[chnum].state = HC_STALL;
 800b87e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800b882:	e7c6      	b.n	800b812 <HAL_HCD_IRQHandler+0x49a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800b884:	4629      	mov	r1, r5
 800b886:	6820      	ldr	r0, [r4, #0]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f006 fe7a 	bl	8012582 <USB_ReadChInterrupts>
 800b88e:	0682      	lsls	r2, r0, #26
 800b890:	d518      	bpl.n	800b8c4 <HAL_HCD_IRQHandler+0x54c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800b892:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b896:	2220      	movs	r2, #32
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b898:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800b89a:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    if (hhcd->hc[chnum].do_ping == 1U)
 800b89e:	9b01      	ldr	r3, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800b8a0:	60b2      	str	r2, [r6, #8]
    if (hhcd->hc[chnum].do_ping == 1U)
 800b8a2:	fb07 4205 	mla	r2, r7, r5, r4
 800b8a6:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
 800b8aa:	2901      	cmp	r1, #1
 800b8ac:	f47f af2b 	bne.w	800b706 <HAL_HCD_IRQHandler+0x38e>
      hhcd->hc[chnum].do_ping = 0U;
 800b8b0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b8b4:	4629      	mov	r1, r5
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b8b6:	f240 3302 	movw	r3, #770	; 0x302
 800b8ba:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b8be:	f006 ffc6 	bl	801284e <USB_HC_Halt>
 800b8c2:	e720      	b.n	800b706 <HAL_HCD_IRQHandler+0x38e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	f006 fe5b 	bl	8012582 <USB_ReadChInterrupts>
 800b8cc:	f410 7200 	ands.w	r2, r0, #512	; 0x200
 800b8d0:	d007      	beq.n	800b8e2 <HAL_HCD_IRQHandler+0x56a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800b8d2:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8da:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b8de:	60b3      	str	r3, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b8e0:	e797      	b.n	800b812 <HAL_HCD_IRQHandler+0x49a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	6820      	ldr	r0, [r4, #0]
 800b8e6:	9201      	str	r2, [sp, #4]
 800b8e8:	f006 fe4b 	bl	8012582 <USB_ReadChInterrupts>
 800b8ec:	f010 0301 	ands.w	r3, r0, #1
 800b8f0:	d01b      	beq.n	800b92a <HAL_HCD_IRQHandler+0x5b2>
    hhcd->hc[chnum].ErrCnt = 0U;
 800b8f2:	fb07 4305 	mla	r3, r7, r5, r4
 800b8f6:	9a01      	ldr	r2, [sp, #4]
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	6820      	ldr	r0, [r4, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800b8fc:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800b8fe:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    hhcd->hc[chnum].ErrCnt = 0U;
 800b902:	9301      	str	r3, [sp, #4]
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b904:	f006 fe3d 	bl	8012582 <USB_ReadChInterrupts>
 800b908:	0643      	lsls	r3, r0, #25
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800b90a:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b90e:	d505      	bpl.n	800b91c <HAL_HCD_IRQHandler+0x5a4>
      hhcd->hc[chnum].do_ping = 1U;
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b918:	2340      	movs	r3, #64	; 0x40
 800b91a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800b91c:	2301      	movs	r3, #1
    hhcd->hc[chnum].state = HC_XFRC;
 800b91e:	fb07 4205 	mla	r2, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800b922:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800b924:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b928:	e773      	b.n	800b812 <HAL_HCD_IRQHandler+0x49a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b92a:	4629      	mov	r1, r5
 800b92c:	6820      	ldr	r0, [r4, #0]
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	f006 fe27 	bl	8012582 <USB_ReadChInterrupts>
 800b934:	0640      	lsls	r0, r0, #25
 800b936:	d513      	bpl.n	800b960 <HAL_HCD_IRQHandler+0x5e8>
    hhcd->hc[chnum].state = HC_NYET;
 800b938:	fb07 4205 	mla	r2, r7, r5, r4
 800b93c:	2105      	movs	r1, #5
    hhcd->hc[chnum].ErrCnt = 0U;
 800b93e:	9b01      	ldr	r3, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b940:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    hhcd->hc[chnum].state = HC_NYET;
 800b944:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    hhcd->hc[chnum].do_ping = 1U;
 800b948:	2101      	movs	r1, #1
    hhcd->hc[chnum].ErrCnt = 0U;
 800b94a:	65d3      	str	r3, [r2, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b94c:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    hhcd->hc[chnum].do_ping = 1U;
 800b950:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b954:	4629      	mov	r1, r5
 800b956:	6820      	ldr	r0, [r4, #0]
 800b958:	f006 ff79 	bl	801284e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b95c:	2340      	movs	r3, #64	; 0x40
 800b95e:	e663      	b.n	800b628 <HAL_HCD_IRQHandler+0x2b0>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800b960:	4629      	mov	r1, r5
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	f006 fe0d 	bl	8012582 <USB_ReadChInterrupts>
 800b968:	0701      	lsls	r1, r0, #28
 800b96a:	d509      	bpl.n	800b980 <HAL_HCD_IRQHandler+0x608>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800b96c:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b970:	2308      	movs	r3, #8
    hhcd->hc[chnum].state = HC_STALL;
 800b972:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800b974:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b978:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800b97a:	fb07 4305 	mla	r3, r7, r5, r4
 800b97e:	e77e      	b.n	800b87e <HAL_HCD_IRQHandler+0x506>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800b980:	4629      	mov	r1, r5
 800b982:	6820      	ldr	r0, [r4, #0]
 800b984:	f006 fdfd 	bl	8012582 <USB_ReadChInterrupts>
 800b988:	06c2      	lsls	r2, r0, #27
 800b98a:	d512      	bpl.n	800b9b2 <HAL_HCD_IRQHandler+0x63a>
    hhcd->hc[chnum].ErrCnt = 0U;
 800b98c:	fb07 4305 	mla	r3, r7, r5, r4
 800b990:	2200      	movs	r2, #0
 800b992:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[chnum].state = HC_NAK;
 800b994:	2204      	movs	r2, #4
 800b996:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[chnum].do_ping == 0U)
 800b99a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800b99e:	b92a      	cbnz	r2, 800b9ac <HAL_HCD_IRQHandler+0x634>
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800b9a0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800b9a4:	b912      	cbnz	r2, 800b9ac <HAL_HCD_IRQHandler+0x634>
        hhcd->hc[chnum].do_ping = 1U;
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	6820      	ldr	r0, [r4, #0]
 800b9b0:	e747      	b.n	800b842 <HAL_HCD_IRQHandler+0x4ca>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	6820      	ldr	r0, [r4, #0]
 800b9b6:	f006 fde4 	bl	8012582 <USB_ReadChInterrupts>
 800b9ba:	0603      	lsls	r3, r0, #24
 800b9bc:	d524      	bpl.n	800ba08 <HAL_HCD_IRQHandler+0x690>
    if (hhcd->Init.dma_enable == 0U)
 800b9be:	68e3      	ldr	r3, [r4, #12]
 800b9c0:	b973      	cbnz	r3, 800b9e0 <HAL_HCD_IRQHandler+0x668>
      hhcd->hc[chnum].state = HC_XACTERR;
 800b9c2:	fb07 4305 	mla	r3, r7, r5, r4
 800b9c6:	2207      	movs	r2, #7
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b9c8:	4629      	mov	r1, r5
      hhcd->hc[chnum].state = HC_XACTERR;
 800b9ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	f006 ff3d 	bl	801284e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800b9d4:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800b9d8:	2380      	movs	r3, #128	; 0x80
 800b9da:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800b9de:	e623      	b.n	800b628 <HAL_HCD_IRQHandler+0x2b0>
      hhcd->hc[chnum].ErrCnt++;
 800b9e0:	fb07 4305 	mla	r3, r7, r5, r4
 800b9e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9e6:	3201      	adds	r2, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b9e8:	2a02      	cmp	r2, #2
      hhcd->hc[chnum].ErrCnt++;
 800b9ea:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b9ec:	d909      	bls.n	800ba02 <HAL_HCD_IRQHandler+0x68a>
        hhcd->hc[chnum].ErrCnt = 0U;
 800b9ee:	2200      	movs	r2, #0
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4620      	mov	r0, r4
        hhcd->hc[chnum].ErrCnt = 0U;
 800b9f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800b9f6:	2204      	movs	r2, #4
 800b9f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b9fc:	f7fb ff8e 	bl	800791c <HAL_HCD_HC_NotifyURBChange_Callback>
 800ba00:	e7e8      	b.n	800b9d4 <HAL_HCD_IRQHandler+0x65c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ba02:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
 800ba06:	e7e5      	b.n	800b9d4 <HAL_HCD_IRQHandler+0x65c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800ba08:	4629      	mov	r1, r5
 800ba0a:	6820      	ldr	r0, [r4, #0]
 800ba0c:	f006 fdb9 	bl	8012582 <USB_ReadChInterrupts>
 800ba10:	0540      	lsls	r0, r0, #21
 800ba12:	d50f      	bpl.n	800ba34 <HAL_HCD_IRQHandler+0x6bc>
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800ba14:	fb07 4305 	mla	r3, r7, r5, r4
 800ba18:	2209      	movs	r2, #9
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ba1a:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ba1e:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800ba20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ba24:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ba26:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ba2a:	f006 ff10 	bl	801284e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ba2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba32:	e5f9      	b.n	800b628 <HAL_HCD_IRQHandler+0x2b0>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ba34:	4629      	mov	r1, r5
 800ba36:	6820      	ldr	r0, [r4, #0]
 800ba38:	f006 fda3 	bl	8012582 <USB_ReadChInterrupts>
 800ba3c:	0781      	lsls	r1, r0, #30
 800ba3e:	f57f ae62 	bpl.w	800b706 <HAL_HCD_IRQHandler+0x38e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ba42:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800ba46:	0169      	lsls	r1, r5, #5
 800ba48:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800ba4c:	f8c3 8008 	str.w	r8, [r3, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800ba50:	fb07 4305 	mla	r3, r7, r5, r4
 800ba54:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800ba58:	2a01      	cmp	r2, #1
 800ba5a:	d123      	bne.n	800baa4 <HAL_HCD_IRQHandler+0x72c>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800ba5c:	f240 2201 	movw	r2, #513	; 0x201
 800ba60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ba64:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800ba68:	3a02      	subs	r2, #2
 800ba6a:	2a01      	cmp	r2, #1
 800ba6c:	f63f ae81 	bhi.w	800b772 <HAL_HCD_IRQHandler+0x3fa>
        if (hhcd->Init.dma_enable == 0U)
 800ba70:	68e2      	ldr	r2, [r4, #12]
 800ba72:	b932      	cbnz	r2, 800ba82 <HAL_HCD_IRQHandler+0x70a>
            hhcd->hc[chnum].toggle_out ^= 1U;
 800ba74:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800ba78:	f082 0201 	eor.w	r2, r2, #1
 800ba7c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800ba80:	e677      	b.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800ba82:	2a01      	cmp	r2, #1
 800ba84:	f47f ae75 	bne.w	800b772 <HAL_HCD_IRQHandler+0x3fa>
 800ba88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba8a:	2a00      	cmp	r2, #0
 800ba8c:	f43f ae71 	beq.w	800b772 <HAL_HCD_IRQHandler+0x3fa>
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800ba90:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800ba94:	3a01      	subs	r2, #1
 800ba96:	440a      	add	r2, r1
 800ba98:	fbb2 f2f1 	udiv	r2, r2, r1
          if ((num_packets & 1U) != 0U)
 800ba9c:	07d2      	lsls	r2, r2, #31
 800ba9e:	f57f ae68 	bpl.w	800b772 <HAL_HCD_IRQHandler+0x3fa>
 800baa2:	e7e7      	b.n	800ba74 <HAL_HCD_IRQHandler+0x6fc>
    else if (hhcd->hc[chnum].state == HC_ACK)
 800baa4:	1ed3      	subs	r3, r2, #3
 800baa6:	2b06      	cmp	r3, #6
 800baa8:	f63f ae2d 	bhi.w	800b706 <HAL_HCD_IRQHandler+0x38e>
 800baac:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <HAL_HCD_IRQHandler+0x73c>)
 800baae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab2:	bf00      	nop
 800bab4:	0800bad1 	.word	0x0800bad1
 800bab8:	0800badb 	.word	0x0800badb
 800babc:	0800badb 	.word	0x0800badb
 800bac0:	0800bae5 	.word	0x0800bae5
 800bac4:	0800baef 	.word	0x0800baef
 800bac8:	0800b707 	.word	0x0800b707
 800bacc:	0800baef 	.word	0x0800baef
      hhcd->hc[chnum].state = HC_HALTED;
 800bad0:	fb07 4305 	mla	r3, r7, r5, r4
 800bad4:	f883 8061 	strb.w	r8, [r3, #97]	; 0x61
 800bad8:	e64b      	b.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800bada:	fb07 4305 	mla	r3, r7, r5, r4
 800bade:	f240 2202 	movw	r2, #514	; 0x202
 800bae2:	e67e      	b.n	800b7e2 <HAL_HCD_IRQHandler+0x46a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800bae4:	fb07 4305 	mla	r3, r7, r5, r4
 800bae8:	f240 2205 	movw	r2, #517	; 0x205
 800baec:	e679      	b.n	800b7e2 <HAL_HCD_IRQHandler+0x46a>
      hhcd->hc[chnum].state = HC_HALTED;
 800baee:	fb07 4305 	mla	r3, r7, r5, r4
      hhcd->hc[chnum].ErrCnt++;
 800baf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
      hhcd->hc[chnum].state = HC_HALTED;
 800baf4:	f883 8061 	strb.w	r8, [r3, #97]	; 0x61
      hhcd->hc[chnum].ErrCnt++;
 800baf8:	3201      	adds	r2, #1
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800bafa:	2a02      	cmp	r2, #2
      hhcd->hc[chnum].ErrCnt++;
 800bafc:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800bafe:	d905      	bls.n	800bb0c <HAL_HCD_IRQHandler+0x794>
        hhcd->hc[chnum].ErrCnt = 0U;
 800bb00:	2200      	movs	r2, #0
 800bb02:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800bb04:	2204      	movs	r2, #4
 800bb06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800bb0a:	e632      	b.n	800b772 <HAL_HCD_IRQHandler+0x3fa>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800bb0c:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
 800bb10:	e659      	b.n	800b7c6 <HAL_HCD_IRQHandler+0x44e>
 800bb12:	bf00      	nop

0800bb14 <HAL_HCD_Start>:
{
 800bb14:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800bb16:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 800bb1a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d00c      	beq.n	800bb3a <HAL_HCD_Start+0x26>
 800bb20:	2101      	movs	r1, #1
 800bb22:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800bb26:	6800      	ldr	r0, [r0, #0]
 800bb28:	f006 fddb 	bl	80126e2 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	f006 fc6d 	bl	801240c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800bb32:	2000      	movs	r0, #0
 800bb34:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 800bb38:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800bb3a:	2002      	movs	r0, #2
 800bb3c:	e7fc      	b.n	800bb38 <HAL_HCD_Start+0x24>

0800bb3e <HAL_HCD_Stop>:
{
 800bb3e:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800bb40:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 800bb44:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d009      	beq.n	800bb5e <HAL_HCD_Stop+0x20>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800bb50:	6800      	ldr	r0, [r0, #0]
 800bb52:	f006 ff8f 	bl	8012a74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800bb56:	2000      	movs	r0, #0
 800bb58:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 800bb5c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800bb5e:	2002      	movs	r0, #2
 800bb60:	e7fc      	b.n	800bb5c <HAL_HCD_Stop+0x1e>

0800bb62 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800bb62:	6800      	ldr	r0, [r0, #0]
 800bb64:	f006 bd9f 	b.w	80126a6 <USB_ResetPort>

0800bb68 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800bb68:	232c      	movs	r3, #44	; 0x2c
 800bb6a:	fb03 0101 	mla	r1, r3, r1, r0
}
 800bb6e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 800bb72:	4770      	bx	lr

0800bb74 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800bb74:	232c      	movs	r3, #44	; 0x2c
 800bb76:	fb03 0101 	mla	r1, r3, r1, r0
}
 800bb7a:	6d08      	ldr	r0, [r1, #80]	; 0x50
 800bb7c:	4770      	bx	lr

0800bb7e <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 800bb7e:	6800      	ldr	r0, [r0, #0]
 800bb80:	f006 bdda 	b.w	8012738 <USB_GetCurrentFrame>

0800bb84 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800bb84:	6800      	ldr	r0, [r0, #0]
 800bb86:	f006 bdcc 	b.w	8012722 <USB_GetHostSpeed>
	...

0800bb8c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <HAL_HSEM_FastTake+0x14>)
 800bb8e:	3020      	adds	r0, #32
 800bb90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800bb94:	4b03      	ldr	r3, [pc, #12]	; (800bba4 <HAL_HSEM_FastTake+0x18>)
 800bb96:	1ac0      	subs	r0, r0, r3
 800bb98:	bf18      	it	ne
 800bb9a:	2001      	movne	r0, #1
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	58026400 	.word	0x58026400
 800bba4:	80000300 	.word	0x80000300

0800bba8 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800bba8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800bbac:	4b01      	ldr	r3, [pc, #4]	; (800bbb4 <HAL_HSEM_Release+0xc>)
 800bbae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800bbb2:	4770      	bx	lr
 800bbb4:	58026400 	.word	0x58026400

0800bbb8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bbb8:	6803      	ldr	r3, [r0, #0]
 800bbba:	699a      	ldr	r2, [r3, #24]
 800bbbc:	0791      	lsls	r1, r2, #30
 800bbbe:	d501      	bpl.n	800bbc4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbc4:	699a      	ldr	r2, [r3, #24]
 800bbc6:	07d2      	lsls	r2, r2, #31
 800bbc8:	d403      	bmi.n	800bbd2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bbca:	699a      	ldr	r2, [r3, #24]
 800bbcc:	f042 0201 	orr.w	r2, r2, #1
 800bbd0:	619a      	str	r2, [r3, #24]
  }
}
 800bbd2:	4770      	bx	lr

0800bbd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bbd4:	b530      	push	{r4, r5, lr}
 800bbd6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbd8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbdc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbde:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbe0:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbe6:	4a05      	ldr	r2, [pc, #20]	; (800bbfc <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbe8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbea:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bbee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbf2:	ea20 0002 	bic.w	r0, r0, r2
 800bbf6:	4303      	orrs	r3, r0
 800bbf8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bbfa:	bd30      	pop	{r4, r5, pc}
 800bbfc:	03ff63ff 	.word	0x03ff63ff

0800bc00 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800bc00:	6803      	ldr	r3, [r0, #0]
{
 800bc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800bc06:	699c      	ldr	r4, [r3, #24]
{
 800bc08:	4605      	mov	r5, r0
 800bc0a:	460f      	mov	r7, r1
 800bc0c:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bc0e:	f014 0410 	ands.w	r4, r4, #16
 800bc12:	d06f      	beq.n	800bcf4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800bc14:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc16:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800bc18:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc1a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	0690      	lsls	r0, r2, #26
 800bc22:	d461      	bmi.n	800bce8 <I2C_IsErrorOccurred+0xe8>
 800bc24:	f1b8 0f00 	cmp.w	r8, #0
 800bc28:	d035      	beq.n	800bc96 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800bc2a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800bc2e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800bc30:	682e      	ldr	r6, [r5, #0]
 800bc32:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bc34:	05d9      	lsls	r1, r3, #23
 800bc36:	d505      	bpl.n	800bc44 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc38:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800bc3c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800bc40:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc42:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bc44:	055a      	lsls	r2, r3, #21
 800bc46:	d505      	bpl.n	800bc54 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc48:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800bc4c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800bc50:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc52:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bc54:	059b      	lsls	r3, r3, #22
 800bc56:	d54f      	bpl.n	800bcf8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc58:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800bc5c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc60:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800bc62:	4628      	mov	r0, r5
 800bc64:	f7ff ffa8 	bl	800bbb8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800bc68:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800bc6a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800bc6c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800bc70:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800bc74:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800bc7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bc80:	4323      	orrs	r3, r4
 800bc82:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bc84:	2320      	movs	r3, #32
 800bc86:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800bc90:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800bc94:	e032      	b.n	800bcfc <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800bc96:	1c7a      	adds	r2, r7, #1
 800bc98:	d0c1      	beq.n	800bc1e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc9a:	f7fe f8bf 	bl	8009e1c <HAL_GetTick>
 800bc9e:	1b80      	subs	r0, r0, r6
 800bca0:	42b8      	cmp	r0, r7
 800bca2:	d801      	bhi.n	800bca8 <I2C_IsErrorOccurred+0xa8>
 800bca4:	2f00      	cmp	r7, #0
 800bca6:	d1b9      	bne.n	800bc1c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800bcac:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bcb0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800bcb2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bcb4:	0400      	lsls	r0, r0, #16
 800bcb6:	d50a      	bpl.n	800bcce <I2C_IsErrorOccurred+0xce>
 800bcb8:	0449      	lsls	r1, r1, #17
 800bcba:	d408      	bmi.n	800bcce <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800bcbc:	2a20      	cmp	r2, #32
 800bcbe:	d006      	beq.n	800bcce <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bcc0:	685a      	ldr	r2, [r3, #4]
 800bcc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcc6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bcc8:	f7fe f8a8 	bl	8009e1c <HAL_GetTick>
 800bccc:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	069b      	lsls	r3, r3, #26
 800bcd4:	d4a2      	bmi.n	800bc1c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bcd6:	f7fe f8a1 	bl	8009e1c <HAL_GetTick>
 800bcda:	1b80      	subs	r0, r0, r6
 800bcdc:	2819      	cmp	r0, #25
 800bcde:	d9f6      	bls.n	800bcce <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bce0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800bce2:	f04f 0801 	mov.w	r8, #1
 800bce6:	e799      	b.n	800bc1c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800bce8:	f1b8 0f00 	cmp.w	r8, #0
 800bcec:	d19d      	bne.n	800bc2a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcee:	2220      	movs	r2, #32
 800bcf0:	61da      	str	r2, [r3, #28]
 800bcf2:	e79a      	b.n	800bc2a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	e79b      	b.n	800bc30 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1b2      	bne.n	800bc62 <I2C_IsErrorOccurred+0x62>
}
 800bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd00 <I2C_WaitOnFlagUntilTimeout>:
{
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	9f06      	ldr	r7, [sp, #24]
 800bd06:	4604      	mov	r4, r0
 800bd08:	4688      	mov	r8, r1
 800bd0a:	4616      	mov	r6, r2
 800bd0c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	6993      	ldr	r3, [r2, #24]
 800bd12:	ea38 0303 	bics.w	r3, r8, r3
 800bd16:	bf0c      	ite	eq
 800bd18:	2301      	moveq	r3, #1
 800bd1a:	2300      	movne	r3, #0
 800bd1c:	42b3      	cmp	r3, r6
 800bd1e:	d001      	beq.n	800bd24 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800bd20:	2000      	movs	r0, #0
 800bd22:	e01e      	b.n	800bd62 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800bd24:	1c6b      	adds	r3, r5, #1
 800bd26:	d0f3      	beq.n	800bd10 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd28:	f7fe f878 	bl	8009e1c <HAL_GetTick>
 800bd2c:	1bc0      	subs	r0, r0, r7
 800bd2e:	42a8      	cmp	r0, r5
 800bd30:	d801      	bhi.n	800bd36 <I2C_WaitOnFlagUntilTimeout+0x36>
 800bd32:	2d00      	cmp	r5, #0
 800bd34:	d1eb      	bne.n	800bd0e <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	ea38 0303 	bics.w	r3, r8, r3
 800bd3e:	bf0c      	ite	eq
 800bd40:	2301      	moveq	r3, #1
 800bd42:	2300      	movne	r3, #0
 800bd44:	42b3      	cmp	r3, r6
 800bd46:	d1e2      	bne.n	800bd0e <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd48:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800bd4a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd4c:	f043 0320 	orr.w	r3, r3, #32
 800bd50:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bd52:	2320      	movs	r3, #32
 800bd54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800bd5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd66 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bd66:	b570      	push	{r4, r5, r6, lr}
 800bd68:	4604      	mov	r4, r0
 800bd6a:	460d      	mov	r5, r1
 800bd6c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	069b      	lsls	r3, r3, #26
 800bd74:	d501      	bpl.n	800bd7a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800bd76:	2000      	movs	r0, #0
}
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f7ff ff3e 	bl	800bc00 <I2C_IsErrorOccurred>
 800bd84:	b9b0      	cbnz	r0, 800bdb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd86:	f7fe f849 	bl	8009e1c <HAL_GetTick>
 800bd8a:	1b80      	subs	r0, r0, r6
 800bd8c:	42a8      	cmp	r0, r5
 800bd8e:	d801      	bhi.n	800bd94 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800bd90:	2d00      	cmp	r5, #0
 800bd92:	d1ec      	bne.n	800bd6e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	f013 0320 	ands.w	r3, r3, #32
 800bd9c:	d1e7      	bne.n	800bd6e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd9e:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bda0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bda4:	f042 0220 	orr.w	r2, r2, #32
 800bda8:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bdaa:	2220      	movs	r2, #32
 800bdac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	e7df      	b.n	800bd78 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800bdb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800bdb8:	b570      	push	{r4, r5, r6, lr}
 800bdba:	4604      	mov	r4, r0
 800bdbc:	460d      	mov	r5, r1
 800bdbe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	075b      	lsls	r3, r3, #29
 800bdc6:	d40e      	bmi.n	800bde6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdc8:	4632      	mov	r2, r6
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f7ff ff17 	bl	800bc00 <I2C_IsErrorOccurred>
 800bdd2:	bb28      	cbnz	r0, 800be20 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	0691      	lsls	r1, r2, #26
 800bdda:	d523      	bpl.n	800be24 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	0752      	lsls	r2, r2, #29
 800bde0:	d503      	bpl.n	800bdea <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 800bde2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bde4:	b10a      	cbz	r2, 800bdea <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 800bde6:	2000      	movs	r0, #0
}
 800bde8:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdea:	699a      	ldr	r2, [r3, #24]
 800bdec:	f012 0210 	ands.w	r2, r2, #16
 800bdf0:	d002      	beq.n	800bdf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdf2:	2210      	movs	r2, #16
 800bdf4:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bdf6:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdf8:	2120      	movs	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdfa:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdfc:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800be04:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800be08:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800be0c:	f022 0201 	bic.w	r2, r2, #1
 800be10:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be12:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800be14:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800be1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800be20:	2001      	movs	r0, #1
 800be22:	e7e1      	b.n	800bde8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be24:	f7fd fffa 	bl	8009e1c <HAL_GetTick>
 800be28:	1b80      	subs	r0, r0, r6
 800be2a:	42a8      	cmp	r0, r5
 800be2c:	d801      	bhi.n	800be32 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
 800be2e:	2d00      	cmp	r5, #0
 800be30:	d1c6      	bne.n	800bdc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	f013 0304 	ands.w	r3, r3, #4
 800be3a:	d1c1      	bne.n	800bdc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800be3e:	f042 0220 	orr.w	r2, r2, #32
 800be42:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be44:	2220      	movs	r2, #32
 800be46:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800be4a:	e7e7      	b.n	800be1c <I2C_WaitOnRXNEFlagUntilTimeout+0x64>

0800be4c <HAL_I2C_Init>:
{
 800be4c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800be4e:	4604      	mov	r4, r0
 800be50:	2800      	cmp	r0, #0
 800be52:	d04a      	beq.n	800beea <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800be54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800be58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800be5c:	b91b      	cbnz	r3, 800be66 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800be5e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800be62:	f7f5 fa8d 	bl	8001380 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800be66:	2324      	movs	r3, #36	; 0x24
 800be68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	f022 0201 	bic.w	r2, r2, #1
 800be74:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be76:	6862      	ldr	r2, [r4, #4]
 800be78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800be7c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800be7e:	689a      	ldr	r2, [r3, #8]
 800be80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be84:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be86:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be8a:	2901      	cmp	r1, #1
 800be8c:	d124      	bne.n	800bed8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be92:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be94:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be96:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be98:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800be9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bea0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bea2:	68da      	ldr	r2, [r3, #12]
 800bea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bea8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800beaa:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800beae:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800beb0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800beb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800beb6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800beb8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800bebc:	430a      	orrs	r2, r1
 800bebe:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	f042 0201 	orr.w	r2, r2, #1
 800bec6:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800bec8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beca:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800becc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bed0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bed2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800bed6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bed8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bedc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bede:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bee0:	d1d8      	bne.n	800be94 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bee6:	605a      	str	r2, [r3, #4]
 800bee8:	e7d4      	b.n	800be94 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800beea:	2001      	movs	r0, #1
 800beec:	e7f3      	b.n	800bed6 <HAL_I2C_Init+0x8a>
	...

0800bef0 <HAL_I2C_Master_Receive>:
{
 800bef0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bef6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800befa:	4604      	mov	r4, r0
 800befc:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800befe:	2b20      	cmp	r3, #32
{
 800bf00:	4691      	mov	r9, r2
 800bf02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf04:	f040 8087 	bne.w	800c016 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 800bf08:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	f000 8082 	beq.w	800c016 <HAL_I2C_Master_Receive+0x126>
 800bf12:	f04f 0a01 	mov.w	sl, #1
 800bf16:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bf1a:	f7fd ff7f 	bl	8009e1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf1e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800bf20:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf22:	9000      	str	r0, [sp, #0]
 800bf24:	4652      	mov	r2, sl
 800bf26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7ff fee8 	bl	800bd00 <I2C_WaitOnFlagUntilTimeout>
 800bf30:	b118      	cbz	r0, 800bf3a <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 800bf32:	2001      	movs	r0, #1
}
 800bf34:	b002      	add	sp, #8
 800bf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf3a:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800bf3c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800bf40:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf46:	2310      	movs	r3, #16
 800bf48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf4c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bf4e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	2bff      	cmp	r3, #255	; 0xff
 800bf58:	4b30      	ldr	r3, [pc, #192]	; (800c01c <HAL_I2C_Master_Receive+0x12c>)
 800bf5a:	d926      	bls.n	800bfaa <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf5c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bf5e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf60:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bf62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf66:	4631      	mov	r1, r6
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f7ff fe33 	bl	800bbd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bf6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf70:	462a      	mov	r2, r5
 800bf72:	4639      	mov	r1, r7
 800bf74:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	b9fb      	cbnz	r3, 800bfba <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf7a:	f7ff fef4 	bl	800bd66 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d1d7      	bne.n	800bf32 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	2120      	movs	r1, #32
 800bf86:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800bf8e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800bf92:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800bf96:	f022 0201 	bic.w	r2, r2, #1
 800bf9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bf9c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bfa0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bfa4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800bfa8:	e7c4      	b.n	800bf34 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800bfaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfac:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800bfae:	b292      	uxth	r2, r2
 800bfb0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfb6:	b2d2      	uxtb	r2, r2
 800bfb8:	e7d5      	b.n	800bf66 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfba:	f7ff fefd 	bl	800bdb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d1b7      	bne.n	800bf32 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800bfca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800bfcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800bfce:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800bfd0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bfd2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800bfd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bfd6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bfd8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bfda:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0c2      	beq.n	800bf6e <HAL_I2C_Master_Receive+0x7e>
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	d1c0      	bne.n	800bf6e <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bfec:	463b      	mov	r3, r7
 800bfee:	2180      	movs	r1, #128	; 0x80
 800bff0:	4620      	mov	r0, r4
 800bff2:	9500      	str	r5, [sp, #0]
 800bff4:	f7ff fe84 	bl	800bd00 <I2C_WaitOnFlagUntilTimeout>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d19a      	bne.n	800bf32 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bffc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bffe:	b29b      	uxth	r3, r3
 800c000:	2bff      	cmp	r3, #255	; 0xff
 800c002:	d903      	bls.n	800c00c <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c004:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c006:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c008:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c00a:	e7aa      	b.n	800bf62 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 800c00c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c00e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800c010:	b292      	uxth	r2, r2
 800c012:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c014:	e7cd      	b.n	800bfb2 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 800c016:	2002      	movs	r0, #2
 800c018:	e78c      	b.n	800bf34 <HAL_I2C_Master_Receive+0x44>
 800c01a:	bf00      	nop
 800c01c:	80002400 	.word	0x80002400

0800c020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c020:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c022:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c026:	2b20      	cmp	r3, #32
 800c028:	b2dc      	uxtb	r4, r3
 800c02a:	d11d      	bne.n	800c068 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c02c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c030:	2b01      	cmp	r3, #1
 800c032:	d019      	beq.n	800c068 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c034:	2324      	movs	r3, #36	; 0x24
 800c036:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c03a:	6803      	ldr	r3, [r0, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	f022 0201 	bic.w	r2, r2, #1
 800c042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c04a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	4311      	orrs	r1, r2
 800c050:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	f042 0201 	orr.w	r2, r2, #1
 800c058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c05a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800c05c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c060:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800c064:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c066:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c068:	2002      	movs	r0, #2
 800c06a:	e7fc      	b.n	800c066 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800c06c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c06c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c06e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c072:	2b20      	cmp	r3, #32
 800c074:	b2dc      	uxtb	r4, r3
 800c076:	d11c      	bne.n	800c0b2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d018      	beq.n	800c0b2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c080:	2324      	movs	r3, #36	; 0x24
 800c082:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c086:	6803      	ldr	r3, [r0, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	f022 0201 	bic.w	r2, r2, #1
 800c08e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c090:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c092:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c096:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c09a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	f042 0201 	orr.w	r2, r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0a4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800c0a6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c0aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800c0ae:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c0b0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c0b2:	2002      	movs	r0, #2
 800c0b4:	e7fc      	b.n	800c0b0 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

0800c0b8 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0b8:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <HAL_I2CEx_EnableFastModePlus+0x28>)
{
 800c0ba:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0bc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800c0c0:	f042 0202 	orr.w	r2, r2, #2
 800c0c4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800c0c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800c0cc:	4a05      	ldr	r2, [pc, #20]	; (800c0e4 <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0ce:	f003 0302 	and.w	r3, r3, #2
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800c0d6:	6853      	ldr	r3, [r2, #4]
 800c0d8:	4318      	orrs	r0, r3
 800c0da:	6050      	str	r0, [r2, #4]
}
 800c0dc:	b002      	add	sp, #8
 800c0de:	4770      	bx	lr
 800c0e0:	58024400 	.word	0x58024400
 800c0e4:	58000400 	.word	0x58000400

0800c0e8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800c0ee:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800c0f0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 800c0f4:	462f      	mov	r7, r5
 800c0f6:	4425      	add	r5, r4
 800c0f8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c0fc:	d822      	bhi.n	800c144 <JPEG_Bits_To_SizeCodes+0x5c>
 800c0fe:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800c100:	b954      	cbnz	r4, 800c118 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 800c102:	3601      	adds	r6, #1
 800c104:	2e11      	cmp	r6, #17
 800c106:	d1f3      	bne.n	800c0f0 <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800c108:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800c10a:	2601      	movs	r6, #1
  *LastK = p;
 800c10c:	601d      	str	r5, [r3, #0]
  code = 0;
 800c10e:	4623      	mov	r3, r4
  si = Huffsize[0];
 800c110:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800c112:	5d08      	ldrb	r0, [r1, r4]
 800c114:	b9a0      	cbnz	r0, 800c140 <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 800c118:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 800c11a:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 800c11e:	e7ef      	b.n	800c100 <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 800c120:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 800c124:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 800c126:	5d08      	ldrb	r0, [r1, r4]
 800c128:	193b      	adds	r3, r7, r4
 800c12a:	42a8      	cmp	r0, r5
 800c12c:	d0f8      	beq.n	800c120 <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 800c12e:	2d1f      	cmp	r5, #31
 800c130:	d808      	bhi.n	800c144 <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800c132:	fa06 f005 	lsl.w	r0, r6, r5
 800c136:	4298      	cmp	r0, r3
 800c138:	d904      	bls.n	800c144 <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 800c13a:	005b      	lsls	r3, r3, #1
    si++;
 800c13c:	3501      	adds	r5, #1
 800c13e:	e7e8      	b.n	800c112 <JPEG_Bits_To_SizeCodes+0x2a>
 800c140:	1b1f      	subs	r7, r3, r4
 800c142:	e7f0      	b.n	800c126 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 800c144:	2001      	movs	r0, #1
 800c146:	e7e6      	b.n	800c116 <JPEG_Bits_To_SizeCodes+0x2e>

0800c148 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14a:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 800c14e:	460d      	mov	r5, r1
 800c150:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800c152:	ab01      	add	r3, sp, #4
 800c154:	aa43      	add	r2, sp, #268	; 0x10c
 800c156:	a902      	add	r1, sp, #8
 800c158:	f7ff ffc6 	bl	800c0e8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800c15c:	b938      	cbnz	r0, 800c16e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800c15e:	9e01      	ldr	r6, [sp, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	f104 010f 	add.w	r1, r4, #15
 800c166:	360f      	adds	r6, #15
 800c168:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800c16a:	42a1      	cmp	r1, r4
 800c16c:	d102      	bne.n	800c174 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c16e:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800c172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800c174:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800c178:	2e0b      	cmp	r6, #11
 800c17a:	d80a      	bhi.n	800c192 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c17c:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800c180:	f852 cb04 	ldr.w	ip, [r2], #4
 800c184:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800c188:	f813 7b01 	ldrb.w	r7, [r3], #1
 800c18c:	3f01      	subs	r7, #1
 800c18e:	55af      	strb	r7, [r5, r6]
      k++;
 800c190:	e7eb      	b.n	800c16a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800c192:	2001      	movs	r0, #1
 800c194:	e7eb      	b.n	800c16e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800c196 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800c196:	4603      	mov	r3, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800c19c:	681c      	ldr	r4, [r3, #0]
{
 800c19e:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800c1a0:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d125      	bne.n	800c1f4 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800c1a8:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800c1ac:	a901      	add	r1, sp, #4
 800c1ae:	f7ff ffcb 	bl	800c148 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800c1b2:	b9e8      	cbnz	r0, 800c1f0 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800c1b4:	aa01      	add	r2, sp, #4
 800c1b6:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800c1ba:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800c1be:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800c1c0:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800c1c2:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c1c4:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800c1c6:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c1c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    while (i > 1UL)
 800c1cc:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c1ce:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c1d0:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c1d4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800c1d8:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c1da:	7b13      	ldrb	r3, [r2, #12]
 800c1dc:	021b      	lsls	r3, r3, #8
 800c1de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c1e2:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800c1e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1e8:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800c1ec:	42b4      	cmp	r4, r6
 800c1ee:	d1e9      	bne.n	800c1c4 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c1f0:	b011      	add	sp, #68	; 0x44
 800c1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800c1f4:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d102      	bne.n	800c202 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800c1fc:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 800c200:	e7d4      	b.n	800c1ac <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800c202:	2001      	movs	r0, #1
 800c204:	e7f4      	b.n	800c1f0 <JPEG_Set_HuffDC_Mem+0x5a>

0800c206 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800c206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800c20a:	6804      	ldr	r4, [r0, #0]
{
 800c20c:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 800c210:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800c212:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800c216:	429a      	cmp	r2, r3
 800c218:	d116      	bne.n	800c248 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c21a:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800c21e:	466b      	mov	r3, sp
 800c220:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 800c224:	a901      	add	r1, sp, #4
 800c226:	4628      	mov	r0, r5
 800c228:	f7ff ff5e 	bl	800c0e8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d15e      	bne.n	800c2ee <JPEG_Set_HuffAC_Mem+0xe8>
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	4616      	mov	r6, r2
 800c234:	f105 070f 	add.w	r7, r5, #15
 800c238:	460a      	mov	r2, r1
 800c23a:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c23c:	f04f 0e0a 	mov.w	lr, #10
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c240:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
 800c244:	18e9      	adds	r1, r5, r3
 800c246:	e021      	b.n	800c28c <JPEG_Set_HuffAC_Mem+0x86>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800c248:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d10f      	bne.n	800c270 <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c250:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 800c254:	e7e3      	b.n	800c21e <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800c256:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    if (l == 0UL)
 800c25a:	b15b      	cbz	r3, 800c274 <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800c25c:	2bf0      	cmp	r3, #240	; 0xf0
 800c25e:	d04a      	beq.n	800c2f6 <JPEG_Set_HuffAC_Mem+0xf0>
      msb = (l & 0xF0UL) >> 4;
 800c260:	091d      	lsrs	r5, r3, #4
      lsb = (l & 0x0FUL);
 800c262:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c266:	3b01      	subs	r3, #1
 800c268:	fb0e 3305 	mla	r3, lr, r5, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800c26c:	2ba1      	cmp	r3, #161	; 0xa1
 800c26e:	d902      	bls.n	800c276 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800c270:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 800c272:	e03c      	b.n	800c2ee <JPEG_Set_HuffAC_Mem+0xe8>
      l = 160; /*l = 0x00 EOB code*/
 800c274:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c276:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 800c27a:	f856 8b04 	ldr.w	r8, [r6], #4
 800c27e:	f8c5 80a4 	str.w	r8, [r5, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800c282:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c286:	3d01      	subs	r5, #1
 800c288:	f80c 5003 	strb.w	r5, [ip, r3]
  while (k < lastK)
 800c28c:	42b9      	cmp	r1, r7
 800c28e:	d1e2      	bne.n	800c256 <JPEG_Set_HuffAC_Mem+0x50>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800c290:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800c294:	a942      	add	r1, sp, #264	; 0x108
 800c296:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 800c29a:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800c29c:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800c29e:	6063      	str	r3, [r4, #4]
 800c2a0:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800c2a2:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 800c2a6:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 800c2aa:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800c2ac:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800c2b0:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800c2b2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800c2b6:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800c2b8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800c2bc:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c2be:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
    while (i > 1UL)
 800c2c2:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c2c4:	f895 3330 	ldrb.w	r3, [r5, #816]	; 0x330
    while (i > 1UL)
 800c2c8:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c2ca:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c2cc:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c2d0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800c2d4:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c2d6:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 800c2da:	021b      	lsls	r3, r3, #8
 800c2dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c2e0:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800c2e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2e6:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800c2ea:	42b4      	cmp	r4, r6
 800c2ec:	d1e7      	bne.n	800c2be <JPEG_Set_HuffAC_Mem+0xb8>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c2ee:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 800c2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 800c2f6:	23a1      	movs	r3, #161	; 0xa1
 800c2f8:	e7bd      	b.n	800c276 <JPEG_Set_HuffAC_Mem+0x70>

0800c2fa <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800c2fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c2fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c300:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c302:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c304:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c306:	f002 0203 	and.w	r2, r2, #3
 800c30a:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	bf0c      	ite	eq
 800c310:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800c314:	f022 0208 	bicne.w	r2, r2, #8
 800c318:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	f022 0201 	bic.w	r2, r2, #1
 800c320:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c324:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800c328:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c32a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c32c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c330:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c338:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c340:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	f042 0201 	orr.w	r2, r2, #1
 800c348:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c34a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800c34c:	f002 020c 	and.w	r2, r2, #12
 800c350:	2a08      	cmp	r2, #8
 800c352:	d104      	bne.n	800c35e <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800c354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c356:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c35a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800c35c:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c35e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800c360:	f002 020c 	and.w	r2, r2, #12
 800c364:	2a0c      	cmp	r2, #12
 800c366:	d1f9      	bne.n	800c35c <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c36a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c36e:	e7f4      	b.n	800c35a <JPEG_Init_Process+0x60>

0800c370 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c372:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 800c374:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c376:	6a82      	ldr	r2, [r0, #40]	; 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c378:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c37a:	42aa      	cmp	r2, r5
 800c37c:	d313      	bcc.n	800c3a6 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c37e:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c382:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c384:	428b      	cmp	r3, r1
 800c386:	d30e      	bcc.n	800c3a6 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800c388:	4f18      	ldr	r7, [pc, #96]	; (800c3ec <JPEG_DMA_StartProcess+0x7c>)
 800c38a:	6477      	str	r7, [r6, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c38c:	4f18      	ldr	r7, [pc, #96]	; (800c3f0 <JPEG_DMA_StartProcess+0x80>)
 800c38e:	6577      	str	r7, [r6, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c390:	4e18      	ldr	r6, [pc, #96]	; (800c3f4 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c392:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c394:	6446      	str	r6, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800c396:	4e18      	ldr	r6, [pc, #96]	; (800c3f8 <JPEG_DMA_StartProcess+0x88>)
 800c398:	6586      	str	r6, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800c39a:	b105      	cbz	r5, 800c39e <JPEG_DMA_StartProcess+0x2e>
 800c39c:	b929      	cbnz	r1, 800c3aa <JPEG_DMA_StartProcess+0x3a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c39e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c3a0:	f043 0304 	orr.w	r3, r3, #4
 800c3a4:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 800c3a6:	2001      	movs	r0, #1
 800c3a8:	e01e      	b.n	800c3e8 <JPEG_DMA_StartProcess+0x78>
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c3aa:	fbb2 f6f5 	udiv	r6, r2, r5
 800c3ae:	fb05 2516 	mls	r5, r5, r6, r2
 800c3b2:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c3b4:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c3b6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c3b8:	9500      	str	r5, [sp, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c3ba:	fbb3 f2f1 	udiv	r2, r3, r1
 800c3be:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c3c2:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c3c4:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c3c6:	3144      	adds	r1, #68	; 0x44
 800c3c8:	69e2      	ldr	r2, [r4, #28]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c3ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c3cc:	f001 f873 	bl	800d4b6 <HAL_MDMA_Start_IT>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1e4      	bne.n	800c39e <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c3d4:	6822      	ldr	r2, [r4, #0]
 800c3d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3d8:	3240      	adds	r2, #64	; 0x40
 800c3da:	69a1      	ldr	r1, [r4, #24]
 800c3dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c3de:	9500      	str	r5, [sp, #0]
 800c3e0:	f001 f869 	bl	800d4b6 <HAL_MDMA_Start_IT>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d1da      	bne.n	800c39e <JPEG_DMA_StartProcess+0x2e>
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800c3e8:	b003      	add	sp, #12
 800c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ec:	0800c93b 	.word	0x0800c93b
 800c3f0:	0800c833 	.word	0x0800c833
 800c3f4:	0800cdf9 	.word	0x0800cdf9
 800c3f8:	0800cdeb 	.word	0x0800cdeb

0800c3fc <HAL_JPEG_Init>:
{
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800c3fe:	4604      	mov	r4, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	f000 811b 	beq.w	800c63c <HAL_JPEG_Init+0x240>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800c406:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800c40a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c40e:	b91b      	cbnz	r3, 800c418 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800c410:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800c414:	f7f5 f89c 	bl	8001550 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800c418:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800c41a:	2302      	movs	r3, #2
 800c41c:	4988      	ldr	r1, [pc, #544]	; (800c640 <HAL_JPEG_Init+0x244>)
 800c41e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800c422:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800c426:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c428:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 800c42c:	f043 0301 	orr.w	r3, r3, #1
 800c430:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c432:	6813      	ldr	r3, [r2, #0]
 800c434:	f023 0301 	bic.w	r3, r3, #1
 800c438:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c43a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c43c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800c440:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c442:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c448:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c44a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c44c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c450:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c452:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c454:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c458:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800c45a:	4b7a      	ldr	r3, [pc, #488]	; (800c644 <HAL_JPEG_Init+0x248>)
 800c45c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800c45e:	4b7a      	ldr	r3, [pc, #488]	; (800c648 <HAL_JPEG_Init+0x24c>)
 800c460:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800c462:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800c464:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c468:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 800c46a:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c46c:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c46e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c470:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800c474:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c476:	4333      	orrs	r3, r6
 800c478:	7c4e      	ldrb	r6, [r1, #17]
 800c47a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c47e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800c482:	42a8      	cmp	r0, r5
 800c484:	d1f0      	bne.n	800c468 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c486:	4b71      	ldr	r3, [pc, #452]	; (800c64c <HAL_JPEG_Init+0x250>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c488:	f502 7662 	add.w	r6, r2, #904	; 0x388
 800c48c:	4970      	ldr	r1, [pc, #448]	; (800c650 <HAL_JPEG_Init+0x254>)
 800c48e:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c492:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 800c496:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c49a:	460d      	mov	r5, r1
 800c49c:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c49e:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 800c4a2:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800c4a6:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c4aa:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 800c4ac:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c4ae:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c4b2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c4b4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800c4b8:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c4bc:	ea43 030c 	orr.w	r3, r3, ip
 800c4c0:	f895 c011 	ldrb.w	ip, [r5, #17]
 800c4c4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c4c8:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800c4cc:	42be      	cmp	r6, r7
 800c4ce:	d1ec      	bne.n	800c4aa <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800c4d0:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800c4d4:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 800c4d8:	0c1b      	lsrs	r3, r3, #16
 800c4da:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800c4dc:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 800c4e0:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 800c4e4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c4e8:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 800c4ec:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c4ee:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c4f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c4f4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800c4f8:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c4fc:	4333      	orrs	r3, r6
 800c4fe:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800c502:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c506:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 800c50a:	4285      	cmp	r5, r0
 800c50c:	d1ec      	bne.n	800c4e8 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800c50e:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800c512:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = *address & 0xFFFF0000U;
 800c516:	494f      	ldr	r1, [pc, #316]	; (800c654 <HAL_JPEG_Init+0x258>)
 800c518:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0x0000FFFFU;
 800c51c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800c51e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 800c522:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 800c526:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 800c52a:	400b      	ands	r3, r1
  *address = value;
 800c52c:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c530:	2301      	movs	r3, #1
 800c532:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 800c536:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800c53a:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800c53e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 800c542:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 800c546:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800c548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 800c54c:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 800c550:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
 800c554:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800c556:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 800c55a:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800c55e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c562:	4b3d      	ldr	r3, [pc, #244]	; (800c658 <HAL_JPEG_Init+0x25c>)
 800c564:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 800c568:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800c56c:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 800c570:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
 800c574:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800c576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
 800c57a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 800c57e:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800c582:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800c584:	4935      	ldr	r1, [pc, #212]	; (800c65c <HAL_JPEG_Init+0x260>)
 800c586:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800c58a:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800c58e:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c592:	4b33      	ldr	r3, [pc, #204]	; (800c660 <HAL_JPEG_Init+0x264>)
 800c594:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 800c598:	4b32      	ldr	r3, [pc, #200]	; (800c664 <HAL_JPEG_Init+0x268>)
 800c59a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 800c59e:	4b32      	ldr	r3, [pc, #200]	; (800c668 <HAL_JPEG_Init+0x26c>)
 800c5a0:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 800c5a4:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800c5a8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800c5aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 800c5ae:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c5b2:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 800c5b6:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c5b8:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c5bc:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c5be:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800c5c2:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c5c6:	4333      	orrs	r3, r6
 800c5c8:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 800c5cc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c5d0:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800c5d4:	42a8      	cmp	r0, r5
 800c5d6:	d1ec      	bne.n	800c5b2 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800c5d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5dc:	491c      	ldr	r1, [pc, #112]	; (800c650 <HAL_JPEG_Init+0x254>)
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f7ff fe11 	bl	800c206 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c5e4:	b110      	cbz	r0, 800c5ec <HAL_JPEG_Init+0x1f0>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	6520      	str	r0, [r4, #80]	; 0x50
}
 800c5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 800c5ec:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	491a      	ldr	r1, [pc, #104]	; (800c65c <HAL_JPEG_Init+0x260>)
 800c5f2:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 800c5f6:	f7ff fe06 	bl	800c206 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d1f3      	bne.n	800c5e6 <HAL_JPEG_Init+0x1ea>
                              hjpeg->Instance->HUFFENC_DC0);
 800c5fe:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800c600:	4620      	mov	r0, r4
 800c602:	490f      	ldr	r1, [pc, #60]	; (800c640 <HAL_JPEG_Init+0x244>)
 800c604:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800c608:	f7ff fdc5 	bl	800c196 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d1ea      	bne.n	800c5e6 <HAL_JPEG_Init+0x1ea>
                              hjpeg->Instance->HUFFENC_DC1);
 800c610:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800c612:	4620      	mov	r0, r4
 800c614:	4915      	ldr	r1, [pc, #84]	; (800c66c <HAL_JPEG_Init+0x270>)
 800c616:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 800c61a:	f7ff fdbc 	bl	800c196 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800c61e:	2800      	cmp	r0, #0
 800c620:	d1e1      	bne.n	800c5e6 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	6853      	ldr	r3, [r2, #4]
 800c626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c62a:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c62c:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800c62e:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800c630:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c632:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800c636:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 800c638:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 800c63a:	e7d6      	b.n	800c5ea <HAL_JPEG_Init+0x1ee>
    return HAL_ERROR;
 800c63c:	2001      	movs	r0, #1
 800c63e:	e7d4      	b.n	800c5ea <HAL_JPEG_Init+0x1ee>
 800c640:	0802f524 	.word	0x0802f524
 800c644:	0802f540 	.word	0x0802f540
 800c648:	0802f4c8 	.word	0x0802f4c8
 800c64c:	0b0a0908 	.word	0x0b0a0908
 800c650:	0802f416 	.word	0x0802f416
 800c654:	ffff0000 	.word	0xffff0000
 800c658:	09080706 	.word	0x09080706
 800c65c:	0802f364 	.word	0x0802f364
 800c660:	01000404 	.word	0x01000404
 800c664:	05070403 	.word	0x05070403
 800c668:	04040201 	.word	0x04040201
 800c66c:	0802f508 	.word	0x0802f508

0800c670 <HAL_JPEG_GetInfo>:
{
 800c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800c674:	2800      	cmp	r0, #0
 800c676:	d06f      	beq.n	800c758 <HAL_JPEG_GetInfo+0xe8>
 800c678:	2900      	cmp	r1, #0
 800c67a:	d06d      	beq.n	800c758 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800c67c:	6804      	ldr	r4, [r0, #0]
 800c67e:	6863      	ldr	r3, [r4, #4]
 800c680:	f003 0303 	and.w	r3, r3, #3
 800c684:	2b02      	cmp	r3, #2
 800c686:	d047      	beq.n	800c718 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	f013 0303 	ands.w	r3, r3, #3
 800c68e:	d005      	beq.n	800c69c <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800c690:	6863      	ldr	r3, [r4, #4]
 800c692:	f003 0303 	and.w	r3, r3, #3
 800c696:	2b03      	cmp	r3, #3
 800c698:	d15e      	bne.n	800c758 <HAL_JPEG_GetInfo+0xe8>
 800c69a:	2330      	movs	r3, #48	; 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c69c:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800c69e:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c6a0:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c6a4:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c6a6:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c6a8:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800c6aa:	68e2      	ldr	r2, [r4, #12]
 800c6ac:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c6b0:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c6b2:	d13c      	bne.n	800c72e <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c6b4:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c6b6:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c6b8:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c6bc:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c6be:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c6c0:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c6c2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c6c6:	d129      	bne.n	800c71c <HAL_JPEG_GetInfo+0xac>
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	f013 0f0f 	tst.w	r3, #15
 800c6ce:	bf0c      	ite	eq
 800c6d0:	2301      	moveq	r3, #1
 800c6d2:	2300      	movne	r3, #0
 800c6d4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800c6d6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	3450      	adds	r4, #80	; 0x50
 800c6dc:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c75c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800c6e0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c6e2:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800c6e6:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 800c6ea:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800c6ee:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 800c6f2:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c6f4:	fa29 f206 	lsr.w	r2, r9, r6
 800c6f8:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800c6fa:	2a01      	cmp	r2, #1
 800c6fc:	d119      	bne.n	800c732 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800c6fe:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 800c700:	3608      	adds	r6, #8
 800c702:	3701      	adds	r7, #1
 800c704:	2e20      	cmp	r6, #32
 800c706:	d1f5      	bne.n	800c6f4 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800c708:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c70a:	2d40      	cmp	r5, #64	; 0x40
 800c70c:	d1ed      	bne.n	800c6ea <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800c70e:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800c710:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800c712:	610b      	str	r3, [r1, #16]
}
 800c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c718:	2310      	movs	r3, #16
 800c71a:	e7bf      	b.n	800c69c <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c71c:	2d03      	cmp	r5, #3
 800c71e:	d106      	bne.n	800c72e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c720:	4313      	orrs	r3, r2
 800c722:	f013 0f0f 	tst.w	r3, #15
 800c726:	bf0c      	ite	eq
 800c728:	2301      	moveq	r3, #1
 800c72a:	2300      	movne	r3, #0
 800c72c:	e7d3      	b.n	800c6d6 <HAL_JPEG_GetInfo+0x66>
 800c72e:	2300      	movs	r3, #0
 800c730:	e7d1      	b.n	800c6d6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c732:	fb0e fb02 	mul.w	fp, lr, r2
 800c736:	f897 a000 	ldrb.w	sl, [r7]
 800c73a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c73c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800c740:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800c744:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 800c746:	bf8b      	itete	hi
 800c748:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800c74c:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 800c750:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800c752:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800c756:	e7d3      	b.n	800c700 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800c758:	2001      	movs	r0, #1
 800c75a:	e7db      	b.n	800c714 <HAL_JPEG_GetInfo+0xa4>
 800c75c:	0802f580 	.word	0x0802f580

0800c760 <HAL_JPEG_Decode_DMA>:
{
 800c760:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800c762:	4604      	mov	r4, r0
 800c764:	b348      	cbz	r0, 800c7ba <HAL_JPEG_Decode_DMA+0x5a>
 800c766:	b341      	cbz	r1, 800c7ba <HAL_JPEG_Decode_DMA+0x5a>
 800c768:	b33b      	cbz	r3, 800c7ba <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800c76a:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 800c76e:	2d01      	cmp	r5, #1
 800c770:	d028      	beq.n	800c7c4 <HAL_JPEG_Decode_DMA+0x64>
 800c772:	2501      	movs	r5, #1
 800c774:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800c778:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 800c77c:	2d01      	cmp	r5, #1
 800c77e:	d11e      	bne.n	800c7be <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c780:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800c782:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c784:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800c788:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800c78a:	f025 050f 	bic.w	r5, r5, #15
 800c78e:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c790:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800c792:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800c796:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c79a:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 800c79c:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800c79e:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800c7a0:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800c7a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 800c7a4:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 800c7a6:	f7ff fda8 	bl	800c2fa <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800c7aa:	f7ff fde1 	bl	800c370 <JPEG_DMA_StartProcess>
 800c7ae:	b128      	cbz	r0, 800c7bc <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c7b0:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800c7b2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c7b6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800c7ba:	2001      	movs	r0, #1
}
 800c7bc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 800c7c4:	2002      	movs	r0, #2
 800c7c6:	e7f9      	b.n	800c7bc <HAL_JPEG_Decode_DMA+0x5c>

0800c7c8 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c7c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c7ca:	f003 030c 	and.w	r3, r3, #12
 800c7ce:	2b0c      	cmp	r3, #12
 800c7d0:	d10d      	bne.n	800c7ee <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c7d2:	07cb      	lsls	r3, r1, #31
 800c7d4:	d503      	bpl.n	800c7de <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c7d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c7d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7dc:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c7de:	0789      	lsls	r1, r1, #30
 800c7e0:	d503      	bpl.n	800c7ea <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c7e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c7e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c7e8:	6543      	str	r3, [r0, #84]	; 0x54
}
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c7ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c7f0:	f003 030c 	and.w	r3, r3, #12
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d1f8      	bne.n	800c7ea <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c7f8:	f011 0301 	ands.w	r3, r1, #1
 800c7fc:	d004      	beq.n	800c808 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c7fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c804:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c806:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c808:	078a      	lsls	r2, r1, #30
 800c80a:	d505      	bpl.n	800c818 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c80c:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c80e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c812:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c816:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800c818:	6801      	ldr	r1, [r0, #0]
 800c81a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c81c:	ea22 0303 	bic.w	r3, r2, r3
 800c820:	630b      	str	r3, [r1, #48]	; 0x30
 800c822:	e7e2      	b.n	800c7ea <HAL_JPEG_Pause+0x22>

0800c824 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800c824:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800c826:	6282      	str	r2, [r0, #40]	; 0x28
}
 800c828:	4770      	bx	lr

0800c82a <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800c82a:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800c82c:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800c82e:	4770      	bx	lr

0800c830 <HAL_JPEG_EncodeCpltCallback>:
 800c830:	4770      	bx	lr

0800c832 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c832:	6c00      	ldr	r0, [r0, #64]	; 0x40
{
 800c834:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c836:	6803      	ldr	r3, [r0, #0]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	f022 0201 	bic.w	r2, r2, #1
 800c83e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c842:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800c846:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c848:	2301      	movs	r3, #1
 800c84a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c84e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c850:	f043 0304 	orr.w	r3, r3, #4
 800c854:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800c856:	f7f7 ffb1 	bl	80047bc <HAL_JPEG_ErrorCallback>
}
 800c85a:	bd08      	pop	{r3, pc}

0800c85c <JPEG_ReadInputData>:
{
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c85e:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 800c860:	4604      	mov	r4, r0
 800c862:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c864:	bb35      	cbnz	r5, 800c8b4 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800c866:	2101      	movs	r1, #1
 800c868:	f7ff ffae 	bl	800c7c8 <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800c86c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c86e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800c872:	d11e      	bne.n	800c8b2 <JPEG_ReadInputData+0x56>
 800c874:	b1ed      	cbz	r5, 800c8b2 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 800c876:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800c87a:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 800c87e:	d830      	bhi.n	800c8e2 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c880:	69a5      	ldr	r5, [r4, #24]
 800c882:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800c884:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c886:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c888:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c88a:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 800c88c:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c88e:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c890:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c894:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c898:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c89a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c89e:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c8a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c8a6:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 800c8a8:	6a22      	ldr	r2, [r4, #32]
 800c8aa:	f102 0204 	add.w	r2, r2, #4
 800c8ae:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c8b0:	d1e8      	bne.n	800c884 <JPEG_ReadInputData+0x28>
}
 800c8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c8b4:	6a03      	ldr	r3, [r0, #32]
 800c8b6:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c8b8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c8ba:	d901      	bls.n	800c8c0 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c8bc:	1aed      	subs	r5, r5, r3
 800c8be:	e7d5      	b.n	800c86c <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800c8c0:	429d      	cmp	r5, r3
 800c8c2:	d10c      	bne.n	800c8de <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c8c4:	6a01      	ldr	r1, [r0, #32]
 800c8c6:	f7f7 feb5 	bl	8004634 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800c8ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c8cc:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c8ce:	bf84      	itt	hi
 800c8d0:	f023 0303 	bichi.w	r3, r3, #3
 800c8d4:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800c8d6:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800c8d8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800c8da:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800c8dc:	e7c6      	b.n	800c86c <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 800c8de:	2500      	movs	r5, #0
 800c8e0:	e7c4      	b.n	800c86c <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 800c8e2:	2d03      	cmp	r5, #3
 800c8e4:	d826      	bhi.n	800c934 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c8e6:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 800c8e8:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c8ea:	6a21      	ldr	r1, [r4, #32]
 800c8ec:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 800c8ee:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c8f0:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 800c8f2:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c8f4:	fa01 f100 	lsl.w	r1, r1, r0
 800c8f8:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 800c8fc:	6a21      	ldr	r1, [r4, #32]
 800c8fe:	f101 0101 	add.w	r1, r1, #1
 800c902:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800c904:	d1f1      	bne.n	800c8ea <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 800c906:	6822      	ldr	r2, [r4, #0]
 800c908:	6413      	str	r3, [r2, #64]	; 0x40
}
 800c90a:	e7d2      	b.n	800c8b2 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 800c90c:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c90e:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c910:	69a6      	ldr	r6, [r4, #24]
 800c912:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c914:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c916:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c918:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c91a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c91e:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c920:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c922:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c926:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c928:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c92c:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800c92e:	6a22      	ldr	r2, [r4, #32]
 800c930:	3204      	adds	r2, #4
 800c932:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c934:	42bb      	cmp	r3, r7
 800c936:	d1e9      	bne.n	800c90c <JPEG_ReadInputData+0xb0>
 800c938:	e7bb      	b.n	800c8b2 <JPEG_ReadInputData+0x56>

0800c93a <JPEG_MDMAInCpltCallback>:
{
 800c93a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c93c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c93e:	6822      	ldr	r2, [r4, #0]
 800c940:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c942:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800c946:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800c948:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c94a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c94e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800c952:	041b      	lsls	r3, r3, #16
 800c954:	0c1b      	lsrs	r3, r3, #16
 800c956:	2b0c      	cmp	r3, #12
 800c958:	d11a      	bne.n	800c990 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c95a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c95c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c95e:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c960:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c962:	695a      	ldr	r2, [r3, #20]
 800c964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c966:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800c96a:	1a9b      	subs	r3, r3, r2
 800c96c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c96e:	6a21      	ldr	r1, [r4, #32]
 800c970:	f7f7 fe60 	bl	8004634 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800c974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c976:	42ab      	cmp	r3, r5
 800c978:	d327      	bcc.n	800c9ca <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800c97a:	b95d      	cbnz	r5, 800c994 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c97c:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800c97e:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c980:	f043 0304 	orr.w	r3, r3, #4
 800c984:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c986:	2306      	movs	r3, #6
 800c988:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800c98c:	f7f7 ff16 	bl	80047bc <HAL_JPEG_ErrorCallback>
}
 800c990:	b003      	add	sp, #12
 800c992:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c994:	fbb3 f2f5 	udiv	r2, r3, r5
 800c998:	fb05 3212 	mls	r2, r5, r2, r3
 800c99c:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c99e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c9a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c9a2:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c9a4:	04db      	lsls	r3, r3, #19
 800c9a6:	d40a      	bmi.n	800c9be <JPEG_MDMAInCpltCallback+0x84>
 800c9a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c9aa:	b143      	cbz	r3, 800c9be <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	3240      	adds	r2, #64	; 0x40
 800c9b0:	9100      	str	r1, [sp, #0]
 800c9b2:	69a1      	ldr	r1, [r4, #24]
 800c9b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c9b6:	f000 fd7e 	bl	800d4b6 <HAL_MDMA_Start_IT>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d1de      	bne.n	800c97c <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c9be:	6822      	ldr	r2, [r4, #0]
 800c9c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c9c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c9c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c9c8:	e7e2      	b.n	800c990 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0e8      	beq.n	800c9a0 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800c9ce:	079a      	lsls	r2, r3, #30
 800c9d0:	d0e6      	beq.n	800c9a0 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c9d2:	f023 0303 	bic.w	r3, r3, #3
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	e7e1      	b.n	800c99e <JPEG_MDMAInCpltCallback+0x64>

0800c9da <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c9da:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c9de:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c9e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800c9e4:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d32a      	bcc.n	800ca40 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800c9ea:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c9ec:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800c9ee:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c9f0:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800c9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 800c9f4:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c9f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c9f8:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c9fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c9fc:	69e0      	ldr	r0, [r4, #28]
 800c9fe:	4428      	add	r0, r5
 800ca00:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800ca04:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ca06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca08:	69e0      	ldr	r0, [r4, #28]
 800ca0a:	4428      	add	r0, r5
 800ca0c:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ca10:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ca14:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ca16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca18:	69e0      	ldr	r0, [r4, #28]
 800ca1a:	4428      	add	r0, r5
 800ca1c:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800ca1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca20:	f103 0304 	add.w	r3, r3, #4
 800ca24:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800ca26:	d1e1      	bne.n	800c9ec <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ca28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d106      	bne.n	800ca3e <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ca30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ca32:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7f7 fe31 	bl	800469c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800ca3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800ca40:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d9fb      	bls.n	800ca3e <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800ca46:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800ca48:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800ca4a:	1a9b      	subs	r3, r3, r2
 800ca4c:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800ca4e:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ca50:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800ca52:	d105      	bne.n	800ca60 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800ca54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ca56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca58:	429f      	cmp	r7, r3
 800ca5a:	d119      	bne.n	800ca90 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ca5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ca5e:	e7e9      	b.n	800ca34 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800ca60:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800ca62:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800ca64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800ca66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca68:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800ca6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca6c:	69e1      	ldr	r1, [r4, #28]
 800ca6e:	4429      	add	r1, r5
 800ca70:	0a1d      	lsrs	r5, r3, #8
 800ca72:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ca74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca76:	69e1      	ldr	r1, [r4, #28]
 800ca78:	4429      	add	r1, r5
 800ca7a:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ca7c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800ca7e:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800ca80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca82:	69e1      	ldr	r1, [r4, #28]
 800ca84:	4429      	add	r1, r5
 800ca86:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800ca88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800ca8e:	e7de      	b.n	800ca4e <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ca90:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800ca92:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800ca94:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800ca96:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800ca98:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 800ca9a:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800ca9c:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800ca9e:	d114      	bne.n	800caca <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800caa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800caa2:	4620      	mov	r0, r4
 800caa4:	f7f7 fdfa 	bl	800469c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800caac:	1d2b      	adds	r3, r5, #4
 800caae:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d8c4      	bhi.n	800ca3e <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800cab4:	00da      	lsls	r2, r3, #3
 800cab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cab8:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800caba:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800cabc:	fa26 f202 	lsr.w	r2, r6, r2
 800cac0:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800cac2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cac4:	3201      	adds	r2, #1
 800cac6:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800cac8:	e7f2      	b.n	800cab0 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800caca:	f002 0303 	and.w	r3, r2, #3
 800cace:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800cad2:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	fa26 f303 	lsr.w	r3, r6, r3
 800cada:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800cade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae0:	3301      	adds	r3, #1
 800cae2:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800cae4:	e7d9      	b.n	800ca9a <JPEG_StoreOutputData+0xc0>

0800cae6 <JPEG_Process>:
{
 800cae6:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cae8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800caea:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800caec:	f003 0303 	and.w	r3, r3, #3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d114      	bne.n	800cb1e <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800caf4:	6803      	ldr	r3, [r0, #0]
 800caf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf8:	065a      	lsls	r2, r3, #25
 800cafa:	d510      	bpl.n	800cb1e <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800cafc:	1d01      	adds	r1, r0, #4
 800cafe:	f7ff fdb7 	bl	800c670 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800cb02:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800cb04:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800cb06:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800cb08:	f7f7 fd18 	bl	800453c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb14:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800cb16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb1c:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800cb1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cb20:	04db      	lsls	r3, r3, #19
 800cb22:	d407      	bmi.n	800cb34 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800cb24:	6823      	ldr	r3, [r4, #0]
 800cb26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb28:	0795      	lsls	r5, r2, #30
 800cb2a:	d543      	bpl.n	800cbb4 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800cb2c:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff fe94 	bl	800c85c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cb34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cb36:	0499      	lsls	r1, r3, #18
 800cb38:	d407      	bmi.n	800cb4a <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb3e:	0712      	lsls	r2, r2, #28
 800cb40:	d53d      	bpl.n	800cbbe <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800cb42:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800cb44:	4620      	mov	r0, r4
 800cb46:	f7ff ff48 	bl	800c9da <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb4e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800cb52:	2a20      	cmp	r2, #32
 800cb54:	d13b      	bne.n	800cbce <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	f022 0201 	bic.w	r2, r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800cb5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cb60:	f002 020c 	and.w	r2, r2, #12
 800cb64:	2a08      	cmp	r2, #8
 800cb66:	d103      	bne.n	800cb70 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cb68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb6a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800cb6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb72:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800cb76:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800cb78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb7a:	b133      	cbz	r3, 800cb8a <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cb7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cb7e:	4620      	mov	r0, r4
 800cb80:	69e1      	ldr	r1, [r4, #28]
 800cb82:	f7f7 fd8b 	bl	800469c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800cb8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cb8c:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cb8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cb90:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cb92:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cb96:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cb9a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cb9c:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800cb9e:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cba2:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 800cba6:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cbaa:	d10d      	bne.n	800cbc8 <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cbac:	f7f7 fe0e 	bl	80047cc <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800cbb0:	4628      	mov	r0, r5
}
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800cbb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb6:	0758      	lsls	r0, r3, #29
 800cbb8:	d5bc      	bpl.n	800cb34 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800cbba:	2101      	movs	r1, #1
 800cbbc:	e7b7      	b.n	800cb2e <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800cbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc0:	06db      	lsls	r3, r3, #27
 800cbc2:	d5c2      	bpl.n	800cb4a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	e7bd      	b.n	800cb44 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cbc8:	f7ff fe32 	bl	800c830 <HAL_JPEG_EncodeCpltCallback>
 800cbcc:	e7f0      	b.n	800cbb0 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 800cbce:	2000      	movs	r0, #0
 800cbd0:	e7ef      	b.n	800cbb2 <JPEG_Process+0xcc>

0800cbd2 <JPEG_DMA_PollResidualData>:
{
 800cbd2:	b570      	push	{r4, r5, r6, lr}
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cbd8:	6d65      	ldr	r5, [r4, #84]	; 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800cbda:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cbdc:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800cbe0:	d122      	bne.n	800cc28 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800cbe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbe4:	06d0      	lsls	r0, r2, #27
 800cbe6:	d51f      	bpl.n	800cc28 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800cbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800cbea:	69e1      	ldr	r1, [r4, #28]
 800cbec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cbee:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800cbf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cbf2:	69e2      	ldr	r2, [r4, #28]
 800cbf4:	440a      	add	r2, r1
 800cbf6:	0a19      	lsrs	r1, r3, #8
 800cbf8:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800cbfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cbfc:	69e2      	ldr	r2, [r4, #28]
 800cbfe:	440a      	add	r2, r1
 800cc00:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800cc02:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800cc04:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800cc06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc08:	69e2      	ldr	r2, [r4, #28]
 800cc0a:	440a      	add	r2, r1
 800cc0c:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800cc0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc10:	3304      	adds	r3, #4
 800cc12:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cc14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cc16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d105      	bne.n	800cc28 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cc1e:	4620      	mov	r0, r4
 800cc20:	69e1      	ldr	r1, [r4, #28]
 800cc22:	f7f7 fd3b 	bl	800469c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800cc26:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800cc28:	3e01      	subs	r6, #1
 800cc2a:	d1d5      	bne.n	800cbd8 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800cc2c:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800cc2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800cc30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cc32:	06c9      	lsls	r1, r1, #27
 800cc34:	d501      	bpl.n	800cc3a <JPEG_DMA_PollResidualData+0x68>
 800cc36:	0492      	lsls	r2, r2, #18
 800cc38:	d420      	bmi.n	800cc7c <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	f022 0201 	bic.w	r2, r2, #1
 800cc40:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800cc42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc44:	b133      	cbz	r3, 800cc54 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cc48:	4620      	mov	r0, r4
 800cc4a:	69e1      	ldr	r1, [r4, #28]
 800cc4c:	f7f7 fd26 	bl	800469c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800cc54:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cc56:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cc58:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cc5a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cc5e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cc62:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cc64:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cc6e:	f04f 0201 	mov.w	r2, #1
 800cc72:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cc76:	d102      	bne.n	800cc7e <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cc78:	f7f7 fda8 	bl	80047cc <HAL_JPEG_DecodeCpltCallback>
}
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cc7e:	f7ff fdd7 	bl	800c830 <HAL_JPEG_EncodeCpltCallback>
}
 800cc82:	e7fb      	b.n	800cc7c <JPEG_DMA_PollResidualData+0xaa>

0800cc84 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800cc84:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cc86:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 800cc8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	460e      	mov	r6, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800cc90:	d014      	beq.n	800ccbc <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800cc92:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cc94:	f003 030c 	and.w	r3, r3, #12
 800cc98:	2b0c      	cmp	r3, #12
 800cc9a:	d147      	bne.n	800cd2c <HAL_JPEG_Resume+0xa8>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800cc9c:	07cd      	lsls	r5, r1, #31
 800cc9e:	d520      	bpl.n	800cce2 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800cca0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cca6:	6543      	str	r3, [r0, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800cca8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ccaa:	6a81      	ldr	r1, [r0, #40]	; 0x28
      if (xfrSize == 0UL)
 800ccac:	b941      	cbnz	r1, 800ccc0 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ccae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ccb0:	f043 0304 	orr.w	r3, r3, #4
 800ccb4:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ccb6:	2306      	movs	r3, #6
 800ccb8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800ccbc:	2001      	movs	r0, #1
 800ccbe:	e013      	b.n	800cce8 <HAL_JPEG_Resume+0x64>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ccc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ccc2:	fbb3 f2f1 	udiv	r2, r3, r1
 800ccc6:	fb01 3212 	mls	r2, r1, r2, r3
 800ccca:	1a9b      	subs	r3, r3, r2
 800cccc:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 800ccce:	b143      	cbz	r3, 800cce2 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ccd0:	6822      	ldr	r2, [r4, #0]
 800ccd2:	2501      	movs	r5, #1
 800ccd4:	69a1      	ldr	r1, [r4, #24]
 800ccd6:	3240      	adds	r2, #64	; 0x40
 800ccd8:	9500      	str	r5, [sp, #0]
 800ccda:	f000 fbec 	bl	800d4b6 <HAL_MDMA_Start_IT>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d1e5      	bne.n	800ccae <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800cce2:	07b0      	lsls	r0, r6, #30
 800cce4:	d402      	bmi.n	800ccec <HAL_JPEG_Resume+0x68>
  return HAL_OK;
 800cce6:	2000      	movs	r0, #0
}
 800cce8:	b002      	add	sp, #8
 800ccea:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ccec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ccee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccf2:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ccf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ccf6:	0419      	lsls	r1, r3, #16
 800ccf8:	d503      	bpl.n	800cd02 <HAL_JPEG_Resume+0x7e>
        JPEG_DMA_PollResidualData(hjpeg);
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7ff ff69 	bl	800cbd2 <JPEG_DMA_PollResidualData>
 800cd00:	e7f1      	b.n	800cce6 <HAL_JPEG_Resume+0x62>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800cd02:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cd04:	6a81      	ldr	r1, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
 800cd06:	2900      	cmp	r1, #0
 800cd08:	d0d1      	beq.n	800ccae <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800cd0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cd0c:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800cd0e:	fbb3 f2f1 	udiv	r2, r3, r1
 800cd12:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cd16:	6821      	ldr	r1, [r4, #0]
 800cd18:	9500      	str	r5, [sp, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800cd1a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cd1c:	3144      	adds	r1, #68	; 0x44
 800cd1e:	69e2      	ldr	r2, [r4, #28]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800cd20:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cd22:	f000 fbc8 	bl	800d4b6 <HAL_MDMA_Start_IT>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d0dd      	beq.n	800cce6 <HAL_JPEG_Resume+0x62>
 800cd2a:	e7c0      	b.n	800ccae <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800cd2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cd2e:	f003 030c 	and.w	r3, r3, #12
 800cd32:	2b08      	cmp	r3, #8
 800cd34:	d1d7      	bne.n	800cce6 <HAL_JPEG_Resume+0x62>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800cd36:	f011 0301 	ands.w	r3, r1, #1
 800cd3a:	d004      	beq.n	800cd46 <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800cd3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cd3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd42:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800cd44:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800cd46:	07b2      	lsls	r2, r6, #30
 800cd48:	d505      	bpl.n	800cd56 <HAL_JPEG_Resume+0xd2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800cd4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800cd4c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800cd50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd54:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800cd56:	6821      	ldr	r1, [r4, #0]
 800cd58:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	630b      	str	r3, [r1, #48]	; 0x30
 800cd5e:	e7c2      	b.n	800cce6 <HAL_JPEG_Resume+0x62>

0800cd60 <JPEG_DMA_EndProcess>:
{
 800cd60:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cd62:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 800cd64:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cd66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cd74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d105      	bne.n	800cd86 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cd7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800cd7c:	69c1      	ldr	r1, [r0, #28]
 800cd7e:	f7f7 fc8d 	bl	800469c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800cd8a:	f015 0510 	ands.w	r5, r5, #16
 800cd8e:	d124      	bne.n	800cdda <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800cd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd92:	b12b      	cbz	r3, 800cda0 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cd94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cd96:	4620      	mov	r0, r4
 800cd98:	69e1      	ldr	r1, [r4, #28]
 800cd9a:	f7f7 fc7f 	bl	800469c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cd9e:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cda0:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cda2:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cda4:	6813      	ldr	r3, [r2, #0]
 800cda6:	f023 0301 	bic.w	r3, r3, #1
 800cdaa:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800cdac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cdae:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cdb0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cdb4:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cdb8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cdba:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800cdbc:	f04f 0200 	mov.w	r2, #0
 800cdc0:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cdc4:	f04f 0201 	mov.w	r2, #1
 800cdc8:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cdcc:	d102      	bne.n	800cdd4 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cdce:	f7f7 fcfd 	bl	80047cc <HAL_JPEG_DecodeCpltCallback>
}
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cdd4:	f7ff fd2c 	bl	800c830 <HAL_JPEG_EncodeCpltCallback>
 800cdd8:	e7fb      	b.n	800cdd2 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cdda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cddc:	049b      	lsls	r3, r3, #18
 800cdde:	d4f8      	bmi.n	800cdd2 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800cde0:	4620      	mov	r0, r4
}
 800cde2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800cde6:	f7ff bef4 	b.w	800cbd2 <JPEG_DMA_PollResidualData>

0800cdea <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cdea:	6c00      	ldr	r0, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800cdec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cdee:	041b      	lsls	r3, r3, #16
 800cdf0:	d501      	bpl.n	800cdf6 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800cdf2:	f7ff bfb5 	b.w	800cd60 <JPEG_DMA_EndProcess>
}
 800cdf6:	4770      	bx	lr

0800cdf8 <JPEG_MDMAOutCpltCallback>:
{
 800cdf8:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cdfa:	6c04      	ldr	r4, [r0, #64]	; 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce00:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ce04:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800ce06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ce08:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800ce0c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800ce10:	0412      	lsls	r2, r2, #16
 800ce12:	0c12      	lsrs	r2, r2, #16
 800ce14:	2a0c      	cmp	r2, #12
 800ce16:	d125      	bne.n	800ce64 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ce18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1a:	069a      	lsls	r2, r3, #26
 800ce1c:	d424      	bmi.n	800ce68 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ce1e:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ce20:	4620      	mov	r0, r4
 800ce22:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ce24:	695a      	ldr	r2, [r3, #20]
 800ce26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce28:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ce30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ce32:	f7f7 fc33 	bl	800469c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ce36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ce38:	049b      	lsls	r3, r3, #18
 800ce3a:	d415      	bmi.n	800ce68 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ce3c:	6821      	ldr	r1, [r4, #0]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	3144      	adds	r1, #68	; 0x44
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce46:	69e2      	ldr	r2, [r4, #28]
 800ce48:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ce4a:	f000 fb34 	bl	800d4b6 <HAL_MDMA_Start_IT>
 800ce4e:	b158      	cbz	r0, 800ce68 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ce50:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800ce52:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ce54:	f043 0304 	orr.w	r3, r3, #4
 800ce58:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ce5a:	2306      	movs	r3, #6
 800ce5c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800ce60:	f7f7 fcac 	bl	80047bc <HAL_JPEG_ErrorCallback>
}
 800ce64:	b002      	add	sp, #8
 800ce66:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce70:	6313      	str	r3, [r2, #48]	; 0x30
 800ce72:	e7f7      	b.n	800ce64 <JPEG_MDMAOutCpltCallback+0x6c>

0800ce74 <HAL_JPEG_IRQHandler>:
{
 800ce74:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ce76:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 800ce7a:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ce7c:	3b03      	subs	r3, #3
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d850      	bhi.n	800cf24 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ce82:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ce84:	f003 030c 	and.w	r3, r3, #12
 800ce88:	2b08      	cmp	r3, #8
 800ce8a:	d103      	bne.n	800ce94 <HAL_JPEG_IRQHandler+0x20>
}
 800ce8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ce90:	f7ff be29 	b.w	800cae6 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ce94:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ce96:	f003 030c 	and.w	r3, r3, #12
 800ce9a:	2b0c      	cmp	r3, #12
 800ce9c:	d142      	bne.n	800cf24 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ce9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800cea0:	f003 0303 	and.w	r3, r3, #3
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d114      	bne.n	800ced2 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800cea8:	6803      	ldr	r3, [r0, #0]
 800ceaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceac:	0659      	lsls	r1, r3, #25
 800ceae:	d510      	bpl.n	800ced2 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ceb0:	1d01      	adds	r1, r0, #4
 800ceb2:	f7ff fbdd 	bl	800c670 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ceb6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ceb8:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ceba:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800cebc:	f7f7 fb3e 	bl	800453c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cec8:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ceca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ced0:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced6:	0692      	lsls	r2, r2, #26
 800ced8:	d524      	bpl.n	800cf24 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ceda:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800cedc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800cede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cee2:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	f022 0201 	bic.w	r2, r2, #1
 800ceea:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ceec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ceee:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800cef2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cef6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800cefa:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800cefc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d101      	bne.n	800cf08 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800cf04:	f000 fb20 	bl	800d548 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800cf08:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cf0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d103      	bne.n	800cf1a <HAL_JPEG_IRQHandler+0xa6>
}
 800cf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800cf16:	f000 bb17 	b.w	800d548 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800cf1a:	4620      	mov	r0, r4
}
 800cf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800cf20:	f7ff bf1e 	b.w	800cd60 <JPEG_DMA_EndProcess>
}
 800cf24:	bd10      	pop	{r4, pc}
	...

0800cf28 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d058      	beq.n	800cfe2 <HAL_LPTIM_Init+0xba>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800cf30:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800cf34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cf38:	b91b      	cbnz	r3, 800cf42 <HAL_LPTIM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800cf3a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800cf3e:	f7f4 fba9 	bl	8001694 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800cf42:	6860      	ldr	r0, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800cf44:	2302      	movs	r3, #2
  tmpcfgr = hlptim->Instance->CFGR;
 800cf46:	6822      	ldr	r2, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800cf48:	2801      	cmp	r0, #1
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800cf4a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800cf4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  tmpcfgr = hlptim->Instance->CFGR;
 800cf50:	68d3      	ldr	r3, [r2, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800cf52:	d002      	beq.n	800cf5a <HAL_LPTIM_Init+0x32>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800cf54:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800cf58:	d101      	bne.n	800cf5e <HAL_LPTIM_Init+0x36>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800cf5a:	f023 031e 	bic.w	r3, r3, #30
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800cf5e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800cf62:	6961      	ldr	r1, [r4, #20]
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800cf64:	4f20      	ldr	r7, [pc, #128]	; (800cfe8 <HAL_LPTIM_Init+0xc0>)
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800cf66:	42b1      	cmp	r1, r6

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
              hlptim->Init.Clock.Prescaler |
              hlptim->Init.OutputPolarity  |
              hlptim->Init.UpdateMode      |
 800cf68:	68a6      	ldr	r6, [r4, #8]
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800cf6a:	bf1c      	itt	ne
 800cf6c:	f423 4360 	bicne.w	r3, r3, #57344	; 0xe000
 800cf70:	f023 03c0 	bicne.w	r3, r3, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800cf74:	401f      	ands	r7, r3
              hlptim->Init.UpdateMode      |
 800cf76:	ea40 0305 	orr.w	r3, r0, r5
 800cf7a:	4333      	orrs	r3, r6
 800cf7c:	6a26      	ldr	r6, [r4, #32]
 800cf7e:	4333      	orrs	r3, r6
 800cf80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf82:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800cf84:	433b      	orrs	r3, r7
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800cf86:	bb00      	cbnz	r0, 800cfca <HAL_LPTIM_Init+0xa2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800cf88:	69e0      	ldr	r0, [r4, #28]
 800cf8a:	6926      	ldr	r6, [r4, #16]
 800cf8c:	4330      	orrs	r0, r6
 800cf8e:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800cf90:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800cf94:	d01b      	beq.n	800cfce <HAL_LPTIM_Init+0xa6>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800cf96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cf9a:	4281      	cmp	r1, r0
 800cf9c:	d004      	beq.n	800cfa8 <HAL_LPTIM_Init+0x80>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800cf9e:	69a0      	ldr	r0, [r4, #24]
 800cfa0:	4301      	orrs	r1, r0
                hlptim->Init.Trigger.ActiveEdge |
 800cfa2:	69e0      	ldr	r0, [r4, #28]
 800cfa4:	4301      	orrs	r1, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800cfa6:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800cfa8:	60d3      	str	r3, [r2, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800cfaa:	4b10      	ldr	r3, [pc, #64]	; (800cfec <HAL_LPTIM_Init+0xc4>)
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d003      	beq.n	800cfb8 <HAL_LPTIM_Init+0x90>
 800cfb0:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d10f      	bne.n	800cfd8 <HAL_LPTIM_Init+0xb0>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800cfb8:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 800cfbc:	430b      	orrs	r3, r1
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800cfbe:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800cfc0:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800cfc2:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800cfc4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800cfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800cfca:	2801      	cmp	r0, #1
 800cfcc:	d1e0      	bne.n	800cf90 <HAL_LPTIM_Init+0x68>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800cfce:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800cfd2:	4328      	orrs	r0, r5
 800cfd4:	4303      	orrs	r3, r0
 800cfd6:	e7de      	b.n	800cf96 <HAL_LPTIM_Init+0x6e>
    if (hlptim->Instance == LPTIM3)
 800cfd8:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <HAL_LPTIM_Init+0xc8>)
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d1f0      	bne.n	800cfc0 <HAL_LPTIM_Init+0x98>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800cfde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cfe0:	e7ed      	b.n	800cfbe <HAL_LPTIM_Init+0x96>
    return HAL_ERROR;
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	e7f0      	b.n	800cfc8 <HAL_LPTIM_Init+0xa0>
 800cfe6:	bf00      	nop
 800cfe8:	ff19f1fe 	.word	0xff19f1fe
 800cfec:	40002400 	.word	0x40002400
 800cff0:	58002800 	.word	0x58002800

0800cff4 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cff4:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cff6:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800cff8:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cffc:	3284      	adds	r2, #132	; 0x84
 800cffe:	1883      	adds	r3, r0, r2
{
 800d000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d004:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d006:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d00a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d00c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d010:	684c      	ldr	r4, [r1, #4]
 800d012:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d016:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d01a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d01e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d020:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d022:	68c5      	ldr	r5, [r0, #12]
 800d024:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800d028:	443d      	add	r5, r7
 800d02a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d02e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d030:	68c6      	ldr	r6, [r0, #12]
 800d032:	68cd      	ldr	r5, [r1, #12]
 800d034:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800d038:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d03a:	689d      	ldr	r5, [r3, #8]
 800d03c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800d040:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d042:	688d      	ldr	r5, [r1, #8]
 800d044:	68c7      	ldr	r7, [r0, #12]
 800d046:	3501      	adds	r5, #1
 800d048:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800d04c:	443d      	add	r5, r7
 800d04e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d052:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d054:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d056:	691d      	ldr	r5, [r3, #16]
 800d058:	f025 0507 	bic.w	r5, r5, #7
 800d05c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d05e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d060:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d062:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d066:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d06a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d06e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800d072:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800d076:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800d07a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800d07e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d080:	695d      	ldr	r5, [r3, #20]
 800d082:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800d086:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d088:	694d      	ldr	r5, [r1, #20]
 800d08a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d08c:	69dd      	ldr	r5, [r3, #28]
 800d08e:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800d092:	f025 0507 	bic.w	r5, r5, #7
 800d096:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d098:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800d09c:	433d      	orrs	r5, r7
 800d09e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d0a0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d0a2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d0a4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d0a8:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d0aa:	b1fe      	cbz	r6, 800d0ec <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d0ac:	3e01      	subs	r6, #1
 800d0ae:	2e06      	cmp	r6, #6
 800d0b0:	d81e      	bhi.n	800d0f0 <LTDC_SetConfig+0xfc>
 800d0b2:	4d10      	ldr	r5, [pc, #64]	; (800d0f4 <LTDC_SetConfig+0x100>)
 800d0b4:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d0b6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d0b8:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d0bc:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d0c0:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d0c2:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d0c4:	3407      	adds	r4, #7
 800d0c6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d0c8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d0ca:	436e      	muls	r6, r5
 800d0cc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800d0d0:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d0d2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800d0d4:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800d0d8:	f024 0407 	bic.w	r4, r4, #7
 800d0dc:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d0de:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d0e0:	5883      	ldr	r3, [r0, r2]
 800d0e2:	f043 0301 	orr.w	r3, r3, #1
 800d0e6:	5083      	str	r3, [r0, r2]
}
 800d0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800d0ec:	2504      	movs	r5, #4
 800d0ee:	e7e2      	b.n	800d0b6 <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d0f0:	2501      	movs	r5, #1
 800d0f2:	e7e0      	b.n	800d0b6 <LTDC_SetConfig+0xc2>
 800d0f4:	0802f5c0 	.word	0x0802f5c0

0800d0f8 <HAL_LTDC_Init>:
{
 800d0f8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d063      	beq.n	800d1c8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d100:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800d104:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d108:	b91b      	cbnz	r3, 800d112 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800d10a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800d10e:	f7f4 fb79 	bl	8001804 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d112:	2302      	movs	r3, #2
 800d114:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	699a      	ldr	r2, [r3, #24]
 800d11c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d120:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d122:	6999      	ldr	r1, [r3, #24]
 800d124:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800d128:	4302      	orrs	r2, r0
 800d12a:	68e0      	ldr	r0, [r4, #12]
 800d12c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d12e:	6920      	ldr	r0, [r4, #16]
 800d130:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d132:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d134:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d136:	4925      	ldr	r1, [pc, #148]	; (800d1cc <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d138:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d13a:	689a      	ldr	r2, [r3, #8]
 800d13c:	400a      	ands	r2, r1
 800d13e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d140:	689a      	ldr	r2, [r3, #8]
 800d142:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d146:	69a0      	ldr	r0, [r4, #24]
 800d148:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d14a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d14c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d14e:	68da      	ldr	r2, [r3, #12]
 800d150:	400a      	ands	r2, r1
 800d152:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d154:	68da      	ldr	r2, [r3, #12]
 800d156:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d15a:	6a20      	ldr	r0, [r4, #32]
 800d15c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d15e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d160:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d162:	691a      	ldr	r2, [r3, #16]
 800d164:	400a      	ands	r2, r1
 800d166:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d168:	691a      	ldr	r2, [r3, #16]
 800d16a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d16e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d170:	4302      	orrs	r2, r0
 800d172:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d174:	695a      	ldr	r2, [r3, #20]
 800d176:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d178:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d17a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d17c:	695a      	ldr	r2, [r3, #20]
 800d17e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d182:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d184:	430a      	orrs	r2, r1
 800d186:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d18a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d18e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d192:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d196:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d198:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800d19a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800d19e:	432a      	orrs	r2, r5
 800d1a0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d1a4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d1a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d1aa:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d1ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1ae:	f042 0206 	orr.w	r2, r2, #6
 800d1b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800d1b4:	699a      	ldr	r2, [r3, #24]
 800d1b6:	f042 0201 	orr.w	r2, r2, #1
 800d1ba:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800d1bc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d1be:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800d1c2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	e7fc      	b.n	800d1c6 <HAL_LTDC_Init+0xce>
 800d1cc:	f000f800 	.word	0xf000f800

0800d1d0 <HAL_LTDC_ErrorCallback>:
 800d1d0:	4770      	bx	lr

0800d1d2 <HAL_LTDC_ReloadEventCallback>:
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d1d4:	6803      	ldr	r3, [r0, #0]
{
 800d1d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d1d8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800d1da:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d1dc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d1de:	0772      	lsls	r2, r6, #29
 800d1e0:	d514      	bpl.n	800d20c <HAL_LTDC_IRQHandler+0x38>
 800d1e2:	0769      	lsls	r1, r5, #29
 800d1e4:	d512      	bpl.n	800d20c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1e8:	f022 0204 	bic.w	r2, r2, #4
 800d1ec:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d1ee:	2204      	movs	r2, #4
 800d1f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d1f2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800d1f6:	f043 0301 	orr.w	r3, r3, #1
 800d1fa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800d1fe:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d200:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800d204:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800d208:	f7ff ffe2 	bl	800d1d0 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d20c:	07b2      	lsls	r2, r6, #30
 800d20e:	d516      	bpl.n	800d23e <HAL_LTDC_IRQHandler+0x6a>
 800d210:	07ab      	lsls	r3, r5, #30
 800d212:	d514      	bpl.n	800d23e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d214:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800d216:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d21a:	f022 0202 	bic.w	r2, r2, #2
 800d21e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d220:	2202      	movs	r2, #2
 800d222:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d224:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d228:	4313      	orrs	r3, r2
 800d22a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d22e:	2304      	movs	r3, #4
 800d230:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800d234:	2300      	movs	r3, #0
 800d236:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800d23a:	f7ff ffc9 	bl	800d1d0 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d23e:	07f0      	lsls	r0, r6, #31
 800d240:	d510      	bpl.n	800d264 <HAL_LTDC_IRQHandler+0x90>
 800d242:	07e9      	lsls	r1, r5, #31
 800d244:	d50e      	bpl.n	800d264 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d246:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800d248:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d24a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d24c:	f022 0201 	bic.w	r2, r2, #1
 800d250:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d252:	2201      	movs	r2, #1
 800d254:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800d256:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800d258:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800d25c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800d260:	f7f9 fd34 	bl	8006ccc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d264:	0732      	lsls	r2, r6, #28
 800d266:	d511      	bpl.n	800d28c <HAL_LTDC_IRQHandler+0xb8>
 800d268:	072b      	lsls	r3, r5, #28
 800d26a:	d50f      	bpl.n	800d28c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d26c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d26e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d272:	f022 0208 	bic.w	r2, r2, #8
 800d276:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d278:	2208      	movs	r2, #8
 800d27a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800d27c:	2301      	movs	r3, #1
 800d27e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800d282:	2300      	movs	r3, #0
 800d284:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d288:	f7ff ffa3 	bl	800d1d2 <HAL_LTDC_ReloadEventCallback>
}
 800d28c:	bd70      	pop	{r4, r5, r6, pc}

0800d28e <HAL_LTDC_ConfigLayer>:
{
 800d28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800d292:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800d296:	4606      	mov	r6, r0
 800d298:	460f      	mov	r7, r1
 800d29a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	f04f 0002 	mov.w	r0, #2
 800d2a2:	d01f      	beq.n	800d2e4 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d2a4:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800d2a6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d2aa:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d2ac:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d2b0:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800d2b4:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d2b8:	3438      	adds	r4, #56	; 0x38
 800d2ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2c6:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	4662      	mov	r2, ip
 800d2cc:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d2ce:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d2d0:	f7ff fe90 	bl	800cff4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d2d4:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800d2d6:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d2d8:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d2dc:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800d2e0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800d2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2e8 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800d2e8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	f04f 0302 	mov.w	r3, #2
 800d2f2:	d012      	beq.n	800d31a <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d2f4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d2f8:	6803      	ldr	r3, [r0, #0]
 800d2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2fc:	f022 0201 	bic.w	r2, r2, #1
 800d300:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800d302:	4a07      	ldr	r2, [pc, #28]	; (800d320 <HAL_LTDC_ProgramLineEvent+0x38>)
 800d304:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800d306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d308:	f042 0201 	orr.w	r2, r2, #1
 800d30c:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800d30e:	2301      	movs	r3, #1
 800d310:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800d314:	2300      	movs	r3, #0
 800d316:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800d31a:	4618      	mov	r0, r3
}
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	50001000 	.word	0x50001000

0800d324 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800d324:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d326:	6804      	ldr	r4, [r0, #0]
 800d328:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d32c:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d330:	6965      	ldr	r5, [r4, #20]
 800d332:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800d336:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800d33a:	ea45 0503 	orr.w	r5, r5, r3
 800d33e:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800d340:	9d03      	ldr	r5, [sp, #12]
 800d342:	6963      	ldr	r3, [r4, #20]
 800d344:	f105 35ff 	add.w	r5, r5, #4294967295
 800d348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d34c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800d350:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800d352:	f04f 031f 	mov.w	r3, #31
 800d356:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800d358:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800d35a:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800d35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d35e:	bf0c      	ite	eq
 800d360:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d364:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d368:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d36c:	62a3      	str	r3, [r4, #40]	; 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800d36e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d370:	bf0c      	ite	eq
 800d372:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800d376:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 800d37a:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800d37c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800d37e:	6263      	str	r3, [r4, #36]	; 0x24
}
 800d380:	bd30      	pop	{r4, r5, pc}

0800d382 <HAL_MDMA_Init>:
{
 800d382:	b538      	push	{r3, r4, r5, lr}
 800d384:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d386:	f7fc fd49 	bl	8009e1c <HAL_GetTick>
 800d38a:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800d38c:	2c00      	cmp	r4, #0
 800d38e:	d061      	beq.n	800d454 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800d390:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800d392:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800d394:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800d398:	2302      	movs	r3, #2
 800d39a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800d39e:	68d3      	ldr	r3, [r2, #12]
 800d3a0:	f023 0301 	bic.w	r3, r3, #1
 800d3a4:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	07d2      	lsls	r2, r2, #31
 800d3ac:	d448      	bmi.n	800d440 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800d3ae:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d3b6:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	69e1      	ldr	r1, [r4, #28]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	6a21      	ldr	r1, [r4, #32]
 800d3c2:	430a      	orrs	r2, r1
 800d3c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3ce:	430a      	orrs	r2, r1
 800d3d0:	68a1      	ldr	r1, [r4, #8]
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d3d6:	3901      	subs	r1, #1
 800d3d8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d3dc:	6861      	ldr	r1, [r4, #4]
 800d3de:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d3e2:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d3e4:	d103      	bne.n	800d3ee <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800d3e6:	691a      	ldr	r2, [r3, #16]
 800d3e8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800d3ec:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800d3f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	da04      	bge.n	800d402 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d3f8:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800d3fa:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d3fc:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800d400:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800d402:	b292      	uxth	r2, r2
 800d404:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800d406:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d408:	2a00      	cmp	r2, #0
 800d40a:	da25      	bge.n	800d458 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d40c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800d40e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d410:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800d414:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d416:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d418:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d41c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d420:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d422:	f04f 0200 	mov.w	r2, #0
 800d426:	d019      	beq.n	800d45c <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800d428:	b2c9      	uxtb	r1, r1
 800d42a:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800d42c:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800d42e:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800d430:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d432:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800d434:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800d436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800d43a:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800d440:	f7fc fcec 	bl	8009e1c <HAL_GetTick>
 800d444:	1b40      	subs	r0, r0, r5
 800d446:	2805      	cmp	r0, #5
 800d448:	d9ad      	bls.n	800d3a6 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800d44a:	2340      	movs	r3, #64	; 0x40
 800d44c:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d44e:	2303      	movs	r3, #3
 800d450:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800d454:	2001      	movs	r0, #1
 800d456:	e7f2      	b.n	800d43e <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d458:	6a18      	ldr	r0, [r3, #32]
 800d45a:	e7dd      	b.n	800d418 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800d45c:	629a      	str	r2, [r3, #40]	; 0x28
 800d45e:	e7e5      	b.n	800d42c <HAL_MDMA_Init+0xaa>

0800d460 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800d460:	4603      	mov	r3, r0
{
 800d462:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800d464:	b318      	cbz	r0, 800d4ae <HAL_MDMA_ConfigPostRequestMask+0x4e>
  __HAL_LOCK(hmdma);
 800d466:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800d46a:	2801      	cmp	r0, #1
 800d46c:	d021      	beq.n	800d4b2 <HAL_MDMA_ConfigPostRequestMask+0x52>
 800d46e:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d470:	f893 503d 	ldrb.w	r5, [r3, #61]	; 0x3d
 800d474:	42a5      	cmp	r5, r4
 800d476:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800d478:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d47c:	d115      	bne.n	800d4aa <HAL_MDMA_ConfigPostRequestMask+0x4a>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800d47e:	681c      	ldr	r4, [r3, #0]
 800d480:	6925      	ldr	r5, [r4, #16]
 800d482:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 800d486:	d107      	bne.n	800d498 <HAL_MDMA_ConfigPostRequestMask+0x38>
      hmdma->Instance->CMAR = MaskAddress;
 800d488:	6321      	str	r1, [r4, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 800d48a:	6362      	str	r2, [r4, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d48c:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800d48e:	b939      	cbnz	r1, 800d4a0 <HAL_MDMA_ConfigPostRequestMask+0x40>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d490:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800d494:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d496:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d49e:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800d4a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800d4a4:	4628      	mov	r0, r5
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800d4a6:	6122      	str	r2, [r4, #16]
 800d4a8:	e7f6      	b.n	800d498 <HAL_MDMA_ConfigPostRequestMask+0x38>
    status =  HAL_ERROR;
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	e7f4      	b.n	800d498 <HAL_MDMA_ConfigPostRequestMask+0x38>
    return HAL_ERROR;
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e7f5      	b.n	800d49e <HAL_MDMA_ConfigPostRequestMask+0x3e>
  __HAL_LOCK(hmdma);
 800d4b2:	2002      	movs	r0, #2
 800d4b4:	e7f3      	b.n	800d49e <HAL_MDMA_ConfigPostRequestMask+0x3e>

0800d4b6 <HAL_MDMA_Start_IT>:
{
 800d4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d041      	beq.n	800d542 <HAL_MDMA_Start_IT+0x8c>
  __HAL_LOCK(hmdma);
 800d4be:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 800d4c2:	2d01      	cmp	r5, #1
 800d4c4:	d03b      	beq.n	800d53e <HAL_MDMA_Start_IT+0x88>
 800d4c6:	2501      	movs	r5, #1
 800d4c8:	2600      	movs	r6, #0
 800d4ca:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d4ce:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800d4d2:	2d01      	cmp	r5, #1
 800d4d4:	f04f 0502 	mov.w	r5, #2
 800d4d8:	d12f      	bne.n	800d53a <HAL_MDMA_Start_IT+0x84>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800d4da:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800d4de:	6805      	ldr	r5, [r0, #0]
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d4e0:	6686      	str	r6, [r0, #104]	; 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800d4e2:	68ee      	ldr	r6, [r5, #12]
 800d4e4:	f026 0601 	bic.w	r6, r6, #1
 800d4e8:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800d4ea:	9e06      	ldr	r6, [sp, #24]
 800d4ec:	9600      	str	r6, [sp, #0]
 800d4ee:	f7ff ff19 	bl	800d324 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800d4f2:	68eb      	ldr	r3, [r5, #12]
 800d4f4:	f043 0306 	orr.w	r3, r3, #6
 800d4f8:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800d4fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d4fc:	b11b      	cbz	r3, 800d506 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800d4fe:	68eb      	ldr	r3, [r5, #12]
 800d500:	f043 0310 	orr.w	r3, r3, #16
 800d504:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d506:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d508:	b11b      	cbz	r3, 800d512 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800d50a:	68eb      	ldr	r3, [r5, #12]
 800d50c:	f043 0308 	orr.w	r3, r3, #8
 800d510:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800d512:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d514:	b11b      	cbz	r3, 800d51e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800d516:	68eb      	ldr	r3, [r5, #12]
 800d518:	f043 0320 	orr.w	r3, r3, #32
 800d51c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800d51e:	68eb      	ldr	r3, [r5, #12]
 800d520:	f043 0301 	orr.w	r3, r3, #1
 800d524:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d526:	6863      	ldr	r3, [r4, #4]
 800d528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d52c:	d103      	bne.n	800d536 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800d52e:	68eb      	ldr	r3, [r5, #12]
 800d530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d534:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800d536:	2000      	movs	r0, #0
 800d538:	e004      	b.n	800d544 <HAL_MDMA_Start_IT+0x8e>
    __HAL_UNLOCK(hmdma);
 800d53a:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  __HAL_LOCK(hmdma);
 800d53e:	2002      	movs	r0, #2
 800d540:	e000      	b.n	800d544 <HAL_MDMA_Start_IT+0x8e>
    return HAL_ERROR;
 800d542:	2001      	movs	r0, #1
}
 800d544:	b002      	add	sp, #8
 800d546:	bd70      	pop	{r4, r5, r6, pc}

0800d548 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800d548:	b128      	cbz	r0, 800d556 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800d54a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d003      	beq.n	800d55a <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800d552:	2380      	movs	r3, #128	; 0x80
 800d554:	6683      	str	r3, [r0, #104]	; 0x68
    return HAL_ERROR;
 800d556:	2001      	movs	r0, #1
}
 800d558:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800d55a:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d55c:	2304      	movs	r3, #4
 800d55e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  return HAL_OK;
 800d562:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800d564:	68d3      	ldr	r3, [r2, #12]
 800d566:	f023 0301 	bic.w	r3, r3, #1
 800d56a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800d56c:	4770      	bx	lr
	...

0800d570 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800d570:	2300      	movs	r3, #0
{
 800d572:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800d574:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d576:	f04f 42a4 	mov.w	r2, #1375731712	; 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800d57a:	4b58      	ldr	r3, [pc, #352]	; (800d6dc <HAL_MDMA_IRQHandler+0x16c>)
{
 800d57c:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d57e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800d580:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d582:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d584:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d586:	f103 422e 	add.w	r2, r3, #2919235584	; 0xae000000
 800d58a:	3a40      	subs	r2, #64	; 0x40
 800d58c:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800d590:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d594:	4202      	tst	r2, r0
 800d596:	f000 809e 	beq.w	800d6d6 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	07d1      	lsls	r1, r2, #31
 800d59e:	d529      	bpl.n	800d5f4 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	0792      	lsls	r2, r2, #30
 800d5a4:	d526      	bpl.n	800d5f4 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800d5a6:	68da      	ldr	r2, [r3, #12]
 800d5a8:	f022 0202 	bic.w	r2, r2, #2
 800d5ac:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800d5ae:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d5b0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800d5b2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d5b4:	bf54      	ite	pl
 800d5b6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800d5ba:	f041 0102 	orrmi.w	r1, r1, #2
 800d5be:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800d5c0:	0591      	lsls	r1, r2, #22
 800d5c2:	d503      	bpl.n	800d5cc <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800d5c4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d5c6:	f041 0104 	orr.w	r1, r1, #4
 800d5ca:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800d5cc:	05d0      	lsls	r0, r2, #23
 800d5ce:	d503      	bpl.n	800d5d8 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800d5d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d5d2:	f041 0108 	orr.w	r1, r1, #8
 800d5d6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800d5d8:	0551      	lsls	r1, r2, #21
 800d5da:	d503      	bpl.n	800d5e4 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800d5dc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d5de:	f041 0110 	orr.w	r1, r1, #16
 800d5e2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800d5e4:	0512      	lsls	r2, r2, #20
 800d5e6:	d503      	bpl.n	800d5f0 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800d5e8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800d5ea:	f042 0220 	orr.w	r2, r2, #32
 800d5ee:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	06d0      	lsls	r0, r2, #27
 800d5f8:	d508      	bpl.n	800d60c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	0691      	lsls	r1, r2, #26
 800d5fe:	d505      	bpl.n	800d60c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800d600:	2210      	movs	r2, #16
 800d602:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800d604:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d606:	b10b      	cbz	r3, 800d60c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800d608:	4620      	mov	r0, r4
 800d60a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800d60c:	6823      	ldr	r3, [r4, #0]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	0712      	lsls	r2, r2, #28
 800d612:	d508      	bpl.n	800d626 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	06d0      	lsls	r0, r2, #27
 800d618:	d505      	bpl.n	800d626 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800d61a:	2208      	movs	r2, #8
 800d61c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800d61e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d620:	b10b      	cbz	r3, 800d626 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800d622:	4620      	mov	r0, r4
 800d624:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	0751      	lsls	r1, r2, #29
 800d62c:	d508      	bpl.n	800d640 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800d62e:	68da      	ldr	r2, [r3, #12]
 800d630:	0712      	lsls	r2, r2, #28
 800d632:	d505      	bpl.n	800d640 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800d634:	2204      	movs	r2, #4
 800d636:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d638:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d63a:	b10b      	cbz	r3, 800d640 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800d63c:	4620      	mov	r0, r4
 800d63e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	0790      	lsls	r0, r2, #30
 800d646:	d524      	bpl.n	800d692 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800d648:	68da      	ldr	r2, [r3, #12]
 800d64a:	0751      	lsls	r1, r2, #29
 800d64c:	d521      	bpl.n	800d692 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d64e:	68da      	ldr	r2, [r3, #12]
 800d650:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800d654:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800d656:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800d65a:	2a04      	cmp	r2, #4
 800d65c:	f04f 0200 	mov.w	r2, #0
 800d660:	d10c      	bne.n	800d67c <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800d662:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800d664:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800d668:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800d66c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if (hmdma->XferErrorCallback != NULL)
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d031      	beq.n	800d6d6 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800d672:	4620      	mov	r0, r4
}
 800d674:	b003      	add	sp, #12
 800d676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800d67a:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800d67c:	2102      	movs	r1, #2
 800d67e:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800d680:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800d682:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800d686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800d68a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d68c:	b10b      	cbz	r3, 800d692 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800d68e:	4620      	mov	r0, r4
 800d690:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800d692:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d694:	b1fb      	cbz	r3, 800d6d6 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800d696:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800d69a:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d69e:	2304      	movs	r3, #4
 800d6a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	68da      	ldr	r2, [r3, #12]
 800d6a8:	f022 0201 	bic.w	r2, r2, #1
 800d6ac:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800d6ae:	9a01      	ldr	r2, [sp, #4]
 800d6b0:	3201      	adds	r2, #1
 800d6b2:	42aa      	cmp	r2, r5
 800d6b4:	9201      	str	r2, [sp, #4]
 800d6b6:	d802      	bhi.n	800d6be <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	07d2      	lsls	r2, r2, #31
 800d6bc:	d4f7      	bmi.n	800d6ae <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d6c8:	bf4c      	ite	mi
 800d6ca:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800d6cc:	2301      	movpl	r3, #1
 800d6ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800d6d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d6d4:	e7cb      	b.n	800d66e <HAL_MDMA_IRQHandler+0xfe>
}
 800d6d6:	b003      	add	sp, #12
 800d6d8:	bd30      	pop	{r4, r5, pc}
 800d6da:	bf00      	nop
 800d6dc:	24000030 	.word	0x24000030

0800d6e0 <HAL_PWR_ConfigPVD>:
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800d6e0:	b1f8      	cbz	r0, 800d722 <HAL_PWR_ConfigPVD+0x42>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800d6e2:	4a10      	ldr	r2, [pc, #64]	; (800d724 <HAL_PWR_ConfigPVD+0x44>)
 800d6e4:	6801      	ldr	r1, [r0, #0]
 800d6e6:	6813      	ldr	r3, [r2, #0]
 800d6e8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800d6ec:	430b      	orrs	r3, r1
 800d6ee:	6013      	str	r3, [r2, #0]
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800d6f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d6fa:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d702:	605a      	str	r2, [r3, #4]
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800d704:	6841      	ldr	r1, [r0, #4]
 800d706:	07ca      	lsls	r2, r1, #31
 800d708:	d503      	bpl.n	800d712 <HAL_PWR_ConfigPVD+0x32>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d710:	601a      	str	r2, [r3, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800d712:	078b      	lsls	r3, r1, #30
 800d714:	d505      	bpl.n	800d722 <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 800d716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d71a:	6853      	ldr	r3, [r2, #4]
 800d71c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d720:	6053      	str	r3, [r2, #4]
  }
}
 800d722:	4770      	bx	lr
 800d724:	58024800 	.word	0x58024800

0800d728 <HAL_PWR_EnablePVD>:
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800d728:	4a02      	ldr	r2, [pc, #8]	; (800d734 <HAL_PWR_EnablePVD+0xc>)
 800d72a:	6813      	ldr	r3, [r2, #0]
 800d72c:	f043 0310 	orr.w	r3, r3, #16
 800d730:	6013      	str	r3, [r2, #0]
}
 800d732:	4770      	bx	lr
 800d734:	58024800 	.word	0x58024800

0800d738 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d738:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d73a:	4d1c      	ldr	r5, [pc, #112]	; (800d7ac <HAL_PWREx_ConfigSupply+0x74>)
{
 800d73c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d73e:	68eb      	ldr	r3, [r5, #12]
 800d740:	f003 0307 	and.w	r3, r3, #7
 800d744:	2b06      	cmp	r3, #6
 800d746:	d006      	beq.n	800d756 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d748:	68e8      	ldr	r0, [r5, #12]
 800d74a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d74e:	1b00      	subs	r0, r0, r4
 800d750:	bf18      	it	ne
 800d752:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800d754:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d756:	68eb      	ldr	r3, [r5, #12]
 800d758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d75c:	4303      	orrs	r3, r0
 800d75e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800d760:	f7fc fb5c 	bl	8009e1c <HAL_GetTick>
 800d764:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d766:	686b      	ldr	r3, [r5, #4]
 800d768:	049a      	lsls	r2, r3, #18
 800d76a:	d508      	bpl.n	800d77e <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800d76c:	f1a4 031d 	sub.w	r3, r4, #29
 800d770:	2b01      	cmp	r3, #1
 800d772:	d90c      	bls.n	800d78e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800d774:	3c2d      	subs	r4, #45	; 0x2d
 800d776:	2c01      	cmp	r4, #1
 800d778:	d909      	bls.n	800d78e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800d77a:	2000      	movs	r0, #0
 800d77c:	e7ea      	b.n	800d754 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d77e:	f7fc fb4d 	bl	8009e1c <HAL_GetTick>
 800d782:	1b80      	subs	r0, r0, r6
 800d784:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d788:	d9ed      	bls.n	800d766 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800d78a:	2001      	movs	r0, #1
 800d78c:	e7e2      	b.n	800d754 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800d78e:	f7fc fb45 	bl	8009e1c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d792:	4d06      	ldr	r5, [pc, #24]	; (800d7ac <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800d794:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d796:	68eb      	ldr	r3, [r5, #12]
 800d798:	03db      	lsls	r3, r3, #15
 800d79a:	d4ee      	bmi.n	800d77a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d79c:	f7fc fb3e 	bl	8009e1c <HAL_GetTick>
 800d7a0:	1b00      	subs	r0, r0, r4
 800d7a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d7a6:	d9f6      	bls.n	800d796 <HAL_PWREx_ConfigSupply+0x5e>
 800d7a8:	e7ef      	b.n	800d78a <HAL_PWREx_ConfigSupply+0x52>
 800d7aa:	bf00      	nop
 800d7ac:	58024800 	.word	0x58024800

0800d7b0 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d7b0:	4a02      	ldr	r2, [pc, #8]	; (800d7bc <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800d7b2:	68d3      	ldr	r3, [r2, #12]
 800d7b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7b8:	60d3      	str	r3, [r2, #12]
}
 800d7ba:	4770      	bx	lr
 800d7bc:	58024800 	.word	0x58024800

0800d7c0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d7c4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800d7c6:	b136      	cbz	r6, 800d7d6 <QSPI_Config+0x16>
 800d7c8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800d7cc:	d003      	beq.n	800d7d6 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d7ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800d7d0:	6804      	ldr	r4, [r0, #0]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d7d6:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d7da:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d7de:	f1ba 0f00 	cmp.w	sl, #0
 800d7e2:	d04c      	beq.n	800d87e <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d7e4:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d7e6:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d7e8:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800d7ec:	ea4a 0406 	orr.w	r4, sl, r6
 800d7f0:	680b      	ldr	r3, [r1, #0]
 800d7f2:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 800d7f6:	ea44 0a02 	orr.w	sl, r4, r2
 800d7fa:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d7fe:	f1be 0f00 	cmp.w	lr, #0
 800d802:	d024      	beq.n	800d84e <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d804:	688e      	ldr	r6, [r1, #8]
 800d806:	ea4a 040e 	orr.w	r4, sl, lr
 800d80a:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d80c:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d80e:	b19f      	cbz	r7, 800d838 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d810:	433b      	orrs	r3, r7
 800d812:	4303      	orrs	r3, r0
 800d814:	68c8      	ldr	r0, [r1, #12]
 800d816:	ea43 0309 	orr.w	r3, r3, r9
 800d81a:	ea43 0308 	orr.w	r3, r3, r8
 800d81e:	4333      	orrs	r3, r6
 800d820:	4303      	orrs	r3, r0
 800d822:	ea43 030c 	orr.w	r3, r3, ip
 800d826:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d828:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d82c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d82e:	d001      	beq.n	800d834 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d830:	684b      	ldr	r3, [r1, #4]
 800d832:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d838:	4303      	orrs	r3, r0
 800d83a:	ea43 0309 	orr.w	r3, r3, r9
 800d83e:	ea43 0308 	orr.w	r3, r3, r8
 800d842:	4333      	orrs	r3, r6
 800d844:	ea43 030c 	orr.w	r3, r3, ip
 800d848:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d84a:	616b      	str	r3, [r5, #20]
 800d84c:	e7f2      	b.n	800d834 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d84e:	b167      	cbz	r7, 800d86a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d850:	433b      	orrs	r3, r7
 800d852:	4303      	orrs	r3, r0
 800d854:	68c8      	ldr	r0, [r1, #12]
 800d856:	ea43 0309 	orr.w	r3, r3, r9
 800d85a:	ea43 0308 	orr.w	r3, r3, r8
 800d85e:	4303      	orrs	r3, r0
 800d860:	ea43 030c 	orr.w	r3, r3, ip
 800d864:	ea43 030a 	orr.w	r3, r3, sl
 800d868:	e7de      	b.n	800d828 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d86a:	4303      	orrs	r3, r0
 800d86c:	ea43 0309 	orr.w	r3, r3, r9
 800d870:	ea43 0408 	orr.w	r4, r3, r8
 800d874:	ea44 030c 	orr.w	r3, r4, ip
 800d878:	ea43 030a 	orr.w	r3, r3, sl
 800d87c:	e7e5      	b.n	800d84a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d87e:	f1be 0f00 	cmp.w	lr, #0
 800d882:	d02c      	beq.n	800d8de <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d884:	ea46 050e 	orr.w	r5, r6, lr
 800d888:	688b      	ldr	r3, [r1, #8]
 800d88a:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d88c:	694e      	ldr	r6, [r1, #20]
 800d88e:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d890:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d892:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800d896:	04b6      	lsls	r6, r6, #18
 800d898:	690b      	ldr	r3, [r1, #16]
 800d89a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d89e:	b1a7      	cbz	r7, 800d8ca <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8a0:	433b      	orrs	r3, r7
 800d8a2:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d8a4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8a8:	ea43 0308 	orr.w	r3, r3, r8
 800d8ac:	ea43 030e 	orr.w	r3, r3, lr
 800d8b0:	ea43 030c 	orr.w	r3, r3, ip
 800d8b4:	ea43 0300 	orr.w	r3, r3, r0
 800d8b8:	ea43 0306 	orr.w	r3, r3, r6
 800d8bc:	ea43 0305 	orr.w	r3, r3, r5
 800d8c0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d8c2:	d0b7      	beq.n	800d834 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d8c4:	684b      	ldr	r3, [r1, #4]
 800d8c6:	61a3      	str	r3, [r4, #24]
 800d8c8:	e7b4      	b.n	800d834 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8ca:	ea43 0308 	orr.w	r3, r3, r8
 800d8ce:	ea43 030e 	orr.w	r3, r3, lr
 800d8d2:	ea43 030c 	orr.w	r3, r3, ip
 800d8d6:	4333      	orrs	r3, r6
 800d8d8:	432b      	orrs	r3, r5
 800d8da:	6163      	str	r3, [r4, #20]
 800d8dc:	e7aa      	b.n	800d834 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d8de:	b1d7      	cbz	r7, 800d916 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8e0:	ea46 0307 	orr.w	r3, r6, r7
 800d8e4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800d8e6:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d8e8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8ec:	ea43 0302 	orr.w	r3, r3, r2
 800d8f0:	ea43 0304 	orr.w	r3, r3, r4
 800d8f4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800d8f6:	ea43 0304 	orr.w	r3, r3, r4
 800d8fa:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800d8fc:	ea43 0304 	orr.w	r3, r3, r4
 800d900:	68cc      	ldr	r4, [r1, #12]
 800d902:	ea43 0304 	orr.w	r3, r3, r4
 800d906:	694c      	ldr	r4, [r1, #20]
 800d908:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800d90c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d90e:	d091      	beq.n	800d834 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d910:	684b      	ldr	r3, [r1, #4]
 800d912:	6183      	str	r3, [r0, #24]
 800d914:	e78e      	b.n	800d834 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d916:	2e00      	cmp	r6, #0
 800d918:	d08c      	beq.n	800d834 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d91a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800d91c:	6800      	ldr	r0, [r0, #0]
 800d91e:	4333      	orrs	r3, r6
 800d920:	4313      	orrs	r3, r2
 800d922:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800d924:	4313      	orrs	r3, r2
 800d926:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800d928:	4313      	orrs	r3, r2
 800d92a:	694a      	ldr	r2, [r1, #20]
 800d92c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800d930:	6143      	str	r3, [r0, #20]
}
 800d932:	e77f      	b.n	800d834 <QSPI_Config+0x74>

0800d934 <QSPI_WaitFlagStateUntilTimeout>:
{
 800d934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d938:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d93c:	4604      	mov	r4, r0
 800d93e:	460e      	mov	r6, r1
 800d940:	4615      	mov	r5, r2
 800d942:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d944:	6822      	ldr	r2, [r4, #0]
 800d946:	6893      	ldr	r3, [r2, #8]
 800d948:	4233      	tst	r3, r6
 800d94a:	bf14      	ite	ne
 800d94c:	2301      	movne	r3, #1
 800d94e:	2300      	moveq	r3, #0
 800d950:	42ab      	cmp	r3, r5
 800d952:	d101      	bne.n	800d958 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800d954:	2000      	movs	r0, #0
 800d956:	e012      	b.n	800d97e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800d958:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d95c:	d0f3      	beq.n	800d946 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d95e:	f7fc fa5d 	bl	8009e1c <HAL_GetTick>
 800d962:	1bc0      	subs	r0, r0, r7
 800d964:	4540      	cmp	r0, r8
 800d966:	d802      	bhi.n	800d96e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800d968:	f1b8 0f00 	cmp.w	r8, #0
 800d96c:	d1ea      	bne.n	800d944 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d96e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d970:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d972:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d978:	f043 0301 	orr.w	r3, r3, #1
 800d97c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d984 <HAL_QSPI_Init>:
{
 800d984:	b530      	push	{r4, r5, lr}
 800d986:	4604      	mov	r4, r0
 800d988:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800d98a:	f7fc fa47 	bl	8009e1c <HAL_GetTick>
 800d98e:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800d990:	2c00      	cmp	r4, #0
 800d992:	d040      	beq.n	800da16 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800d994:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800d998:	b93a      	cbnz	r2, 800d9aa <HAL_QSPI_Init+0x26>
 800d99a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800d99c:	4620      	mov	r0, r4
 800d99e:	f7f4 f9af 	bl	8001d00 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800d9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a6:	9b03      	ldr	r3, [sp, #12]
 800d9a8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d9aa:	6820      	ldr	r0, [r4, #0]
 800d9ac:	68a1      	ldr	r1, [r4, #8]
 800d9ae:	6802      	ldr	r2, [r0, #0]
 800d9b0:	3901      	subs	r1, #1
 800d9b2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800d9b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d9ba:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d9bc:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d9be:	4620      	mov	r0, r4
 800d9c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d9c2:	9200      	str	r2, [sp, #0]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f7ff ffb5 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800d9ca:	bb10      	cbnz	r0, 800da12 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800d9cc:	6822      	ldr	r2, [r4, #0]
 800d9ce:	69e5      	ldr	r5, [r4, #28]
 800d9d0:	68e3      	ldr	r3, [r4, #12]
 800d9d2:	6811      	ldr	r1, [r2, #0]
 800d9d4:	432b      	orrs	r3, r5
 800d9d6:	6a25      	ldr	r5, [r4, #32]
 800d9d8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800d9dc:	432b      	orrs	r3, r5
 800d9de:	6865      	ldr	r5, [r4, #4]
 800d9e0:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800d9e4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d9e8:	430b      	orrs	r3, r1
 800d9ea:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800d9ec:	6855      	ldr	r5, [r2, #4]
 800d9ee:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800d9f2:	430b      	orrs	r3, r1
 800d9f4:	6921      	ldr	r1, [r4, #16]
 800d9f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d9fa:	4908      	ldr	r1, [pc, #32]	; (800da1c <HAL_QSPI_Init+0x98>)
 800d9fc:	4029      	ands	r1, r5
 800d9fe:	430b      	orrs	r3, r1
 800da00:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800da02:	6813      	ldr	r3, [r2, #0]
 800da04:	f043 0301 	orr.w	r3, r3, #1
 800da08:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800da0a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800da0c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800da0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800da12:	b005      	add	sp, #20
 800da14:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800da16:	2001      	movs	r0, #1
 800da18:	e7fb      	b.n	800da12 <HAL_QSPI_Init+0x8e>
 800da1a:	bf00      	nop
 800da1c:	ffe0f8fe 	.word	0xffe0f8fe

0800da20 <HAL_QSPI_DeInit>:
{
 800da20:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 800da22:	4604      	mov	r4, r0
 800da24:	b158      	cbz	r0, 800da3e <HAL_QSPI_DeInit+0x1e>
  __HAL_QSPI_DISABLE(hqspi);
 800da26:	6802      	ldr	r2, [r0, #0]
 800da28:	6813      	ldr	r3, [r2, #0]
 800da2a:	f023 0301 	bic.w	r3, r3, #1
 800da2e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 800da30:	f7f4 f9f4 	bl	8001e1c <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800da34:	2000      	movs	r0, #0
 800da36:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800da38:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
 800da3c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800da3e:	2001      	movs	r0, #1
 800da40:	e7fc      	b.n	800da3c <HAL_QSPI_DeInit+0x1c>

0800da42 <HAL_QSPI_Command>:
{
 800da42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da46:	4604      	mov	r4, r0
 800da48:	b085      	sub	sp, #20
 800da4a:	4617      	mov	r7, r2
 800da4c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800da4e:	f7fc f9e5 	bl	8009e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800da52:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800da56:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800da58:	2a01      	cmp	r2, #1
 800da5a:	d033      	beq.n	800dac4 <HAL_QSPI_Command+0x82>
 800da5c:	2201      	movs	r2, #1
 800da5e:	2602      	movs	r6, #2
 800da60:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800da64:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800da68:	2a01      	cmp	r2, #1
 800da6a:	fa5f f882 	uxtb.w	r8, r2
 800da6e:	d127      	bne.n	800dac0 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800da70:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800da72:	9003      	str	r0, [sp, #12]
 800da74:	2120      	movs	r1, #32
 800da76:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800da78:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800da7a:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800da7c:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800da80:	f7ff ff58 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800da84:	4605      	mov	r5, r0
 800da86:	b9a0      	cbnz	r0, 800dab2 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800da88:	4602      	mov	r2, r0
 800da8a:	4649      	mov	r1, r9
 800da8c:	4620      	mov	r0, r4
 800da8e:	f7ff fe97 	bl	800d7c0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800da92:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	b94a      	cbnz	r2, 800daae <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800da9a:	4642      	mov	r2, r8
 800da9c:	4631      	mov	r1, r6
 800da9e:	4620      	mov	r0, r4
 800daa0:	9700      	str	r7, [sp, #0]
 800daa2:	f7ff ff47 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800daa6:	4605      	mov	r5, r0
 800daa8:	b918      	cbnz	r0, 800dab2 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800daae:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800dab2:	2300      	movs	r3, #0
 800dab4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800dab8:	4628      	mov	r0, r5
 800daba:	b005      	add	sp, #20
 800dabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800dac0:	4635      	mov	r5, r6
 800dac2:	e7f6      	b.n	800dab2 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800dac4:	2502      	movs	r5, #2
 800dac6:	e7f7      	b.n	800dab8 <HAL_QSPI_Command+0x76>

0800dac8 <HAL_QSPI_Transmit>:
{
 800dac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daca:	4604      	mov	r4, r0
 800dacc:	b085      	sub	sp, #20
 800dace:	4616      	mov	r6, r2
 800dad0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800dad2:	f7fc f9a3 	bl	8009e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800dad6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800dada:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800dadc:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800dade:	2a01      	cmp	r2, #1
 800dae0:	d049      	beq.n	800db76 <HAL_QSPI_Transmit+0xae>
 800dae2:	2201      	movs	r2, #1
 800dae4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dae8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800daec:	2a01      	cmp	r2, #1
 800daee:	b2d0      	uxtb	r0, r2
 800daf0:	d13f      	bne.n	800db72 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800daf2:	2200      	movs	r2, #0
 800daf4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800daf6:	2f00      	cmp	r7, #0
 800daf8:	d036      	beq.n	800db68 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800dafa:	2212      	movs	r2, #18
 800dafc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800db00:	692a      	ldr	r2, [r5, #16]
 800db02:	3201      	adds	r2, #1
 800db04:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800db06:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800db08:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800db0a:	3201      	adds	r2, #1
 800db0c:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800db0e:	696a      	ldr	r2, [r5, #20]
 800db10:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800db14:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800db16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800db18:	b98a      	cbnz	r2, 800db3e <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800db1a:	2201      	movs	r2, #1
 800db1c:	2102      	movs	r1, #2
 800db1e:	4620      	mov	r0, r4
 800db20:	9600      	str	r6, [sp, #0]
 800db22:	f7ff ff07 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800db26:	b910      	cbnz	r0, 800db2e <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	2202      	movs	r2, #2
 800db2c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800db2e:	2301      	movs	r3, #1
 800db30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800db34:	2300      	movs	r3, #0
 800db36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800db3a:	b005      	add	sp, #20
 800db3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800db3e:	2201      	movs	r2, #1
 800db40:	2104      	movs	r1, #4
 800db42:	4620      	mov	r0, r4
 800db44:	9600      	str	r6, [sp, #0]
 800db46:	9303      	str	r3, [sp, #12]
 800db48:	f7ff fef4 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d1ee      	bne.n	800db2e <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800db50:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800db52:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800db54:	7812      	ldrb	r2, [r2, #0]
 800db56:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800db5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db5c:	3201      	adds	r2, #1
 800db5e:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800db60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800db62:	3a01      	subs	r2, #1
 800db64:	62e2      	str	r2, [r4, #44]	; 0x2c
 800db66:	e7d6      	b.n	800db16 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800db68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db6a:	f043 0308 	orr.w	r3, r3, #8
 800db6e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800db70:	e7e0      	b.n	800db34 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800db72:	2002      	movs	r0, #2
 800db74:	e7de      	b.n	800db34 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800db76:	2002      	movs	r0, #2
 800db78:	e7df      	b.n	800db3a <HAL_QSPI_Transmit+0x72>

0800db7a <HAL_QSPI_Receive>:
{
 800db7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db7c:	4604      	mov	r4, r0
 800db7e:	b085      	sub	sp, #20
 800db80:	4616      	mov	r6, r2
 800db82:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800db84:	f7fc f94a 	bl	8009e1c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800db88:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800db8a:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800db8c:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800db90:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800db94:	2a01      	cmp	r2, #1
 800db96:	d04d      	beq.n	800dc34 <HAL_QSPI_Receive+0xba>
 800db98:	2201      	movs	r2, #1
 800db9a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800db9e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800dba2:	2a01      	cmp	r2, #1
 800dba4:	b2d0      	uxtb	r0, r2
 800dba6:	d143      	bne.n	800dc30 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dba8:	2200      	movs	r2, #0
 800dbaa:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800dbac:	2f00      	cmp	r7, #0
 800dbae:	d03a      	beq.n	800dc26 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800dbb0:	2222      	movs	r2, #34	; 0x22
 800dbb2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800dbb6:	692a      	ldr	r2, [r5, #16]
 800dbb8:	3201      	adds	r2, #1
 800dbba:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dbbc:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800dbbe:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dbc0:	3201      	adds	r2, #1
 800dbc2:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800dbc4:	6969      	ldr	r1, [r5, #20]
 800dbc6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800dbca:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800dbce:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800dbd0:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800dbd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dbd6:	b98a      	cbnz	r2, 800dbfc <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800dbd8:	2201      	movs	r2, #1
 800dbda:	2102      	movs	r1, #2
 800dbdc:	4620      	mov	r0, r4
 800dbde:	9600      	str	r6, [sp, #0]
 800dbe0:	f7ff fea8 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800dbe4:	b910      	cbnz	r0, 800dbec <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	2202      	movs	r2, #2
 800dbea:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800dbec:	2301      	movs	r3, #1
 800dbee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800dbf8:	b005      	add	sp, #20
 800dbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	2106      	movs	r1, #6
 800dc00:	4620      	mov	r0, r4
 800dc02:	9600      	str	r6, [sp, #0]
 800dc04:	9303      	str	r3, [sp, #12]
 800dc06:	f7ff fe95 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d1ee      	bne.n	800dbec <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800dc0e:	f895 1020 	ldrb.w	r1, [r5, #32]
 800dc12:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800dc14:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800dc16:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800dc18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dc1a:	3201      	adds	r2, #1
 800dc1c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800dc1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dc20:	3a01      	subs	r2, #1
 800dc22:	63a2      	str	r2, [r4, #56]	; 0x38
 800dc24:	e7d6      	b.n	800dbd4 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800dc26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc28:	f043 0308 	orr.w	r3, r3, #8
 800dc2c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800dc2e:	e7e0      	b.n	800dbf2 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800dc30:	2002      	movs	r0, #2
 800dc32:	e7de      	b.n	800dbf2 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800dc34:	2002      	movs	r0, #2
 800dc36:	e7df      	b.n	800dbf8 <HAL_QSPI_Receive+0x7e>

0800dc38 <HAL_QSPI_AutoPolling>:
{
 800dc38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	4615      	mov	r5, r2
 800dc40:	461e      	mov	r6, r3
 800dc42:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800dc44:	f7fc f8ea 	bl	8009e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800dc48:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800dc4c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800dc4e:	2a01      	cmp	r2, #1
 800dc50:	d040      	beq.n	800dcd4 <HAL_QSPI_AutoPolling+0x9c>
 800dc52:	2201      	movs	r2, #1
 800dc54:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dc58:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800dc5c:	2a01      	cmp	r2, #1
 800dc5e:	b2d7      	uxtb	r7, r2
 800dc60:	d136      	bne.n	800dcd0 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800dc62:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dc64:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800dc66:	9003      	str	r0, [sp, #12]
 800dc68:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dc6a:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800dc6c:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800dc6e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800dc72:	2120      	movs	r1, #32
 800dc74:	f7ff fe5e 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800dc78:	bb20      	cbnz	r0, 800dcc4 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800dc7a:	6821      	ldr	r1, [r4, #0]
 800dc7c:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dc7e:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800dc80:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800dc82:	686a      	ldr	r2, [r5, #4]
 800dc84:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800dc86:	68aa      	ldr	r2, [r5, #8]
 800dc88:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dc8a:	680a      	ldr	r2, [r1, #0]
 800dc8c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800dc90:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dc92:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dc94:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800dc98:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dc9a:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800dc9c:	68ea      	ldr	r2, [r5, #12]
 800dc9e:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dca6:	f7ff fd8b 	bl	800d7c0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	463a      	mov	r2, r7
 800dcae:	2108      	movs	r1, #8
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	9600      	str	r6, [sp, #0]
 800dcb4:	f7ff fe3e 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800dcb8:	b920      	cbnz	r0, 800dcc4 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	2208      	movs	r2, #8
 800dcbe:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800dcc0:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800dcca:	b004      	add	sp, #16
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800dcd0:	2002      	movs	r0, #2
 800dcd2:	e7f7      	b.n	800dcc4 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800dcd4:	2002      	movs	r0, #2
 800dcd6:	e7f8      	b.n	800dcca <HAL_QSPI_AutoPolling+0x92>

0800dcd8 <HAL_QSPI_MemoryMapped>:
{
 800dcd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4616      	mov	r6, r2
 800dcde:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800dce0:	f7fc f89c 	bl	8009e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800dce4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800dce8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800dcea:	2a01      	cmp	r2, #1
 800dcec:	d033      	beq.n	800dd56 <HAL_QSPI_MemoryMapped+0x7e>
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dcf4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800dcf8:	2a01      	cmp	r2, #1
 800dcfa:	d12a      	bne.n	800dd52 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dcfc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800dcfe:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800dd00:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dd02:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800dd04:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800dd08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dd0a:	9100      	str	r1, [sp, #0]
 800dd0c:	2120      	movs	r1, #32
 800dd0e:	f7ff fe11 	bl	800d934 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800dd12:	4605      	mov	r5, r0
 800dd14:	b9b8      	cbnz	r0, 800dd46 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	6872      	ldr	r2, [r6, #4]
 800dd1a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800dd1c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800dd1e:	f020 0008 	bic.w	r0, r0, #8
 800dd22:	ea40 0002 	orr.w	r0, r0, r2
 800dd26:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800dd28:	d107      	bne.n	800dd3a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800dd2a:	6832      	ldr	r2, [r6, #0]
 800dd2c:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800dd2e:	2210      	movs	r2, #16
 800dd30:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dd38:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800dd3a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800dd3e:	4639      	mov	r1, r7
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7ff fd3d 	bl	800d7c0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800dd46:	2300      	movs	r3, #0
 800dd48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	b003      	add	sp, #12
 800dd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800dd52:	2502      	movs	r5, #2
 800dd54:	e7f7      	b.n	800dd46 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800dd56:	2502      	movs	r5, #2
 800dd58:	e7f8      	b.n	800dd4c <HAL_QSPI_MemoryMapped+0x74>
	...

0800dd5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dd5e:	4604      	mov	r4, r0
 800dd60:	b908      	cbnz	r0, 800dd66 <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800dd62:	2001      	movs	r0, #1
 800dd64:	e08d      	b.n	800de82 <HAL_RCC_OscConfig+0x126>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dd66:	6803      	ldr	r3, [r0, #0]
 800dd68:	07d8      	lsls	r0, r3, #31
 800dd6a:	d45e      	bmi.n	800de2a <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	0799      	lsls	r1, r3, #30
 800dd70:	f100 80ae 	bmi.w	800ded0 <HAL_RCC_OscConfig+0x174>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	06da      	lsls	r2, r3, #27
 800dd78:	d527      	bpl.n	800ddca <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd7a:	4a9d      	ldr	r2, [pc, #628]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800dd7c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dd7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd80:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dd84:	2b08      	cmp	r3, #8
 800dd86:	d007      	beq.n	800dd98 <HAL_RCC_OscConfig+0x3c>
 800dd88:	2b18      	cmp	r3, #24
 800dd8a:	f040 8105 	bne.w	800df98 <HAL_RCC_OscConfig+0x23c>
 800dd8e:	f001 0303 	and.w	r3, r1, #3
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	f040 8100 	bne.w	800df98 <HAL_RCC_OscConfig+0x23c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dd98:	6813      	ldr	r3, [r2, #0]
 800dd9a:	05db      	lsls	r3, r3, #23
 800dd9c:	d502      	bpl.n	800dda4 <HAL_RCC_OscConfig+0x48>
 800dd9e:	69e3      	ldr	r3, [r4, #28]
 800dda0:	2b80      	cmp	r3, #128	; 0x80
 800dda2:	d1de      	bne.n	800dd62 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dda4:	f7fc f852 	bl	8009e4c <HAL_GetREVID>
 800dda8:	f241 0303 	movw	r3, #4099	; 0x1003
 800ddac:	6a21      	ldr	r1, [r4, #32]
 800ddae:	4298      	cmp	r0, r3
 800ddb0:	4b8f      	ldr	r3, [pc, #572]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800ddb2:	f200 80ea 	bhi.w	800df8a <HAL_RCC_OscConfig+0x22e>
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	2920      	cmp	r1, #32
 800ddba:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800ddbe:	bf0c      	ite	eq
 800ddc0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800ddc4:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800ddc8:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	0719      	lsls	r1, r3, #28
 800ddce:	f100 8124 	bmi.w	800e01a <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	069a      	lsls	r2, r3, #26
 800ddd6:	f100 8145 	bmi.w	800e064 <HAL_RCC_OscConfig+0x308>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ddda:	6823      	ldr	r3, [r4, #0]
 800dddc:	075d      	lsls	r5, r3, #29
 800ddde:	d51e      	bpl.n	800de1e <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800dde0:	4d84      	ldr	r5, [pc, #528]	; (800dff4 <HAL_RCC_OscConfig+0x298>)
 800dde2:	682b      	ldr	r3, [r5, #0]
 800dde4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dde8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800ddea:	f7fc f817 	bl	8009e1c <HAL_GetTick>
 800ddee:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	05da      	lsls	r2, r3, #23
 800ddf4:	f140 815b 	bpl.w	800e0ae <HAL_RCC_OscConfig+0x352>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ddf8:	68a3      	ldr	r3, [r4, #8]
 800ddfa:	4d7d      	ldr	r5, [pc, #500]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	f040 815d 	bne.w	800e0bc <HAL_RCC_OscConfig+0x360>
 800de02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800de04:	f043 0301 	orr.w	r3, r3, #1
 800de08:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de0a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800de0e:	f7fc f805 	bl	8009e1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800de12:	4e77      	ldr	r6, [pc, #476]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 800de14:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800de16:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800de18:	079b      	lsls	r3, r3, #30
 800de1a:	f140 8175 	bpl.w	800e108 <HAL_RCC_OscConfig+0x3ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800de20:	2800      	cmp	r0, #0
 800de22:	f040 8178 	bne.w	800e116 <HAL_RCC_OscConfig+0x3ba>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800de26:	2000      	movs	r0, #0
 800de28:	e02b      	b.n	800de82 <HAL_RCC_OscConfig+0x126>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de2a:	4a71      	ldr	r2, [pc, #452]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800de2c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de30:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800de34:	2b10      	cmp	r3, #16
 800de36:	d005      	beq.n	800de44 <HAL_RCC_OscConfig+0xe8>
 800de38:	2b18      	cmp	r3, #24
 800de3a:	d10a      	bne.n	800de52 <HAL_RCC_OscConfig+0xf6>
 800de3c:	f001 0303 	and.w	r3, r1, #3
 800de40:	2b02      	cmp	r3, #2
 800de42:	d106      	bne.n	800de52 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de44:	6813      	ldr	r3, [r2, #0]
 800de46:	039a      	lsls	r2, r3, #14
 800de48:	d590      	bpl.n	800dd6c <HAL_RCC_OscConfig+0x10>
 800de4a:	6863      	ldr	r3, [r4, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d18d      	bne.n	800dd6c <HAL_RCC_OscConfig+0x10>
 800de50:	e787      	b.n	800dd62 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de52:	6863      	ldr	r3, [r4, #4]
 800de54:	4d66      	ldr	r5, [pc, #408]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800de56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de5a:	d113      	bne.n	800de84 <HAL_RCC_OscConfig+0x128>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800de64:	f7fb ffda 	bl	8009e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de68:	4e61      	ldr	r6, [pc, #388]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800de6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de6c:	6833      	ldr	r3, [r6, #0]
 800de6e:	039b      	lsls	r3, r3, #14
 800de70:	f53f af7c 	bmi.w	800dd6c <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800de74:	f7fb ffd2 	bl	8009e1c <HAL_GetTick>
 800de78:	1b40      	subs	r0, r0, r5
 800de7a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800de7e:	d9f5      	bls.n	800de6c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800de80:	2003      	movs	r0, #3
}
 800de82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de84:	b9ab      	cbnz	r3, 800deb2 <HAL_RCC_OscConfig+0x156>
 800de86:	682b      	ldr	r3, [r5, #0]
 800de88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de8c:	602b      	str	r3, [r5, #0]
 800de8e:	682b      	ldr	r3, [r5, #0]
 800de90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800de96:	f7fb ffc1 	bl	8009e1c <HAL_GetTick>
 800de9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	039f      	lsls	r7, r3, #14
 800dea0:	f57f af64 	bpl.w	800dd6c <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dea4:	f7fb ffba 	bl	8009e1c <HAL_GetTick>
 800dea8:	1b80      	subs	r0, r0, r6
 800deaa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800deae:	d9f5      	bls.n	800de9c <HAL_RCC_OscConfig+0x140>
 800deb0:	e7e6      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800deb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	d103      	bne.n	800dec2 <HAL_RCC_OscConfig+0x166>
 800deba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800debe:	602b      	str	r3, [r5, #0]
 800dec0:	e7cc      	b.n	800de5c <HAL_RCC_OscConfig+0x100>
 800dec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dec6:	602b      	str	r3, [r5, #0]
 800dec8:	682b      	ldr	r3, [r5, #0]
 800deca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dece:	e7c8      	b.n	800de62 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ded0:	4947      	ldr	r1, [pc, #284]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800ded2:	68e2      	ldr	r2, [r4, #12]
 800ded4:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ded6:	6a88      	ldr	r0, [r1, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ded8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800dedc:	d003      	beq.n	800dee6 <HAL_RCC_OscConfig+0x18a>
 800dede:	2b18      	cmp	r3, #24
 800dee0:	d12b      	bne.n	800df3a <HAL_RCC_OscConfig+0x1de>
 800dee2:	0780      	lsls	r0, r0, #30
 800dee4:	d129      	bne.n	800df3a <HAL_RCC_OscConfig+0x1de>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dee6:	680b      	ldr	r3, [r1, #0]
 800dee8:	075b      	lsls	r3, r3, #29
 800deea:	d502      	bpl.n	800def2 <HAL_RCC_OscConfig+0x196>
 800deec:	2a00      	cmp	r2, #0
 800deee:	f43f af38 	beq.w	800dd62 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800def2:	4d3f      	ldr	r5, [pc, #252]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	f023 0319 	bic.w	r3, r3, #25
 800defa:	4313      	orrs	r3, r2
 800defc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800defe:	f7fb ff8d 	bl	8009e1c <HAL_GetTick>
 800df02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	075f      	lsls	r7, r3, #29
 800df08:	d511      	bpl.n	800df2e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df0a:	f7fb ff9f 	bl	8009e4c <HAL_GetREVID>
 800df0e:	f241 0303 	movw	r3, #4099	; 0x1003
 800df12:	6922      	ldr	r2, [r4, #16]
 800df14:	4298      	cmp	r0, r3
 800df16:	686b      	ldr	r3, [r5, #4]
 800df18:	d822      	bhi.n	800df60 <HAL_RCC_OscConfig+0x204>
 800df1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800df1e:	2a40      	cmp	r2, #64	; 0x40
 800df20:	bf0c      	ite	eq
 800df22:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800df26:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800df2a:	606b      	str	r3, [r5, #4]
 800df2c:	e722      	b.n	800dd74 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df2e:	f7fb ff75 	bl	8009e1c <HAL_GetTick>
 800df32:	1b80      	subs	r0, r0, r6
 800df34:	2802      	cmp	r0, #2
 800df36:	d9e5      	bls.n	800df04 <HAL_RCC_OscConfig+0x1a8>
 800df38:	e7a2      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800df3a:	4d2d      	ldr	r5, [pc, #180]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800df3c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800df3e:	b1a2      	cbz	r2, 800df6a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800df40:	f023 0319 	bic.w	r3, r3, #25
 800df44:	4313      	orrs	r3, r2
 800df46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800df48:	f7fb ff68 	bl	8009e1c <HAL_GetTick>
 800df4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	0758      	lsls	r0, r3, #29
 800df52:	d4da      	bmi.n	800df0a <HAL_RCC_OscConfig+0x1ae>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df54:	f7fb ff62 	bl	8009e1c <HAL_GetTick>
 800df58:	1b80      	subs	r0, r0, r6
 800df5a:	2802      	cmp	r0, #2
 800df5c:	d9f7      	bls.n	800df4e <HAL_RCC_OscConfig+0x1f2>
 800df5e:	e78f      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df60:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800df64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800df68:	e7df      	b.n	800df2a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_DISABLE();
 800df6a:	f023 0301 	bic.w	r3, r3, #1
 800df6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800df70:	f7fb ff54 	bl	8009e1c <HAL_GetTick>
 800df74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800df76:	682b      	ldr	r3, [r5, #0]
 800df78:	0759      	lsls	r1, r3, #29
 800df7a:	f57f aefb 	bpl.w	800dd74 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800df7e:	f7fb ff4d 	bl	8009e1c <HAL_GetTick>
 800df82:	1b80      	subs	r0, r0, r6
 800df84:	2802      	cmp	r0, #2
 800df86:	d9f6      	bls.n	800df76 <HAL_RCC_OscConfig+0x21a>
 800df88:	e77a      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800df8a:	68da      	ldr	r2, [r3, #12]
 800df8c:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800df90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800df94:	60da      	str	r2, [r3, #12]
 800df96:	e718      	b.n	800ddca <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800df98:	69e3      	ldr	r3, [r4, #28]
 800df9a:	4d15      	ldr	r5, [pc, #84]	; (800dff0 <HAL_RCC_OscConfig+0x294>)
 800df9c:	b363      	cbz	r3, 800dff8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_CSI_ENABLE();
 800df9e:	682b      	ldr	r3, [r5, #0]
 800dfa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dfa6:	f7fb ff39 	bl	8009e1c <HAL_GetTick>
 800dfaa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	05df      	lsls	r7, r3, #23
 800dfb0:	d511      	bpl.n	800dfd6 <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dfb2:	f7fb ff4b 	bl	8009e4c <HAL_GetREVID>
 800dfb6:	f241 0303 	movw	r3, #4099	; 0x1003
 800dfba:	6a22      	ldr	r2, [r4, #32]
 800dfbc:	4298      	cmp	r0, r3
 800dfbe:	d810      	bhi.n	800dfe2 <HAL_RCC_OscConfig+0x286>
 800dfc0:	686b      	ldr	r3, [r5, #4]
 800dfc2:	2a20      	cmp	r2, #32
 800dfc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dfc8:	bf0c      	ite	eq
 800dfca:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800dfce:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800dfd2:	606b      	str	r3, [r5, #4]
 800dfd4:	e6f9      	b.n	800ddca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dfd6:	f7fb ff21 	bl	8009e1c <HAL_GetTick>
 800dfda:	1b80      	subs	r0, r0, r6
 800dfdc:	2802      	cmp	r0, #2
 800dfde:	d9e5      	bls.n	800dfac <HAL_RCC_OscConfig+0x250>
 800dfe0:	e74e      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dfe2:	68eb      	ldr	r3, [r5, #12]
 800dfe4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800dfe8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dfec:	60eb      	str	r3, [r5, #12]
 800dfee:	e6ec      	b.n	800ddca <HAL_RCC_OscConfig+0x6e>
 800dff0:	58024400 	.word	0x58024400
 800dff4:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dffe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e000:	f7fb ff0c 	bl	8009e1c <HAL_GetTick>
 800e004:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e006:	682b      	ldr	r3, [r5, #0]
 800e008:	05d8      	lsls	r0, r3, #23
 800e00a:	f57f aede 	bpl.w	800ddca <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e00e:	f7fb ff05 	bl	8009e1c <HAL_GetTick>
 800e012:	1b80      	subs	r0, r0, r6
 800e014:	2802      	cmp	r0, #2
 800e016:	d9f6      	bls.n	800e006 <HAL_RCC_OscConfig+0x2aa>
 800e018:	e732      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e01a:	6963      	ldr	r3, [r4, #20]
 800e01c:	4da5      	ldr	r5, [pc, #660]	; (800e2b4 <HAL_RCC_OscConfig+0x558>)
 800e01e:	b183      	cbz	r3, 800e042 <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 800e020:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e022:	f043 0301 	orr.w	r3, r3, #1
 800e026:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e028:	f7fb fef8 	bl	8009e1c <HAL_GetTick>
 800e02c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e02e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e030:	079b      	lsls	r3, r3, #30
 800e032:	f53f aece 	bmi.w	800ddd2 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e036:	f7fb fef1 	bl	8009e1c <HAL_GetTick>
 800e03a:	1b80      	subs	r0, r0, r6
 800e03c:	2802      	cmp	r0, #2
 800e03e:	d9f6      	bls.n	800e02e <HAL_RCC_OscConfig+0x2d2>
 800e040:	e71e      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_LSI_DISABLE();
 800e042:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e044:	f023 0301 	bic.w	r3, r3, #1
 800e048:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800e04a:	f7fb fee7 	bl	8009e1c <HAL_GetTick>
 800e04e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e050:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800e052:	079f      	lsls	r7, r3, #30
 800e054:	f57f aebd 	bpl.w	800ddd2 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e058:	f7fb fee0 	bl	8009e1c <HAL_GetTick>
 800e05c:	1b80      	subs	r0, r0, r6
 800e05e:	2802      	cmp	r0, #2
 800e060:	d9f6      	bls.n	800e050 <HAL_RCC_OscConfig+0x2f4>
 800e062:	e70d      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e064:	69a3      	ldr	r3, [r4, #24]
 800e066:	4d93      	ldr	r5, [pc, #588]	; (800e2b4 <HAL_RCC_OscConfig+0x558>)
 800e068:	b183      	cbz	r3, 800e08c <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_HSI48_ENABLE();
 800e06a:	682b      	ldr	r3, [r5, #0]
 800e06c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e070:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800e072:	f7fb fed3 	bl	8009e1c <HAL_GetTick>
 800e076:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	0498      	lsls	r0, r3, #18
 800e07c:	f53f aead 	bmi.w	800ddda <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e080:	f7fb fecc 	bl	8009e1c <HAL_GetTick>
 800e084:	1b80      	subs	r0, r0, r6
 800e086:	2802      	cmp	r0, #2
 800e088:	d9f6      	bls.n	800e078 <HAL_RCC_OscConfig+0x31c>
 800e08a:	e6f9      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSI48_DISABLE();
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e092:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800e094:	f7fb fec2 	bl	8009e1c <HAL_GetTick>
 800e098:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e09a:	682b      	ldr	r3, [r5, #0]
 800e09c:	0499      	lsls	r1, r3, #18
 800e09e:	f57f ae9c 	bpl.w	800ddda <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e0a2:	f7fb febb 	bl	8009e1c <HAL_GetTick>
 800e0a6:	1b80      	subs	r0, r0, r6
 800e0a8:	2802      	cmp	r0, #2
 800e0aa:	d9f6      	bls.n	800e09a <HAL_RCC_OscConfig+0x33e>
 800e0ac:	e6e8      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0ae:	f7fb feb5 	bl	8009e1c <HAL_GetTick>
 800e0b2:	1b80      	subs	r0, r0, r6
 800e0b4:	2864      	cmp	r0, #100	; 0x64
 800e0b6:	f67f ae9b 	bls.w	800ddf0 <HAL_RCC_OscConfig+0x94>
 800e0ba:	e6e1      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e0bc:	b9b3      	cbnz	r3, 800e0ec <HAL_RCC_OscConfig+0x390>
 800e0be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0c0:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e0c4:	f023 0301 	bic.w	r3, r3, #1
 800e0c8:	672b      	str	r3, [r5, #112]	; 0x70
 800e0ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e0cc:	f023 0304 	bic.w	r3, r3, #4
 800e0d0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800e0d2:	f7fb fea3 	bl	8009e1c <HAL_GetTick>
 800e0d6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e0d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e0da:	0798      	lsls	r0, r3, #30
 800e0dc:	f57f ae9f 	bpl.w	800de1e <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0e0:	f7fb fe9c 	bl	8009e1c <HAL_GetTick>
 800e0e4:	1b80      	subs	r0, r0, r6
 800e0e6:	42b8      	cmp	r0, r7
 800e0e8:	d9f6      	bls.n	800e0d8 <HAL_RCC_OscConfig+0x37c>
 800e0ea:	e6c9      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e0ec:	2b05      	cmp	r3, #5
 800e0ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e0f0:	d103      	bne.n	800e0fa <HAL_RCC_OscConfig+0x39e>
 800e0f2:	f043 0304 	orr.w	r3, r3, #4
 800e0f6:	672b      	str	r3, [r5, #112]	; 0x70
 800e0f8:	e683      	b.n	800de02 <HAL_RCC_OscConfig+0xa6>
 800e0fa:	f023 0301 	bic.w	r3, r3, #1
 800e0fe:	672b      	str	r3, [r5, #112]	; 0x70
 800e100:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e102:	f023 0304 	bic.w	r3, r3, #4
 800e106:	e67f      	b.n	800de08 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e108:	f7fb fe88 	bl	8009e1c <HAL_GetTick>
 800e10c:	1b40      	subs	r0, r0, r5
 800e10e:	42b8      	cmp	r0, r7
 800e110:	f67f ae81 	bls.w	800de16 <HAL_RCC_OscConfig+0xba>
 800e114:	e6b4      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e116:	4d67      	ldr	r5, [pc, #412]	; (800e2b4 <HAL_RCC_OscConfig+0x558>)
 800e118:	692b      	ldr	r3, [r5, #16]
 800e11a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e11e:	2b18      	cmp	r3, #24
 800e120:	d07a      	beq.n	800e218 <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_PLL_DISABLE();
 800e122:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e124:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800e126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e12a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e12c:	d167      	bne.n	800e1fe <HAL_RCC_OscConfig+0x4a2>
        tickstart = HAL_GetTick();
 800e12e:	f7fb fe75 	bl	8009e1c <HAL_GetTick>
 800e132:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e134:	682b      	ldr	r3, [r5, #0]
 800e136:	0199      	lsls	r1, r3, #6
 800e138:	d45b      	bmi.n	800e1f2 <HAL_RCC_OscConfig+0x496>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e13a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e13c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e13e:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800e142:	f023 0303 	bic.w	r3, r3, #3
 800e146:	4313      	orrs	r3, r2
 800e148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e14a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800e14e:	62ab      	str	r3, [r5, #40]	; 0x28
 800e150:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e154:	3b01      	subs	r3, #1
 800e156:	3a01      	subs	r2, #1
 800e158:	025b      	lsls	r3, r3, #9
 800e15a:	0412      	lsls	r2, r2, #16
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800e162:	4313      	orrs	r3, r2
 800e164:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e166:	3a01      	subs	r2, #1
 800e168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e16c:	4313      	orrs	r3, r2
 800e16e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e170:	3a01      	subs	r2, #1
 800e172:	0612      	lsls	r2, r2, #24
 800e174:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e178:	4313      	orrs	r3, r2
 800e17a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800e17c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e17e:	f023 0301 	bic.w	r3, r3, #1
 800e182:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e184:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e186:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e188:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e18c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e190:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e194:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e196:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e198:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e19a:	f023 030c 	bic.w	r3, r3, #12
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e1a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e1a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e1a6:	f023 0302 	bic.w	r3, r3, #2
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e1ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e1b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1b4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e1b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1bc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e1be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e1c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e1c4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800e1c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e1c8:	f043 0301 	orr.w	r3, r3, #1
 800e1cc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800e1ce:	682b      	ldr	r3, [r5, #0]
 800e1d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e1d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e1d6:	f7fb fe21 	bl	8009e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e1da:	4d36      	ldr	r5, [pc, #216]	; (800e2b4 <HAL_RCC_OscConfig+0x558>)
        tickstart = HAL_GetTick();
 800e1dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e1de:	682b      	ldr	r3, [r5, #0]
 800e1e0:	019a      	lsls	r2, r3, #6
 800e1e2:	f53f ae20 	bmi.w	800de26 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1e6:	f7fb fe19 	bl	8009e1c <HAL_GetTick>
 800e1ea:	1b00      	subs	r0, r0, r4
 800e1ec:	2802      	cmp	r0, #2
 800e1ee:	d9f6      	bls.n	800e1de <HAL_RCC_OscConfig+0x482>
 800e1f0:	e646      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1f2:	f7fb fe13 	bl	8009e1c <HAL_GetTick>
 800e1f6:	1b80      	subs	r0, r0, r6
 800e1f8:	2802      	cmp	r0, #2
 800e1fa:	d99b      	bls.n	800e134 <HAL_RCC_OscConfig+0x3d8>
 800e1fc:	e640      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
        tickstart = HAL_GetTick();
 800e1fe:	f7fb fe0d 	bl	8009e1c <HAL_GetTick>
 800e202:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e204:	682b      	ldr	r3, [r5, #0]
 800e206:	019b      	lsls	r3, r3, #6
 800e208:	f57f ae0d 	bpl.w	800de26 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e20c:	f7fb fe06 	bl	8009e1c <HAL_GetTick>
 800e210:	1b00      	subs	r0, r0, r4
 800e212:	2802      	cmp	r0, #2
 800e214:	d9f6      	bls.n	800e204 <HAL_RCC_OscConfig+0x4a8>
 800e216:	e633      	b.n	800de80 <HAL_RCC_OscConfig+0x124>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e218:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e21a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e21c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e21e:	f43f ae30 	beq.w	800de82 <HAL_RCC_OscConfig+0x126>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e222:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e226:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e228:	4281      	cmp	r1, r0
 800e22a:	f47f ad9a 	bne.w	800dd62 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e22e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e232:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e234:	428a      	cmp	r2, r1
 800e236:	f47f ad94 	bne.w	800dd62 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e23a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e23c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800e240:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e242:	4291      	cmp	r1, r2
 800e244:	f47f ad8d 	bne.w	800dd62 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e248:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e24a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800e24e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e250:	4291      	cmp	r1, r2
 800e252:	f47f ad86 	bne.w	800dd62 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e256:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e258:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800e25c:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e25e:	4291      	cmp	r1, r2
 800e260:	f47f ad7f 	bne.w	800dd62 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e264:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e266:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800e26a:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e26c:	4293      	cmp	r3, r2
 800e26e:	f47f ad78 	bne.w	800dd62 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e272:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e274:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e276:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e27a:	429a      	cmp	r2, r3
 800e27c:	f43f add3 	beq.w	800de26 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 800e280:	4d0c      	ldr	r5, [pc, #48]	; (800e2b4 <HAL_RCC_OscConfig+0x558>)
 800e282:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e284:	f023 0301 	bic.w	r3, r3, #1
 800e288:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800e28a:	f7fb fdc7 	bl	8009e1c <HAL_GetTick>
 800e28e:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e290:	f7fb fdc4 	bl	8009e1c <HAL_GetTick>
 800e294:	42b0      	cmp	r0, r6
 800e296:	d0fb      	beq.n	800e290 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e298:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e29a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e29c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e2a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e2a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e2a8:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800e2aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e2ac:	f043 0301 	orr.w	r3, r3, #1
 800e2b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800e2b2:	e5b8      	b.n	800de26 <HAL_RCC_OscConfig+0xca>
 800e2b4:	58024400 	.word	0x58024400

0800e2b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	4c23      	ldr	r4, [pc, #140]	; (800e348 <HAL_RCC_MCOConfig+0x90>)
 800e2bc:	b088      	sub	sp, #32
 800e2be:	460e      	mov	r6, r1
 800e2c0:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800e2c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800e2c6:	b9f8      	cbnz	r0, 800e308 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800e2c8:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2cc:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800e2d0:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800e2d2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800e2d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800e2da:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	9301      	str	r3, [sp, #4]
 800e2e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2ea:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ec:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800e2f0:	4816      	ldr	r0, [pc, #88]	; (800e34c <HAL_RCC_MCOConfig+0x94>)
 800e2f2:	f7fc fda7 	bl	800ae44 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800e2f6:	6923      	ldr	r3, [r4, #16]
 800e2f8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800e2fc:	ea43 0106 	orr.w	r1, r3, r6
 800e300:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800e302:	6121      	str	r1, [r4, #16]
  }
}
 800e304:	b008      	add	sp, #32
 800e306:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800e308:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e30c:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e310:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e312:	480f      	ldr	r0, [pc, #60]	; (800e350 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800e314:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800e318:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e31c:	f003 0304 	and.w	r3, r3, #4
 800e320:	9302      	str	r3, [sp, #8]
 800e322:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e324:	2302      	movs	r3, #2
 800e326:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e330:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800e332:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e334:	f7fc fd86 	bl	800ae44 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800e33e:	ea43 0106 	orr.w	r1, r3, r6
 800e342:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800e346:	e7dc      	b.n	800e302 <HAL_RCC_MCOConfig+0x4a>
 800e348:	58024400 	.word	0x58024400
 800e34c:	58020000 	.word	0x58020000
 800e350:	58020800 	.word	0x58020800

0800e354 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e354:	4b49      	ldr	r3, [pc, #292]	; (800e47c <HAL_RCC_GetSysClockFreq+0x128>)
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800e35c:	2a10      	cmp	r2, #16
{
 800e35e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e360:	f000 8088 	beq.w	800e474 <HAL_RCC_GetSysClockFreq+0x120>
 800e364:	2a18      	cmp	r2, #24
 800e366:	d00c      	beq.n	800e382 <HAL_RCC_GetSysClockFreq+0x2e>
 800e368:	2a00      	cmp	r2, #0
 800e36a:	f040 8085 	bne.w	800e478 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	4843      	ldr	r0, [pc, #268]	; (800e480 <HAL_RCC_GetSysClockFreq+0x12c>)
 800e372:	f012 0f20 	tst.w	r2, #32
 800e376:	d003      	beq.n	800e380 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e37e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800e380:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e382:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e384:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e386:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 800e388:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e38c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800e392:	d0f5      	beq.n	800e380 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e394:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e398:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e39c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3a0:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e3a4:	4362      	muls	r2, r4
 800e3a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e3aa:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e3b0:	ee06 2a90 	vmov	s13, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3b4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800e3b8:	d04e      	beq.n	800e458 <HAL_RCC_GetSysClockFreq+0x104>
 800e3ba:	2902      	cmp	r1, #2
 800e3bc:	d03e      	beq.n	800e43c <HAL_RCC_GetSysClockFreq+0xe8>
 800e3be:	2900      	cmp	r1, #0
 800e3c0:	d14a      	bne.n	800e458 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	0692      	lsls	r2, r2, #26
 800e3c6:	d527      	bpl.n	800e418 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3c8:	6819      	ldr	r1, [r3, #0]
 800e3ca:	4a2d      	ldr	r2, [pc, #180]	; (800e480 <HAL_RCC_GetSysClockFreq+0x12c>)
 800e3cc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3d2:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3d8:	ee07 2a90 	vmov	s15, r2
 800e3dc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800e3e0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800e3e4:	ee07 3a10 	vmov	s14, r3
 800e3e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3ec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e3f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e3f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e3f8:	4b20      	ldr	r3, [pc, #128]	; (800e47c <HAL_RCC_GetSysClockFreq+0x128>)
 800e3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e400:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e402:	ee07 3a10 	vmov	s14, r3
 800e406:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e40a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e40e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e412:	ee17 0a90 	vmov	r0, s15
 800e416:	e7b3      	b.n	800e380 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e41e:	ee07 3a90 	vmov	s15, r3
 800e422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e42a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e42e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e484 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e432:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800e436:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800e43a:	e7dd      	b.n	800e3f8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e442:	ee07 3a90 	vmov	s15, r3
 800e446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e44e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e452:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800e488 <HAL_RCC_GetSysClockFreq+0x134>
 800e456:	e7ec      	b.n	800e432 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e45e:	ee07 3a90 	vmov	s15, r3
 800e462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e46a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e46e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800e48c <HAL_RCC_GetSysClockFreq+0x138>
 800e472:	e7de      	b.n	800e432 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e474:	4806      	ldr	r0, [pc, #24]	; (800e490 <HAL_RCC_GetSysClockFreq+0x13c>)
 800e476:	e783      	b.n	800e380 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800e478:	4806      	ldr	r0, [pc, #24]	; (800e494 <HAL_RCC_GetSysClockFreq+0x140>)
 800e47a:	e781      	b.n	800e380 <HAL_RCC_GetSysClockFreq+0x2c>
 800e47c:	58024400 	.word	0x58024400
 800e480:	03d09000 	.word	0x03d09000
 800e484:	4c742400 	.word	0x4c742400
 800e488:	4b742400 	.word	0x4b742400
 800e48c:	4a742400 	.word	0x4a742400
 800e490:	00f42400 	.word	0x00f42400
 800e494:	003d0900 	.word	0x003d0900

0800e498 <HAL_RCC_ClockConfig>:
{
 800e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800e49e:	4604      	mov	r4, r0
 800e4a0:	b910      	cbnz	r0, 800e4a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800e4a2:	2001      	movs	r0, #1
}
 800e4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e4a8:	4a88      	ldr	r2, [pc, #544]	; (800e6cc <HAL_RCC_ClockConfig+0x234>)
 800e4aa:	6813      	ldr	r3, [r2, #0]
 800e4ac:	f003 030f 	and.w	r3, r3, #15
 800e4b0:	428b      	cmp	r3, r1
 800e4b2:	f0c0 8093 	bcc.w	800e5dc <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	075f      	lsls	r7, r3, #29
 800e4ba:	f100 809b 	bmi.w	800e5f4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e4be:	071e      	lsls	r6, r3, #28
 800e4c0:	d50b      	bpl.n	800e4da <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e4c2:	4983      	ldr	r1, [pc, #524]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e4c4:	6960      	ldr	r0, [r4, #20]
 800e4c6:	69ca      	ldr	r2, [r1, #28]
 800e4c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e4cc:	4290      	cmp	r0, r2
 800e4ce:	d904      	bls.n	800e4da <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e4d0:	69ca      	ldr	r2, [r1, #28]
 800e4d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e4d6:	4302      	orrs	r2, r0
 800e4d8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e4da:	06d8      	lsls	r0, r3, #27
 800e4dc:	d50b      	bpl.n	800e4f6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e4de:	497c      	ldr	r1, [pc, #496]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e4e0:	69a0      	ldr	r0, [r4, #24]
 800e4e2:	69ca      	ldr	r2, [r1, #28]
 800e4e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800e4e8:	4290      	cmp	r0, r2
 800e4ea:	d904      	bls.n	800e4f6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e4ec:	69ca      	ldr	r2, [r1, #28]
 800e4ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e4f2:	4302      	orrs	r2, r0
 800e4f4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e4f6:	0699      	lsls	r1, r3, #26
 800e4f8:	d50b      	bpl.n	800e512 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e4fa:	4975      	ldr	r1, [pc, #468]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e4fc:	69e0      	ldr	r0, [r4, #28]
 800e4fe:	6a0a      	ldr	r2, [r1, #32]
 800e500:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e504:	4290      	cmp	r0, r2
 800e506:	d904      	bls.n	800e512 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e508:	6a0a      	ldr	r2, [r1, #32]
 800e50a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e50e:	4302      	orrs	r2, r0
 800e510:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e512:	079a      	lsls	r2, r3, #30
 800e514:	d50b      	bpl.n	800e52e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e516:	496e      	ldr	r1, [pc, #440]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e518:	68e0      	ldr	r0, [r4, #12]
 800e51a:	698a      	ldr	r2, [r1, #24]
 800e51c:	f002 020f 	and.w	r2, r2, #15
 800e520:	4290      	cmp	r0, r2
 800e522:	d904      	bls.n	800e52e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e524:	698a      	ldr	r2, [r1, #24]
 800e526:	f022 020f 	bic.w	r2, r2, #15
 800e52a:	4302      	orrs	r2, r0
 800e52c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e52e:	07df      	lsls	r7, r3, #31
 800e530:	d46e      	bmi.n	800e610 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	079e      	lsls	r6, r3, #30
 800e536:	f100 80a1 	bmi.w	800e67c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e53a:	4964      	ldr	r1, [pc, #400]	; (800e6cc <HAL_RCC_ClockConfig+0x234>)
 800e53c:	680a      	ldr	r2, [r1, #0]
 800e53e:	f002 020f 	and.w	r2, r2, #15
 800e542:	42aa      	cmp	r2, r5
 800e544:	f200 80a8 	bhi.w	800e698 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e548:	0758      	lsls	r0, r3, #29
 800e54a:	f100 80b1 	bmi.w	800e6b0 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e54e:	0719      	lsls	r1, r3, #28
 800e550:	d50b      	bpl.n	800e56a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e552:	495f      	ldr	r1, [pc, #380]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e554:	6960      	ldr	r0, [r4, #20]
 800e556:	69ca      	ldr	r2, [r1, #28]
 800e558:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e55c:	4290      	cmp	r0, r2
 800e55e:	d204      	bcs.n	800e56a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e560:	69ca      	ldr	r2, [r1, #28]
 800e562:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e566:	4302      	orrs	r2, r0
 800e568:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e56a:	06da      	lsls	r2, r3, #27
 800e56c:	d50b      	bpl.n	800e586 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e56e:	4958      	ldr	r1, [pc, #352]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e570:	69a0      	ldr	r0, [r4, #24]
 800e572:	69ca      	ldr	r2, [r1, #28]
 800e574:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800e578:	4290      	cmp	r0, r2
 800e57a:	d204      	bcs.n	800e586 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e57c:	69ca      	ldr	r2, [r1, #28]
 800e57e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e582:	4302      	orrs	r2, r0
 800e584:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e586:	069b      	lsls	r3, r3, #26
 800e588:	d50b      	bpl.n	800e5a2 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e58a:	4a51      	ldr	r2, [pc, #324]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e58c:	69e1      	ldr	r1, [r4, #28]
 800e58e:	6a13      	ldr	r3, [r2, #32]
 800e590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e594:	4299      	cmp	r1, r3
 800e596:	d204      	bcs.n	800e5a2 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e598:	6a13      	ldr	r3, [r2, #32]
 800e59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e59e:	430b      	orrs	r3, r1
 800e5a0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e5a2:	f7ff fed7 	bl	800e354 <HAL_RCC_GetSysClockFreq>
 800e5a6:	494a      	ldr	r1, [pc, #296]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e5a8:	4a4a      	ldr	r2, [pc, #296]	; (800e6d4 <HAL_RCC_ClockConfig+0x23c>)
 800e5aa:	698b      	ldr	r3, [r1, #24]
 800e5ac:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800e5b0:	5cd3      	ldrb	r3, [r2, r3]
 800e5b2:	f003 031f 	and.w	r3, r3, #31
 800e5b6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e5b8:	698b      	ldr	r3, [r1, #24]
 800e5ba:	f003 030f 	and.w	r3, r3, #15
 800e5be:	5cd3      	ldrb	r3, [r2, r3]
 800e5c0:	4a45      	ldr	r2, [pc, #276]	; (800e6d8 <HAL_RCC_ClockConfig+0x240>)
 800e5c2:	f003 031f 	and.w	r3, r3, #31
 800e5c6:	fa20 f303 	lsr.w	r3, r0, r3
 800e5ca:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800e5cc:	4b43      	ldr	r3, [pc, #268]	; (800e6dc <HAL_RCC_ClockConfig+0x244>)
 800e5ce:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800e5d0:	4b43      	ldr	r3, [pc, #268]	; (800e6e0 <HAL_RCC_ClockConfig+0x248>)
}
 800e5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800e5d6:	6818      	ldr	r0, [r3, #0]
 800e5d8:	f7f4 b81a 	b.w	8002610 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5dc:	6813      	ldr	r3, [r2, #0]
 800e5de:	f023 030f 	bic.w	r3, r3, #15
 800e5e2:	430b      	orrs	r3, r1
 800e5e4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5e6:	6813      	ldr	r3, [r2, #0]
 800e5e8:	f003 030f 	and.w	r3, r3, #15
 800e5ec:	428b      	cmp	r3, r1
 800e5ee:	f47f af58 	bne.w	800e4a2 <HAL_RCC_ClockConfig+0xa>
 800e5f2:	e760      	b.n	800e4b6 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e5f4:	4936      	ldr	r1, [pc, #216]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e5f6:	6920      	ldr	r0, [r4, #16]
 800e5f8:	698a      	ldr	r2, [r1, #24]
 800e5fa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e5fe:	4290      	cmp	r0, r2
 800e600:	f67f af5d 	bls.w	800e4be <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e604:	698a      	ldr	r2, [r1, #24]
 800e606:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e60a:	4302      	orrs	r2, r0
 800e60c:	618a      	str	r2, [r1, #24]
 800e60e:	e756      	b.n	800e4be <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e610:	4b2f      	ldr	r3, [pc, #188]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e612:	68a1      	ldr	r1, [r4, #8]
 800e614:	699a      	ldr	r2, [r3, #24]
 800e616:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800e61a:	430a      	orrs	r2, r1
 800e61c:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e61e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e620:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e622:	2902      	cmp	r1, #2
 800e624:	d11d      	bne.n	800e662 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e626:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e62a:	f43f af3a 	beq.w	800e4a2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e62e:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e630:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e634:	4f26      	ldr	r7, [pc, #152]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e636:	f022 0207 	bic.w	r2, r2, #7
 800e63a:	430a      	orrs	r2, r1
 800e63c:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800e63e:	f7fb fbed 	bl	8009e1c <HAL_GetTick>
 800e642:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	6862      	ldr	r2, [r4, #4]
 800e648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e64c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800e650:	f43f af6f 	beq.w	800e532 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e654:	f7fb fbe2 	bl	8009e1c <HAL_GetTick>
 800e658:	1b80      	subs	r0, r0, r6
 800e65a:	4540      	cmp	r0, r8
 800e65c:	d9f2      	bls.n	800e644 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800e65e:	2003      	movs	r0, #3
 800e660:	e720      	b.n	800e4a4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e662:	2903      	cmp	r1, #3
 800e664:	d102      	bne.n	800e66c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e666:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800e66a:	e7de      	b.n	800e62a <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e66c:	2901      	cmp	r1, #1
 800e66e:	d102      	bne.n	800e676 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e670:	f412 7f80 	tst.w	r2, #256	; 0x100
 800e674:	e7d9      	b.n	800e62a <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e676:	f012 0f04 	tst.w	r2, #4
 800e67a:	e7d6      	b.n	800e62a <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e67c:	4914      	ldr	r1, [pc, #80]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e67e:	68e0      	ldr	r0, [r4, #12]
 800e680:	698a      	ldr	r2, [r1, #24]
 800e682:	f002 020f 	and.w	r2, r2, #15
 800e686:	4290      	cmp	r0, r2
 800e688:	f4bf af57 	bcs.w	800e53a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e68c:	698a      	ldr	r2, [r1, #24]
 800e68e:	f022 020f 	bic.w	r2, r2, #15
 800e692:	4302      	orrs	r2, r0
 800e694:	618a      	str	r2, [r1, #24]
 800e696:	e750      	b.n	800e53a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e698:	680a      	ldr	r2, [r1, #0]
 800e69a:	f022 020f 	bic.w	r2, r2, #15
 800e69e:	432a      	orrs	r2, r5
 800e6a0:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6a2:	680a      	ldr	r2, [r1, #0]
 800e6a4:	f002 020f 	and.w	r2, r2, #15
 800e6a8:	42aa      	cmp	r2, r5
 800e6aa:	f47f aefa 	bne.w	800e4a2 <HAL_RCC_ClockConfig+0xa>
 800e6ae:	e74b      	b.n	800e548 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e6b0:	4907      	ldr	r1, [pc, #28]	; (800e6d0 <HAL_RCC_ClockConfig+0x238>)
 800e6b2:	6920      	ldr	r0, [r4, #16]
 800e6b4:	698a      	ldr	r2, [r1, #24]
 800e6b6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e6ba:	4290      	cmp	r0, r2
 800e6bc:	f4bf af47 	bcs.w	800e54e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e6c0:	698a      	ldr	r2, [r1, #24]
 800e6c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e6c6:	4302      	orrs	r2, r0
 800e6c8:	618a      	str	r2, [r1, #24]
 800e6ca:	e740      	b.n	800e54e <HAL_RCC_ClockConfig+0xb6>
 800e6cc:	52002000 	.word	0x52002000
 800e6d0:	58024400 	.word	0x58024400
 800e6d4:	0802f354 	.word	0x0802f354
 800e6d8:	24000034 	.word	0x24000034
 800e6dc:	24000030 	.word	0x24000030
 800e6e0:	2400003c 	.word	0x2400003c

0800e6e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e6e4:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e6e6:	4c0c      	ldr	r4, [pc, #48]	; (800e718 <HAL_RCC_GetHCLKFreq+0x34>)
 800e6e8:	f7ff fe34 	bl	800e354 <HAL_RCC_GetSysClockFreq>
 800e6ec:	490b      	ldr	r1, [pc, #44]	; (800e71c <HAL_RCC_GetHCLKFreq+0x38>)
 800e6ee:	69a3      	ldr	r3, [r4, #24]
 800e6f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800e6f4:	5ccb      	ldrb	r3, [r1, r3]
 800e6f6:	f003 031f 	and.w	r3, r3, #31
 800e6fa:	fa20 f203 	lsr.w	r2, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e6fe:	69a3      	ldr	r3, [r4, #24]
 800e700:	f003 030f 	and.w	r3, r3, #15
 800e704:	5ccb      	ldrb	r3, [r1, r3]
 800e706:	f003 031f 	and.w	r3, r3, #31
 800e70a:	fa22 f003 	lsr.w	r0, r2, r3
 800e70e:	4b04      	ldr	r3, [pc, #16]	; (800e720 <HAL_RCC_GetHCLKFreq+0x3c>)
 800e710:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e712:	4b04      	ldr	r3, [pc, #16]	; (800e724 <HAL_RCC_GetHCLKFreq+0x40>)
 800e714:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800e716:	bd10      	pop	{r4, pc}
 800e718:	58024400 	.word	0x58024400
 800e71c:	0802f354 	.word	0x0802f354
 800e720:	24000034 	.word	0x24000034
 800e724:	24000030 	.word	0x24000030

0800e728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e728:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e72a:	f7ff ffdb 	bl	800e6e4 <HAL_RCC_GetHCLKFreq>
 800e72e:	4b05      	ldr	r3, [pc, #20]	; (800e744 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e730:	4a05      	ldr	r2, [pc, #20]	; (800e748 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e732:	69db      	ldr	r3, [r3, #28]
 800e734:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e738:	5cd3      	ldrb	r3, [r2, r3]
 800e73a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e73e:	40d8      	lsrs	r0, r3
 800e740:	bd08      	pop	{r3, pc}
 800e742:	bf00      	nop
 800e744:	58024400 	.word	0x58024400
 800e748:	0802f354 	.word	0x0802f354

0800e74c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e74c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e74e:	f7ff ffc9 	bl	800e6e4 <HAL_RCC_GetHCLKFreq>
 800e752:	4b05      	ldr	r3, [pc, #20]	; (800e768 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e754:	4a05      	ldr	r2, [pc, #20]	; (800e76c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e75c:	5cd3      	ldrb	r3, [r2, r3]
 800e75e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e762:	40d8      	lsrs	r0, r3
 800e764:	bd08      	pop	{r3, pc}
 800e766:	bf00      	nop
 800e768:	58024400 	.word	0x58024400
 800e76c:	0802f354 	.word	0x0802f354

0800e770 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e770:	233f      	movs	r3, #63	; 0x3f
 800e772:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e774:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <HAL_RCC_GetClockConfig+0x4c>)
 800e776:	691a      	ldr	r2, [r3, #16]
 800e778:	f002 0207 	and.w	r2, r2, #7
 800e77c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e77e:	699a      	ldr	r2, [r3, #24]
 800e780:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800e784:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e786:	699a      	ldr	r2, [r3, #24]
 800e788:	f002 020f 	and.w	r2, r2, #15
 800e78c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e78e:	699a      	ldr	r2, [r3, #24]
 800e790:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e794:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e796:	69da      	ldr	r2, [r3, #28]
 800e798:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800e79c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e79e:	69da      	ldr	r2, [r3, #28]
 800e7a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800e7a4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e7ac:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e7ae:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <HAL_RCC_GetClockConfig+0x50>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f003 030f 	and.w	r3, r3, #15
 800e7b6:	600b      	str	r3, [r1, #0]
}
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	58024400 	.word	0x58024400
 800e7c0:	52002000 	.word	0x52002000

0800e7c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7c6:	4c3a      	ldr	r4, [pc, #232]	; (800e8b0 <RCCEx_PLL2_Config+0xec>)
{
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e7ce:	f003 0303 	and.w	r3, r3, #3
 800e7d2:	2b03      	cmp	r3, #3
 800e7d4:	d069      	beq.n	800e8aa <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e7dc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7de:	f7fb fb1d 	bl	8009e1c <HAL_GetTick>
 800e7e2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	011a      	lsls	r2, r3, #4
 800e7e8:	d44b      	bmi.n	800e882 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e7ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e7ec:	6832      	ldr	r2, [r6, #0]
 800e7ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e7f2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e7f6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7f8:	68b3      	ldr	r3, [r6, #8]
 800e7fa:	68f2      	ldr	r2, [r6, #12]
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	3a01      	subs	r2, #1
 800e800:	025b      	lsls	r3, r3, #9
 800e802:	0412      	lsls	r2, r2, #16
 800e804:	b29b      	uxth	r3, r3
 800e806:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800e80a:	4313      	orrs	r3, r2
 800e80c:	6872      	ldr	r2, [r6, #4]
 800e80e:	3a01      	subs	r2, #1
 800e810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e814:	4313      	orrs	r3, r2
 800e816:	6932      	ldr	r2, [r6, #16]
 800e818:	3a01      	subs	r2, #1
 800e81a:	0612      	lsls	r2, r2, #24
 800e81c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e820:	4313      	orrs	r3, r2
 800e822:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e826:	6972      	ldr	r2, [r6, #20]
 800e828:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e82c:	4313      	orrs	r3, r2
 800e82e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e832:	69b2      	ldr	r2, [r6, #24]
 800e834:	f023 0320 	bic.w	r3, r3, #32
 800e838:	4313      	orrs	r3, r2
 800e83a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e83c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e83e:	f023 0310 	bic.w	r3, r3, #16
 800e842:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e846:	69f2      	ldr	r2, [r6, #28]
 800e848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e84c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e850:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e854:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e858:	f043 0310 	orr.w	r3, r3, #16
 800e85c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e85e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e860:	b9b5      	cbnz	r5, 800e890 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e866:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e868:	4c11      	ldr	r4, [pc, #68]	; (800e8b0 <RCCEx_PLL2_Config+0xec>)
 800e86a:	6823      	ldr	r3, [r4, #0]
 800e86c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e870:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e872:	f7fb fad3 	bl	8009e1c <HAL_GetTick>
 800e876:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	011b      	lsls	r3, r3, #4
 800e87c:	d50f      	bpl.n	800e89e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800e87e:	2000      	movs	r0, #0
 800e880:	e005      	b.n	800e88e <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e882:	f7fb facb 	bl	8009e1c <HAL_GetTick>
 800e886:	1bc0      	subs	r0, r0, r7
 800e888:	2802      	cmp	r0, #2
 800e88a:	d9ab      	bls.n	800e7e4 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800e88c:	2003      	movs	r0, #3
}
 800e88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e890:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e892:	bf0c      	ite	eq
 800e894:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e898:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800e89c:	e7e3      	b.n	800e866 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e89e:	f7fb fabd 	bl	8009e1c <HAL_GetTick>
 800e8a2:	1b40      	subs	r0, r0, r5
 800e8a4:	2802      	cmp	r0, #2
 800e8a6:	d9e7      	bls.n	800e878 <RCCEx_PLL2_Config+0xb4>
 800e8a8:	e7f0      	b.n	800e88c <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	e7ef      	b.n	800e88e <RCCEx_PLL2_Config+0xca>
 800e8ae:	bf00      	nop
 800e8b0:	58024400 	.word	0x58024400

0800e8b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8b6:	4c3a      	ldr	r4, [pc, #232]	; (800e9a0 <RCCEx_PLL3_Config+0xec>)
{
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8be:	f003 0303 	and.w	r3, r3, #3
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d069      	beq.n	800e99a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8ce:	f7fb faa5 	bl	8009e1c <HAL_GetTick>
 800e8d2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	009a      	lsls	r2, r3, #2
 800e8d8:	d44b      	bmi.n	800e972 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e8da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8dc:	6832      	ldr	r2, [r6, #0]
 800e8de:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800e8e2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e8e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8e8:	68b3      	ldr	r3, [r6, #8]
 800e8ea:	68f2      	ldr	r2, [r6, #12]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	3a01      	subs	r2, #1
 800e8f0:	025b      	lsls	r3, r3, #9
 800e8f2:	0412      	lsls	r2, r2, #16
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	6872      	ldr	r2, [r6, #4]
 800e8fe:	3a01      	subs	r2, #1
 800e900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e904:	4313      	orrs	r3, r2
 800e906:	6932      	ldr	r2, [r6, #16]
 800e908:	3a01      	subs	r2, #1
 800e90a:	0612      	lsls	r2, r2, #24
 800e90c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800e910:	4313      	orrs	r3, r2
 800e912:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e916:	6972      	ldr	r2, [r6, #20]
 800e918:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e91c:	4313      	orrs	r3, r2
 800e91e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e922:	69b2      	ldr	r2, [r6, #24]
 800e924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e928:	4313      	orrs	r3, r2
 800e92a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e92c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e92e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e932:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e934:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e936:	69f2      	ldr	r2, [r6, #28]
 800e938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e93c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e940:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e944:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e94c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e94e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e950:	b9b5      	cbnz	r5, 800e980 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e956:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e958:	4c11      	ldr	r4, [pc, #68]	; (800e9a0 <RCCEx_PLL3_Config+0xec>)
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e960:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e962:	f7fb fa5b 	bl	8009e1c <HAL_GetTick>
 800e966:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	d50f      	bpl.n	800e98e <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800e96e:	2000      	movs	r0, #0
 800e970:	e005      	b.n	800e97e <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e972:	f7fb fa53 	bl	8009e1c <HAL_GetTick>
 800e976:	1bc0      	subs	r0, r0, r7
 800e978:	2802      	cmp	r0, #2
 800e97a:	d9ab      	bls.n	800e8d4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800e97c:	2003      	movs	r0, #3
}
 800e97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e980:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e982:	bf0c      	ite	eq
 800e984:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e988:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800e98c:	e7e3      	b.n	800e956 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e98e:	f7fb fa45 	bl	8009e1c <HAL_GetTick>
 800e992:	1b40      	subs	r0, r0, r5
 800e994:	2802      	cmp	r0, #2
 800e996:	d9e7      	bls.n	800e968 <RCCEx_PLL3_Config+0xb4>
 800e998:	e7f0      	b.n	800e97c <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800e99a:	2001      	movs	r0, #1
 800e99c:	e7ef      	b.n	800e97e <RCCEx_PLL3_Config+0xca>
 800e99e:	bf00      	nop
 800e9a0:	58024400 	.word	0x58024400

0800e9a4 <HAL_RCCEx_PeriphCLKConfig>:
{
 800e9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e9a8:	6803      	ldr	r3, [r0, #0]
{
 800e9aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e9ac:	011c      	lsls	r4, r3, #4
 800e9ae:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800e9b2:	d509      	bpl.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e9b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e9b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e9ba:	d02e      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e9bc:	d813      	bhi.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800e9be:	b1f3      	cbz	r3, 800e9fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800e9c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9c4:	d021      	beq.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x66>
 800e9c6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	05d8      	lsls	r0, r3, #23
 800e9cc:	f140 8104 	bpl.w	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 800e9d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800e9d2:	2b04      	cmp	r3, #4
 800e9d4:	f200 80ff 	bhi.w	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800e9d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e9dc:	002b0024 	.word	0x002b0024
 800e9e0:	002900f7 	.word	0x002900f7
 800e9e4:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e9e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e9ea:	d1ec      	bne.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e9ec:	4aaa      	ldr	r2, [pc, #680]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e9ee:	2600      	movs	r6, #0
 800e9f0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800e9f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e9f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e9f8:	430b      	orrs	r3, r1
 800e9fa:	6513      	str	r3, [r2, #80]	; 0x50
 800e9fc:	e7e4      	b.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9fe:	4aa6      	ldr	r2, [pc, #664]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ea00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ea02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea06:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ea08:	e7f0      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ea0a:	2102      	movs	r1, #2
 800ea0c:	3008      	adds	r0, #8
 800ea0e:	f7ff fed9 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea12:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d1d7      	bne.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800ea18:	e7e8      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea1a:	2102      	movs	r1, #2
 800ea1c:	3028      	adds	r0, #40	; 0x28
 800ea1e:	f7ff ff49 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ea22:	e7f6      	b.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea24:	4a9c      	ldr	r2, [pc, #624]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ea26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ea28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ea2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 800ea2e:	4634      	mov	r4, r6
 800ea30:	e005      	b.n	800ea3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea32:	2100      	movs	r1, #0
 800ea34:	f105 0008 	add.w	r0, r5, #8
 800ea38:	f7ff fec4 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea3c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ea3e:	2c00      	cmp	r4, #0
 800ea40:	f040 80cc 	bne.w	800ebdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ea44:	4a94      	ldr	r2, [pc, #592]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ea46:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800ea48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ea4a:	f023 0307 	bic.w	r3, r3, #7
 800ea4e:	430b      	orrs	r3, r1
 800ea50:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	0599      	lsls	r1, r3, #22
 800ea56:	d50d      	bpl.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 800ea58:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800ea5a:	2b80      	cmp	r3, #128	; 0x80
 800ea5c:	f000 80dc 	beq.w	800ec18 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800ea60:	f200 80be 	bhi.w	800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 80ca 	beq.w	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800ea6a:	2b40      	cmp	r3, #64	; 0x40
 800ea6c:	f000 80cd 	beq.w	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800ea70:	2601      	movs	r6, #1
 800ea72:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ea74:	682b      	ldr	r3, [r5, #0]
 800ea76:	055a      	lsls	r2, r3, #21
 800ea78:	d510      	bpl.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ea7a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800ea7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea82:	f000 80ef 	beq.w	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800ea86:	f200 80cf 	bhi.w	800ec28 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80dd 	beq.w	800ec4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ea90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea94:	f000 80df 	beq.w	800ec56 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800ea98:	2601      	movs	r6, #1
 800ea9a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	051b      	lsls	r3, r3, #20
 800eaa0:	d510      	bpl.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 800eaa2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800eaa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaaa:	f000 8104 	beq.w	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800eaae:	f200 80e1 	bhi.w	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 80f2 	beq.w	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800eab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eabc:	f000 80f4 	beq.w	800eca8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800eac0:	2601      	movs	r6, #1
 800eac2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	019f      	lsls	r7, r3, #6
 800eac8:	d50d      	bpl.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 800eaca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800eacc:	2b20      	cmp	r3, #32
 800eace:	f000 810c 	beq.w	800ecea <HAL_RCCEx_PeriphCLKConfig+0x346>
 800ead2:	f200 80f8 	bhi.w	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 80f8 	beq.w	800eccc <HAL_RCCEx_PeriphCLKConfig+0x328>
 800eadc:	2b10      	cmp	r3, #16
 800eade:	f000 80fe 	beq.w	800ecde <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800eae2:	2601      	movs	r6, #1
 800eae4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800eae6:	682b      	ldr	r3, [r5, #0]
 800eae8:	04d8      	lsls	r0, r3, #19
 800eaea:	d50f      	bpl.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 800eaec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eaf2:	f000 8120 	beq.w	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800eaf6:	f200 8101 	bhi.w	800ecfc <HAL_RCCEx_PeriphCLKConfig+0x358>
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 810e 	beq.w	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800eb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb04:	f000 8110 	beq.w	800ed28 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800eb08:	2601      	movs	r6, #1
 800eb0a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800eb0c:	682b      	ldr	r3, [r5, #0]
 800eb0e:	0499      	lsls	r1, r3, #18
 800eb10:	d50f      	bpl.n	800eb32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 800eb12:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800eb14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb18:	f000 812e 	beq.w	800ed78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800eb1c:	f200 8113 	bhi.w	800ed46 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 8119 	beq.w	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800eb26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb2a:	f000 811e 	beq.w	800ed6a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800eb2e:	2601      	movs	r6, #1
 800eb30:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800eb32:	682b      	ldr	r3, [r5, #0]
 800eb34:	045a      	lsls	r2, r3, #17
 800eb36:	d510      	bpl.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 800eb38:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800eb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb40:	f000 813c 	beq.w	800edbc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800eb44:	f200 8120 	bhi.w	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 8126 	beq.w	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800eb4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb52:	f000 812c 	beq.w	800edae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800eb56:	2601      	movs	r6, #1
 800eb58:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800eb5a:	682b      	ldr	r3, [r5, #0]
 800eb5c:	015b      	lsls	r3, r3, #5
 800eb5e:	d515      	bpl.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 800eb60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800eb62:	b14b      	cbz	r3, 800eb78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800eb64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb68:	f040 8130 	bne.w	800edcc <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	f105 0008 	add.w	r0, r5, #8
 800eb72:	f7ff fe27 	bl	800e7c4 <RCCEx_PLL2_Config>
 800eb76:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800eb78:	2c00      	cmp	r4, #0
 800eb7a:	f040 812a 	bne.w	800edd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800eb7e:	4a46      	ldr	r2, [pc, #280]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800eb80:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800eb82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800eb84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb88:	430b      	orrs	r3, r1
 800eb8a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	041f      	lsls	r7, r3, #16
 800eb90:	d50d      	bpl.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 800eb92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800eb94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb98:	f000 811d 	beq.w	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800eb9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eba0:	f000 8127 	beq.w	800edf2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 811b 	beq.w	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800ebaa:	2601      	movs	r6, #1
 800ebac:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ebae:	682b      	ldr	r3, [r5, #0]
 800ebb0:	01d8      	lsls	r0, r3, #7
 800ebb2:	f140 8135 	bpl.w	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 800ebb6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800ebb8:	2b03      	cmp	r3, #3
 800ebba:	f200 8176 	bhi.w	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ebbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ebc2:	0126      	.short	0x0126
 800ebc4:	016d0121 	.word	0x016d0121
 800ebc8:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebca:	2100      	movs	r1, #0
 800ebcc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ebd0:	f7ff fe70 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ebd4:	e732      	b.n	800ea3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ebd6:	2601      	movs	r6, #1
 800ebd8:	4634      	mov	r4, r6
 800ebda:	e73a      	b.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0xae>
 800ebdc:	4626      	mov	r6, r4
 800ebde:	e738      	b.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800ebe0:	2bc0      	cmp	r3, #192	; 0xc0
 800ebe2:	d003      	beq.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x248>
 800ebe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebe8:	f47f af42 	bne.w	800ea70 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800ebec:	b9d4      	cbnz	r4, 800ec24 <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ebee:	4a2a      	ldr	r2, [pc, #168]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ebf0:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ebf2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ebf4:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800ebf8:	430b      	orrs	r3, r1
 800ebfa:	6513      	str	r3, [r2, #80]	; 0x50
 800ebfc:	e73a      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebfe:	4a26      	ldr	r2, [pc, #152]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ec00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ec02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec06:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ec08:	e7f0      	b.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	f105 0008 	add.w	r0, r5, #8
 800ec10:	f7ff fdd8 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec14:	4604      	mov	r4, r0
        break;
 800ec16:	e7e9      	b.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec18:	2100      	movs	r1, #0
 800ec1a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ec1e:	f7ff fe49 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ec22:	e7f7      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x270>
 800ec24:	4626      	mov	r6, r4
 800ec26:	e725      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ec28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ec2c:	d003      	beq.n	800ec36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ec2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ec32:	f47f af31 	bne.w	800ea98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 800ec36:	b9dc      	cbnz	r4, 800ec70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ec38:	4a17      	ldr	r2, [pc, #92]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ec3a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800ec3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ec40:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800ec44:	430b      	orrs	r3, r1
 800ec46:	6593      	str	r3, [r2, #88]	; 0x58
 800ec48:	e728      	b.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec4a:	4a13      	ldr	r2, [pc, #76]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ec4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ec4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec52:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ec54:	e7ef      	b.n	800ec36 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec56:	2100      	movs	r1, #0
 800ec58:	f105 0008 	add.w	r0, r5, #8
 800ec5c:	f7ff fdb2 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec60:	4604      	mov	r4, r0
        break;
 800ec62:	e7e8      	b.n	800ec36 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec64:	2100      	movs	r1, #0
 800ec66:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ec6a:	f7ff fe23 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ec6e:	e7f7      	b.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ec70:	4626      	mov	r6, r4
 800ec72:	e713      	b.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800ec74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ec78:	d003      	beq.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ec7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ec7e:	f47f af1f 	bne.w	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800ec82:	b9f4      	cbnz	r4, 800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ec84:	4a04      	ldr	r2, [pc, #16]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ec86:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800ec8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ec8c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800ec90:	430b      	orrs	r3, r1
 800ec92:	6593      	str	r3, [r2, #88]	; 0x58
 800ec94:	e716      	b.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800ec96:	bf00      	nop
 800ec98:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec9c:	4aa1      	ldr	r2, [pc, #644]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ec9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800eca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eca4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800eca6:	e7ec      	b.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eca8:	2100      	movs	r1, #0
 800ecaa:	f105 0008 	add.w	r0, r5, #8
 800ecae:	f7ff fd89 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ecb2:	4604      	mov	r4, r0
        break;
 800ecb4:	e7e5      	b.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ecbc:	f7ff fdfa 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ecc0:	e7f7      	b.n	800ecb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800ecc2:	4626      	mov	r6, r4
 800ecc4:	e6fe      	b.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 800ecc6:	2b30      	cmp	r3, #48	; 0x30
 800ecc8:	f47f af0b 	bne.w	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 800eccc:	b9a4      	cbnz	r4, 800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ecce:	4a95      	ldr	r2, [pc, #596]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ecd0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800ecd2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ecd4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ecd8:	430b      	orrs	r3, r1
 800ecda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ecdc:	e703      	b.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecde:	4a91      	ldr	r2, [pc, #580]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ece0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ece2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ece6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ece8:	e7f0      	b.n	800eccc <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ecea:	2102      	movs	r1, #2
 800ecec:	f105 0008 	add.w	r0, r5, #8
 800ecf0:	f7ff fd68 	bl	800e7c4 <RCCEx_PLL2_Config>
 800ecf4:	4604      	mov	r4, r0
        break;
 800ecf6:	e7e9      	b.n	800eccc <HAL_RCCEx_PeriphCLKConfig+0x328>
 800ecf8:	4626      	mov	r6, r4
 800ecfa:	e6f4      	b.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ecfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ed00:	d003      	beq.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x366>
 800ed02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed06:	f47f aeff 	bne.w	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 800ed0a:	b9d4      	cbnz	r4, 800ed42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ed0c:	4a85      	ldr	r2, [pc, #532]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ed0e:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800ed10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ed12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed16:	430b      	orrs	r3, r1
 800ed18:	6513      	str	r3, [r2, #80]	; 0x50
 800ed1a:	e6f7      	b.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed1c:	4a81      	ldr	r2, [pc, #516]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ed1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ed20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed24:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ed26:	e7f0      	b.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed28:	2100      	movs	r1, #0
 800ed2a:	f105 0008 	add.w	r0, r5, #8
 800ed2e:	f7ff fd49 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed32:	4604      	mov	r4, r0
        break;
 800ed34:	e7e9      	b.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed36:	2100      	movs	r1, #0
 800ed38:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ed3c:	f7ff fdba 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ed40:	e7f7      	b.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800ed42:	4626      	mov	r6, r4
 800ed44:	e6e2      	b.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ed46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed4a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800ed4e:	d003      	beq.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800ed50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ed54:	f47f aeeb 	bne.w	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 800ed58:	b9a4      	cbnz	r4, 800ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ed5a:	4a72      	ldr	r2, [pc, #456]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ed5c:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800ed5e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ed60:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800ed64:	430b      	orrs	r3, r1
 800ed66:	6513      	str	r3, [r2, #80]	; 0x50
 800ed68:	e6e3      	b.n	800eb32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	f105 0008 	add.w	r0, r5, #8
 800ed70:	f7ff fd28 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ed74:	4604      	mov	r4, r0
        break;
 800ed76:	e7ef      	b.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ed78:	2101      	movs	r1, #1
 800ed7a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ed7e:	f7ff fd99 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ed82:	e7f7      	b.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ed84:	4626      	mov	r6, r4
 800ed86:	e6d4      	b.n	800eb32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 800ed88:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ed8c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800ed90:	d003      	beq.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800ed92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ed96:	f47f aede 	bne.w	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 800ed9a:	b9ac      	cbnz	r4, 800edc8 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ed9c:	4a61      	ldr	r2, [pc, #388]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ed9e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800eda2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800eda4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800eda8:	430b      	orrs	r3, r1
 800edaa:	6593      	str	r3, [r2, #88]	; 0x58
 800edac:	e6d5      	b.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edae:	2101      	movs	r1, #1
 800edb0:	f105 0008 	add.w	r0, r5, #8
 800edb4:	f7ff fd06 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800edb8:	4604      	mov	r4, r0
        break;
 800edba:	e7ee      	b.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800edbc:	2101      	movs	r1, #1
 800edbe:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800edc2:	f7ff fd77 	bl	800e8b4 <RCCEx_PLL3_Config>
 800edc6:	e7f7      	b.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800edc8:	4626      	mov	r6, r4
 800edca:	e6c6      	b.n	800eb5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 800edcc:	2601      	movs	r6, #1
 800edce:	4634      	mov	r4, r6
 800edd0:	e6dc      	b.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800edd2:	4626      	mov	r6, r4
 800edd4:	e6da      	b.n	800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edd6:	4a53      	ldr	r2, [pc, #332]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800edd8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800edda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edde:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ede0:	b974      	cbnz	r4, 800ee00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ede2:	4a50      	ldr	r2, [pc, #320]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ede4:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800ede6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ede8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800edec:	430b      	orrs	r3, r1
 800edee:	6513      	str	r3, [r2, #80]	; 0x50
 800edf0:	e6dd      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edf2:	2101      	movs	r1, #1
 800edf4:	f105 0008 	add.w	r0, r5, #8
 800edf8:	f7ff fce4 	bl	800e7c4 <RCCEx_PLL2_Config>
 800edfc:	4604      	mov	r4, r0
        break;
 800edfe:	e7ef      	b.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800ee00:	4626      	mov	r6, r4
 800ee02:	e6d4      	b.n	800ebae <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee04:	4a47      	ldr	r2, [pc, #284]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ee06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ee08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	d14e      	bne.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ee12:	4a44      	ldr	r2, [pc, #272]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ee14:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800ee16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ee18:	f023 0303 	bic.w	r3, r3, #3
 800ee1c:	430b      	orrs	r3, r1
 800ee1e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	0259      	lsls	r1, r3, #9
 800ee24:	d54e      	bpl.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee26:	4f40      	ldr	r7, [pc, #256]	; (800ef28 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee2e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800ee30:	f7fa fff4 	bl	8009e1c <HAL_GetTick>
 800ee34:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	05da      	lsls	r2, r3, #23
 800ee3a:	d53b      	bpl.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 800ee3c:	2c00      	cmp	r4, #0
 800ee3e:	d16f      	bne.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ee40:	4b38      	ldr	r3, [pc, #224]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ee42:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800ee46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ee48:	4042      	eors	r2, r0
 800ee4a:	f412 7f40 	tst.w	r2, #768	; 0x300
 800ee4e:	d00b      	beq.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ee50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800ee52:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ee54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800ee58:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800ee5c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ee5e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ee60:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800ee64:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800ee66:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ee68:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800ee6c:	d043      	beq.n	800eef6 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ee6e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800ee72:	492c      	ldr	r1, [pc, #176]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ee74:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800ee78:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ee7c:	d14c      	bne.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800ee7e:	6908      	ldr	r0, [r1, #16]
 800ee80:	4a2a      	ldr	r2, [pc, #168]	; (800ef2c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800ee82:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800ee86:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ee8a:	4302      	orrs	r2, r0
 800ee8c:	610a      	str	r2, [r1, #16]
 800ee8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee92:	4a24      	ldr	r2, [pc, #144]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800ee94:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ee96:	430b      	orrs	r3, r1
 800ee98:	6713      	str	r3, [r2, #112]	; 0x70
 800ee9a:	e013      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee9c:	2102      	movs	r1, #2
 800ee9e:	f105 0008 	add.w	r0, r5, #8
 800eea2:	f7ff fc8f 	bl	800e7c4 <RCCEx_PLL2_Config>
 800eea6:	4604      	mov	r4, r0
        break;
 800eea8:	e7b1      	b.n	800ee0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 800eeaa:	2601      	movs	r6, #1
 800eeac:	4634      	mov	r4, r6
 800eeae:	e7b7      	b.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800eeb0:	4626      	mov	r6, r4
 800eeb2:	e7b5      	b.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eeb4:	f7fa ffb2 	bl	8009e1c <HAL_GetTick>
 800eeb8:	eba0 0008 	sub.w	r0, r0, r8
 800eebc:	2864      	cmp	r0, #100	; 0x64
 800eebe:	d9ba      	bls.n	800ee36 <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800eec0:	2603      	movs	r6, #3
 800eec2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	07d8      	lsls	r0, r3, #31
 800eec8:	d50a      	bpl.n	800eee0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800eeca:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800eece:	2b10      	cmp	r3, #16
 800eed0:	d045      	beq.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800eed2:	d82d      	bhi.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d031      	beq.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800eed8:	2b08      	cmp	r3, #8
 800eeda:	d039      	beq.n	800ef50 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800eedc:	2601      	movs	r6, #1
 800eede:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	0799      	lsls	r1, r3, #30
 800eee4:	d551      	bpl.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eee6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800eee8:	2b05      	cmp	r3, #5
 800eeea:	d864      	bhi.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800eeec:	e8df f003 	tbb	[pc, r3]
 800eef0:	455d3f45 	.word	0x455d3f45
 800eef4:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 800eef6:	f7fa ff91 	bl	8009e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eefa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800ef24 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800eefe:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef00:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef04:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ef08:	079b      	lsls	r3, r3, #30
 800ef0a:	d4b0      	bmi.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef0c:	f7fa ff86 	bl	8009e1c <HAL_GetTick>
 800ef10:	1bc0      	subs	r0, r0, r7
 800ef12:	4548      	cmp	r0, r9
 800ef14:	d9f6      	bls.n	800ef04 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800ef16:	e7d3      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ef18:	690a      	ldr	r2, [r1, #16]
 800ef1a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800ef1e:	e7b5      	b.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 800ef20:	4626      	mov	r6, r4
 800ef22:	e7cf      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800ef24:	58024400 	.word	0x58024400
 800ef28:	58024800 	.word	0x58024800
 800ef2c:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 800ef30:	f023 0208 	bic.w	r2, r3, #8
 800ef34:	2a20      	cmp	r2, #32
 800ef36:	d001      	beq.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ef38:	2b18      	cmp	r3, #24
 800ef3a:	d1cf      	bne.n	800eedc <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 800ef3c:	b9ac      	cbnz	r4, 800ef6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ef3e:	4a20      	ldr	r2, [pc, #128]	; (800efc0 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800ef40:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800ef44:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef46:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ef4a:	430b      	orrs	r3, r1
 800ef4c:	6553      	str	r3, [r2, #84]	; 0x54
 800ef4e:	e7c7      	b.n	800eee0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef50:	2101      	movs	r1, #1
 800ef52:	f105 0008 	add.w	r0, r5, #8
 800ef56:	f7ff fc35 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef5a:	4604      	mov	r4, r0
        break;
 800ef5c:	e7ee      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef5e:	2101      	movs	r1, #1
 800ef60:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800ef64:	f7ff fca6 	bl	800e8b4 <RCCEx_PLL3_Config>
 800ef68:	e7f7      	b.n	800ef5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800ef6a:	4626      	mov	r6, r4
 800ef6c:	e7b8      	b.n	800eee0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef6e:	2101      	movs	r1, #1
 800ef70:	f105 0008 	add.w	r0, r5, #8
 800ef74:	f7ff fc26 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef78:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ef7a:	b9fc      	cbnz	r4, 800efbc <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ef7c:	4a10      	ldr	r2, [pc, #64]	; (800efc0 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800ef7e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800ef80:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef82:	f023 0307 	bic.w	r3, r3, #7
 800ef86:	430b      	orrs	r3, r1
 800ef88:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ef8a:	682b      	ldr	r3, [r5, #0]
 800ef8c:	075a      	lsls	r2, r3, #29
 800ef8e:	d52a      	bpl.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ef90:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800ef94:	2b05      	cmp	r3, #5
 800ef96:	f200 817b 	bhi.w	800f290 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800ef9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ef9e:	0019      	.short	0x0019
 800efa0:	01730013 	.word	0x01730013
 800efa4:	00190019 	.word	0x00190019
 800efa8:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800efaa:	2101      	movs	r1, #1
 800efac:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800efb0:	f7ff fc80 	bl	800e8b4 <RCCEx_PLL3_Config>
 800efb4:	e7e0      	b.n	800ef78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800efb6:	2601      	movs	r6, #1
 800efb8:	4634      	mov	r4, r6
 800efba:	e7e6      	b.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800efbc:	4626      	mov	r6, r4
 800efbe:	e7e4      	b.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800efc0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800efc4:	2101      	movs	r1, #1
 800efc6:	f105 0008 	add.w	r0, r5, #8
 800efca:	f7ff fbfb 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800efce:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800efd0:	2c00      	cmp	r4, #0
 800efd2:	f040 8160 	bne.w	800f296 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800efd6:	4aaa      	ldr	r2, [pc, #680]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800efd8:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800efdc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800efde:	f023 0307 	bic.w	r3, r3, #7
 800efe2:	430b      	orrs	r3, r1
 800efe4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800efe6:	682b      	ldr	r3, [r5, #0]
 800efe8:	069b      	lsls	r3, r3, #26
 800efea:	d510      	bpl.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800efec:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800eff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eff4:	f000 816b 	beq.w	800f2ce <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800eff8:	f200 814f 	bhi.w	800f29a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 8155 	beq.w	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x908>
 800f002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f006:	f000 815b 	beq.w	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800f00a:	2601      	movs	r6, #1
 800f00c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f00e:	682b      	ldr	r3, [r5, #0]
 800f010:	065f      	lsls	r7, r3, #25
 800f012:	d510      	bpl.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f014:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800f018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f01c:	f000 8179 	beq.w	800f312 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f020:	f200 815d 	bhi.w	800f2de <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800f024:	2b00      	cmp	r3, #0
 800f026:	f000 8163 	beq.w	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800f02a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f02e:	f000 8169 	beq.w	800f304 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800f032:	2601      	movs	r6, #1
 800f034:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f036:	682b      	ldr	r3, [r5, #0]
 800f038:	0618      	lsls	r0, r3, #24
 800f03a:	d510      	bpl.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f03c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800f040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f044:	f000 8187 	beq.w	800f356 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800f048:	f200 816b 	bhi.w	800f322 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f000 8171 	beq.w	800f334 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800f052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f056:	f000 8177 	beq.w	800f348 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800f05a:	2601      	movs	r6, #1
 800f05c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f05e:	682b      	ldr	r3, [r5, #0]
 800f060:	0719      	lsls	r1, r3, #28
 800f062:	d514      	bpl.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f064:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800f068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f06c:	d107      	bne.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f06e:	2102      	movs	r1, #2
 800f070:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f074:	f7ff fc1e 	bl	800e8b4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800f078:	2800      	cmp	r0, #0
 800f07a:	bf18      	it	ne
 800f07c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f07e:	4a80      	ldr	r2, [pc, #512]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f080:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800f084:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f08a:	430b      	orrs	r3, r1
 800f08c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f08e:	682b      	ldr	r3, [r5, #0]
 800f090:	06da      	lsls	r2, r3, #27
 800f092:	d514      	bpl.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f094:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800f098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f09c:	d107      	bne.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f09e:	2102      	movs	r1, #2
 800f0a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f0a4:	f7ff fc06 	bl	800e8b4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	bf18      	it	ne
 800f0ac:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f0ae:	4a74      	ldr	r2, [pc, #464]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f0b0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800f0b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f0b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0ba:	430b      	orrs	r3, r1
 800f0bc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f0be:	682b      	ldr	r3, [r5, #0]
 800f0c0:	031b      	lsls	r3, r3, #12
 800f0c2:	d51b      	bpl.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 800f0c4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800f0c8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f0cc:	f000 814b 	beq.w	800f366 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800f0d0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800f0d4:	d007      	beq.n	800f0e6 <HAL_RCCEx_PeriphCLKConfig+0x742>
 800f0d6:	2900      	cmp	r1, #0
 800f0d8:	f040 814b 	bne.w	800f372 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f0dc:	f105 0008 	add.w	r0, r5, #8
 800f0e0:	f7ff fb70 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f0e4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f0e6:	2c00      	cmp	r4, #0
 800f0e8:	f040 8146 	bne.w	800f378 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f0ec:	4a64      	ldr	r2, [pc, #400]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f0ee:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800f0f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f0f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800f0f8:	430b      	orrs	r3, r1
 800f0fa:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f0fc:	682b      	ldr	r3, [r5, #0]
 800f0fe:	035f      	lsls	r7, r3, #13
 800f100:	d51c      	bpl.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 800f102:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800f106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f10a:	f000 8137 	beq.w	800f37c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800f10e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f112:	d008      	beq.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x782>
 800f114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f118:	f040 8137 	bne.w	800f38a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f11c:	4a58      	ldr	r2, [pc, #352]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f11e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f124:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800f126:	2c00      	cmp	r4, #0
 800f128:	f040 8132 	bne.w	800f390 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f12c:	4a54      	ldr	r2, [pc, #336]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f12e:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800f132:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f134:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f138:	430b      	orrs	r3, r1
 800f13a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	03d8      	lsls	r0, r3, #15
 800f140:	d509      	bpl.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800f142:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 8125 	beq.w	800f394 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800f14a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f14e:	f000 812f 	beq.w	800f3b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800f152:	2601      	movs	r6, #1
 800f154:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f156:	682b      	ldr	r3, [r5, #0]
 800f158:	0099      	lsls	r1, r3, #2
 800f15a:	d507      	bpl.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f15c:	2102      	movs	r1, #2
 800f15e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f162:	f7ff fba7 	bl	800e8b4 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800f166:	2800      	cmp	r0, #0
 800f168:	bf18      	it	ne
 800f16a:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f16c:	e9d5 3100 	ldrd	r3, r1, [r5]
 800f170:	039a      	lsls	r2, r3, #14
 800f172:	d50b      	bpl.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 800f174:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 800f178:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f17c:	f000 812f 	beq.w	800f3de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800f180:	f200 811f 	bhi.w	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800f184:	2800      	cmp	r0, #0
 800f186:	f000 8122 	beq.w	800f3ce <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800f18a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f18c:	02df      	lsls	r7, r3, #11
 800f18e:	d506      	bpl.n	800f19e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f190:	483b      	ldr	r0, [pc, #236]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f192:	6fac      	ldr	r4, [r5, #120]	; 0x78
 800f194:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f196:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800f19a:	4322      	orrs	r2, r4
 800f19c:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f19e:	00dc      	lsls	r4, r3, #3
 800f1a0:	d507      	bpl.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f1a2:	4837      	ldr	r0, [pc, #220]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f1a4:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800f1a8:	6902      	ldr	r2, [r0, #16]
 800f1aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f1ae:	4322      	orrs	r2, r4
 800f1b0:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f1b2:	0298      	lsls	r0, r3, #10
 800f1b4:	d506      	bpl.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f1b6:	4832      	ldr	r0, [pc, #200]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f1b8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800f1ba:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800f1bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800f1c0:	4322      	orrs	r2, r4
 800f1c2:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f1c4:	005a      	lsls	r2, r3, #1
 800f1c6:	d509      	bpl.n	800f1dc <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f1c8:	4a2d      	ldr	r2, [pc, #180]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f1ca:	6910      	ldr	r0, [r2, #16]
 800f1cc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800f1d0:	6110      	str	r0, [r2, #16]
 800f1d2:	6910      	ldr	r0, [r2, #16]
 800f1d4:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 800f1d8:	4320      	orrs	r0, r4
 800f1da:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	da06      	bge.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f1e0:	4827      	ldr	r0, [pc, #156]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f1e2:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800f1e4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800f1e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f1ea:	4322      	orrs	r2, r4
 800f1ec:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f1ee:	021b      	lsls	r3, r3, #8
 800f1f0:	d507      	bpl.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f1f2:	4a23      	ldr	r2, [pc, #140]	; (800f280 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800f1f4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 800f1f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f1fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800f1fe:	4303      	orrs	r3, r0
 800f200:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f202:	07cf      	lsls	r7, r1, #31
 800f204:	d507      	bpl.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f206:	2100      	movs	r1, #0
 800f208:	f105 0008 	add.w	r0, r5, #8
 800f20c:	f7ff fada 	bl	800e7c4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800f210:	2800      	cmp	r0, #0
 800f212:	bf18      	it	ne
 800f214:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f216:	686b      	ldr	r3, [r5, #4]
 800f218:	079c      	lsls	r4, r3, #30
 800f21a:	d507      	bpl.n	800f22c <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f21c:	2101      	movs	r1, #1
 800f21e:	f105 0008 	add.w	r0, r5, #8
 800f222:	f7ff facf 	bl	800e7c4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800f226:	2800      	cmp	r0, #0
 800f228:	bf18      	it	ne
 800f22a:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f22c:	686b      	ldr	r3, [r5, #4]
 800f22e:	0758      	lsls	r0, r3, #29
 800f230:	d507      	bpl.n	800f242 <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f232:	2102      	movs	r1, #2
 800f234:	f105 0008 	add.w	r0, r5, #8
 800f238:	f7ff fac4 	bl	800e7c4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800f23c:	2800      	cmp	r0, #0
 800f23e:	bf18      	it	ne
 800f240:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f242:	686b      	ldr	r3, [r5, #4]
 800f244:	0719      	lsls	r1, r3, #28
 800f246:	d507      	bpl.n	800f258 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f248:	2100      	movs	r1, #0
 800f24a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f24e:	f7ff fb31 	bl	800e8b4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f252:	2800      	cmp	r0, #0
 800f254:	bf18      	it	ne
 800f256:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f258:	686b      	ldr	r3, [r5, #4]
 800f25a:	06da      	lsls	r2, r3, #27
 800f25c:	d507      	bpl.n	800f26e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f25e:	2101      	movs	r1, #1
 800f260:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f264:	f7ff fb26 	bl	800e8b4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f268:	2800      	cmp	r0, #0
 800f26a:	bf18      	it	ne
 800f26c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f26e:	686b      	ldr	r3, [r5, #4]
 800f270:	069b      	lsls	r3, r3, #26
 800f272:	f100 80bc 	bmi.w	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800f276:	1e30      	subs	r0, r6, #0
 800f278:	bf18      	it	ne
 800f27a:	2001      	movne	r0, #1
}
 800f27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f280:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f284:	2101      	movs	r1, #1
 800f286:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f28a:	f7ff fb13 	bl	800e8b4 <RCCEx_PLL3_Config>
 800f28e:	e69e      	b.n	800efce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f290:	2601      	movs	r6, #1
 800f292:	4634      	mov	r4, r6
 800f294:	e6a7      	b.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800f296:	4626      	mov	r6, r4
 800f298:	e6a5      	b.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f29a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f29e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f2a2:	d003      	beq.n	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x908>
 800f2a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f2a8:	f47f aeaf 	bne.w	800f00a <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800f2ac:	b9ac      	cbnz	r4, 800f2da <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f2ae:	4a55      	ldr	r2, [pc, #340]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f2b0:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800f2b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f2b6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	6553      	str	r3, [r2, #84]	; 0x54
 800f2be:	e6a6      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	f105 0008 	add.w	r0, r5, #8
 800f2c6:	f7ff fa7d 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f2ca:	4604      	mov	r4, r0
        break;
 800f2cc:	e7ee      	b.n	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f2ce:	2102      	movs	r1, #2
 800f2d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f2d4:	f7ff faee 	bl	800e8b4 <RCCEx_PLL3_Config>
 800f2d8:	e7f7      	b.n	800f2ca <HAL_RCCEx_PeriphCLKConfig+0x926>
 800f2da:	4626      	mov	r6, r4
 800f2dc:	e697      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f2de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f2e2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800f2e6:	d003      	beq.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800f2e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f2ec:	f47f aea1 	bne.w	800f032 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800f2f0:	b9ac      	cbnz	r4, 800f31e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f2f2:	4a44      	ldr	r2, [pc, #272]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f2f4:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800f2f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f2fa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800f2fe:	430b      	orrs	r3, r1
 800f300:	6593      	str	r3, [r2, #88]	; 0x58
 800f302:	e698      	b.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f304:	2100      	movs	r1, #0
 800f306:	f105 0008 	add.w	r0, r5, #8
 800f30a:	f7ff fa5b 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f30e:	4604      	mov	r4, r0
        break;
 800f310:	e7ee      	b.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f312:	2102      	movs	r1, #2
 800f314:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f318:	f7ff facc 	bl	800e8b4 <RCCEx_PLL3_Config>
 800f31c:	e7f7      	b.n	800f30e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800f31e:	4626      	mov	r6, r4
 800f320:	e689      	b.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f322:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f326:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f32a:	d003      	beq.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800f32c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f330:	f47f ae93 	bne.w	800f05a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800f334:	b9ac      	cbnz	r4, 800f362 <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f336:	4a33      	ldr	r2, [pc, #204]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f338:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800f33c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f33e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f342:	430b      	orrs	r3, r1
 800f344:	6593      	str	r3, [r2, #88]	; 0x58
 800f346:	e68a      	b.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f348:	2100      	movs	r1, #0
 800f34a:	f105 0008 	add.w	r0, r5, #8
 800f34e:	f7ff fa39 	bl	800e7c4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f352:	4604      	mov	r4, r0
        break;
 800f354:	e7ee      	b.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f356:	2102      	movs	r1, #2
 800f358:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f35c:	f7ff faaa 	bl	800e8b4 <RCCEx_PLL3_Config>
 800f360:	e7f7      	b.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800f362:	4626      	mov	r6, r4
 800f364:	e67b      	b.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f366:	2102      	movs	r1, #2
 800f368:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f36c:	f7ff faa2 	bl	800e8b4 <RCCEx_PLL3_Config>
 800f370:	e6b8      	b.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800f372:	2601      	movs	r6, #1
 800f374:	4634      	mov	r4, r6
 800f376:	e6c1      	b.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0x758>
 800f378:	4626      	mov	r6, r4
 800f37a:	e6bf      	b.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f37c:	2101      	movs	r1, #1
 800f37e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f382:	f7ff fa97 	bl	800e8b4 <RCCEx_PLL3_Config>
 800f386:	4604      	mov	r4, r0
        break;
 800f388:	e6cd      	b.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800f38a:	2601      	movs	r6, #1
 800f38c:	4634      	mov	r4, r6
 800f38e:	e6d5      	b.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0x798>
 800f390:	4626      	mov	r6, r4
 800f392:	e6d3      	b.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f394:	4a1b      	ldr	r2, [pc, #108]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f396:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f39c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800f39e:	b974      	cbnz	r4, 800f3be <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f3a0:	4a18      	ldr	r2, [pc, #96]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f3a2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800f3a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800f3a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f3ae:	e6d2      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3b0:	2102      	movs	r1, #2
 800f3b2:	f105 0008 	add.w	r0, r5, #8
 800f3b6:	f7ff fa05 	bl	800e7c4 <RCCEx_PLL2_Config>
 800f3ba:	4604      	mov	r4, r0
        break;
 800f3bc:	e7ef      	b.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800f3be:	4626      	mov	r6, r4
 800f3c0:	e6c9      	b.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800f3c2:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800f3c6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800f3ca:	f47f aede 	bne.w	800f18a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800f3ce:	b964      	cbnz	r4, 800f3ea <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f3d0:	4c0c      	ldr	r4, [pc, #48]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f3d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f3d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f3d8:	4302      	orrs	r2, r0
 800f3da:	6562      	str	r2, [r4, #84]	; 0x54
 800f3dc:	e6d6      	b.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3de:	4f09      	ldr	r7, [pc, #36]	; (800f404 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800f3e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f3e6:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800f3e8:	e7f1      	b.n	800f3ce <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800f3ea:	4626      	mov	r6, r4
 800f3ec:	e6ce      	b.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3ee:	2102      	movs	r1, #2
 800f3f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f3f4:	f7ff fa5e 	bl	800e8b4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	f43f af3c 	beq.w	800f276 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800f3fe:	2001      	movs	r0, #1
 800f400:	e73c      	b.n	800f27c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800f402:	bf00      	nop
 800f404:	58024400 	.word	0x58024400

0800f408 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800f408:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f40a:	f7ff f96b 	bl	800e6e4 <HAL_RCC_GetHCLKFreq>
 800f40e:	4b05      	ldr	r3, [pc, #20]	; (800f424 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800f410:	4a05      	ldr	r2, [pc, #20]	; (800f428 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800f412:	6a1b      	ldr	r3, [r3, #32]
 800f414:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f418:	5cd3      	ldrb	r3, [r2, r3]
 800f41a:	f003 031f 	and.w	r3, r3, #31
}
 800f41e:	40d8      	lsrs	r0, r3
 800f420:	bd08      	pop	{r3, pc}
 800f422:	bf00      	nop
 800f424:	58024400 	.word	0x58024400
 800f428:	0802f354 	.word	0x0802f354

0800f42c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f42c:	494f      	ldr	r1, [pc, #316]	; (800f56c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800f42e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f430:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f432:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f434:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll2m != 0U)
 800f436:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f43a:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f43e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 800f440:	f000 8090 	beq.w	800f564 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f444:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f448:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f44c:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f450:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f458:	4353      	muls	r3, r2
    switch (pllsource)
 800f45a:	2c01      	cmp	r4, #1
 800f45c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f460:	ee06 3a90 	vmov	s13, r3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f464:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800f468:	d06e      	beq.n	800f548 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800f46a:	2c02      	cmp	r4, #2
 800f46c:	d05e      	beq.n	800f52c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800f46e:	2c00      	cmp	r4, #0
 800f470:	d16a      	bne.n	800f548 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f472:	680b      	ldr	r3, [r1, #0]
 800f474:	069b      	lsls	r3, r3, #26
 800f476:	d547      	bpl.n	800f508 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f478:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f47a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f47c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800f480:	4a3b      	ldr	r2, [pc, #236]	; (800f570 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f482:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f486:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f488:	ee07 2a90 	vmov	s15, r2
 800f48c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800f490:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f494:	ee07 3a10 	vmov	s14, r3
 800f498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f49c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f4a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f4a4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f4a8:	4a30      	ldr	r2, [pc, #192]	; (800f56c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800f4aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800f4ac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f4b0:	ee07 3a10 	vmov	s14, r3
 800f4b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f4bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f4c0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f4c4:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f4c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800f4ca:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800f4ce:	ee07 3a10 	vmov	s14, r3
 800f4d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4d6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f4da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f4de:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f4e2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f4e6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800f4e8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800f4ec:	ee06 3a90 	vmov	s13, r3
 800f4f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f4f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f4f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f4fc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f500:	ee17 3a90 	vmov	r3, s15
 800f504:	6083      	str	r3, [r0, #8]
}
 800f506:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f508:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800f50a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800f574 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800f50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f512:	ee07 3a90 	vmov	s15, r3
 800f516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f51e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f522:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800f526:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800f52a:	e7bd      	b.n	800f4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f52c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800f52e:	eddf 5a12 	vldr	s11, [pc, #72]	; 800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800f532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f536:	ee07 3a90 	vmov	s15, r3
 800f53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f542:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f546:	e7ec      	b.n	800f522 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f548:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800f54a:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800f57c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800f54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f552:	ee07 3a90 	vmov	s15, r3
 800f556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f55e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f562:	e7de      	b.n	800f522 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f564:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f568:	e7cc      	b.n	800f504 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800f56a:	bf00      	nop
 800f56c:	58024400 	.word	0x58024400
 800f570:	03d09000 	.word	0x03d09000
 800f574:	4c742400 	.word	0x4c742400
 800f578:	4b742400 	.word	0x4b742400
 800f57c:	4a742400 	.word	0x4a742400

0800f580 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f580:	494f      	ldr	r1, [pc, #316]	; (800f6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800f582:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f584:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f586:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f588:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll3m != 0U)
 800f58a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f58e:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f592:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 800f594:	f000 8090 	beq.w	800f6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f598:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f59c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f5a0:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5a4:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f5ac:	4353      	muls	r3, r2
    switch (pllsource)
 800f5ae:	2c01      	cmp	r4, #1
 800f5b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f5b4:	ee06 3a90 	vmov	s13, r3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5b8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800f5bc:	d06e      	beq.n	800f69c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800f5be:	2c02      	cmp	r4, #2
 800f5c0:	d05e      	beq.n	800f680 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800f5c2:	2c00      	cmp	r4, #0
 800f5c4:	d16a      	bne.n	800f69c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5c6:	680b      	ldr	r3, [r1, #0]
 800f5c8:	069b      	lsls	r3, r3, #26
 800f5ca:	d547      	bpl.n	800f65c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5cc:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5d0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800f5d4:	4a3b      	ldr	r2, [pc, #236]	; (800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5da:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5dc:	ee07 2a90 	vmov	s15, r2
 800f5e0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800f5e4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f5e8:	ee07 3a10 	vmov	s14, r3
 800f5ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f5f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f5f8:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f5fc:	4a30      	ldr	r2, [pc, #192]	; (800f6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800f5fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f600:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f604:	ee07 3a10 	vmov	s14, r3
 800f608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f60c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f610:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f614:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f618:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f61c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f61e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800f622:	ee07 3a10 	vmov	s14, r3
 800f626:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f62a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f62e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f632:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f636:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f63a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f63c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800f640:	ee06 3a90 	vmov	s13, r3
 800f644:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f648:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f64c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f650:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f654:	ee17 3a90 	vmov	r3, s15
 800f658:	6083      	str	r3, [r0, #8]
}
 800f65a:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f65c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f65e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800f6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800f662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f666:	ee07 3a90 	vmov	s15, r3
 800f66a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f672:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f676:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800f67a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800f67e:	e7bd      	b.n	800f5fc <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f682:	eddf 5a12 	vldr	s11, [pc, #72]	; 800f6cc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800f686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f68a:	ee07 3a90 	vmov	s15, r3
 800f68e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f696:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f69a:	e7ec      	b.n	800f676 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f69c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f69e:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800f6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800f6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6a6:	ee07 3a90 	vmov	s15, r3
 800f6aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f6b6:	e7de      	b.n	800f676 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f6b8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f6bc:	e7cc      	b.n	800f658 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800f6be:	bf00      	nop
 800f6c0:	58024400 	.word	0x58024400
 800f6c4:	03d09000 	.word	0x03d09000
 800f6c8:	4c742400 	.word	0x4c742400
 800f6cc:	4b742400 	.word	0x4b742400
 800f6d0:	4a742400 	.word	0x4a742400

0800f6d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f6d4:	494f      	ldr	r1, [pc, #316]	; (800f814 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800f6d6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f6d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f6da:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f6dc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  if (pll1m != 0U)
 800f6de:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f6e2:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f6e6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  if (pll1m != 0U)
 800f6e8:	f000 8090 	beq.w	800f80c <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f6ec:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f6f0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f6f4:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f6f8:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f6fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f700:	4353      	muls	r3, r2
    switch (pllsource)
 800f702:	2c01      	cmp	r4, #1
 800f704:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f708:	ee06 3a90 	vmov	s13, r3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f70c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800f710:	d04e      	beq.n	800f7b0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800f712:	2c02      	cmp	r4, #2
 800f714:	d05e      	beq.n	800f7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 800f716:	2c00      	cmp	r4, #0
 800f718:	d16a      	bne.n	800f7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f71a:	680b      	ldr	r3, [r1, #0]
 800f71c:	069b      	lsls	r3, r3, #26
 800f71e:	d567      	bpl.n	800f7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f720:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f722:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f724:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800f728:	4a3b      	ldr	r2, [pc, #236]	; (800f818 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f72e:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f730:	ee07 2a90 	vmov	s15, r2
 800f734:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800f738:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f73c:	ee07 3a10 	vmov	s14, r3
 800f740:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f744:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f748:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f74c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f750:	4a30      	ldr	r2, [pc, #192]	; (800f814 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800f752:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f754:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f758:	ee07 3a10 	vmov	s14, r3
 800f75c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f760:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f764:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f768:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f76c:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f770:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f772:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800f776:	ee07 3a10 	vmov	s14, r3
 800f77a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f77e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f782:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f786:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f78a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f78e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f790:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800f794:	ee06 3a90 	vmov	s13, r3
 800f798:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f79c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f7a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f7a4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f7a8:	ee17 3a90 	vmov	r3, s15
 800f7ac:	6083      	str	r3, [r0, #8]
}
 800f7ae:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800f7b2:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800f81c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800f7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7ba:	ee07 3a90 	vmov	s15, r3
 800f7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7c6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7ca:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800f7ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800f7d2:	e7bd      	b.n	800f750 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800f7d6:	eddf 5a12 	vldr	s11, [pc, #72]	; 800f820 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800f7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7de:	ee07 3a90 	vmov	s15, r3
 800f7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f7ee:	e7ec      	b.n	800f7ca <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7f0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800f7f2:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800f824 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800f7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7fa:	ee07 3a90 	vmov	s15, r3
 800f7fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f806:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f80a:	e7de      	b.n	800f7ca <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f80c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f810:	e7cc      	b.n	800f7ac <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800f812:	bf00      	nop
 800f814:	58024400 	.word	0x58024400
 800f818:	03d09000 	.word	0x03d09000
 800f81c:	4a742400 	.word	0x4a742400
 800f820:	4b742400 	.word	0x4b742400
 800f824:	4c742400 	.word	0x4c742400

0800f828 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800f828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f82a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800f82e:	430b      	orrs	r3, r1
 800f830:	d114      	bne.n	800f85c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f832:	4b9e      	ldr	r3, [pc, #632]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f836:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800f83a:	2a04      	cmp	r2, #4
 800f83c:	d82f      	bhi.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800f83e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f842:	0108      	.short	0x0108
 800f844:	0005001d 	.word	0x0005001d
 800f848:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800f852:	d01b      	beq.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f854:	a801      	add	r0, sp, #4
 800f856:	f7ff fe93 	bl	800f580 <HAL_RCCEx_GetPLL3ClockFreq>
 800f85a:	e016      	b.n	800f88a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f85c:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800f860:	430b      	orrs	r3, r1
 800f862:	d11e      	bne.n	800f8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f864:	4b91      	ldr	r3, [pc, #580]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f868:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 800f86c:	2a80      	cmp	r2, #128	; 0x80
 800f86e:	d0ed      	beq.n	800f84c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800f870:	d80f      	bhi.n	800f892 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800f872:	2a00      	cmp	r2, #0
 800f874:	f000 80ed 	beq.w	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800f878:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 800f87a:	d110      	bne.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f87c:	6818      	ldr	r0, [r3, #0]
 800f87e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800f882:	d003      	beq.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f884:	a801      	add	r0, sp, #4
 800f886:	f7ff fdd1 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f88a:	9801      	ldr	r0, [sp, #4]
}
 800f88c:	b005      	add	sp, #20
 800f88e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800f892:	2ac0      	cmp	r2, #192	; 0xc0
 800f894:	f000 813a 	beq.w	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800f898:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 800f89c:	d01a      	beq.n	800f8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    switch (srcclk)
 800f89e:	2000      	movs	r0, #0
  return frequency;
 800f8a0:	e7f4      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f8a2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	d133      	bne.n	800f912 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f8aa:	4b80      	ldr	r3, [pc, #512]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f8ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8ae:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 800f8b2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f8b6:	d0c9      	beq.n	800f84c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800f8b8:	d805      	bhi.n	800f8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	f000 80c9 	beq.w	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800f8c0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f8c4:	e7d9      	b.n	800f87a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800f8c6:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800f8ca:	f000 811f 	beq.w	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800f8ce:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f8d2:	e7e3      	b.n	800f89c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f8d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f8d6:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f8d8:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f8dc:	0748      	lsls	r0, r1, #29
 800f8de:	d506      	bpl.n	800f8ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800f8e0:	b92a      	cbnz	r2, 800f8ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8e2:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f8e8:	4871      	ldr	r0, [pc, #452]	; (800fab0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f8ea:	40d8      	lsrs	r0, r3
 800f8ec:	e7ce      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f8ee:	4b6f      	ldr	r3, [pc, #444]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f8f0:	6819      	ldr	r1, [r3, #0]
 800f8f2:	05c9      	lsls	r1, r1, #23
 800f8f4:	d503      	bpl.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800f8f6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f8fa:	f000 8109 	beq.w	800fb10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f8fe:	6818      	ldr	r0, [r3, #0]
 800f900:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800f904:	d0c2      	beq.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 800f906:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f90a:	486a      	ldr	r0, [pc, #424]	; (800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f90c:	bf18      	it	ne
 800f90e:	2000      	movne	r0, #0
 800f910:	e7bc      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f912:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800f916:	430b      	orrs	r3, r1
 800f918:	d125      	bne.n	800f966 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f91a:	4b64      	ldr	r3, [pc, #400]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f91c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f91e:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 800f922:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800f926:	d091      	beq.n	800f84c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800f928:	d805      	bhi.n	800f936 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800f92a:	2a00      	cmp	r2, #0
 800f92c:	f000 8091 	beq.w	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800f930:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f934:	e7a1      	b.n	800f87a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800f936:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800f93a:	f000 80e7 	beq.w	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800f93e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 800f942:	d1ac      	bne.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f946:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f948:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f94c:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f94e:	0748      	lsls	r0, r1, #29
 800f950:	d501      	bpl.n	800f956 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800f952:	2a00      	cmp	r2, #0
 800f954:	d0c6      	beq.n	800f8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f956:	05d9      	lsls	r1, r3, #23
 800f958:	d503      	bpl.n	800f962 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800f95a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f95e:	f000 80d7 	beq.w	800fb10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f962:	4b52      	ldr	r3, [pc, #328]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f964:	e7cb      	b.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f966:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800f96a:	430b      	orrs	r3, r1
 800f96c:	d114      	bne.n	800f998 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f96e:	4b4f      	ldr	r3, [pc, #316]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f972:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 800f976:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f97a:	f43f af67 	beq.w	800f84c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800f97e:	d804      	bhi.n	800f98a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800f980:	2a00      	cmp	r2, #0
 800f982:	d066      	beq.n	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800f984:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800f988:	e777      	b.n	800f87a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800f98a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800f98e:	f000 80bd 	beq.w	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800f992:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f996:	e7d4      	b.n	800f942 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f998:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800f99c:	430b      	orrs	r3, r1
 800f99e:	d134      	bne.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f9a0:	4a42      	ldr	r2, [pc, #264]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f9a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f9a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800f9a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9ac:	f000 808a 	beq.w	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800f9b0:	d80d      	bhi.n	800f9ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800f9b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9b6:	d016      	beq.n	800f9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f9b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9bc:	d01c      	beq.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f47f af6d 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 800f9c4:	b005      	add	sp, #20
 800f9c6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800f9ca:	f7fe bead 	b.w	800e728 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 800f9ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9d2:	d07e      	beq.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800f9d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 800f9d8:	f47f af61 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f9dc:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 800f9de:	4b35      	ldr	r3, [pc, #212]	; (800fab4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f9e0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800f9e4:	e079      	b.n	800fada <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9e6:	6810      	ldr	r0, [r2, #0]
 800f9e8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800f9ec:	f43f af4e 	beq.w	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9f0:	a801      	add	r0, sp, #4
 800f9f2:	f7ff fd1b 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
 800f9f6:	e034      	b.n	800fa62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f9f8:	6810      	ldr	r0, [r2, #0]
 800f9fa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800f9fe:	f43f af45 	beq.w	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa02:	a801      	add	r0, sp, #4
 800fa04:	f7ff fdbc 	bl	800f580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa08:	e02b      	b.n	800fa62 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fa0a:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800fa0e:	430b      	orrs	r3, r1
 800fa10:	d117      	bne.n	800fa42 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fa12:	4b26      	ldr	r3, [pc, #152]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800fa14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fa16:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 800fa1a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fa1e:	d006      	beq.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800fa20:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800fa24:	d08e      	beq.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800fa26:	2a00      	cmp	r2, #0
 800fa28:	f47f af39 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800fa2c:	e726      	b.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa2e:	6818      	ldr	r0, [r3, #0]
 800fa30:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800fa34:	f43f af2a 	beq.w	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa38:	a801      	add	r0, sp, #4
 800fa3a:	f7ff fda1 	bl	800f580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fa3e:	9803      	ldr	r0, [sp, #12]
 800fa40:	e724      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fa42:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800fa46:	430b      	orrs	r3, r1
 800fa48:	d116      	bne.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fa4a:	4b18      	ldr	r3, [pc, #96]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800fa4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800fa4e:	03d2      	lsls	r2, r2, #15
 800fa50:	d409      	bmi.n	800fa66 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fa52:	6818      	ldr	r0, [r3, #0]
 800fa54:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800fa58:	f43f af18 	beq.w	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa5c:	a801      	add	r0, sp, #4
 800fa5e:	f7ff fe39 	bl	800f6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa62:	9802      	ldr	r0, [sp, #8]
 800fa64:	e712      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa66:	6818      	ldr	r0, [r3, #0]
 800fa68:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800fa6c:	f43f af0e 	beq.w	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa70:	a801      	add	r0, sp, #4
 800fa72:	f7ff fcdb 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
 800fa76:	e7e2      	b.n	800fa3e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fa78:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800fa7c:	430b      	orrs	r3, r1
 800fa7e:	d12f      	bne.n	800fae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fa80:	4a0a      	ldr	r2, [pc, #40]	; (800faac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800fa82:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fa84:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800fa88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fa8c:	d01a      	beq.n	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800fa8e:	d813      	bhi.n	800fab8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 800fa90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa94:	d0a7      	beq.n	800f9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fa96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa9a:	d0ad      	beq.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f47f aefe 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 800faa2:	b005      	add	sp, #20
 800faa4:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800faa8:	f7ff bcae 	b.w	800f408 <HAL_RCCEx_GetD3PCLK1Freq>
 800faac:	58024400 	.word	0x58024400
 800fab0:	03d09000 	.word	0x03d09000
 800fab4:	00f42400 	.word	0x00f42400
    switch (srcclk)
 800fab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fabc:	d009      	beq.n	800fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 800fabe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fac2:	e789      	b.n	800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fac4:	6810      	ldr	r0, [r2, #0]
 800fac6:	f010 0004 	ands.w	r0, r0, #4
 800faca:	f43f aedf 	beq.w	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800face:	6813      	ldr	r3, [r2, #0]
 800fad0:	e708      	b.n	800f8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fad2:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 800fad4:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800fad6:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 800fada:	bf18      	it	ne
 800fadc:	4618      	movne	r0, r3
 800fade:	e6d5      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fae0:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800fae4:	4301      	orrs	r1, r0
 800fae6:	f47f aeda 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800faea:	4a0b      	ldr	r2, [pc, #44]	; (800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800faec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800faee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800faf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800faf6:	d007      	beq.n	800fb08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800faf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fafc:	f43f af73 	beq.w	800f9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f47f aecc 	bne.w	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800fb06:	e769      	b.n	800f9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb08:	6810      	ldr	r0, [r2, #0]
 800fb0a:	e7a3      	b.n	800fa54 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800fb0c:	4803      	ldr	r0, [pc, #12]	; (800fb1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800fb0e:	e6bd      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 800fb10:	4800      	ldr	r0, [pc, #0]	; (800fb14 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800fb12:	e6bb      	b.n	800f88c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800fb14:	003d0900 	.word	0x003d0900
 800fb18:	58024400 	.word	0x58024400
 800fb1c:	00bb8000 	.word	0x00bb8000

0800fb20 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800fb20:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800fb22:	4604      	mov	r4, r0
 800fb24:	b1c0      	cbz	r0, 800fb58 <HAL_RNG_Init+0x38>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800fb26:	7a43      	ldrb	r3, [r0, #9]
 800fb28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fb2c:	b913      	cbnz	r3, 800fb34 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800fb2e:	7202      	strb	r2, [r0, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800fb30:	f7f2 fb52 	bl	80021d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800fb34:	2302      	movs	r3, #2
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800fb36:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800fb38:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	f022 0220 	bic.w	r2, r2, #32
 800fb42:	430a      	orrs	r2, r1
 800fb44:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	f042 0204 	orr.w	r2, r2, #4
 800fb4c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	065a      	lsls	r2, r3, #25
 800fb52:	d503      	bpl.n	800fb5c <HAL_RNG_Init+0x3c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800fb54:	2304      	movs	r3, #4
 800fb56:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800fb58:	2001      	movs	r0, #1
 800fb5a:	e00a      	b.n	800fb72 <HAL_RNG_Init+0x52>
    return HAL_ERROR;
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800fb5c:	f7fa f95e 	bl	8009e1c <HAL_GetTick>
 800fb60:	4605      	mov	r5, r0
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	6858      	ldr	r0, [r3, #4]
 800fb66:	f010 0004 	ands.w	r0, r0, #4
 800fb6a:	d103      	bne.n	800fb74 <HAL_RNG_Init+0x54>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	7262      	strb	r2, [r4, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800fb70:	60e0      	str	r0, [r4, #12]

  /* Return function status */
  return HAL_OK;
}
 800fb72:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800fb74:	f7fa f952 	bl	8009e1c <HAL_GetTick>
 800fb78:	1b40      	subs	r0, r0, r5
 800fb7a:	2802      	cmp	r0, #2
 800fb7c:	d9f1      	bls.n	800fb62 <HAL_RNG_Init+0x42>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800fb7e:	6823      	ldr	r3, [r4, #0]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	075b      	lsls	r3, r3, #29
 800fb84:	d5ed      	bpl.n	800fb62 <HAL_RNG_Init+0x42>
        hrng->State = HAL_RNG_STATE_ERROR;
 800fb86:	2304      	movs	r3, #4
 800fb88:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800fb8a:	2302      	movs	r3, #2
 800fb8c:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 800fb8e:	e7e3      	b.n	800fb58 <HAL_RNG_Init+0x38>

0800fb90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fb90:	b538      	push	{r3, r4, r5, lr}

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800fb92:	4a0a      	ldr	r2, [pc, #40]	; (800fbbc <HAL_RTC_WaitForSynchro+0x2c>)
{
 800fb94:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800fb96:	6803      	ldr	r3, [r0, #0]
 800fb98:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800fb9a:	f7fa f93f 	bl	8009e1c <HAL_GetTick>
 800fb9e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fba0:	6823      	ldr	r3, [r4, #0]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	069b      	lsls	r3, r3, #26
 800fba6:	d501      	bpl.n	800fbac <HAL_RTC_WaitForSynchro+0x1c>
      {
        return HAL_TIMEOUT;
      }
    }

  return HAL_OK;
 800fba8:	2000      	movs	r0, #0
}
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fbac:	f7fa f936 	bl	8009e1c <HAL_GetTick>
 800fbb0:	1b40      	subs	r0, r0, r5
 800fbb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fbb6:	d9f3      	bls.n	800fba0 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
 800fbb8:	2003      	movs	r0, #3
 800fbba:	e7f6      	b.n	800fbaa <HAL_RTC_WaitForSynchro+0x1a>
 800fbbc:	0003ff5f 	.word	0x0003ff5f

0800fbc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fbc2:	6803      	ldr	r3, [r0, #0]
{
 800fbc4:	4605      	mov	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fbc6:	68dc      	ldr	r4, [r3, #12]
 800fbc8:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 800fbcc:	d118      	bne.n	800fc00 <RTC_EnterInitMode+0x40>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fbce:	f04f 32ff 	mov.w	r2, #4294967295
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fbd2:	2703      	movs	r7, #3
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fbd4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800fbd6:	f7fa f921 	bl	8009e1c <HAL_GetTick>
 800fbda:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	065b      	lsls	r3, r3, #25
 800fbe2:	d401      	bmi.n	800fbe8 <RTC_EnterInitMode+0x28>
 800fbe4:	2c03      	cmp	r4, #3
 800fbe6:	d101      	bne.n	800fbec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 800fbe8:	4620      	mov	r0, r4
 800fbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800fbec:	f7fa f916 	bl	8009e1c <HAL_GetTick>
 800fbf0:	1b80      	subs	r0, r0, r6
 800fbf2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fbf6:	d9f1      	bls.n	800fbdc <RTC_EnterInitMode+0x1c>
        status = HAL_TIMEOUT;
 800fbf8:	2403      	movs	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fbfa:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
 800fbfe:	e7ed      	b.n	800fbdc <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800fc00:	2400      	movs	r4, #0
 800fc02:	e7f1      	b.n	800fbe8 <RTC_EnterInitMode+0x28>

0800fc04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fc04:	b538      	push	{r3, r4, r5, lr}

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800fc06:	4c0f      	ldr	r4, [pc, #60]	; (800fc44 <RTC_ExitInitMode+0x40>)
{
 800fc08:	4605      	mov	r5, r0
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800fc0a:	68e3      	ldr	r3, [r4, #12]
 800fc0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc10:	60e3      	str	r3, [r4, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	069b      	lsls	r3, r3, #26
 800fc16:	d406      	bmi.n	800fc26 <RTC_ExitInitMode+0x22>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fc18:	f7ff ffba 	bl	800fb90 <HAL_RTC_WaitForSynchro>
 800fc1c:	b110      	cbz	r0, 800fc24 <RTC_ExitInitMode+0x20>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fc1e:	2003      	movs	r0, #3
 800fc20:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fc26:	68a3      	ldr	r3, [r4, #8]
 800fc28:	f023 0320 	bic.w	r3, r3, #32
 800fc2c:	60a3      	str	r3, [r4, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fc2e:	f7ff ffaf 	bl	800fb90 <HAL_RTC_WaitForSynchro>
 800fc32:	b110      	cbz	r0, 800fc3a <RTC_ExitInitMode+0x36>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fc34:	2003      	movs	r0, #3
 800fc36:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fc3a:	68a3      	ldr	r3, [r4, #8]
 800fc3c:	f043 0320 	orr.w	r3, r3, #32
 800fc40:	60a3      	str	r3, [r4, #8]
  return status;
 800fc42:	e7ef      	b.n	800fc24 <RTC_ExitInitMode+0x20>
 800fc44:	58004000 	.word	0x58004000

0800fc48 <HAL_RTC_Init>:
{
 800fc48:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d045      	beq.n	800fcdc <HAL_RTC_Init+0x94>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800fc50:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800fc54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fc58:	b91b      	cbnz	r3, 800fc62 <HAL_RTC_Init+0x1a>
      hrtc->Lock = HAL_UNLOCKED;
 800fc5a:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800fc5e:	f7f2 faff 	bl	8002260 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fc62:	2302      	movs	r3, #2
 800fc64:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fc68:	6823      	ldr	r3, [r4, #0]
 800fc6a:	68da      	ldr	r2, [r3, #12]
 800fc6c:	06d2      	lsls	r2, r2, #27
 800fc6e:	d504      	bpl.n	800fc7a <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 800fc70:	2301      	movs	r3, #1
 800fc72:	2000      	movs	r0, #0
 800fc74:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800fc78:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc7a:	22ca      	movs	r2, #202	; 0xca
      status = RTC_EnterInitMode(hrtc);
 800fc7c:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc7e:	625a      	str	r2, [r3, #36]	; 0x24
 800fc80:	2253      	movs	r2, #83	; 0x53
 800fc82:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800fc84:	f7ff ff9c 	bl	800fbc0 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800fc88:	bb10      	cbnz	r0, 800fcd0 <HAL_RTC_Init+0x88>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800fc8a:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fc8c:	6920      	ldr	r0, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800fc8e:	6893      	ldr	r3, [r2, #8]
 800fc90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc98:	6093      	str	r3, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fc9a:	6863      	ldr	r3, [r4, #4]
 800fc9c:	6891      	ldr	r1, [r2, #8]
 800fc9e:	4303      	orrs	r3, r0
 800fca0:	69a0      	ldr	r0, [r4, #24]
 800fca2:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800fca4:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fca6:	430b      	orrs	r3, r1
 800fca8:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800fcaa:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800fcae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fcb2:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 800fcb4:	f7ff ffa6 	bl	800fc04 <RTC_ExitInitMode>
      if(status == HAL_OK)
 800fcb8:	b950      	cbnz	r0, 800fcd0 <HAL_RTC_Init+0x88>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800fcba:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800fcbc:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800fcbe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800fcc0:	f023 0303 	bic.w	r3, r3, #3
 800fcc4:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800fcc6:	69e3      	ldr	r3, [r4, #28]
 800fcc8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800fcca:	432b      	orrs	r3, r5
 800fccc:	430b      	orrs	r3, r1
 800fcce:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	22ff      	movs	r2, #255	; 0xff
 800fcd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d0ca      	beq.n	800fc70 <HAL_RTC_Init+0x28>
 800fcda:	e7cd      	b.n	800fc78 <HAL_RTC_Init+0x30>
  HAL_StatusTypeDef status = HAL_ERROR;
 800fcdc:	2001      	movs	r0, #1
 800fcde:	e7cb      	b.n	800fc78 <HAL_RTC_Init+0x30>

0800fce0 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800fce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce4:	4605      	mov	r5, r0
 800fce6:	b086      	sub	sp, #24
 800fce8:	4688      	mov	r8, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fcea:	f7fa f897 	bl	8009e1c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fcee:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800fcf0:	4681      	mov	r9, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fcf2:	6828      	ldr	r0, [r5, #0]
 800fcf4:	f002 f8c6 	bl	8011e84 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	bb48      	cbnz	r0, 800fd50 <SD_FindSCR.constprop.0+0x70>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800fcfc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800fcfe:	6828      	ldr	r0, [r5, #0]
 800fd00:	0409      	lsls	r1, r1, #16
 800fd02:	f002 f95b 	bl	8011fbc <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800fd06:	4604      	mov	r4, r0
 800fd08:	bb10      	cbnz	r0, 800fd50 <SD_FindSCR.constprop.0+0x70>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800fd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0e:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fd10:	2630      	movs	r6, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd12:	4669      	mov	r1, sp
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fd14:	9404      	str	r4, [sp, #16]
  config.DataLength    = 8U;
 800fd16:	e9cd 0300 	strd	r0, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fd1a:	2302      	movs	r3, #2
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd1c:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fd1e:	e9cd 6302 	strd	r6, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800fd22:	2301      	movs	r3, #1
 800fd24:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd26:	f001 ffde 	bl	8011ce6 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800fd2a:	6828      	ldr	r0, [r5, #0]
 800fd2c:	f002 f97a 	bl	8012024 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800fd30:	4604      	mov	r4, r0
 800fd32:	b968      	cbnz	r0, 800fd50 <SD_FindSCR.constprop.0+0x70>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800fd34:	4607      	mov	r7, r0
 800fd36:	4606      	mov	r6, r0
  {
    return errorstate;
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800fd38:	f240 5a2a 	movw	sl, #1322	; 0x52a
 800fd3c:	6828      	ldr	r0, [r5, #0]
 800fd3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800fd40:	ea12 0f0a 	tst.w	r2, sl
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800fd44:	6b42      	ldr	r2, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800fd46:	d007      	beq.n	800fd58 <SD_FindSCR.constprop.0+0x78>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fd48:	0712      	lsls	r2, r2, #28
 800fd4a:	d519      	bpl.n	800fd80 <SD_FindSCR.constprop.0+0xa0>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800fd4c:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fd4e:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800fd50:	4620      	mov	r0, r4
 800fd52:	b006      	add	sp, #24
 800fd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800fd58:	0311      	lsls	r1, r2, #12
 800fd5a:	d408      	bmi.n	800fd6e <SD_FindSCR.constprop.0+0x8e>
 800fd5c:	b93c      	cbnz	r4, 800fd6e <SD_FindSCR.constprop.0+0x8e>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800fd5e:	f001 ff9d 	bl	8011c9c <SDMMC_ReadFIFO>
 800fd62:	4606      	mov	r6, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800fd64:	6828      	ldr	r0, [r5, #0]
      index++;
 800fd66:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800fd68:	f001 ff98 	bl	8011c9c <SDMMC_ReadFIFO>
 800fd6c:	4607      	mov	r7, r0
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fd6e:	f7fa f855 	bl	8009e1c <HAL_GetTick>
 800fd72:	eba0 0009 	sub.w	r0, r0, r9
 800fd76:	3001      	adds	r0, #1
 800fd78:	d1e0      	bne.n	800fd3c <SD_FindSCR.constprop.0+0x5c>
      return HAL_SD_ERROR_TIMEOUT;
 800fd7a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fd7e:	e7e7      	b.n	800fd50 <SD_FindSCR.constprop.0+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fd80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800fd82:	0793      	lsls	r3, r2, #30
 800fd84:	d501      	bpl.n	800fd8a <SD_FindSCR.constprop.0+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800fd86:	2402      	movs	r4, #2
 800fd88:	e7e1      	b.n	800fd4e <SD_FindSCR.constprop.0+0x6e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800fd8a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800fd8c:	f014 0420 	ands.w	r4, r4, #32
 800fd90:	d001      	beq.n	800fd96 <SD_FindSCR.constprop.0+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800fd92:	2420      	movs	r4, #32
 800fd94:	e7db      	b.n	800fd4e <SD_FindSCR.constprop.0+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fd96:	4a04      	ldr	r2, [pc, #16]	; (800fda8 <SD_FindSCR.constprop.0+0xc8>)
 800fd98:	ba3f      	rev	r7, r7
 800fd9a:	ba36      	rev	r6, r6
 800fd9c:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800fd9e:	f8c8 7000 	str.w	r7, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800fda2:	f8c8 6004 	str.w	r6, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800fda6:	e7d3      	b.n	800fd50 <SD_FindSCR.constprop.0+0x70>
 800fda8:	18000f3a 	.word	0x18000f3a

0800fdac <HAL_SD_ReadBlocks_DMA>:
{
 800fdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	4615      	mov	r5, r2
 800fdb6:	461e      	mov	r6, r3
  if (NULL == pData)
 800fdb8:	4688      	mov	r8, r1
 800fdba:	b941      	cbnz	r1, 800fdce <HAL_SD_ReadBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fdbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800fdbe:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fdc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fdc4:	6343      	str	r3, [r0, #52]	; 0x34
}
 800fdc6:	4638      	mov	r0, r7
 800fdc8:	b006      	add	sp, #24
 800fdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hsd->State == HAL_SD_STATE_READY)
 800fdce:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	b2df      	uxtb	r7, r3
 800fdd6:	d14e      	bne.n	800fe76 <HAL_SD_ReadBlocks_DMA+0xca>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fdd8:	1993      	adds	r3, r2, r6
 800fdda:	6d02      	ldr	r2, [r0, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fddc:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fdde:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fde0:	6341      	str	r1, [r0, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fde2:	d904      	bls.n	800fdee <HAL_SD_ReadBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fde4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fde6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fdea:	6343      	str	r3, [r0, #52]	; 0x34
      return HAL_ERROR;
 800fdec:	e7eb      	b.n	800fdc6 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 800fdee:	2303      	movs	r3, #3
 800fdf0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fdf4:	0273      	lsls	r3, r6, #9
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fdf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
 800fdf8:	6800      	ldr	r0, [r0, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fdfa:	2a01      	cmp	r2, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->Instance->DCTRL = 0U;
 800fe00:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fe02:	4669      	mov	r1, sp
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fe04:	62a3      	str	r3, [r4, #40]	; 0x28
      add *= 512U;
 800fe06:	bf18      	it	ne
 800fe08:	026d      	lslne	r5, r5, #9
    hsd->pRxBuffPtr = pData;
 800fe0a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fe0e:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fe12:	2290      	movs	r2, #144	; 0x90
 800fe14:	2302      	movs	r3, #2
 800fe16:	e9cd 2302 	strd	r2, r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fe1a:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800fe1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fe20:	f001 ff61 	bl	8011ce6 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fe24:	6820      	ldr	r0, [r4, #0]
 800fe26:	68c3      	ldr	r3, [r0, #12]
 800fe28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe2c:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800fe2e:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800fe30:	f8c0 8058 	str.w	r8, [r0, #88]	; 0x58
    if (NumberOfBlocks > 1U)
 800fe34:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800fe36:	6503      	str	r3, [r0, #80]	; 0x50
    if (NumberOfBlocks > 1U)
 800fe38:	d911      	bls.n	800fe5e <HAL_SD_ReadBlocks_DMA+0xb2>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fe3a:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fe3c:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fe3e:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fe40:	f002 f854 	bl	8011eec <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fe44:	6823      	ldr	r3, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800fe46:	b180      	cbz	r0, 800fe6a <HAL_SD_ReadBlocks_DMA+0xbe>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fe48:	4a0c      	ldr	r2, [pc, #48]	; (800fe7c <HAL_SD_ReadBlocks_DMA+0xd0>)
 800fe4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fe4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe4e:	4303      	orrs	r3, r0
 800fe50:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fe52:	2301      	movs	r3, #1
 800fe54:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800fe5c:	e7b3      	b.n	800fdc6 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fe5e:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fe60:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fe62:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fe64:	f002 f828 	bl	8011eb8 <SDMMC_CmdReadSingleBlock>
 800fe68:	e7ec      	b.n	800fe44 <HAL_SD_ReadBlocks_DMA+0x98>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fe6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800fe6c:	4607      	mov	r7, r0
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fe6e:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800fe72:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800fe74:	e7a7      	b.n	800fdc6 <HAL_SD_ReadBlocks_DMA+0x1a>
    return HAL_BUSY;
 800fe76:	2702      	movs	r7, #2
 800fe78:	e7a5      	b.n	800fdc6 <HAL_SD_ReadBlocks_DMA+0x1a>
 800fe7a:	bf00      	nop
 800fe7c:	1fe00fff 	.word	0x1fe00fff

0800fe80 <HAL_SD_WriteBlocks_DMA>:
{
 800fe80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe84:	4604      	mov	r4, r0
 800fe86:	b087      	sub	sp, #28
 800fe88:	4615      	mov	r5, r2
 800fe8a:	461e      	mov	r6, r3
  if (NULL == pData)
 800fe8c:	4688      	mov	r8, r1
 800fe8e:	b941      	cbnz	r1, 800fea2 <HAL_SD_WriteBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fe90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800fe92:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fe94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe98:	6343      	str	r3, [r0, #52]	; 0x34
}
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	b007      	add	sp, #28
 800fe9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hsd->State == HAL_SD_STATE_READY)
 800fea2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	b2df      	uxtb	r7, r3
 800feaa:	d14e      	bne.n	800ff4a <HAL_SD_WriteBlocks_DMA+0xca>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800feac:	1993      	adds	r3, r2, r6
 800feae:	6d02      	ldr	r2, [r0, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800feb0:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800feb2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800feb4:	6341      	str	r1, [r0, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800feb6:	d904      	bls.n	800fec2 <HAL_SD_WriteBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800feb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800feba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800febe:	6343      	str	r3, [r0, #52]	; 0x34
      return HAL_ERROR;
 800fec0:	e7eb      	b.n	800fe9a <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 800fec2:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800fec4:	f04f 0990 	mov.w	r9, #144	; 0x90
    hsd->State = HAL_SD_STATE_BUSY;
 800fec8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fecc:	0273      	lsls	r3, r6, #9
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
 800fed0:	6800      	ldr	r0, [r0, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fed2:	2a01      	cmp	r2, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fed4:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->Instance->DCTRL = 0U;
 800fed8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800feda:	4669      	mov	r1, sp
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fedc:	6223      	str	r3, [r4, #32]
      add *= 512U;
 800fede:	bf18      	it	ne
 800fee0:	026d      	lslne	r5, r5, #9
    hsd->pTxBuffPtr = pData;
 800fee2:	f8c4 801c 	str.w	r8, [r4, #28]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fee6:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800feea:	2300      	movs	r3, #0
 800feec:	e9cd 9302 	strd	r9, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800fef0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fef4:	f001 fef7 	bl	8011ce6 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fef8:	6820      	ldr	r0, [r4, #0]
 800fefa:	68c3      	ldr	r3, [r0, #12]
 800fefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff00:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ff02:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ff04:	f8c0 8058 	str.w	r8, [r0, #88]	; 0x58
    if (NumberOfBlocks > 1U)
 800ff08:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ff0a:	6503      	str	r3, [r0, #80]	; 0x50
    if (NumberOfBlocks > 1U)
 800ff0c:	d911      	bls.n	800ff32 <HAL_SD_WriteBlocks_DMA+0xb2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ff0e:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ff10:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ff12:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ff14:	f002 f81e 	bl	8011f54 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff18:	6823      	ldr	r3, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ff1a:	b180      	cbz	r0, 800ff3e <HAL_SD_WriteBlocks_DMA+0xbe>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff1c:	4a0c      	ldr	r2, [pc, #48]	; (800ff50 <HAL_SD_WriteBlocks_DMA+0xd0>)
 800ff1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ff20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff22:	4303      	orrs	r3, r0
 800ff24:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ff26:	2301      	movs	r3, #1
 800ff28:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800ff30:	e7b3      	b.n	800fe9a <HAL_SD_WriteBlocks_DMA+0x1a>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ff32:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ff34:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ff38:	f001 fff2 	bl	8011f20 <SDMMC_CmdWriteSingleBlock>
 800ff3c:	e7ec      	b.n	800ff18 <HAL_SD_WriteBlocks_DMA+0x98>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ff3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800ff40:	4607      	mov	r7, r0
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ff42:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ff46:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 800ff48:	e7a7      	b.n	800fe9a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 800ff4a:	2702      	movs	r7, #2
 800ff4c:	e7a5      	b.n	800fe9a <HAL_SD_WriteBlocks_DMA+0x1a>
 800ff4e:	bf00      	nop
 800ff50:	1fe00fff 	.word	0x1fe00fff

0800ff54 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ff54:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ff56:	0f9a      	lsrs	r2, r3, #30
 800ff58:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ff5a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800ff5e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ff60:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800ff64:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ff66:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ff6a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ff6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ff70:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ff72:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ff74:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ff76:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800ff78:	0d1a      	lsrs	r2, r3, #20
 800ff7a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ff7c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800ff80:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ff82:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800ff86:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ff88:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800ff8c:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ff8e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800ff92:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ff94:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800ff98:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800ff9e:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 800ffa0:	b510      	push	{r4, lr}
  if (hsd->SdCard.CardType == CARD_SDSC)
 800ffa2:	2a00      	cmp	r2, #0
 800ffa4:	d16b      	bne.n	801007e <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ffa6:	f640 74fc 	movw	r4, #4092	; 0xffc
 800ffaa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800ffac:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800ffb0:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800ffb4:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ffb6:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800ffba:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ffbc:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800ffc0:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ffc2:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800ffc6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ffc8:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ffcc:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ffd0:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ffd2:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ffd4:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ffd6:	7e0b      	ldrb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ffd8:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ffda:	f003 0307 	and.w	r3, r3, #7
 800ffde:	3302      	adds	r3, #2
 800ffe0:	409a      	lsls	r2, r3
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ffe2:	2301      	movs	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ffe4:	6482      	str	r2, [r0, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ffe6:	7a0c      	ldrb	r4, [r1, #8]
 800ffe8:	f004 040f 	and.w	r4, r4, #15
 800ffec:	40a3      	lsls	r3, r4
 800ffee:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800fff0:	0a5b      	lsrs	r3, r3, #9
 800fff2:	4353      	muls	r3, r2
 800fff4:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800fff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fffa:	6543      	str	r3, [r0, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800fffc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800fffe:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8010002:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010004:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801000c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801000e:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010010:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->Reserved3 = 0;
 8010012:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010014:	0fda      	lsrs	r2, r3, #31
 8010016:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010018:	f3c3 7241 	ubfx	r2, r3, #29, #2
 801001c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801001e:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8010022:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010024:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8010028:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801002a:	f3c3 5240 	ubfx	r2, r3, #21, #1
 801002e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010032:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8010036:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801003a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801003e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8010042:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010046:	f3c3 3280 	ubfx	r2, r3, #14, #1
 801004a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801004e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8010052:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010056:	f3c3 3200 	ubfx	r2, r3, #12, #1
 801005a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801005e:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8010062:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010066:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801006a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801006e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010072:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8010076:	2301      	movs	r3, #1
 8010078:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
  return HAL_OK;
 801007c:	e01c      	b.n	80100b8 <HAL_SD_GetCardCSD+0x164>
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801007e:	2a01      	cmp	r2, #1
 8010080:	d10f      	bne.n	80100a2 <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010082:	041b      	lsls	r3, r3, #16
 8010084:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 8010088:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801008c:	4313      	orrs	r3, r2
 801008e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010090:	690b      	ldr	r3, [r1, #16]
 8010092:	3301      	adds	r3, #1
 8010094:	029b      	lsls	r3, r3, #10
 8010096:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010098:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 801009a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801009e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80100a0:	e7a9      	b.n	800fff6 <HAL_SD_GetCardCSD+0xa2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80100a2:	6803      	ldr	r3, [r0, #0]
 80100a4:	4a05      	ldr	r2, [pc, #20]	; (80100bc <HAL_SD_GetCardCSD+0x168>)
 80100a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80100a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80100aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100ae:	6343      	str	r3, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80100b0:	2301      	movs	r3, #1
 80100b2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return HAL_ERROR;
 80100b6:	4618      	mov	r0, r3
}
 80100b8:	bd10      	pop	{r4, pc}
 80100ba:	bf00      	nop
 80100bc:	1fe00fff 	.word	0x1fe00fff

080100c0 <HAL_SD_InitCard>:
{
 80100c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80100c4:	2300      	movs	r3, #0
{
 80100c6:	b094      	sub	sp, #80	; 0x50
 80100c8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80100ca:	2100      	movs	r1, #0
 80100cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80100d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80100d4:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80100d8:	f7ff fba6 	bl	800f828 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80100dc:	4605      	mov	r5, r0
 80100de:	b948      	cbnz	r0, 80100f4 <HAL_SD_InitCard+0x34>
    hsd->State = HAL_SD_STATE_READY;
 80100e0:	2501      	movs	r5, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80100e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 80100e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80100ea:	6363      	str	r3, [r4, #52]	; 0x34
}
 80100ec:	4628      	mov	r0, r5
 80100ee:	b014      	add	sp, #80	; 0x50
 80100f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80100f4:	4e79      	ldr	r6, [pc, #484]	; (80102dc <HAL_SD_InitCard+0x21c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 80100f6:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80100f8:	fbb0 f6f6 	udiv	r6, r0, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 80100fc:	9807      	ldr	r0, [sp, #28]
 80100fe:	4631      	mov	r1, r6
 8010100:	9608      	str	r6, [sp, #32]
 8010102:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010106:	6820      	ldr	r0, [r4, #0]
 8010108:	cb0e      	ldmia	r3, {r1, r2, r3}
 801010a:	f001 fdad 	bl	8011c68 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801010e:	6820      	ldr	r0, [r4, #0]
 8010110:	f001 fdc7 	bl	8011ca2 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8010114:	4b72      	ldr	r3, [pc, #456]	; (80102e0 <HAL_SD_InitCard+0x220>)
 8010116:	429d      	cmp	r5, r3
 8010118:	d902      	bls.n	8010120 <HAL_SD_InitCard+0x60>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801011a:	0076      	lsls	r6, r6, #1
 801011c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8010120:	4870      	ldr	r0, [pc, #448]	; (80102e4 <HAL_SD_InitCard+0x224>)
 8010122:	fbb0 f0f5 	udiv	r0, r0, r5
 8010126:	3001      	adds	r0, #1
 8010128:	f7f9 fe7e 	bl	8009e28 <HAL_Delay>
  __IO uint32_t count = 0U;
 801012c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801012e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8010130:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010132:	f001 fdeb 	bl	8011d0c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8010136:	4605      	mov	r5, r0
 8010138:	2800      	cmp	r0, #0
 801013a:	d153      	bne.n	80101e4 <HAL_SD_InitCard+0x124>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801013c:	6820      	ldr	r0, [r4, #0]
 801013e:	f002 f8db 	bl	80122f8 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8010142:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8010146:	d10a      	bne.n	801015e <HAL_SD_InitCard+0x9e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010148:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 801014a:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801014c:	f001 fdde 	bl	8011d0c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8010150:	b178      	cbz	r0, 8010172 <HAL_SD_InitCard+0xb2>
    hsd->State = HAL_SD_STATE_READY;
 8010152:	2501      	movs	r5, #1
 8010154:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801015a:	4303      	orrs	r3, r0
 801015c:	e7c5      	b.n	80100ea <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 801015e:	2301      	movs	r3, #1
 8010160:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010162:	2100      	movs	r1, #0
 8010164:	6820      	ldr	r0, [r4, #0]
 8010166:	f001 ff29 	bl	8011fbc <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 801016a:	b128      	cbz	r0, 8010178 <HAL_SD_InitCard+0xb8>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801016c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010170:	e7ef      	b.n	8010152 <HAL_SD_InitCard+0x92>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8010172:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010174:	2b01      	cmp	r3, #1
 8010176:	d0f4      	beq.n	8010162 <HAL_SD_InitCard+0xa2>
{
 8010178:	2600      	movs	r6, #0
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801017a:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801017e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80102ec <HAL_SD_InitCard+0x22c>
 8010182:	e014      	b.n	80101ae <HAL_SD_InitCard+0xee>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010184:	4631      	mov	r1, r6
 8010186:	6820      	ldr	r0, [r4, #0]
 8010188:	f001 ff18 	bl	8011fbc <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 801018c:	2800      	cmp	r0, #0
 801018e:	d1e0      	bne.n	8010152 <HAL_SD_InitCard+0x92>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8010190:	4641      	mov	r1, r8
 8010192:	6820      	ldr	r0, [r4, #0]
 8010194:	f002 f80e 	bl	80121b4 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8010198:	2800      	cmp	r0, #0
 801019a:	d1e7      	bne.n	801016c <HAL_SD_InitCard+0xac>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801019c:	4631      	mov	r1, r6
 801019e:	6820      	ldr	r0, [r4, #0]
 80101a0:	f001 fd9e 	bl	8011ce0 <SDMMC_GetResponse>
    count++;
 80101a4:	9b03      	ldr	r3, [sp, #12]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80101a6:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80101a8:	0fc6      	lsrs	r6, r0, #31
    count++;
 80101aa:	3301      	adds	r3, #1
 80101ac:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80101ae:	9b03      	ldr	r3, [sp, #12]
 80101b0:	42bb      	cmp	r3, r7
 80101b2:	d801      	bhi.n	80101b8 <HAL_SD_InitCard+0xf8>
 80101b4:	2e00      	cmp	r6, #0
 80101b6:	d0e5      	beq.n	8010184 <HAL_SD_InitCard+0xc4>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80101b8:	9b03      	ldr	r3, [sp, #12]
 80101ba:	42bb      	cmp	r3, r7
 80101bc:	d80f      	bhi.n	80101de <HAL_SD_InitCard+0x11e>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80101be:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 0U;
 80101c2:	2300      	movs	r3, #0
 80101c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80101c6:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 80101ca:	f7f9 fe27 	bl	8009e1c <HAL_GetTick>
 80101ce:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80101d0:	6820      	ldr	r0, [r4, #0]
 80101d2:	f001 fd6c 	bl	8011cae <SDMMC_GetPowerState>
 80101d6:	b938      	cbnz	r0, 80101e8 <HAL_SD_InitCard+0x128>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80101d8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80101dc:	e7b9      	b.n	8010152 <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80101de:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80101e2:	e7b6      	b.n	8010152 <HAL_SD_InitCard+0x92>
 80101e4:	4628      	mov	r0, r5
    hsd->State = HAL_SD_STATE_READY;
 80101e6:	e7b4      	b.n	8010152 <HAL_SD_InitCard+0x92>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80101e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80101ea:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 80101ec:	2b03      	cmp	r3, #3
 80101ee:	d03e      	beq.n	801026e <HAL_SD_InitCard+0x1ae>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80101f0:	f001 ff8e 	bl	8012110 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d1ac      	bne.n	8010152 <HAL_SD_InitCard+0x92>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80101f8:	4601      	mov	r1, r0
 80101fa:	6820      	ldr	r0, [r4, #0]
 80101fc:	f001 fd70 	bl	8011ce0 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010200:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010202:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010204:	6820      	ldr	r0, [r4, #0]
 8010206:	f001 fd6b 	bl	8011ce0 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801020a:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801020c:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801020e:	6820      	ldr	r0, [r4, #0]
 8010210:	f001 fd66 	bl	8011ce0 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010214:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010216:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010218:	6820      	ldr	r0, [r4, #0]
 801021a:	f001 fd61 	bl	8011ce0 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 801021e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010220:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010222:	2b03      	cmp	r3, #3
 8010224:	d023      	beq.n	801026e <HAL_SD_InitCard+0x1ae>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010226:	f241 3687 	movw	r6, #4999	; 0x1387
    while (sd_rca == 0U)
 801022a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801022e:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 8010230:	2900      	cmp	r1, #0
 8010232:	d044      	beq.n	80102be <HAL_SD_InitCard+0x1fe>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010236:	2b03      	cmp	r3, #3
 8010238:	d019      	beq.n	801026e <HAL_SD_InitCard+0x1ae>
    hsd->SdCard.RelCardAdd = sd_rca;
 801023a:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801023c:	0409      	lsls	r1, r1, #16
 801023e:	f001 ff7e 	bl	801213e <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8010242:	2800      	cmp	r0, #0
 8010244:	d185      	bne.n	8010152 <HAL_SD_InitCard+0x92>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010246:	4601      	mov	r1, r0
 8010248:	6820      	ldr	r0, [r4, #0]
 801024a:	f001 fd49 	bl	8011ce0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801024e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010250:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010252:	6820      	ldr	r0, [r4, #0]
 8010254:	f001 fd44 	bl	8011ce0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010258:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801025a:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801025c:	6820      	ldr	r0, [r4, #0]
 801025e:	f001 fd3f 	bl	8011ce0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010262:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010264:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010266:	6820      	ldr	r0, [r4, #0]
 8010268:	f001 fd3a 	bl	8011ce0 <SDMMC_GetResponse>
 801026c:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801026e:	2104      	movs	r1, #4
 8010270:	6820      	ldr	r0, [r4, #0]
 8010272:	f001 fd35 	bl	8011ce0 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010276:	a909      	add	r1, sp, #36	; 0x24
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010278:	0d00      	lsrs	r0, r0, #20
 801027a:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801027c:	4620      	mov	r0, r4
 801027e:	f7ff fe69 	bl	800ff54 <HAL_SD_GetCardCSD>
 8010282:	4605      	mov	r5, r0
 8010284:	2800      	cmp	r0, #0
 8010286:	f47f af71 	bne.w	801016c <HAL_SD_InitCard+0xac>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801028a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801028c:	6820      	ldr	r0, [r4, #0]
 801028e:	0409      	lsls	r1, r1, #16
 8010290:	f001 fe7a 	bl	8011f88 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8010294:	2800      	cmp	r0, #0
 8010296:	f47f af5c 	bne.w	8010152 <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801029e:	6820      	ldr	r0, [r4, #0]
 80102a0:	f001 fdf0 	bl	8011e84 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80102a4:	2800      	cmp	r0, #0
 80102a6:	f43f af21 	beq.w	80100ec <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80102aa:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80102ac:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80102ae:	4a0e      	ldr	r2, [pc, #56]	; (80102e8 <HAL_SD_InitCard+0x228>)
 80102b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80102b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102b4:	4303      	orrs	r3, r0
 80102b6:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80102b8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    return HAL_ERROR;
 80102bc:	e716      	b.n	80100ec <HAL_SD_InitCard+0x2c>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80102be:	f10d 010a 	add.w	r1, sp, #10
 80102c2:	f001 ffd3 	bl	801226c <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 80102c6:	2800      	cmp	r0, #0
 80102c8:	f47f af43 	bne.w	8010152 <HAL_SD_InitCard+0x92>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80102cc:	f7f9 fda6 	bl	8009e1c <HAL_GetTick>
 80102d0:	1b40      	subs	r0, r0, r5
 80102d2:	42b0      	cmp	r0, r6
 80102d4:	d9a9      	bls.n	801022a <HAL_SD_InitCard+0x16a>
        return HAL_SD_ERROR_TIMEOUT;
 80102d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 80102da:	e73a      	b.n	8010152 <HAL_SD_InitCard+0x92>
 80102dc:	000c3500 	.word	0x000c3500
 80102e0:	000c34ff 	.word	0x000c34ff
 80102e4:	00012110 	.word	0x00012110
 80102e8:	1fe00fff 	.word	0x1fe00fff
 80102ec:	c1100000 	.word	0xc1100000

080102f0 <HAL_SD_GetCardStatus>:
{
 80102f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 80102f4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
{
 80102f8:	b096      	sub	sp, #88	; 0x58
 80102fa:	4604      	mov	r4, r0
 80102fc:	460e      	mov	r6, r1
  if (hsd->State == HAL_SD_STATE_BUSY)
 80102fe:	2b03      	cmp	r3, #3
 8010300:	f000 80b6 	beq.w	8010470 <HAL_SD_GetCardStatus+0x180>
  uint32_t tickstart = HAL_GetTick();
 8010304:	f7f9 fd8a 	bl	8009e1c <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010308:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 801030a:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801030c:	6820      	ldr	r0, [r4, #0]
 801030e:	f001 fce7 	bl	8011ce0 <SDMMC_GetResponse>
 8010312:	0183      	lsls	r3, r0, #6
 8010314:	f100 80a5 	bmi.w	8010462 <HAL_SD_GetCardStatus+0x172>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010318:	2140      	movs	r1, #64	; 0x40
 801031a:	6820      	ldr	r0, [r4, #0]
 801031c:	f001 fdb2 	bl	8011e84 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8010320:	b158      	cbz	r0, 801033a <HAL_SD_GetCardStatus+0x4a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010324:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010326:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8010328:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801032a:	4a52      	ldr	r2, [pc, #328]	; (8010474 <HAL_SD_GetCardStatus+0x184>)
 801032c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801032e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010330:	4303      	orrs	r3, r0
 8010332:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010334:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8010338:	e082      	b.n	8010440 <HAL_SD_GetCardStatus+0x150>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801033a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801033c:	6820      	ldr	r0, [r4, #0]
 801033e:	0409      	lsls	r1, r1, #16
 8010340:	f001 fe3c 	bl	8011fbc <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8010344:	2800      	cmp	r0, #0
 8010346:	d1ec      	bne.n	8010322 <HAL_SD_GetCardStatus+0x32>
  config.DataLength    = 64U;
 8010348:	2340      	movs	r3, #64	; 0x40
 801034a:	f04f 35ff 	mov.w	r5, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801034e:	f04f 0c60 	mov.w	ip, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010352:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010354:	4669      	mov	r1, sp
 8010356:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8010358:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801035c:	2302      	movs	r3, #2
 801035e:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010362:	2301      	movs	r3, #1
 8010364:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010366:	f001 fcbe 	bl	8011ce6 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801036a:	6820      	ldr	r0, [r4, #0]
 801036c:	f001 fe8e 	bl	801208c <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8010370:	2800      	cmp	r0, #0
 8010372:	d1d6      	bne.n	8010322 <HAL_SD_GetCardStatus+0x32>
  uint32_t *pData = pSDstatus;
 8010374:	f10d 0818 	add.w	r8, sp, #24
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801037c:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8010380:	d00a      	beq.n	8010398 <HAL_SD_GetCardStatus+0xa8>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010384:	0711      	lsls	r1, r2, #28
 8010386:	d46f      	bmi.n	8010468 <HAL_SD_GetCardStatus+0x178>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801038a:	0792      	lsls	r2, r2, #30
 801038c:	d46e      	bmi.n	801046c <HAL_SD_GetCardStatus+0x17c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801038e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010390:	069b      	lsls	r3, r3, #26
 8010392:	d51e      	bpl.n	80103d2 <HAL_SD_GetCardStatus+0xe2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8010394:	2020      	movs	r0, #32
 8010396:	e7c6      	b.n	8010326 <HAL_SD_GetCardStatus+0x36>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039a:	0418      	lsls	r0, r3, #16
 801039c:	d508      	bpl.n	80103b0 <HAL_SD_GetCardStatus+0xc0>
 801039e:	f108 0520 	add.w	r5, r8, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80103a2:	6820      	ldr	r0, [r4, #0]
 80103a4:	f001 fc7a 	bl	8011c9c <SDMMC_ReadFIFO>
 80103a8:	f848 0b04 	str.w	r0, [r8], #4
      for (count = 0U; count < 8U; count++)
 80103ac:	45a8      	cmp	r8, r5
 80103ae:	d1f8      	bne.n	80103a2 <HAL_SD_GetCardStatus+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80103b0:	f7f9 fd34 	bl	8009e1c <HAL_GetTick>
 80103b4:	1bc0      	subs	r0, r0, r7
 80103b6:	3001      	adds	r0, #1
 80103b8:	d1de      	bne.n	8010378 <HAL_SD_GetCardStatus+0x88>
      return HAL_SD_ERROR_TIMEOUT;
 80103ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 80103be:	e7b2      	b.n	8010326 <HAL_SD_GetCardStatus+0x36>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80103c0:	f001 fc6c 	bl	8011c9c <SDMMC_ReadFIFO>
 80103c4:	f848 0b04 	str.w	r0, [r8], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80103c8:	f7f9 fd28 	bl	8009e1c <HAL_GetTick>
 80103cc:	1bc0      	subs	r0, r0, r7
 80103ce:	3001      	adds	r0, #1
 80103d0:	d0f3      	beq.n	80103ba <HAL_SD_GetCardStatus+0xca>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80103d2:	6820      	ldr	r0, [r4, #0]
 80103d4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80103d6:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 80103da:	d1f1      	bne.n	80103c0 <HAL_SD_GetCardStatus+0xd0>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80103dc:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80103de:	4b26      	ldr	r3, [pc, #152]	; (8010478 <HAL_SD_GetCardStatus+0x188>)
 80103e0:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80103e2:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80103e6:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80103e8:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80103ec:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80103ee:	0a13      	lsrs	r3, r2, #8
 80103f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80103f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	8073      	strh	r3, [r6, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80103fc:	9b07      	ldr	r3, [sp, #28]
 80103fe:	ba1b      	rev	r3, r3
 8010400:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010402:	9b08      	ldr	r3, [sp, #32]
 8010404:	b2da      	uxtb	r2, r3
 8010406:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010408:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801040c:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801040e:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010412:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8010414:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010418:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801041c:	b2d1      	uxtb	r1, r2
 801041e:	430b      	orrs	r3, r1
 8010420:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010422:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8010426:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010428:	f3c2 2301 	ubfx	r3, r2, #8, #2
 801042c:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801042e:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010432:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010436:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010438:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801043c:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801043e:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010444:	6820      	ldr	r0, [r4, #0]
 8010446:	f001 fd1d 	bl	8011e84 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 801044a:	b130      	cbz	r0, 801045a <HAL_SD_GetCardStatus+0x16a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801044c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 801044e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010450:	4a08      	ldr	r2, [pc, #32]	; (8010474 <HAL_SD_GetCardStatus+0x184>)
 8010452:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010454:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010456:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
}
 801045a:	4628      	mov	r0, r5
 801045c:	b016      	add	sp, #88	; 0x58
 801045e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010462:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010466:	e75e      	b.n	8010326 <HAL_SD_GetCardStatus+0x36>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010468:	2008      	movs	r0, #8
 801046a:	e75c      	b.n	8010326 <HAL_SD_GetCardStatus+0x36>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801046c:	2002      	movs	r0, #2
 801046e:	e75a      	b.n	8010326 <HAL_SD_GetCardStatus+0x36>
    return HAL_ERROR;
 8010470:	2501      	movs	r5, #1
 8010472:	e7f2      	b.n	801045a <HAL_SD_GetCardStatus+0x16a>
 8010474:	1fe00fff 	.word	0x1fe00fff
 8010478:	18000f3a 	.word	0x18000f3a

0801047c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801047c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801047e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010480:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010482:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010484:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010486:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010488:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801048a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801048c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801048e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010490:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010492:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010494:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010496:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010498:	6d43      	ldr	r3, [r0, #84]	; 0x54
}
 801049a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801049c:	61cb      	str	r3, [r1, #28]
}
 801049e:	4770      	bx	lr

080104a0 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80104a0:	2303      	movs	r3, #3
{
 80104a2:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80104a4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
{
 80104a8:	b089      	sub	sp, #36	; 0x24
  if (hsd->SdCard.CardType != CARD_SECURED)
 80104aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 80104ac:	4604      	mov	r4, r0
 80104ae:	460d      	mov	r5, r1
  if (hsd->SdCard.CardType != CARD_SECURED)
 80104b0:	2b03      	cmp	r3, #3
 80104b2:	d002      	beq.n	80104ba <HAL_SD_ConfigWideBusOperation+0x1a>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80104b4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80104b8:	d103      	bne.n	80104c2 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80104ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104c0:	e01e      	b.n	8010500 <HAL_SD_ConfigWideBusOperation+0x60>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80104c2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80104c6:	d123      	bne.n	8010510 <HAL_SD_ConfigWideBusOperation+0x70>
  uint32_t scr[2U] = {0UL, 0UL};
 80104c8:	2100      	movs	r1, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80104ca:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80104cc:	e9cd 1103 	strd	r1, r1, [sp, #12]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80104d0:	f001 fc06 	bl	8011ce0 <SDMMC_GetResponse>
 80104d4:	0180      	lsls	r0, r0, #6
 80104d6:	d435      	bmi.n	8010544 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 80104d8:	a903      	add	r1, sp, #12
 80104da:	4620      	mov	r0, r4
 80104dc:	f7ff fc00 	bl	800fce0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 80104e0:	b960      	cbnz	r0, 80104fc <HAL_SD_ConfigWideBusOperation+0x5c>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80104e2:	9b04      	ldr	r3, [sp, #16]
 80104e4:	0359      	lsls	r1, r3, #13
 80104e6:	d530      	bpl.n	801054a <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80104e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80104ea:	6820      	ldr	r0, [r4, #0]
 80104ec:	0409      	lsls	r1, r1, #16
 80104ee:	f001 fd65 	bl	8011fbc <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80104f2:	b918      	cbnz	r0, 80104fc <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80104f4:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80104f6:	6820      	ldr	r0, [r4, #0]
 80104f8:	f001 fd7a 	bl	8011ff0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80104fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104fe:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010500:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010504:	b343      	cbz	r3, 8010558 <HAL_SD_ConfigWideBusOperation+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010506:	6823      	ldr	r3, [r4, #0]
 8010508:	4a3d      	ldr	r2, [pc, #244]	; (8010600 <HAL_SD_ConfigWideBusOperation+0x160>)
 801050a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 801050c:	2501      	movs	r5, #1
 801050e:	e050      	b.n	80105b2 <HAL_SD_ConfigWideBusOperation+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010510:	b9f1      	cbnz	r1, 8010550 <HAL_SD_ConfigWideBusOperation+0xb0>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010512:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8010514:	e9cd 1103 	strd	r1, r1, [sp, #12]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010518:	f001 fbe2 	bl	8011ce0 <SDMMC_GetResponse>
 801051c:	0182      	lsls	r2, r0, #6
 801051e:	d411      	bmi.n	8010544 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 8010520:	a903      	add	r1, sp, #12
 8010522:	4620      	mov	r0, r4
 8010524:	f7ff fbdc 	bl	800fce0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8010528:	2800      	cmp	r0, #0
 801052a:	d1e7      	bne.n	80104fc <HAL_SD_ConfigWideBusOperation+0x5c>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801052c:	9b04      	ldr	r3, [sp, #16]
 801052e:	03db      	lsls	r3, r3, #15
 8010530:	d50b      	bpl.n	801054a <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010532:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010534:	6820      	ldr	r0, [r4, #0]
 8010536:	0409      	lsls	r1, r1, #16
 8010538:	f001 fd40 	bl	8011fbc <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 801053c:	2800      	cmp	r0, #0
 801053e:	d1dd      	bne.n	80104fc <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010540:	4601      	mov	r1, r0
 8010542:	e7d8      	b.n	80104f6 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010544:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010548:	e7d8      	b.n	80104fc <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801054a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801054e:	e7d5      	b.n	80104fc <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010550:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010552:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010556:	e7d3      	b.n	8010500 <HAL_SD_ConfigWideBusOperation+0x60>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010558:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801055c:	2100      	movs	r1, #0
 801055e:	f7ff f963 	bl	800f828 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8010562:	2800      	cmp	r0, #0
 8010564:	d047      	beq.n	80105f6 <HAL_SD_ConfigWideBusOperation+0x156>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8010566:	6863      	ldr	r3, [r4, #4]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8010568:	4926      	ldr	r1, [pc, #152]	; (8010604 <HAL_SD_ConfigWideBusOperation+0x164>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 801056a:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801056c:	68a3      	ldr	r3, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801056e:	fbb0 f2f1 	udiv	r2, r0, r1
      Init.BusWide             = WideMode;
 8010572:	e9cd 3504 	strd	r3, r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010576:	6923      	ldr	r3, [r4, #16]
 8010578:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801057a:	6963      	ldr	r3, [r4, #20]
 801057c:	4293      	cmp	r3, r2
 801057e:	d20c      	bcs.n	801059a <HAL_SD_ConfigWideBusOperation+0xfa>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010580:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8010582:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010586:	d008      	beq.n	801059a <HAL_SD_ConfigWideBusOperation+0xfa>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010588:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801058c:	d129      	bne.n	80105e2 <HAL_SD_ConfigWideBusOperation+0x142>
        if (hsd->Init.ClockDiv == 0U)
 801058e:	bb1b      	cbnz	r3, 80105d8 <HAL_SD_ConfigWideBusOperation+0x138>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010590:	4288      	cmp	r0, r1
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010592:	d902      	bls.n	801059a <HAL_SD_ConfigWideBusOperation+0xfa>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010594:	4b1c      	ldr	r3, [pc, #112]	; (8010608 <HAL_SD_ConfigWideBusOperation+0x168>)
 8010596:	fbb0 f3f3 	udiv	r3, r0, r3
        Init.ClockDiv = hsd->Init.ClockDiv;
 801059a:	9307      	str	r3, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 801059c:	ab08      	add	r3, sp, #32
  HAL_StatusTypeDef status = HAL_OK;
 801059e:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 80105a0:	e913 0003 	ldmdb	r3, {r0, r1}
 80105a4:	ab03      	add	r3, sp, #12
 80105a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80105aa:	6820      	ldr	r0, [r4, #0]
 80105ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105ae:	f001 fb5b 	bl	8011c68 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80105b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105b6:	6820      	ldr	r0, [r4, #0]
 80105b8:	f001 fc64 	bl	8011e84 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80105bc:	b130      	cbz	r0, 80105cc <HAL_SD_ConfigWideBusOperation+0x12c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105be:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80105c0:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105c2:	4a0f      	ldr	r2, [pc, #60]	; (8010600 <HAL_SD_ConfigWideBusOperation+0x160>)
 80105c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80105c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105c8:	4303      	orrs	r3, r0
 80105ca:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 80105cc:	2301      	movs	r3, #1
}
 80105ce:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80105d0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80105d4:	b009      	add	sp, #36	; 0x24
 80105d6:	bd30      	pop	{r4, r5, pc}
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80105d8:	005a      	lsls	r2, r3, #1
 80105da:	fbb0 f2f2 	udiv	r2, r0, r2
 80105de:	428a      	cmp	r2, r1
 80105e0:	e7d7      	b.n	8010592 <HAL_SD_ConfigWideBusOperation+0xf2>
        if (hsd->Init.ClockDiv == 0U)
 80105e2:	490a      	ldr	r1, [pc, #40]	; (801060c <HAL_SD_ConfigWideBusOperation+0x16c>)
 80105e4:	b91b      	cbnz	r3, 80105ee <HAL_SD_ConfigWideBusOperation+0x14e>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80105e6:	4288      	cmp	r0, r1
 80105e8:	bf88      	it	hi
 80105ea:	4613      	movhi	r3, r2
 80105ec:	e7d5      	b.n	801059a <HAL_SD_ConfigWideBusOperation+0xfa>
 80105ee:	005d      	lsls	r5, r3, #1
 80105f0:	fbb0 f0f5 	udiv	r0, r0, r5
 80105f4:	e7f7      	b.n	80105e6 <HAL_SD_ConfigWideBusOperation+0x146>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80105f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105fc:	6363      	str	r3, [r4, #52]	; 0x34
 80105fe:	e785      	b.n	801050c <HAL_SD_ConfigWideBusOperation+0x6c>
 8010600:	1fe00fff 	.word	0x1fe00fff
 8010604:	02faf080 	.word	0x02faf080
 8010608:	05f5e100 	.word	0x05f5e100
 801060c:	017d7840 	.word	0x017d7840

08010610 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010610:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 8010612:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010614:	0409      	lsls	r1, r1, #16
{
 8010616:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010618:	6800      	ldr	r0, [r0, #0]
 801061a:	f001 fd1d 	bl	8012058 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 801061e:	4601      	mov	r1, r0
 8010620:	b928      	cbnz	r0, 801062e <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010622:	6820      	ldr	r0, [r4, #0]
 8010624:	f001 fb5c 	bl	8011ce0 <SDMMC_GetResponse>
}
 8010628:	f3c0 2043 	ubfx	r0, r0, #9, #4
 801062c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 801062e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010630:	4303      	orrs	r3, r0
  uint32_t resp1 = 0;
 8010632:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8010634:	6363      	str	r3, [r4, #52]	; 0x34
 8010636:	e7f7      	b.n	8010628 <HAL_SD_GetCardState+0x18>

08010638 <HAL_SD_Init>:
{
 8010638:	b570      	push	{r4, r5, r6, lr}
  if (hsd == NULL)
 801063a:	4604      	mov	r4, r0
{
 801063c:	b086      	sub	sp, #24
  if (hsd == NULL)
 801063e:	b918      	cbnz	r0, 8010648 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8010640:	2501      	movs	r5, #1
}
 8010642:	4628      	mov	r0, r5
 8010644:	b006      	add	sp, #24
 8010646:	bd70      	pop	{r4, r5, r6, pc}
  if (hsd->State == HAL_SD_STATE_RESET)
 8010648:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801064c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010650:	b913      	cbnz	r3, 8010658 <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 8010652:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 8010654:	f7f1 fe2a 	bl	80022ac <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8010658:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801065a:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 801065c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010660:	f7ff fd2e 	bl	80100c0 <HAL_SD_InitCard>
 8010664:	2800      	cmp	r0, #0
 8010666:	d1eb      	bne.n	8010640 <HAL_SD_Init+0x8>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8010668:	a901      	add	r1, sp, #4
 801066a:	4620      	mov	r0, r4
 801066c:	f7ff fe40 	bl	80102f0 <HAL_SD_GetCardStatus>
 8010670:	2800      	cmp	r0, #0
 8010672:	d1e5      	bne.n	8010640 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8010674:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 8010676:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801067a:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 801067c:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8010680:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8010682:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8010684:	d105      	bne.n	8010692 <HAL_SD_Init+0x5a>
 8010686:	4313      	orrs	r3, r2
 8010688:	bf0c      	ite	eq
 801068a:	f44f 7080 	moveq.w	r0, #256	; 0x100
 801068e:	f44f 7000 	movne.w	r0, #512	; 0x200
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8010692:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8010694:	4620      	mov	r0, r4
 8010696:	68e1      	ldr	r1, [r4, #12]
 8010698:	f7ff ff02 	bl	80104a0 <HAL_SD_ConfigWideBusOperation>
 801069c:	4605      	mov	r5, r0
 801069e:	2800      	cmp	r0, #0
 80106a0:	d1ce      	bne.n	8010640 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 80106a2:	f7f9 fbbb 	bl	8009e1c <HAL_GetTick>
 80106a6:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80106a8:	4620      	mov	r0, r4
 80106aa:	f7ff ffb1 	bl	8010610 <HAL_SD_GetCardState>
 80106ae:	2804      	cmp	r0, #4
 80106b0:	d106      	bne.n	80106c0 <HAL_SD_Init+0x88>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80106b2:	2300      	movs	r3, #0
 80106b4:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80106b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 80106b8:	2301      	movs	r3, #1
 80106ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 80106be:	e7c0      	b.n	8010642 <HAL_SD_Init+0xa>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80106c0:	f7f9 fbac 	bl	8009e1c <HAL_GetTick>
 80106c4:	1b80      	subs	r0, r0, r6
 80106c6:	3001      	adds	r0, #1
 80106c8:	d1ee      	bne.n	80106a8 <HAL_SD_Init+0x70>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80106ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 80106ce:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80106d0:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80106d2:	2301      	movs	r3, #1
 80106d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 80106d8:	e7b3      	b.n	8010642 <HAL_SD_Init+0xa>
	...

080106dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80106e0:	4604      	mov	r4, r0
 80106e2:	b1f0      	cbz	r0, 8010722 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80106e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80106e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80106ec:	b91b      	cbnz	r3, 80106f6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80106ee:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80106f2:	f7f0 fbb7 	bl	8000e64 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80106f6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80106f8:	1d21      	adds	r1, r4, #4
 80106fa:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80106fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8010700:	f001 fa1e 	bl	8011b40 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8010704:	6862      	ldr	r2, [r4, #4]
 8010706:	4629      	mov	r1, r5
 8010708:	6820      	ldr	r0, [r4, #0]
 801070a:	f001 fa51 	bl	8011bb0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801070e:	4a06      	ldr	r2, [pc, #24]	; (8010728 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 8010710:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8010712:	6813      	ldr	r3, [r2, #0]
 8010714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010718:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 801071a:	2301      	movs	r3, #1
 801071c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8010720:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010722:	2001      	movs	r0, #1
 8010724:	e7fc      	b.n	8010720 <HAL_SDRAM_Init+0x44>
 8010726:	bf00      	nop
 8010728:	52004000 	.word	0x52004000

0801072c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 801072c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801072e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8010732:	4605      	mov	r5, r0
 8010734:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8010736:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8010738:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 801073a:	d010      	beq.n	801075e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801073c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8010740:	2c01      	cmp	r4, #1
 8010742:	d110      	bne.n	8010766 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010744:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010746:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010748:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801074c:	f001 fa66 	bl	8011c1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010750:	6833      	ldr	r3, [r6, #0]
 8010752:	2b02      	cmp	r3, #2
 8010754:	d104      	bne.n	8010760 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010756:	2305      	movs	r3, #5
 8010758:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801075c:	2000      	movs	r0, #0
}
 801075e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8010760:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8010764:	e7fa      	b.n	801075c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8010766:	2001      	movs	r0, #1
 8010768:	e7f9      	b.n	801075e <HAL_SDRAM_SendCommand+0x32>

0801076a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801076a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801076c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8010770:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010772:	2b02      	cmp	r3, #2
 8010774:	b2d8      	uxtb	r0, r3
 8010776:	d00d      	beq.n	8010794 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8010778:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801077c:	2b01      	cmp	r3, #1
 801077e:	b2dd      	uxtb	r5, r3
 8010780:	d109      	bne.n	8010796 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010782:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8010784:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010786:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801078a:	f001 fa59 	bl	8011c40 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801078e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010790:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8010794:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010796:	2001      	movs	r0, #1
 8010798:	e7fc      	b.n	8010794 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0801079a <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.
  * @param  AutoRefreshNumber The SDRAM auto Refresh number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 801079a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801079c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80107a0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	b2d8      	uxtb	r0, r3
 80107a6:	d00d      	beq.n	80107c4 <HAL_SDRAM_SetAutoRefreshNumber+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80107a8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	b2dd      	uxtb	r5, r3
 80107b0:	d109      	bne.n	80107c6 <HAL_SDRAM_SetAutoRefreshNumber+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80107b2:	2302      	movs	r3, #2

    /* Set the Auto-Refresh number */
    (void)FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance, AutoRefreshNumber);
 80107b4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80107b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance, AutoRefreshNumber);
 80107ba:	f001 fa4b 	bl	8011c54 <FMC_SDRAM_SetAutoRefreshNumber>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80107be:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80107c0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80107c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80107c6:	2001      	movs	r0, #1
 80107c8:	e7fc      	b.n	80107c4 <HAL_SDRAM_SetAutoRefreshNumber+0x2a>
	...

080107cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80107ce:	4604      	mov	r4, r0
 80107d0:	b908      	cbnz	r0, 80107d6 <HAL_SPI_Init+0xa>
  {
    return HAL_ERROR;
 80107d2:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 80107d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80107d6:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80107d8:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80107da:	494d      	ldr	r1, [pc, #308]	; (8010910 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80107dc:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80107de:	428a      	cmp	r2, r1
 80107e0:	68c3      	ldr	r3, [r0, #12]
 80107e2:	d009      	beq.n	80107f8 <HAL_SPI_Init+0x2c>
 80107e4:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 80107e8:	428a      	cmp	r2, r1
 80107ea:	d005      	beq.n	80107f8 <HAL_SPI_Init+0x2c>
 80107ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80107f0:	428a      	cmp	r2, r1
 80107f2:	d001      	beq.n	80107f8 <HAL_SPI_Init+0x2c>
 80107f4:	2b0f      	cmp	r3, #15
 80107f6:	d8ec      	bhi.n	80107d2 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80107f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80107fa:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80107fc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80107fe:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8010800:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010804:	4942      	ldr	r1, [pc, #264]	; (8010910 <HAL_SPI_Init+0x144>)
 8010806:	428a      	cmp	r2, r1
 8010808:	d073      	beq.n	80108f2 <HAL_SPI_Init+0x126>
 801080a:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 801080e:	428a      	cmp	r2, r1
 8010810:	d06f      	beq.n	80108f2 <HAL_SPI_Init+0x126>
 8010812:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010816:	428a      	cmp	r2, r1
 8010818:	d06b      	beq.n	80108f2 <HAL_SPI_Init+0x126>
 801081a:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801081c:	d8d9      	bhi.n	80107d2 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 801081e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8010822:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010826:	b923      	cbnz	r3, 8010832 <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8010828:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 801082a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 801082e:	f7f1 fdff 	bl	8002430 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8010832:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8010834:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010836:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8010838:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 801083c:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801083e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8010840:	f023 0301 	bic.w	r3, r3, #1
 8010844:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010846:	6893      	ldr	r3, [r2, #8]
 8010848:	f403 1cf8 	and.w	ip, r3, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801084c:	69a3      	ldr	r3, [r4, #24]
 801084e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010852:	d104      	bne.n	801085e <HAL_SPI_Init+0x92>
 8010854:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8010858:	d14d      	bne.n	80108f6 <HAL_SPI_Init+0x12a>
 801085a:	2e00      	cmp	r6, #0
 801085c:	d050      	beq.n	8010900 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801085e:	f411 0080 	ands.w	r0, r1, #4194304	; 0x400000
 8010862:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010864:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010866:	d050      	beq.n	801090a <HAL_SPI_Init+0x13e>
 8010868:	2d06      	cmp	r5, #6
 801086a:	d94e      	bls.n	801090a <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801086c:	f427 7e80 	bic.w	lr, r7, #256	; 0x100
 8010870:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8010872:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010876:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010878:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801087a:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801087c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801087e:	433d      	orrs	r5, r7
 8010880:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010882:	433d      	orrs	r5, r7
 8010884:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 8010886:	433d      	orrs	r5, r7
 8010888:	ea45 050c 	orr.w	r5, r5, ip
 801088c:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801088e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8010890:	432b      	orrs	r3, r5
 8010892:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010894:	432b      	orrs	r3, r5
 8010896:	6925      	ldr	r5, [r4, #16]
 8010898:	432b      	orrs	r3, r5
 801089a:	6965      	ldr	r5, [r4, #20]
 801089c:	432b      	orrs	r3, r5
 801089e:	6a25      	ldr	r5, [r4, #32]
 80108a0:	432b      	orrs	r3, r5
 80108a2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80108a4:	432b      	orrs	r3, r5
 80108a6:	68a5      	ldr	r5, [r4, #8]
 80108a8:	432b      	orrs	r3, r5
 80108aa:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80108ac:	432b      	orrs	r3, r5
 80108ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80108b0:	432b      	orrs	r3, r5
 80108b2:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80108b4:	b959      	cbnz	r1, 80108ce <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80108b6:	6893      	ldr	r3, [r2, #8]
 80108b8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80108bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80108c0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80108c2:	6893      	ldr	r3, [r2, #8]
 80108c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80108c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80108cc:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80108ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80108d0:	f023 0301 	bic.w	r3, r3, #1
 80108d4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80108d6:	b128      	cbz	r0, 80108e4 <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80108d8:	68d3      	ldr	r3, [r2, #12]
 80108da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80108dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80108e0:	430b      	orrs	r3, r1
 80108e2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80108e4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80108e6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80108e8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80108ec:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 80108f0:	e770      	b.n	80107d4 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80108f2:	2b10      	cmp	r3, #16
 80108f4:	e792      	b.n	801081c <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80108f6:	2900      	cmp	r1, #0
 80108f8:	d1b1      	bne.n	801085e <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80108fa:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 80108fe:	d1ae      	bne.n	801085e <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010900:	6810      	ldr	r0, [r2, #0]
 8010902:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010906:	6010      	str	r0, [r2, #0]
 8010908:	e7a9      	b.n	801085e <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801090a:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 801090e:	e7b2      	b.n	8010876 <HAL_SPI_Init+0xaa>
 8010910:	40013000 	.word	0x40013000

08010914 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010914:	6a03      	ldr	r3, [r0, #32]
 8010916:	f023 0301 	bic.w	r3, r3, #1
{
 801091a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801091c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801091e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010920:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010922:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010924:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8010928:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801092a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801092e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8010932:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010934:	688d      	ldr	r5, [r1, #8]
 8010936:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010938:	4d1b      	ldr	r5, [pc, #108]	; (80109a8 <TIM_OC1_SetConfig+0x94>)
 801093a:	42a8      	cmp	r0, r5
 801093c:	d00f      	beq.n	801095e <TIM_OC1_SetConfig+0x4a>
 801093e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010942:	42a8      	cmp	r0, r5
 8010944:	d00b      	beq.n	801095e <TIM_OC1_SetConfig+0x4a>
 8010946:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 801094a:	42a8      	cmp	r0, r5
 801094c:	d007      	beq.n	801095e <TIM_OC1_SetConfig+0x4a>
 801094e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010952:	42a8      	cmp	r0, r5
 8010954:	d003      	beq.n	801095e <TIM_OC1_SetConfig+0x4a>
 8010956:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801095a:	42a8      	cmp	r0, r5
 801095c:	d11e      	bne.n	801099c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801095e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8010960:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8010964:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010966:	4d10      	ldr	r5, [pc, #64]	; (80109a8 <TIM_OC1_SetConfig+0x94>)
 8010968:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 801096a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801096e:	d00f      	beq.n	8010990 <TIM_OC1_SetConfig+0x7c>
 8010970:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010974:	42a8      	cmp	r0, r5
 8010976:	d00b      	beq.n	8010990 <TIM_OC1_SetConfig+0x7c>
 8010978:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 801097c:	42a8      	cmp	r0, r5
 801097e:	d007      	beq.n	8010990 <TIM_OC1_SetConfig+0x7c>
 8010980:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010984:	42a8      	cmp	r0, r5
 8010986:	d003      	beq.n	8010990 <TIM_OC1_SetConfig+0x7c>
 8010988:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801098c:	42a8      	cmp	r0, r5
 801098e:	d105      	bne.n	801099c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010990:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010994:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8010998:	4334      	orrs	r4, r6
 801099a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801099c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801099e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80109a0:	684a      	ldr	r2, [r1, #4]
 80109a2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109a4:	6203      	str	r3, [r0, #32]
}
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	40010000 	.word	0x40010000

080109ac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80109ac:	6a03      	ldr	r3, [r0, #32]
 80109ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80109b2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80109b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80109ba:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80109bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80109c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80109c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80109c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80109ca:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80109cc:	688d      	ldr	r5, [r1, #8]
 80109ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80109d2:	4d16      	ldr	r5, [pc, #88]	; (8010a2c <TIM_OC3_SetConfig+0x80>)
 80109d4:	42a8      	cmp	r0, r5
 80109d6:	d003      	beq.n	80109e0 <TIM_OC3_SetConfig+0x34>
 80109d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80109dc:	42a8      	cmp	r0, r5
 80109de:	d10d      	bne.n	80109fc <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80109e0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80109e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80109e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109ea:	4d10      	ldr	r5, [pc, #64]	; (8010a2c <TIM_OC3_SetConfig+0x80>)
 80109ec:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80109ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109f2:	d00e      	beq.n	8010a12 <TIM_OC3_SetConfig+0x66>
 80109f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80109f8:	42a8      	cmp	r0, r5
 80109fa:	d00a      	beq.n	8010a12 <TIM_OC3_SetConfig+0x66>
 80109fc:	4d0c      	ldr	r5, [pc, #48]	; (8010a30 <TIM_OC3_SetConfig+0x84>)
 80109fe:	42a8      	cmp	r0, r5
 8010a00:	d007      	beq.n	8010a12 <TIM_OC3_SetConfig+0x66>
 8010a02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010a06:	42a8      	cmp	r0, r5
 8010a08:	d003      	beq.n	8010a12 <TIM_OC3_SetConfig+0x66>
 8010a0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010a0e:	42a8      	cmp	r0, r5
 8010a10:	d106      	bne.n	8010a20 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010a12:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010a16:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8010a1a:	4334      	orrs	r4, r6
 8010a1c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010a24:	684a      	ldr	r2, [r1, #4]
 8010a26:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a28:	6203      	str	r3, [r0, #32]
}
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
 8010a2c:	40010000 	.word	0x40010000
 8010a30:	40014000 	.word	0x40014000

08010a34 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010a34:	6a03      	ldr	r3, [r0, #32]
 8010a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8010a3a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010a3c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010a42:	69c2      	ldr	r2, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010a4a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8010a4e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010a56:	688d      	ldr	r5, [r1, #8]
 8010a58:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a5c:	4d0e      	ldr	r5, [pc, #56]	; (8010a98 <TIM_OC4_SetConfig+0x64>)
 8010a5e:	42a8      	cmp	r0, r5
 8010a60:	d00f      	beq.n	8010a82 <TIM_OC4_SetConfig+0x4e>
 8010a62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010a66:	42a8      	cmp	r0, r5
 8010a68:	d00b      	beq.n	8010a82 <TIM_OC4_SetConfig+0x4e>
 8010a6a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8010a6e:	42a8      	cmp	r0, r5
 8010a70:	d007      	beq.n	8010a82 <TIM_OC4_SetConfig+0x4e>
 8010a72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010a76:	42a8      	cmp	r0, r5
 8010a78:	d003      	beq.n	8010a82 <TIM_OC4_SetConfig+0x4e>
 8010a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010a7e:	42a8      	cmp	r0, r5
 8010a80:	d104      	bne.n	8010a8c <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010a82:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010a86:	694d      	ldr	r5, [r1, #20]
 8010a88:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a8c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a8e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010a90:	684a      	ldr	r2, [r1, #4]
 8010a92:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a94:	6203      	str	r3, [r0, #32]
}
 8010a96:	bd30      	pop	{r4, r5, pc}
 8010a98:	40010000 	.word	0x40010000

08010a9c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010a9c:	6a03      	ldr	r3, [r0, #32]
 8010a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8010aa2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010aa4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010aa6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010aa8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010aaa:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8010ab0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010ab2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010ab6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8010aba:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010abc:	688d      	ldr	r5, [r1, #8]
 8010abe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ac2:	4d0f      	ldr	r5, [pc, #60]	; (8010b00 <TIM_OC5_SetConfig+0x64>)
 8010ac4:	42a8      	cmp	r0, r5
 8010ac6:	d00f      	beq.n	8010ae8 <TIM_OC5_SetConfig+0x4c>
 8010ac8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010acc:	42a8      	cmp	r0, r5
 8010ace:	d00b      	beq.n	8010ae8 <TIM_OC5_SetConfig+0x4c>
 8010ad0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8010ad4:	42a8      	cmp	r0, r5
 8010ad6:	d007      	beq.n	8010ae8 <TIM_OC5_SetConfig+0x4c>
 8010ad8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010adc:	42a8      	cmp	r0, r5
 8010ade:	d003      	beq.n	8010ae8 <TIM_OC5_SetConfig+0x4c>
 8010ae0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010ae4:	42a8      	cmp	r0, r5
 8010ae6:	d104      	bne.n	8010af2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010ae8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010aec:	694d      	ldr	r5, [r1, #20]
 8010aee:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010af2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010af4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010af6:	684a      	ldr	r2, [r1, #4]
 8010af8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010afa:	6203      	str	r3, [r0, #32]
}
 8010afc:	bd30      	pop	{r4, r5, pc}
 8010afe:	bf00      	nop
 8010b00:	40010000 	.word	0x40010000

08010b04 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010b04:	6a03      	ldr	r3, [r0, #32]
 8010b06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8010b0a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010b0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b10:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b12:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010b1a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8010b1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010b26:	688d      	ldr	r5, [r1, #8]
 8010b28:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b2c:	4d0e      	ldr	r5, [pc, #56]	; (8010b68 <TIM_OC6_SetConfig+0x64>)
 8010b2e:	42a8      	cmp	r0, r5
 8010b30:	d00f      	beq.n	8010b52 <TIM_OC6_SetConfig+0x4e>
 8010b32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010b36:	42a8      	cmp	r0, r5
 8010b38:	d00b      	beq.n	8010b52 <TIM_OC6_SetConfig+0x4e>
 8010b3a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8010b3e:	42a8      	cmp	r0, r5
 8010b40:	d007      	beq.n	8010b52 <TIM_OC6_SetConfig+0x4e>
 8010b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010b46:	42a8      	cmp	r0, r5
 8010b48:	d003      	beq.n	8010b52 <TIM_OC6_SetConfig+0x4e>
 8010b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010b4e:	42a8      	cmp	r0, r5
 8010b50:	d104      	bne.n	8010b5c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010b52:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010b56:	694d      	ldr	r5, [r1, #20]
 8010b58:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b5c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010b5e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010b60:	684a      	ldr	r2, [r1, #4]
 8010b62:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b64:	6203      	str	r3, [r0, #32]
}
 8010b66:	bd30      	pop	{r4, r5, pc}
 8010b68:	40010000 	.word	0x40010000

08010b6c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8010b6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d133      	bne.n	8010bdc <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8010b74:	2302      	movs	r3, #2
 8010b76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b7a:	6803      	ldr	r3, [r0, #0]
 8010b7c:	68da      	ldr	r2, [r3, #12]
 8010b7e:	f042 0201 	orr.w	r2, r2, #1
 8010b82:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b84:	4a16      	ldr	r2, [pc, #88]	; (8010be0 <HAL_TIM_Base_Start_IT+0x74>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d01a      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b8e:	d017      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010b90:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d013      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d00f      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d00b      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010ba8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d007      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010bb0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d003      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x54>
 8010bb8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d107      	bne.n	8010bd0 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bc0:	6899      	ldr	r1, [r3, #8]
 8010bc2:	4a08      	ldr	r2, [pc, #32]	; (8010be4 <HAL_TIM_Base_Start_IT+0x78>)
 8010bc4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bc6:	2a06      	cmp	r2, #6
 8010bc8:	d006      	beq.n	8010bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8010bca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010bce:	d003      	beq.n	8010bd8 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	f042 0201 	orr.w	r2, r2, #1
 8010bd6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8010bd8:	2000      	movs	r0, #0
}
 8010bda:	4770      	bx	lr
    return HAL_ERROR;
 8010bdc:	2001      	movs	r0, #1
 8010bde:	4770      	bx	lr
 8010be0:	40010000 	.word	0x40010000
 8010be4:	00010007 	.word	0x00010007

08010be8 <HAL_TIM_OC_MspInit>:
 8010be8:	4770      	bx	lr

08010bea <HAL_TIM_OC_DelayElapsedCallback>:
 8010bea:	4770      	bx	lr

08010bec <HAL_TIM_IC_CaptureCallback>:
 8010bec:	4770      	bx	lr

08010bee <HAL_TIM_PWM_PulseFinishedCallback>:
 8010bee:	4770      	bx	lr

08010bf0 <HAL_TIM_TriggerCallback>:
 8010bf0:	4770      	bx	lr

08010bf2 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010bf2:	6803      	ldr	r3, [r0, #0]
 8010bf4:	691a      	ldr	r2, [r3, #16]
 8010bf6:	0791      	lsls	r1, r2, #30
{
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010bfc:	d50f      	bpl.n	8010c1e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010bfe:	68da      	ldr	r2, [r3, #12]
 8010c00:	0792      	lsls	r2, r2, #30
 8010c02:	d50c      	bpl.n	8010c1e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010c04:	f06f 0202 	mvn.w	r2, #2
 8010c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010c0e:	699b      	ldr	r3, [r3, #24]
 8010c10:	0799      	lsls	r1, r3, #30
 8010c12:	f000 8085 	beq.w	8010d20 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8010c16:	f7ff ffe9 	bl	8010bec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	691a      	ldr	r2, [r3, #16]
 8010c22:	0752      	lsls	r2, r2, #29
 8010c24:	d510      	bpl.n	8010c48 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010c26:	68da      	ldr	r2, [r3, #12]
 8010c28:	0750      	lsls	r0, r2, #29
 8010c2a:	d50d      	bpl.n	8010c48 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010c2c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8010c30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010c34:	2202      	movs	r2, #2
 8010c36:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010c38:	699b      	ldr	r3, [r3, #24]
 8010c3a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8010c3e:	d075      	beq.n	8010d2c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8010c40:	f7ff ffd4 	bl	8010bec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c44:	2300      	movs	r3, #0
 8010c46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010c48:	6823      	ldr	r3, [r4, #0]
 8010c4a:	691a      	ldr	r2, [r3, #16]
 8010c4c:	0711      	lsls	r1, r2, #28
 8010c4e:	d50f      	bpl.n	8010c70 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010c50:	68da      	ldr	r2, [r3, #12]
 8010c52:	0712      	lsls	r2, r2, #28
 8010c54:	d50c      	bpl.n	8010c70 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010c56:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8010c5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c5e:	2204      	movs	r2, #4
 8010c60:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010c62:	69db      	ldr	r3, [r3, #28]
 8010c64:	079b      	lsls	r3, r3, #30
 8010c66:	d067      	beq.n	8010d38 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8010c68:	f7ff ffc0 	bl	8010bec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	691a      	ldr	r2, [r3, #16]
 8010c74:	06d0      	lsls	r0, r2, #27
 8010c76:	d510      	bpl.n	8010c9a <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	06d1      	lsls	r1, r2, #27
 8010c7c:	d50d      	bpl.n	8010c9a <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c7e:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8010c82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c86:	2208      	movs	r2, #8
 8010c88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c8a:	69db      	ldr	r3, [r3, #28]
 8010c8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8010c90:	d058      	beq.n	8010d44 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8010c92:	f7ff ffab 	bl	8010bec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c96:	2300      	movs	r3, #0
 8010c98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	691a      	ldr	r2, [r3, #16]
 8010c9e:	07d2      	lsls	r2, r2, #31
 8010ca0:	d508      	bpl.n	8010cb4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010ca2:	68da      	ldr	r2, [r3, #12]
 8010ca4:	07d0      	lsls	r0, r2, #31
 8010ca6:	d505      	bpl.n	8010cb4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010ca8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8010cac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010cae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8010cb0:	f7f0 ffe2 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	691a      	ldr	r2, [r3, #16]
 8010cb8:	0611      	lsls	r1, r2, #24
 8010cba:	d508      	bpl.n	8010cce <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cbc:	68da      	ldr	r2, [r3, #12]
 8010cbe:	0612      	lsls	r2, r2, #24
 8010cc0:	d505      	bpl.n	8010cce <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010cc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8010cc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010cc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010cca:	f000 fb62 	bl	8011392 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010cce:	6823      	ldr	r3, [r4, #0]
 8010cd0:	691a      	ldr	r2, [r3, #16]
 8010cd2:	05d0      	lsls	r0, r2, #23
 8010cd4:	d508      	bpl.n	8010ce8 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cd6:	68da      	ldr	r2, [r3, #12]
 8010cd8:	0611      	lsls	r1, r2, #24
 8010cda:	d505      	bpl.n	8010ce8 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010cdc:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8010ce0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010ce2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8010ce4:	f000 fb56 	bl	8011394 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010ce8:	6823      	ldr	r3, [r4, #0]
 8010cea:	691a      	ldr	r2, [r3, #16]
 8010cec:	0652      	lsls	r2, r2, #25
 8010cee:	d508      	bpl.n	8010d02 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010cf0:	68da      	ldr	r2, [r3, #12]
 8010cf2:	0650      	lsls	r0, r2, #25
 8010cf4:	d505      	bpl.n	8010d02 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010cf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8010cfa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010cfc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8010cfe:	f7ff ff77 	bl	8010bf0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010d02:	6823      	ldr	r3, [r4, #0]
 8010d04:	691a      	ldr	r2, [r3, #16]
 8010d06:	0691      	lsls	r1, r2, #26
 8010d08:	d522      	bpl.n	8010d50 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d0a:	68da      	ldr	r2, [r3, #12]
 8010d0c:	0692      	lsls	r2, r2, #26
 8010d0e:	d51f      	bpl.n	8010d50 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d10:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8010d14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d16:	611a      	str	r2, [r3, #16]
}
 8010d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010d1c:	f000 bb38 	b.w	8011390 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d20:	f7ff ff63 	bl	8010bea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d24:	4620      	mov	r0, r4
 8010d26:	f7ff ff62 	bl	8010bee <HAL_TIM_PWM_PulseFinishedCallback>
 8010d2a:	e776      	b.n	8010c1a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d2c:	f7ff ff5d 	bl	8010bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d30:	4620      	mov	r0, r4
 8010d32:	f7ff ff5c 	bl	8010bee <HAL_TIM_PWM_PulseFinishedCallback>
 8010d36:	e785      	b.n	8010c44 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d38:	f7ff ff57 	bl	8010bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f7ff ff56 	bl	8010bee <HAL_TIM_PWM_PulseFinishedCallback>
 8010d42:	e793      	b.n	8010c6c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d44:	f7ff ff51 	bl	8010bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7ff ff50 	bl	8010bee <HAL_TIM_PWM_PulseFinishedCallback>
 8010d4e:	e7a2      	b.n	8010c96 <HAL_TIM_IRQHandler+0xa4>
}
 8010d50:	bd10      	pop	{r4, pc}
	...

08010d54 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d54:	4a30      	ldr	r2, [pc, #192]	; (8010e18 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8010d56:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d58:	4290      	cmp	r0, r2
 8010d5a:	d012      	beq.n	8010d82 <TIM_Base_SetConfig+0x2e>
 8010d5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010d60:	d00f      	beq.n	8010d82 <TIM_Base_SetConfig+0x2e>
 8010d62:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010d66:	4290      	cmp	r0, r2
 8010d68:	d00b      	beq.n	8010d82 <TIM_Base_SetConfig+0x2e>
 8010d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d6e:	4290      	cmp	r0, r2
 8010d70:	d007      	beq.n	8010d82 <TIM_Base_SetConfig+0x2e>
 8010d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d76:	4290      	cmp	r0, r2
 8010d78:	d003      	beq.n	8010d82 <TIM_Base_SetConfig+0x2e>
 8010d7a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010d7e:	4290      	cmp	r0, r2
 8010d80:	d119      	bne.n	8010db6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8010d82:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010d88:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d8a:	4a23      	ldr	r2, [pc, #140]	; (8010e18 <TIM_Base_SetConfig+0xc4>)
 8010d8c:	4290      	cmp	r0, r2
 8010d8e:	d01d      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010d90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010d94:	d01a      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010d96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010d9a:	4290      	cmp	r0, r2
 8010d9c:	d016      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010da2:	4290      	cmp	r0, r2
 8010da4:	d012      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010daa:	4290      	cmp	r0, r2
 8010dac:	d00e      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010dae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010db2:	4290      	cmp	r0, r2
 8010db4:	d00a      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010db6:	4a19      	ldr	r2, [pc, #100]	; (8010e1c <TIM_Base_SetConfig+0xc8>)
 8010db8:	4290      	cmp	r0, r2
 8010dba:	d007      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010dc0:	4290      	cmp	r0, r2
 8010dc2:	d003      	beq.n	8010dcc <TIM_Base_SetConfig+0x78>
 8010dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010dc8:	4290      	cmp	r0, r2
 8010dca:	d103      	bne.n	8010dd4 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8010dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010dd0:	68ca      	ldr	r2, [r1, #12]
 8010dd2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010dd4:	694a      	ldr	r2, [r1, #20]
 8010dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dda:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8010ddc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010dde:	688b      	ldr	r3, [r1, #8]
 8010de0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010de2:	680b      	ldr	r3, [r1, #0]
 8010de4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010de6:	4b0c      	ldr	r3, [pc, #48]	; (8010e18 <TIM_Base_SetConfig+0xc4>)
 8010de8:	4298      	cmp	r0, r3
 8010dea:	d00f      	beq.n	8010e0c <TIM_Base_SetConfig+0xb8>
 8010dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010df0:	4298      	cmp	r0, r3
 8010df2:	d00b      	beq.n	8010e0c <TIM_Base_SetConfig+0xb8>
 8010df4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8010df8:	4298      	cmp	r0, r3
 8010dfa:	d007      	beq.n	8010e0c <TIM_Base_SetConfig+0xb8>
 8010dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e00:	4298      	cmp	r0, r3
 8010e02:	d003      	beq.n	8010e0c <TIM_Base_SetConfig+0xb8>
 8010e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e08:	4298      	cmp	r0, r3
 8010e0a:	d101      	bne.n	8010e10 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8010e0c:	690b      	ldr	r3, [r1, #16]
 8010e0e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8010e10:	2301      	movs	r3, #1
 8010e12:	6143      	str	r3, [r0, #20]
}
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	40010000 	.word	0x40010000
 8010e1c:	40014000 	.word	0x40014000

08010e20 <HAL_TIM_Base_Init>:
{
 8010e20:	b510      	push	{r4, lr}
  if (htim == NULL)
 8010e22:	4604      	mov	r4, r0
 8010e24:	b350      	cbz	r0, 8010e7c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010e26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010e2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010e2e:	b91b      	cbnz	r3, 8010e38 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8010e30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8010e34:	f7f1 fd20 	bl	8002878 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8010e38:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8010e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e42:	f7ff ff87 	bl	8010d54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e46:	2301      	movs	r3, #1
  return HAL_OK;
 8010e48:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e4a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010e52:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010e56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010e5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010e72:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010e76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010e7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010e7c:	2001      	movs	r0, #1
 8010e7e:	e7fc      	b.n	8010e7a <HAL_TIM_Base_Init+0x5a>

08010e80 <HAL_TIM_OC_Init>:
{
 8010e80:	b510      	push	{r4, lr}
  if (htim == NULL)
 8010e82:	4604      	mov	r4, r0
 8010e84:	b350      	cbz	r0, 8010edc <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010e86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010e8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010e8e:	b91b      	cbnz	r3, 8010e98 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8010e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8010e94:	f7ff fea8 	bl	8010be8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8010e98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010e9a:	6820      	ldr	r0, [r4, #0]
 8010e9c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8010e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010ea2:	f7ff ff57 	bl	8010d54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ea6:	2301      	movs	r3, #1
  return HAL_OK;
 8010ea8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010eaa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010eae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010eb2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010eb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010eba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010ebe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ec6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ece:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010ed2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010ed6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010eda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010edc:	2001      	movs	r0, #1
 8010ede:	e7fc      	b.n	8010eda <HAL_TIM_OC_Init+0x5a>

08010ee0 <HAL_TIM_PWM_Init>:
{
 8010ee0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	b350      	cbz	r0, 8010f3c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010ee6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010eee:	b91b      	cbnz	r3, 8010ef8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8010ef0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8010ef4:	f7f1 fc82 	bl	80027fc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8010ef8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010efa:	6820      	ldr	r0, [r4, #0]
 8010efc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8010efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f02:	f7ff ff27 	bl	8010d54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f06:	2301      	movs	r3, #1
  return HAL_OK;
 8010f08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010f12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010f16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010f1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010f32:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010f36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010f3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	e7fc      	b.n	8010f3a <HAL_TIM_PWM_Init+0x5a>

08010f40 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f40:	6a03      	ldr	r3, [r0, #32]
 8010f42:	f023 0310 	bic.w	r3, r3, #16
{
 8010f46:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f48:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8010f4a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8010f4c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8010f4e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8010f50:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010f56:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8010f5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010f62:	688d      	ldr	r5, [r1, #8]
 8010f64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010f68:	4d16      	ldr	r5, [pc, #88]	; (8010fc4 <TIM_OC2_SetConfig+0x84>)
 8010f6a:	42a8      	cmp	r0, r5
 8010f6c:	d003      	beq.n	8010f76 <TIM_OC2_SetConfig+0x36>
 8010f6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010f72:	42a8      	cmp	r0, r5
 8010f74:	d10d      	bne.n	8010f92 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010f76:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8010f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010f7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f80:	4d10      	ldr	r5, [pc, #64]	; (8010fc4 <TIM_OC2_SetConfig+0x84>)
 8010f82:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8010f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f88:	d00e      	beq.n	8010fa8 <TIM_OC2_SetConfig+0x68>
 8010f8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010f8e:	42a8      	cmp	r0, r5
 8010f90:	d00a      	beq.n	8010fa8 <TIM_OC2_SetConfig+0x68>
 8010f92:	4d0d      	ldr	r5, [pc, #52]	; (8010fc8 <TIM_OC2_SetConfig+0x88>)
 8010f94:	42a8      	cmp	r0, r5
 8010f96:	d007      	beq.n	8010fa8 <TIM_OC2_SetConfig+0x68>
 8010f98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010f9c:	42a8      	cmp	r0, r5
 8010f9e:	d003      	beq.n	8010fa8 <TIM_OC2_SetConfig+0x68>
 8010fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010fa4:	42a8      	cmp	r0, r5
 8010fa6:	d106      	bne.n	8010fb6 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010fa8:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010fac:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8010fb0:	4334      	orrs	r4, r6
 8010fb2:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8010fb6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010fb8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8010fba:	684a      	ldr	r2, [r1, #4]
 8010fbc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8010fbe:	6203      	str	r3, [r0, #32]
}
 8010fc0:	bd70      	pop	{r4, r5, r6, pc}
 8010fc2:	bf00      	nop
 8010fc4:	40010000 	.word	0x40010000
 8010fc8:	40014000 	.word	0x40014000

08010fcc <HAL_TIM_OC_ConfigChannel>:
{
 8010fcc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8010fce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8010fd2:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d029      	beq.n	801102c <HAL_TIM_OC_ConfigChannel+0x60>
  switch (Channel)
 8010fd8:	2a0c      	cmp	r2, #12
 8010fda:	d01f      	beq.n	801101c <HAL_TIM_OC_ConfigChannel+0x50>
 8010fdc:	d809      	bhi.n	8010ff2 <HAL_TIM_OC_ConfigChannel+0x26>
 8010fde:	2a04      	cmp	r2, #4
 8010fe0:	d014      	beq.n	801100c <HAL_TIM_OC_ConfigChannel+0x40>
 8010fe2:	2a08      	cmp	r2, #8
 8010fe4:	d016      	beq.n	8011014 <HAL_TIM_OC_ConfigChannel+0x48>
 8010fe6:	b162      	cbz	r2, 8011002 <HAL_TIM_OC_ConfigChannel+0x36>
 8010fe8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010fea:	2300      	movs	r3, #0
 8010fec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010ff0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8010ff2:	2a10      	cmp	r2, #16
 8010ff4:	d016      	beq.n	8011024 <HAL_TIM_OC_ConfigChannel+0x58>
 8010ff6:	2a14      	cmp	r2, #20
 8010ff8:	d1f6      	bne.n	8010fe8 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010ffa:	6800      	ldr	r0, [r0, #0]
 8010ffc:	f7ff fd82 	bl	8010b04 <TIM_OC6_SetConfig>
 8011000:	e002      	b.n	8011008 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011002:	6800      	ldr	r0, [r0, #0]
 8011004:	f7ff fc86 	bl	8010914 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8011008:	2000      	movs	r0, #0
      break;
 801100a:	e7ee      	b.n	8010fea <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801100c:	6800      	ldr	r0, [r0, #0]
 801100e:	f7ff ff97 	bl	8010f40 <TIM_OC2_SetConfig>
      break;
 8011012:	e7f9      	b.n	8011008 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011014:	6800      	ldr	r0, [r0, #0]
 8011016:	f7ff fcc9 	bl	80109ac <TIM_OC3_SetConfig>
      break;
 801101a:	e7f5      	b.n	8011008 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801101c:	6800      	ldr	r0, [r0, #0]
 801101e:	f7ff fd09 	bl	8010a34 <TIM_OC4_SetConfig>
      break;
 8011022:	e7f1      	b.n	8011008 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011024:	6800      	ldr	r0, [r0, #0]
 8011026:	f7ff fd39 	bl	8010a9c <TIM_OC5_SetConfig>
      break;
 801102a:	e7ed      	b.n	8011008 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 801102c:	2002      	movs	r0, #2
 801102e:	e7df      	b.n	8010ff0 <HAL_TIM_OC_ConfigChannel+0x24>

08011030 <HAL_TIM_PWM_ConfigChannel>:
{
 8011030:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8011032:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8011036:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8011038:	2b01      	cmp	r3, #1
 801103a:	d074      	beq.n	8011126 <HAL_TIM_PWM_ConfigChannel+0xf6>
 801103c:	2301      	movs	r3, #1
  switch (Channel)
 801103e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8011040:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8011044:	d04f      	beq.n	80110e6 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8011046:	d809      	bhi.n	801105c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8011048:	2a04      	cmp	r2, #4
 801104a:	d02c      	beq.n	80110a6 <HAL_TIM_PWM_ConfigChannel+0x76>
 801104c:	2a08      	cmp	r2, #8
 801104e:	d03a      	beq.n	80110c6 <HAL_TIM_PWM_ConfigChannel+0x96>
 8011050:	b1c2      	cbz	r2, 8011084 <HAL_TIM_PWM_ConfigChannel+0x54>
 8011052:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8011054:	2300      	movs	r3, #0
 8011056:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 801105a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 801105c:	2a10      	cmp	r2, #16
 801105e:	d052      	beq.n	8011106 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8011060:	2a14      	cmp	r2, #20
 8011062:	d1f6      	bne.n	8011052 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011064:	6800      	ldr	r0, [r0, #0]
 8011066:	f7ff fd4d 	bl	8010b04 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801106a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801106c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011072:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011074:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801107a:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801107c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801107e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011082:	e04e      	b.n	8011122 <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011084:	6800      	ldr	r0, [r0, #0]
 8011086:	f7ff fc45 	bl	8010914 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801108a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801108c:	6983      	ldr	r3, [r0, #24]
 801108e:	f043 0308 	orr.w	r3, r3, #8
 8011092:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011094:	6983      	ldr	r3, [r0, #24]
 8011096:	f023 0304 	bic.w	r3, r3, #4
 801109a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801109c:	6983      	ldr	r3, [r0, #24]
 801109e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110a0:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80110a2:	2000      	movs	r0, #0
      break;
 80110a4:	e7d6      	b.n	8011054 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80110a6:	6800      	ldr	r0, [r0, #0]
 80110a8:	f7ff ff4a 	bl	8010f40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110ac:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80110ae:	6983      	ldr	r3, [r0, #24]
 80110b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110b4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80110b6:	6983      	ldr	r3, [r0, #24]
 80110b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110bc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110be:	6983      	ldr	r3, [r0, #24]
 80110c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80110c4:	e7ec      	b.n	80110a0 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110c6:	6800      	ldr	r0, [r0, #0]
 80110c8:	f7ff fc70 	bl	80109ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110cc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110ce:	69c3      	ldr	r3, [r0, #28]
 80110d0:	f043 0308 	orr.w	r3, r3, #8
 80110d4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80110d6:	69c3      	ldr	r3, [r0, #28]
 80110d8:	f023 0304 	bic.w	r3, r3, #4
 80110dc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110de:	69c3      	ldr	r3, [r0, #28]
 80110e0:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80110e2:	61c3      	str	r3, [r0, #28]
      break;
 80110e4:	e7dd      	b.n	80110a2 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80110e6:	6800      	ldr	r0, [r0, #0]
 80110e8:	f7ff fca4 	bl	8010a34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80110ec:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80110ee:	69c3      	ldr	r3, [r0, #28]
 80110f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110f4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80110f6:	69c3      	ldr	r3, [r0, #28]
 80110f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110fc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80110fe:	69c3      	ldr	r3, [r0, #28]
 8011100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011104:	e7ed      	b.n	80110e2 <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011106:	6800      	ldr	r0, [r0, #0]
 8011108:	f7ff fcc8 	bl	8010a9c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801110c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801110e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011110:	f043 0308 	orr.w	r3, r3, #8
 8011114:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011116:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011118:	f023 0304 	bic.w	r3, r3, #4
 801111c:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801111e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011120:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011122:	6543      	str	r3, [r0, #84]	; 0x54
 8011124:	e7bd      	b.n	80110a2 <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 8011126:	2002      	movs	r0, #2
 8011128:	e797      	b.n	801105a <HAL_TIM_PWM_ConfigChannel+0x2a>

0801112a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801112a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801112e:	6a03      	ldr	r3, [r0, #32]
{
 8011130:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011132:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011134:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011136:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8011138:	ea23 0304 	bic.w	r3, r3, r4
 801113c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801113e:	6a03      	ldr	r3, [r0, #32]
 8011140:	431a      	orrs	r2, r3
 8011142:	6202      	str	r2, [r0, #32]
}
 8011144:	bd10      	pop	{r4, pc}
	...

08011148 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011148:	2908      	cmp	r1, #8
{
 801114a:	b508      	push	{r3, lr}
 801114c:	d018      	beq.n	8011180 <HAL_TIM_OC_Start+0x38>
 801114e:	d805      	bhi.n	801115c <HAL_TIM_OC_Start+0x14>
 8011150:	b159      	cbz	r1, 801116a <HAL_TIM_OC_Start+0x22>
 8011152:	2904      	cmp	r1, #4
 8011154:	d011      	beq.n	801117a <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011156:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 801115a:	e013      	b.n	8011184 <HAL_TIM_OC_Start+0x3c>
 801115c:	290c      	cmp	r1, #12
 801115e:	d023      	beq.n	80111a8 <HAL_TIM_OC_Start+0x60>
 8011160:	2910      	cmp	r1, #16
 8011162:	d1f8      	bne.n	8011156 <HAL_TIM_OC_Start+0xe>
 8011164:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8011168:	e00c      	b.n	8011184 <HAL_TIM_OC_Start+0x3c>
 801116a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 801116e:	3b01      	subs	r3, #1
 8011170:	bf18      	it	ne
 8011172:	2301      	movne	r3, #1
 8011174:	b183      	cbz	r3, 8011198 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8011176:	2001      	movs	r0, #1
 8011178:	e042      	b.n	8011200 <HAL_TIM_OC_Start+0xb8>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801117a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 801117e:	e7f6      	b.n	801116e <HAL_TIM_OC_Start+0x26>
 8011180:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011184:	3b01      	subs	r3, #1
 8011186:	bf18      	it	ne
 8011188:	2301      	movne	r3, #1
 801118a:	2b00      	cmp	r3, #0
 801118c:	d1f3      	bne.n	8011176 <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801118e:	2908      	cmp	r1, #8
 8011190:	f04f 0302 	mov.w	r3, #2
 8011194:	d038      	beq.n	8011208 <HAL_TIM_OC_Start+0xc0>
 8011196:	d80a      	bhi.n	80111ae <HAL_TIM_OC_Start+0x66>
 8011198:	2302      	movs	r3, #2
 801119a:	b179      	cbz	r1, 80111bc <HAL_TIM_OC_Start+0x74>
 801119c:	2904      	cmp	r1, #4
 801119e:	d030      	beq.n	8011202 <HAL_TIM_OC_Start+0xba>
 80111a0:	2302      	movs	r3, #2
 80111a2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80111a6:	e00b      	b.n	80111c0 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80111a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80111ac:	e7ea      	b.n	8011184 <HAL_TIM_OC_Start+0x3c>
 80111ae:	290c      	cmp	r1, #12
 80111b0:	d02d      	beq.n	801120e <HAL_TIM_OC_Start+0xc6>
 80111b2:	2910      	cmp	r1, #16
 80111b4:	d1f4      	bne.n	80111a0 <HAL_TIM_OC_Start+0x58>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80111b6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80111ba:	e001      	b.n	80111c0 <HAL_TIM_OC_Start+0x78>
 80111bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80111c0:	6800      	ldr	r0, [r0, #0]
 80111c2:	2201      	movs	r2, #1
 80111c4:	f7ff ffb1 	bl	801112a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80111c8:	4b26      	ldr	r3, [pc, #152]	; (8011264 <HAL_TIM_OC_Start+0x11c>)
 80111ca:	4298      	cmp	r0, r3
 80111cc:	d022      	beq.n	8011214 <HAL_TIM_OC_Start+0xcc>
 80111ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111d2:	4298      	cmp	r0, r3
 80111d4:	d01e      	beq.n	8011214 <HAL_TIM_OC_Start+0xcc>
 80111d6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80111da:	4298      	cmp	r0, r3
 80111dc:	d01a      	beq.n	8011214 <HAL_TIM_OC_Start+0xcc>
 80111de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111e2:	4298      	cmp	r0, r3
 80111e4:	d016      	beq.n	8011214 <HAL_TIM_OC_Start+0xcc>
 80111e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111ea:	4298      	cmp	r0, r3
 80111ec:	d012      	beq.n	8011214 <HAL_TIM_OC_Start+0xcc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80111ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80111f2:	d117      	bne.n	8011224 <HAL_TIM_OC_Start+0xdc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111f4:	6882      	ldr	r2, [r0, #8]
 80111f6:	4b1c      	ldr	r3, [pc, #112]	; (8011268 <HAL_TIM_OC_Start+0x120>)
 80111f8:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111fa:	2b06      	cmp	r3, #6
 80111fc:	d12e      	bne.n	801125c <HAL_TIM_OC_Start+0x114>
  return HAL_OK;
 80111fe:	2000      	movs	r0, #0
}
 8011200:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011202:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8011206:	e7db      	b.n	80111c0 <HAL_TIM_OC_Start+0x78>
 8011208:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801120c:	e7d8      	b.n	80111c0 <HAL_TIM_OC_Start+0x78>
 801120e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8011212:	e7d5      	b.n	80111c0 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 8011214:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801121a:	6443      	str	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801121c:	4b11      	ldr	r3, [pc, #68]	; (8011264 <HAL_TIM_OC_Start+0x11c>)
 801121e:	4298      	cmp	r0, r3
 8011220:	d1e5      	bne.n	80111ee <HAL_TIM_OC_Start+0xa6>
 8011222:	e7e7      	b.n	80111f4 <HAL_TIM_OC_Start+0xac>
 8011224:	4b11      	ldr	r3, [pc, #68]	; (801126c <HAL_TIM_OC_Start+0x124>)
 8011226:	4298      	cmp	r0, r3
 8011228:	d0e4      	beq.n	80111f4 <HAL_TIM_OC_Start+0xac>
 801122a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801122e:	4298      	cmp	r0, r3
 8011230:	d0e0      	beq.n	80111f4 <HAL_TIM_OC_Start+0xac>
 8011232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011236:	4298      	cmp	r0, r3
 8011238:	d0dc      	beq.n	80111f4 <HAL_TIM_OC_Start+0xac>
 801123a:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 801123e:	4298      	cmp	r0, r3
 8011240:	d0d8      	beq.n	80111f4 <HAL_TIM_OC_Start+0xac>
 8011242:	f5a3 436c 	sub.w	r3, r3, #60416	; 0xec00
 8011246:	4298      	cmp	r0, r3
 8011248:	d0d4      	beq.n	80111f4 <HAL_TIM_OC_Start+0xac>
 801124a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 801124e:	4298      	cmp	r0, r3
 8011250:	d0d0      	beq.n	80111f4 <HAL_TIM_OC_Start+0xac>
    __HAL_TIM_ENABLE(htim);
 8011252:	6803      	ldr	r3, [r0, #0]
 8011254:	f043 0301 	orr.w	r3, r3, #1
 8011258:	6003      	str	r3, [r0, #0]
 801125a:	e7d0      	b.n	80111fe <HAL_TIM_OC_Start+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011260:	d1f7      	bne.n	8011252 <HAL_TIM_OC_Start+0x10a>
 8011262:	e7cc      	b.n	80111fe <HAL_TIM_OC_Start+0xb6>
 8011264:	40010000 	.word	0x40010000
 8011268:	00010007 	.word	0x00010007
 801126c:	40000400 	.word	0x40000400

08011270 <HAL_TIM_PWM_Start>:
 8011270:	f7ff bf6a 	b.w	8011148 <HAL_TIM_OC_Start>

08011274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011274:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011276:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801127a:	2b01      	cmp	r3, #1
 801127c:	f04f 0302 	mov.w	r3, #2
 8011280:	d03b      	beq.n	80112fa <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011282:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011286:	4d1e      	ldr	r5, [pc, #120]	; (8011300 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  tmpcr2 = htim->Instance->CR2;
 8011288:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801128a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 801128c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 801128e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011290:	d002      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8011292:	4e1c      	ldr	r6, [pc, #112]	; (8011304 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8011294:	42b3      	cmp	r3, r6
 8011296:	d103      	bne.n	80112a0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011298:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801129c:	684e      	ldr	r6, [r1, #4]
 801129e:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112a0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80112a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112a6:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112a8:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 80112ac:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112ae:	d019      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112b4:	d016      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112b6:	4a14      	ldr	r2, [pc, #80]	; (8011308 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d013      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d00f      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80112c8:	4293      	cmp	r3, r2
 80112ca:	d00b      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112cc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d007      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112d4:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80112d8:	4293      	cmp	r3, r2
 80112da:	d003      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80112dc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d104      	bne.n	80112ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80112e4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80112e6:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80112ea:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80112ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80112ee:	2301      	movs	r3, #1
 80112f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80112f4:	2300      	movs	r3, #0
 80112f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80112fa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80112fc:	bd70      	pop	{r4, r5, r6, pc}
 80112fe:	bf00      	nop
 8011300:	40010000 	.word	0x40010000
 8011304:	40010400 	.word	0x40010400
 8011308:	40000400 	.word	0x40000400

0801130c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801130c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801130e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011312:	2b01      	cmp	r3, #1
 8011314:	d038      	beq.n	8011388 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011316:	68cb      	ldr	r3, [r1, #12]
 8011318:	688a      	ldr	r2, [r1, #8]
 801131a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801131e:	4c1b      	ldr	r4, [pc, #108]	; (801138c <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011320:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011322:	684a      	ldr	r2, [r1, #4]
 8011324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011328:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801132a:	680a      	ldr	r2, [r1, #0]
 801132c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011330:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011332:	690a      	ldr	r2, [r1, #16]
 8011334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011338:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801133a:	694a      	ldr	r2, [r1, #20]
 801133c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011340:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011342:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8011344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011348:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801134a:	698a      	ldr	r2, [r1, #24]
 801134c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8011350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011354:	6802      	ldr	r2, [r0, #0]
 8011356:	42a2      	cmp	r2, r4
 8011358:	d003      	beq.n	8011362 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 801135a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801135e:	42a2      	cmp	r2, r4
 8011360:	d10c      	bne.n	801137c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011362:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8011364:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011368:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801136c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801136e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011374:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011376:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801137a:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801137c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801137e:	2300      	movs	r3, #0
 8011380:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8011384:	4618      	mov	r0, r3
}
 8011386:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8011388:	2002      	movs	r0, #2
 801138a:	e7fc      	b.n	8011386 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 801138c:	40010000 	.word	0x40010000

08011390 <HAL_TIMEx_CommutCallback>:
 8011390:	4770      	bx	lr

08011392 <HAL_TIMEx_BreakCallback>:
 8011392:	4770      	bx	lr

08011394 <HAL_TIMEx_Break2Callback>:
 8011394:	4770      	bx	lr
	...

08011398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011398:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801139a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801139c:	e852 3f00 	ldrex	r3, [r2]
 80113a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80113a8:	6802      	ldr	r2, [r0, #0]
 80113aa:	2900      	cmp	r1, #0
 80113ac:	d1f5      	bne.n	801139a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80113ae:	4c0f      	ldr	r4, [pc, #60]	; (80113ec <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b0:	f102 0308 	add.w	r3, r2, #8
 80113b4:	e853 3f00 	ldrex	r3, [r3]
 80113b8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ba:	f102 0c08 	add.w	ip, r2, #8
 80113be:	e84c 3100 	strex	r1, r3, [ip]
 80113c2:	2900      	cmp	r1, #0
 80113c4:	d1f4      	bne.n	80113b0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113c6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d107      	bne.n	80113dc <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113cc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d4:	e842 3100 	strex	r1, r3, [r2]
 80113d8:	2900      	cmp	r1, #0
 80113da:	d1f7      	bne.n	80113cc <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113dc:	2320      	movs	r3, #32
 80113de:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113e2:	2300      	movs	r3, #0
 80113e4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80113e6:	6743      	str	r3, [r0, #116]	; 0x74
}
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	bf00      	nop
 80113ec:	effffffe 	.word	0xeffffffe

080113f0 <UART_SetConfig>:
{
 80113f0:	b530      	push	{r4, r5, lr}
 80113f2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80113f4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80113f6:	69c0      	ldr	r0, [r0, #28]
{
 80113f8:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80113fa:	6921      	ldr	r1, [r4, #16]
 80113fc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80113fe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011400:	430a      	orrs	r2, r1
 8011402:	6961      	ldr	r1, [r4, #20]
 8011404:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011406:	4997      	ldr	r1, [pc, #604]	; (8011664 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011408:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801140a:	4029      	ands	r1, r5
 801140c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801140e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011410:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8011418:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801141a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801141c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801141e:	4a92      	ldr	r2, [pc, #584]	; (8011668 <UART_SetConfig+0x278>)
 8011420:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8011422:	bf1c      	itt	ne
 8011424:	6a22      	ldrne	r2, [r4, #32]
 8011426:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011428:	689a      	ldr	r2, [r3, #8]
 801142a:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 801142e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8011432:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011434:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011436:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801143a:	f022 020f 	bic.w	r2, r2, #15
 801143e:	430a      	orrs	r2, r1
 8011440:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011442:	4a8a      	ldr	r2, [pc, #552]	; (801166c <UART_SetConfig+0x27c>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d11b      	bne.n	8011480 <UART_SetConfig+0x90>
 8011448:	4b89      	ldr	r3, [pc, #548]	; (8011670 <UART_SetConfig+0x280>)
 801144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801144c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011450:	2b28      	cmp	r3, #40	; 0x28
 8011452:	d86c      	bhi.n	801152e <UART_SetConfig+0x13e>
 8011454:	4a87      	ldr	r2, [pc, #540]	; (8011674 <UART_SetConfig+0x284>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011456:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801145a:	5cd3      	ldrb	r3, [r2, r3]
 801145c:	f040 8132 	bne.w	80116c4 <UART_SetConfig+0x2d4>
    switch (clocksource)
 8011460:	2b08      	cmp	r3, #8
 8011462:	f200 80c0 	bhi.w	80115e6 <UART_SetConfig+0x1f6>
 8011466:	2b08      	cmp	r3, #8
 8011468:	d861      	bhi.n	801152e <UART_SetConfig+0x13e>
 801146a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801146e:	00e7      	.short	0x00e7
 8011470:	006000ec 	.word	0x006000ec
 8011474:	00ef0060 	.word	0x00ef0060
 8011478:	00600060 	.word	0x00600060
 801147c:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011480:	4a7d      	ldr	r2, [pc, #500]	; (8011678 <UART_SetConfig+0x288>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d107      	bne.n	8011496 <UART_SetConfig+0xa6>
 8011486:	4b7a      	ldr	r3, [pc, #488]	; (8011670 <UART_SetConfig+0x280>)
 8011488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801148a:	f003 0307 	and.w	r3, r3, #7
 801148e:	2b05      	cmp	r3, #5
 8011490:	d84d      	bhi.n	801152e <UART_SetConfig+0x13e>
 8011492:	4a7a      	ldr	r2, [pc, #488]	; (801167c <UART_SetConfig+0x28c>)
 8011494:	e7df      	b.n	8011456 <UART_SetConfig+0x66>
 8011496:	4a7a      	ldr	r2, [pc, #488]	; (8011680 <UART_SetConfig+0x290>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d107      	bne.n	80114ac <UART_SetConfig+0xbc>
 801149c:	4b74      	ldr	r3, [pc, #464]	; (8011670 <UART_SetConfig+0x280>)
 801149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114a0:	f003 0307 	and.w	r3, r3, #7
 80114a4:	2b05      	cmp	r3, #5
 80114a6:	d842      	bhi.n	801152e <UART_SetConfig+0x13e>
 80114a8:	4a76      	ldr	r2, [pc, #472]	; (8011684 <UART_SetConfig+0x294>)
 80114aa:	e7d4      	b.n	8011456 <UART_SetConfig+0x66>
 80114ac:	4a76      	ldr	r2, [pc, #472]	; (8011688 <UART_SetConfig+0x298>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d107      	bne.n	80114c2 <UART_SetConfig+0xd2>
 80114b2:	4b6f      	ldr	r3, [pc, #444]	; (8011670 <UART_SetConfig+0x280>)
 80114b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114b6:	f003 0307 	and.w	r3, r3, #7
 80114ba:	2b05      	cmp	r3, #5
 80114bc:	d837      	bhi.n	801152e <UART_SetConfig+0x13e>
 80114be:	4a73      	ldr	r2, [pc, #460]	; (801168c <UART_SetConfig+0x29c>)
 80114c0:	e7c9      	b.n	8011456 <UART_SetConfig+0x66>
 80114c2:	4a73      	ldr	r2, [pc, #460]	; (8011690 <UART_SetConfig+0x2a0>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d107      	bne.n	80114d8 <UART_SetConfig+0xe8>
 80114c8:	4b69      	ldr	r3, [pc, #420]	; (8011670 <UART_SetConfig+0x280>)
 80114ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114cc:	f003 0307 	and.w	r3, r3, #7
 80114d0:	2b05      	cmp	r3, #5
 80114d2:	d82c      	bhi.n	801152e <UART_SetConfig+0x13e>
 80114d4:	4a6f      	ldr	r2, [pc, #444]	; (8011694 <UART_SetConfig+0x2a4>)
 80114d6:	e7be      	b.n	8011456 <UART_SetConfig+0x66>
 80114d8:	4a6f      	ldr	r2, [pc, #444]	; (8011698 <UART_SetConfig+0x2a8>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d107      	bne.n	80114ee <UART_SetConfig+0xfe>
 80114de:	4b64      	ldr	r3, [pc, #400]	; (8011670 <UART_SetConfig+0x280>)
 80114e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80114e6:	2b28      	cmp	r3, #40	; 0x28
 80114e8:	d821      	bhi.n	801152e <UART_SetConfig+0x13e>
 80114ea:	4a6c      	ldr	r2, [pc, #432]	; (801169c <UART_SetConfig+0x2ac>)
 80114ec:	e7b3      	b.n	8011456 <UART_SetConfig+0x66>
 80114ee:	4a6c      	ldr	r2, [pc, #432]	; (80116a0 <UART_SetConfig+0x2b0>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d107      	bne.n	8011504 <UART_SetConfig+0x114>
 80114f4:	4b5e      	ldr	r3, [pc, #376]	; (8011670 <UART_SetConfig+0x280>)
 80114f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114f8:	f003 0307 	and.w	r3, r3, #7
 80114fc:	2b05      	cmp	r3, #5
 80114fe:	d816      	bhi.n	801152e <UART_SetConfig+0x13e>
 8011500:	4a68      	ldr	r2, [pc, #416]	; (80116a4 <UART_SetConfig+0x2b4>)
 8011502:	e7a8      	b.n	8011456 <UART_SetConfig+0x66>
 8011504:	4a68      	ldr	r2, [pc, #416]	; (80116a8 <UART_SetConfig+0x2b8>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d107      	bne.n	801151a <UART_SetConfig+0x12a>
 801150a:	4b59      	ldr	r3, [pc, #356]	; (8011670 <UART_SetConfig+0x280>)
 801150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801150e:	f003 0307 	and.w	r3, r3, #7
 8011512:	2b05      	cmp	r3, #5
 8011514:	d80b      	bhi.n	801152e <UART_SetConfig+0x13e>
 8011516:	4a65      	ldr	r2, [pc, #404]	; (80116ac <UART_SetConfig+0x2bc>)
 8011518:	e79d      	b.n	8011456 <UART_SetConfig+0x66>
 801151a:	4a53      	ldr	r2, [pc, #332]	; (8011668 <UART_SetConfig+0x278>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d106      	bne.n	801152e <UART_SetConfig+0x13e>
 8011520:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8011524:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8011526:	f003 0307 	and.w	r3, r3, #7
 801152a:	2b05      	cmp	r3, #5
 801152c:	d901      	bls.n	8011532 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801152e:	2001      	movs	r0, #1
 8011530:	e00e      	b.n	8011550 <UART_SetConfig+0x160>
 8011532:	495f      	ldr	r1, [pc, #380]	; (80116b0 <UART_SetConfig+0x2c0>)
 8011534:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8011536:	2b10      	cmp	r3, #16
 8011538:	d023      	beq.n	8011582 <UART_SetConfig+0x192>
 801153a:	d811      	bhi.n	8011560 <UART_SetConfig+0x170>
 801153c:	2b04      	cmp	r3, #4
 801153e:	d016      	beq.n	801156e <UART_SetConfig+0x17e>
 8011540:	2b08      	cmp	r3, #8
 8011542:	d019      	beq.n	8011578 <UART_SetConfig+0x188>
 8011544:	2b02      	cmp	r3, #2
 8011546:	d1f2      	bne.n	801152e <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011548:	f7fd ff5e 	bl	800f408 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 801154c:	bb10      	cbnz	r0, 8011594 <UART_SetConfig+0x1a4>
 801154e:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8011550:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8011554:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8011556:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8011558:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 801155c:	b007      	add	sp, #28
 801155e:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8011560:	2b20      	cmp	r3, #32
 8011562:	d03e      	beq.n	80115e2 <UART_SetConfig+0x1f2>
 8011564:	2b40      	cmp	r3, #64	; 0x40
 8011566:	d1e2      	bne.n	801152e <UART_SetConfig+0x13e>
 8011568:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801156c:	e012      	b.n	8011594 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801156e:	4668      	mov	r0, sp
 8011570:	f7fd ff5c 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011574:	9801      	ldr	r0, [sp, #4]
        break;
 8011576:	e7e9      	b.n	801154c <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011578:	a803      	add	r0, sp, #12
 801157a:	f7fe f801 	bl	800f580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801157e:	9804      	ldr	r0, [sp, #16]
        break;
 8011580:	e7e4      	b.n	801154c <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011582:	6813      	ldr	r3, [r2, #0]
 8011584:	484b      	ldr	r0, [pc, #300]	; (80116b4 <UART_SetConfig+0x2c4>)
 8011586:	f013 0f20 	tst.w	r3, #32
 801158a:	d003      	beq.n	8011594 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801158c:	6813      	ldr	r3, [r2, #0]
 801158e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8011592:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011594:	4b48      	ldr	r3, [pc, #288]	; (80116b8 <UART_SetConfig+0x2c8>)
 8011596:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011598:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801159a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801159e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115a2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115a6:	4299      	cmp	r1, r3
 80115a8:	d8c1      	bhi.n	801152e <UART_SetConfig+0x13e>
 80115aa:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80115ae:	d8be      	bhi.n	801152e <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115b0:	2300      	movs	r3, #0
 80115b2:	4619      	mov	r1, r3
 80115b4:	f7ee fee4 	bl	8000380 <__aeabi_uldivmod>
 80115b8:	462a      	mov	r2, r5
 80115ba:	0209      	lsls	r1, r1, #8
 80115bc:	086b      	lsrs	r3, r5, #1
 80115be:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80115c2:	0200      	lsls	r0, r0, #8
 80115c4:	18c0      	adds	r0, r0, r3
 80115c6:	f04f 0300 	mov.w	r3, #0
 80115ca:	f141 0100 	adc.w	r1, r1, #0
 80115ce:	f7ee fed7 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115d2:	4b3a      	ldr	r3, [pc, #232]	; (80116bc <UART_SetConfig+0x2cc>)
 80115d4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80115d8:	429a      	cmp	r2, r3
 80115da:	d8a8      	bhi.n	801152e <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80115dc:	6823      	ldr	r3, [r4, #0]
 80115de:	60d8      	str	r0, [r3, #12]
 80115e0:	e7b5      	b.n	801154e <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 80115e2:	4837      	ldr	r0, [pc, #220]	; (80116c0 <UART_SetConfig+0x2d0>)
 80115e4:	e7d6      	b.n	8011594 <UART_SetConfig+0x1a4>
    switch (clocksource)
 80115e6:	2b20      	cmp	r3, #32
 80115e8:	d03a      	beq.n	8011660 <UART_SetConfig+0x270>
 80115ea:	2b40      	cmp	r3, #64	; 0x40
 80115ec:	d00b      	beq.n	8011606 <UART_SetConfig+0x216>
 80115ee:	2b10      	cmp	r3, #16
 80115f0:	d19d      	bne.n	801152e <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115f2:	4b1f      	ldr	r3, [pc, #124]	; (8011670 <UART_SetConfig+0x280>)
 80115f4:	482f      	ldr	r0, [pc, #188]	; (80116b4 <UART_SetConfig+0x2c4>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	f012 0f20 	tst.w	r2, #32
 80115fc:	d003      	beq.n	8011606 <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8011604:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011606:	4b2c      	ldr	r3, [pc, #176]	; (80116b8 <UART_SetConfig+0x2c8>)
 8011608:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801160a:	6861      	ldr	r1, [r4, #4]
 801160c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011610:	084b      	lsrs	r3, r1, #1
 8011612:	fbb0 f2f2 	udiv	r2, r0, r2
 8011616:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801161a:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801161e:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011622:	f1a3 0110 	sub.w	r1, r3, #16
 8011626:	4291      	cmp	r1, r2
 8011628:	d881      	bhi.n	801152e <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801162a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801162e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8011632:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011634:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8011636:	4313      	orrs	r3, r2
 8011638:	60cb      	str	r3, [r1, #12]
 801163a:	e788      	b.n	801154e <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 801163c:	f7fd f874 	bl	800e728 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8011640:	2800      	cmp	r0, #0
 8011642:	d084      	beq.n	801154e <UART_SetConfig+0x15e>
 8011644:	e7df      	b.n	8011606 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8011646:	f7fd f881 	bl	800e74c <HAL_RCC_GetPCLK2Freq>
        break;
 801164a:	e7f9      	b.n	8011640 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801164c:	4668      	mov	r0, sp
 801164e:	f7fd feed 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011652:	9801      	ldr	r0, [sp, #4]
        break;
 8011654:	e7f4      	b.n	8011640 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011656:	a803      	add	r0, sp, #12
 8011658:	f7fd ff92 	bl	800f580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801165c:	9804      	ldr	r0, [sp, #16]
        break;
 801165e:	e7ef      	b.n	8011640 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8011660:	4817      	ldr	r0, [pc, #92]	; (80116c0 <UART_SetConfig+0x2d0>)
 8011662:	e7d0      	b.n	8011606 <UART_SetConfig+0x216>
 8011664:	cfff69f3 	.word	0xcfff69f3
 8011668:	58000c00 	.word	0x58000c00
 801166c:	40011000 	.word	0x40011000
 8011670:	58024400 	.word	0x58024400
 8011674:	0802f5c7 	.word	0x0802f5c7
 8011678:	40004400 	.word	0x40004400
 801167c:	0802f5f0 	.word	0x0802f5f0
 8011680:	40004800 	.word	0x40004800
 8011684:	0802f5f0 	.word	0x0802f5f0
 8011688:	40004c00 	.word	0x40004c00
 801168c:	0802f5f0 	.word	0x0802f5f0
 8011690:	40005000 	.word	0x40005000
 8011694:	0802f5f0 	.word	0x0802f5f0
 8011698:	40011400 	.word	0x40011400
 801169c:	0802f5c7 	.word	0x0802f5c7
 80116a0:	40007800 	.word	0x40007800
 80116a4:	0802f5f0 	.word	0x0802f5f0
 80116a8:	40007c00 	.word	0x40007c00
 80116ac:	0802f5f0 	.word	0x0802f5f0
 80116b0:	0802f5f6 	.word	0x0802f5f6
 80116b4:	03d09000 	.word	0x03d09000
 80116b8:	0802f5fc 	.word	0x0802f5fc
 80116bc:	000ffcff 	.word	0x000ffcff
 80116c0:	003d0900 	.word	0x003d0900
    switch (clocksource)
 80116c4:	2b08      	cmp	r3, #8
 80116c6:	d817      	bhi.n	80116f8 <UART_SetConfig+0x308>
 80116c8:	2b08      	cmp	r3, #8
 80116ca:	f63f af30 	bhi.w	801152e <UART_SetConfig+0x13e>
 80116ce:	a201      	add	r2, pc, #4	; (adr r2, 80116d4 <UART_SetConfig+0x2e4>)
 80116d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d4:	0801173b 	.word	0x0801173b
 80116d8:	08011747 	.word	0x08011747
 80116dc:	0801152f 	.word	0x0801152f
 80116e0:	0801152f 	.word	0x0801152f
 80116e4:	0801174d 	.word	0x0801174d
 80116e8:	0801152f 	.word	0x0801152f
 80116ec:	0801152f 	.word	0x0801152f
 80116f0:	0801152f 	.word	0x0801152f
 80116f4:	08011757 	.word	0x08011757
 80116f8:	2b20      	cmp	r3, #32
 80116fa:	d031      	beq.n	8011760 <UART_SetConfig+0x370>
 80116fc:	2b40      	cmp	r3, #64	; 0x40
 80116fe:	d031      	beq.n	8011764 <UART_SetConfig+0x374>
 8011700:	2b10      	cmp	r3, #16
 8011702:	f47f af14 	bne.w	801152e <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011706:	4b19      	ldr	r3, [pc, #100]	; (801176c <UART_SetConfig+0x37c>)
 8011708:	4819      	ldr	r0, [pc, #100]	; (8011770 <UART_SetConfig+0x380>)
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	f012 0f20 	tst.w	r2, #32
 8011710:	d003      	beq.n	801171a <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8011718:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801171a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801171c:	4a15      	ldr	r2, [pc, #84]	; (8011774 <UART_SetConfig+0x384>)
 801171e:	6863      	ldr	r3, [r4, #4]
 8011720:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011724:	fbb0 f0f2 	udiv	r0, r0, r2
 8011728:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 801172c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011730:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8011734:	f1a0 0210 	sub.w	r2, r0, #16
 8011738:	e74e      	b.n	80115d8 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 801173a:	f7fc fff5 	bl	800e728 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 801173e:	2800      	cmp	r0, #0
 8011740:	f43f af05 	beq.w	801154e <UART_SetConfig+0x15e>
 8011744:	e7e9      	b.n	801171a <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8011746:	f7fd f801 	bl	800e74c <HAL_RCC_GetPCLK2Freq>
        break;
 801174a:	e7f8      	b.n	801173e <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801174c:	4668      	mov	r0, sp
 801174e:	f7fd fe6d 	bl	800f42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011752:	9801      	ldr	r0, [sp, #4]
        break;
 8011754:	e7f3      	b.n	801173e <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011756:	a803      	add	r0, sp, #12
 8011758:	f7fd ff12 	bl	800f580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801175c:	9804      	ldr	r0, [sp, #16]
        break;
 801175e:	e7ee      	b.n	801173e <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8011760:	4805      	ldr	r0, [pc, #20]	; (8011778 <UART_SetConfig+0x388>)
 8011762:	e7da      	b.n	801171a <UART_SetConfig+0x32a>
    switch (clocksource)
 8011764:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011768:	e7d7      	b.n	801171a <UART_SetConfig+0x32a>
 801176a:	bf00      	nop
 801176c:	58024400 	.word	0x58024400
 8011770:	03d09000 	.word	0x03d09000
 8011774:	0802f5fc 	.word	0x0802f5fc
 8011778:	003d0900 	.word	0x003d0900

0801177c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801177c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801177e:	07da      	lsls	r2, r3, #31
{
 8011780:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011782:	d506      	bpl.n	8011792 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011784:	6801      	ldr	r1, [r0, #0]
 8011786:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8011788:	684a      	ldr	r2, [r1, #4]
 801178a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801178e:	4322      	orrs	r2, r4
 8011790:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011792:	079c      	lsls	r4, r3, #30
 8011794:	d506      	bpl.n	80117a4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011796:	6801      	ldr	r1, [r0, #0]
 8011798:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801179a:	684a      	ldr	r2, [r1, #4]
 801179c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80117a0:	4322      	orrs	r2, r4
 80117a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80117a4:	0759      	lsls	r1, r3, #29
 80117a6:	d506      	bpl.n	80117b6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80117a8:	6801      	ldr	r1, [r0, #0]
 80117aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80117ac:	684a      	ldr	r2, [r1, #4]
 80117ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80117b2:	4322      	orrs	r2, r4
 80117b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80117b6:	071a      	lsls	r2, r3, #28
 80117b8:	d506      	bpl.n	80117c8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117ba:	6801      	ldr	r1, [r0, #0]
 80117bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80117be:	684a      	ldr	r2, [r1, #4]
 80117c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80117c4:	4322      	orrs	r2, r4
 80117c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80117c8:	06dc      	lsls	r4, r3, #27
 80117ca:	d506      	bpl.n	80117da <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117cc:	6801      	ldr	r1, [r0, #0]
 80117ce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80117d0:	688a      	ldr	r2, [r1, #8]
 80117d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80117d6:	4322      	orrs	r2, r4
 80117d8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117da:	0699      	lsls	r1, r3, #26
 80117dc:	d506      	bpl.n	80117ec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117de:	6801      	ldr	r1, [r0, #0]
 80117e0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80117e2:	688a      	ldr	r2, [r1, #8]
 80117e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80117e8:	4322      	orrs	r2, r4
 80117ea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80117ec:	065a      	lsls	r2, r3, #25
 80117ee:	d510      	bpl.n	8011812 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117f0:	6801      	ldr	r1, [r0, #0]
 80117f2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80117f4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80117f6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117fa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80117fe:	ea42 0204 	orr.w	r2, r2, r4
 8011802:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011804:	d105      	bne.n	8011812 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011806:	684a      	ldr	r2, [r1, #4]
 8011808:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801180a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 801180e:	4322      	orrs	r2, r4
 8011810:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011812:	061b      	lsls	r3, r3, #24
 8011814:	d506      	bpl.n	8011824 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011816:	6802      	ldr	r2, [r0, #0]
 8011818:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801181a:	6853      	ldr	r3, [r2, #4]
 801181c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8011820:	430b      	orrs	r3, r1
 8011822:	6053      	str	r3, [r2, #4]
}
 8011824:	bd10      	pop	{r4, pc}

08011826 <UART_WaitOnFlagUntilTimeout>:
{
 8011826:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801182a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801182e:	4604      	mov	r4, r0
 8011830:	460f      	mov	r7, r1
 8011832:	4616      	mov	r6, r2
 8011834:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011836:	6822      	ldr	r2, [r4, #0]
 8011838:	69d3      	ldr	r3, [r2, #28]
 801183a:	ea37 0303 	bics.w	r3, r7, r3
 801183e:	bf0c      	ite	eq
 8011840:	2301      	moveq	r3, #1
 8011842:	2300      	movne	r3, #0
 8011844:	42b3      	cmp	r3, r6
 8011846:	d001      	beq.n	801184c <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8011848:	2000      	movs	r0, #0
 801184a:	e01e      	b.n	801188a <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 801184c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8011850:	d0f2      	beq.n	8011838 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011852:	f7f8 fae3 	bl	8009e1c <HAL_GetTick>
 8011856:	eba0 0008 	sub.w	r0, r0, r8
 801185a:	4548      	cmp	r0, r9
 801185c:	d825      	bhi.n	80118aa <UART_WaitOnFlagUntilTimeout+0x84>
 801185e:	f1b9 0f00 	cmp.w	r9, #0
 8011862:	d022      	beq.n	80118aa <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011864:	6820      	ldr	r0, [r4, #0]
 8011866:	6803      	ldr	r3, [r0, #0]
 8011868:	075a      	lsls	r2, r3, #29
 801186a:	d5e4      	bpl.n	8011836 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801186c:	69c5      	ldr	r5, [r0, #28]
 801186e:	f015 0508 	ands.w	r5, r5, #8
 8011872:	d00c      	beq.n	801188e <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011874:	2508      	movs	r5, #8
 8011876:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 8011878:	4620      	mov	r0, r4
 801187a:	f7ff fd8d 	bl	8011398 <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 801187e:	2300      	movs	r3, #0
           return HAL_ERROR;
 8011880:	2001      	movs	r0, #1
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011882:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8011886:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 801188a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801188e:	69c3      	ldr	r3, [r0, #28]
 8011890:	051b      	lsls	r3, r3, #20
 8011892:	d5d0      	bpl.n	8011836 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011898:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 801189a:	4620      	mov	r0, r4
 801189c:	f7ff fd7c 	bl	8011398 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80118a0:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 80118a2:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80118a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 80118aa:	2003      	movs	r0, #3
 80118ac:	e7ed      	b.n	801188a <UART_WaitOnFlagUntilTimeout+0x64>

080118ae <UART_CheckIdleState>:
{
 80118ae:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118b0:	2500      	movs	r5, #0
{
 80118b2:	4604      	mov	r4, r0
 80118b4:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118b6:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80118ba:	f7f8 faaf 	bl	8009e1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80118be:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80118c0:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80118c2:	6812      	ldr	r2, [r2, #0]
 80118c4:	0711      	lsls	r1, r2, #28
 80118c6:	d51d      	bpl.n	8011904 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118c8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80118cc:	9003      	str	r0, [sp, #12]
 80118ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80118d2:	4620      	mov	r0, r4
 80118d4:	9200      	str	r2, [sp, #0]
 80118d6:	462a      	mov	r2, r5
 80118d8:	f7ff ffa5 	bl	8011826 <UART_WaitOnFlagUntilTimeout>
 80118dc:	9b03      	ldr	r3, [sp, #12]
 80118de:	b188      	cbz	r0, 8011904 <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80118e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118e2:	e852 3f00 	ldrex	r3, [r2]
 80118e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ea:	e842 3100 	strex	r1, r3, [r2]
 80118ee:	2900      	cmp	r1, #0
 80118f0:	d1f6      	bne.n	80118e0 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 80118f2:	2320      	movs	r3, #32
 80118f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80118f8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80118fa:	2300      	movs	r3, #0
 80118fc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8011900:	b005      	add	sp, #20
 8011902:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011904:	6822      	ldr	r2, [r4, #0]
 8011906:	6812      	ldr	r2, [r2, #0]
 8011908:	0752      	lsls	r2, r2, #29
 801190a:	d523      	bpl.n	8011954 <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801190c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8011910:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011914:	4620      	mov	r0, r4
 8011916:	9200      	str	r2, [sp, #0]
 8011918:	2200      	movs	r2, #0
 801191a:	f7ff ff84 	bl	8011826 <UART_WaitOnFlagUntilTimeout>
 801191e:	b1c8      	cbz	r0, 8011954 <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011920:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011922:	e852 3f00 	ldrex	r3, [r2]
 8011926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801192a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 801192e:	6822      	ldr	r2, [r4, #0]
 8011930:	2900      	cmp	r1, #0
 8011932:	d1f5      	bne.n	8011920 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011934:	f102 0308 	add.w	r3, r2, #8
 8011938:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801193c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011940:	f102 0008 	add.w	r0, r2, #8
 8011944:	e840 3100 	strex	r1, r3, [r0]
 8011948:	2900      	cmp	r1, #0
 801194a:	d1f3      	bne.n	8011934 <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 801194c:	2320      	movs	r3, #32
 801194e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8011952:	e7d1      	b.n	80118f8 <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8011954:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011956:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8011958:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801195c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011960:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011962:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8011964:	e7c9      	b.n	80118fa <UART_CheckIdleState+0x4c>

08011966 <HAL_UART_Init>:
{
 8011966:	b510      	push	{r4, lr}
  if (huart == NULL)
 8011968:	4604      	mov	r4, r0
 801196a:	b350      	cbz	r0, 80119c2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 801196c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8011970:	b91b      	cbnz	r3, 801197a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8011972:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8011976:	f7f1 f9af 	bl	8002cd8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 801197a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801197c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 801197e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011980:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8011984:	6813      	ldr	r3, [r2, #0]
 8011986:	f023 0301 	bic.w	r3, r3, #1
 801198a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801198c:	f7ff fd30 	bl	80113f0 <UART_SetConfig>
 8011990:	2801      	cmp	r0, #1
 8011992:	d016      	beq.n	80119c2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011996:	b113      	cbz	r3, 801199e <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8011998:	4620      	mov	r0, r4
 801199a:	f7ff feef 	bl	801177c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801199e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80119a0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119a2:	685a      	ldr	r2, [r3, #4]
 80119a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80119a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80119b0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	f042 0201 	orr.w	r2, r2, #1
}
 80119b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80119bc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80119be:	f7ff bf76 	b.w	80118ae <UART_CheckIdleState>
}
 80119c2:	2001      	movs	r0, #1
 80119c4:	bd10      	pop	{r4, pc}
	...

080119c8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80119c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80119ca:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80119cc:	b92b      	cbnz	r3, 80119da <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80119ce:	2301      	movs	r3, #1
 80119d0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80119d4:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80119d8:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80119da:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80119dc:	4d09      	ldr	r5, [pc, #36]	; (8011a04 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80119de:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80119e0:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80119e2:	4c09      	ldr	r4, [pc, #36]	; (8011a08 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80119e4:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80119e8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80119ea:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80119ec:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80119ee:	011b      	lsls	r3, r3, #4
 80119f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80119f4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80119f8:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80119fa:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8011a02:	e7e7      	b.n	80119d4 <UARTEx_SetNbDataToProcess+0xc>
 8011a04:	0802f61c 	.word	0x0802f61c
 8011a08:	0802f614 	.word	0x0802f614

08011a0c <HAL_RS485Ex_Init>:
{
 8011a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0e:	460f      	mov	r7, r1
 8011a10:	4616      	mov	r6, r2
 8011a12:	461d      	mov	r5, r3
  if (huart == NULL)
 8011a14:	4604      	mov	r4, r0
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d035      	beq.n	8011a86 <HAL_RS485Ex_Init+0x7a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011a1a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8011a1e:	b91b      	cbnz	r3, 8011a28 <HAL_RS485Ex_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8011a20:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8011a24:	f7f1 f958 	bl	8002cd8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8011a28:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011a2a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011a2c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011a2e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8011a32:	6813      	ldr	r3, [r2, #0]
 8011a34:	f023 0301 	bic.w	r3, r3, #1
 8011a38:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011a3a:	f7ff fcd9 	bl	80113f0 <UART_SetConfig>
 8011a3e:	2801      	cmp	r0, #1
 8011a40:	d021      	beq.n	8011a86 <HAL_RS485Ex_Init+0x7a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011a44:	b113      	cbz	r3, 8011a4c <HAL_RS485Ex_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8011a46:	4620      	mov	r0, r4
 8011a48:	f7ff fe98 	bl	801177c <UART_AdvFeatureConfig>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8011a4c:	6823      	ldr	r3, [r4, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8011a4e:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8011a50:	689a      	ldr	r2, [r3, #8]
 8011a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011a56:	609a      	str	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8011a58:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8011a5c:	6898      	ldr	r0, [r3, #8]
 8011a5e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8011a62:	4338      	orrs	r0, r7
 8011a64:	6098      	str	r0, [r3, #8]
  return (UART_CheckIdleState(huart));
 8011a66:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8011a68:	6819      	ldr	r1, [r3, #0]
 8011a6a:	f021 717f 	bic.w	r1, r1, #66846720	; 0x3fc0000
 8011a6e:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8011a72:	430a      	orrs	r2, r1
 8011a74:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	f042 0201 	orr.w	r2, r2, #1
 8011a7c:	601a      	str	r2, [r3, #0]
}
 8011a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 8011a82:	f7ff bf14 	b.w	80118ae <UART_CheckIdleState>
}
 8011a86:	2001      	movs	r0, #1
 8011a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a8a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8011a8a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8011a8e:	2b01      	cmp	r3, #1
 8011a90:	d014      	beq.n	8011abc <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a92:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011a94:	2324      	movs	r3, #36	; 0x24
 8011a96:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a9a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8011a9c:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011a9e:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8011aa2:	f023 0301 	bic.w	r3, r3, #1
 8011aa6:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011aac:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011aae:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8011ab0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8011ab4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  return HAL_OK;
 8011ab8:	4618      	mov	r0, r3
 8011aba:	4770      	bx	lr
  __HAL_LOCK(huart);
 8011abc:	2002      	movs	r0, #2
}
 8011abe:	4770      	bx	lr

08011ac0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8011ac0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8011ac2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 8011ac6:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d017      	beq.n	8011afc <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011acc:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011ace:	2324      	movs	r3, #36	; 0x24
 8011ad0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ad4:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8011ad6:	682b      	ldr	r3, [r5, #0]
 8011ad8:	f023 0301 	bic.w	r3, r3, #1
 8011adc:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ade:	68ab      	ldr	r3, [r5, #8]
 8011ae0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8011ae4:	4319      	orrs	r1, r3
 8011ae6:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8011ae8:	f7ff ff6e 	bl	80119c8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8011aec:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011aee:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011af0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8011af4:	2000      	movs	r0, #0
 8011af6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8011afc:	2002      	movs	r0, #2
 8011afe:	e7fc      	b.n	8011afa <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08011b00 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8011b00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8011b02:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
{
 8011b06:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8011b08:	2b01      	cmp	r3, #1
 8011b0a:	d017      	beq.n	8011b3c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b0c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011b0e:	2324      	movs	r3, #36	; 0x24
 8011b10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b14:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8011b16:	682b      	ldr	r3, [r5, #0]
 8011b18:	f023 0301 	bic.w	r3, r3, #1
 8011b1c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011b1e:	68ab      	ldr	r3, [r5, #8]
 8011b20:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8011b24:	4319      	orrs	r1, r3
 8011b26:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8011b28:	f7ff ff4e 	bl	80119c8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8011b2c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b2e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011b30:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8011b34:	2000      	movs	r0, #0
 8011b36:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8011b3c:	2002      	movs	r0, #2
 8011b3e:	e7fc      	b.n	8011b3a <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08011b40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011b44:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8011b48:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8011b4c:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8011b50:	ea43 0308 	orr.w	r3, r3, r8
 8011b54:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8011b58:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011b5c:	6809      	ldr	r1, [r1, #0]
 8011b5e:	b991      	cbnz	r1, 8011b86 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011b60:	ea43 030e 	orr.w	r3, r3, lr
 8011b64:	6801      	ldr	r1, [r0, #0]
 8011b66:	4313      	orrs	r3, r2
 8011b68:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8011b6c:	ea43 030c 	orr.w	r3, r3, ip
 8011b70:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8011b74:	433b      	orrs	r3, r7
 8011b76:	4333      	orrs	r3, r6
 8011b78:	432b      	orrs	r3, r5
 8011b7a:	4323      	orrs	r3, r4
 8011b7c:	430b      	orrs	r3, r1
 8011b7e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8011b80:	2000      	movs	r0, #0
 8011b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011b86:	6801      	ldr	r1, [r0, #0]
 8011b88:	ea43 030e 	orr.w	r3, r3, lr
 8011b8c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8011b90:	430b      	orrs	r3, r1
 8011b92:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011b94:	ea42 030c 	orr.w	r3, r2, ip
 8011b98:	6841      	ldr	r1, [r0, #4]
 8011b9a:	433b      	orrs	r3, r7
 8011b9c:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 8011ba0:	4333      	orrs	r3, r6
 8011ba2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8011ba6:	432b      	orrs	r3, r5
 8011ba8:	4323      	orrs	r3, r4
 8011baa:	4313      	orrs	r3, r2
 8011bac:	6043      	str	r3, [r0, #4]
 8011bae:	e7e7      	b.n	8011b80 <FMC_SDRAM_Init+0x40>

08011bb0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011bb0:	68cb      	ldr	r3, [r1, #12]
 8011bb2:	f103 3cff 	add.w	ip, r3, #4294967295
 8011bb6:	694b      	ldr	r3, [r1, #20]
{
 8011bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	680f      	ldr	r7, [r1, #0]
 8011bbe:	684c      	ldr	r4, [r1, #4]
 8011bc0:	688e      	ldr	r6, [r1, #8]
 8011bc2:	051b      	lsls	r3, r3, #20
 8011bc4:	690d      	ldr	r5, [r1, #16]
 8011bc6:	3c01      	subs	r4, #1
 8011bc8:	6989      	ldr	r1, [r1, #24]
 8011bca:	3e01      	subs	r6, #1
 8011bcc:	3d01      	subs	r5, #1
 8011bce:	3f01      	subs	r7, #1
 8011bd0:	3901      	subs	r1, #1
 8011bd2:	0124      	lsls	r4, r4, #4
 8011bd4:	0236      	lsls	r6, r6, #8
 8011bd6:	042d      	lsls	r5, r5, #16
 8011bd8:	0609      	lsls	r1, r1, #24
 8011bda:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8011bde:	b95a      	cbnz	r2, 8011bf8 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011be0:	433b      	orrs	r3, r7
 8011be2:	6882      	ldr	r2, [r0, #8]
 8011be4:	4323      	orrs	r3, r4
 8011be6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8011bea:	4333      	orrs	r3, r6
 8011bec:	432b      	orrs	r3, r5
 8011bee:	430b      	orrs	r3, r1
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011bf8:	6882      	ldr	r2, [r0, #8]
 8011bfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011bfe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8011c02:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011c04:	ea44 0306 	orr.w	r3, r4, r6
 8011c08:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8011c0a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011c0c:	68c2      	ldr	r2, [r0, #12]
 8011c0e:	432b      	orrs	r3, r5
 8011c10:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8011c14:	430b      	orrs	r3, r1
 8011c16:	4313      	orrs	r3, r2
 8011c18:	60c3      	str	r3, [r0, #12]
 8011c1a:	e7eb      	b.n	8011bf4 <FMC_SDRAM_Timing_Init+0x44>

08011c1c <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011c1c:	6902      	ldr	r2, [r0, #16]
{
 8011c1e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8011c20:	e9d1 3400 	ldrd	r3, r4, [r1]
 8011c24:	0d92      	lsrs	r2, r2, #22
 8011c26:	4323      	orrs	r3, r4
 8011c28:	68cc      	ldr	r4, [r1, #12]
 8011c2a:	0592      	lsls	r2, r2, #22
 8011c2c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8011c30:	4313      	orrs	r3, r2
 8011c32:	688a      	ldr	r2, [r1, #8]
 8011c34:	3a01      	subs	r2, #1
 8011c36:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8011c3a:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	bd10      	pop	{r4, pc}

08011c40 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011c40:	6943      	ldr	r3, [r0, #20]
 8011c42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8011c46:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8011c4a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8011c4e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8011c50:	2000      	movs	r0, #0
 8011c52:	4770      	bx	lr

08011c54 <FMC_SDRAM_SetAutoRefreshNumber>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));

  /* Set the Auto-refresh number in command register */
  MODIFY_REG(Device->SDCMR, FMC_SDCMR_NRFS, ((AutoRefreshNumber - 1U) << FMC_SDCMR_NRFS_Pos));
 8011c54:	6903      	ldr	r3, [r0, #16]
 8011c56:	3901      	subs	r1, #1
 8011c58:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8011c5c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8011c60:	6103      	str	r3, [r0, #16]

  return HAL_OK;
}
 8011c62:	2000      	movs	r0, #0
 8011c64:	4770      	bx	lr
	...

08011c68 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011c68:	b084      	sub	sp, #16
 8011c6a:	b510      	push	{r4, lr}
 8011c6c:	ac03      	add	r4, sp, #12
 8011c6e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011c72:	9b03      	ldr	r3, [sp, #12]
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011c74:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           | \
 8011c76:	4313      	orrs	r3, r2
             Init.ClockPowerSave      | \
 8011c78:	9a05      	ldr	r2, [sp, #20]
 8011c7a:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8011c7c:	9a06      	ldr	r2, [sp, #24]
 8011c7e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 8011c80:	9a07      	ldr	r2, [sp, #28]
 8011c82:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011c84:	4a04      	ldr	r2, [pc, #16]	; (8011c98 <SDMMC_Init+0x30>)
 8011c86:	400a      	ands	r2, r1

  return HAL_OK;
}
 8011c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011c8c:	4313      	orrs	r3, r2
}
 8011c8e:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011c90:	6043      	str	r3, [r0, #4]
}
 8011c92:	2000      	movs	r0, #0
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop
 8011c98:	ffc02c00 	.word	0xffc02c00

08011c9c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011c9c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8011ca0:	4770      	bx	lr

08011ca2 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011ca2:	6803      	ldr	r3, [r0, #0]
 8011ca4:	f043 0303 	orr.w	r3, r3, #3
 8011ca8:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8011caa:	2000      	movs	r0, #0
 8011cac:	4770      	bx	lr

08011cae <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011cae:	6800      	ldr	r0, [r0, #0]
}
 8011cb0:	f000 0003 	and.w	r0, r0, #3
 8011cb4:	4770      	bx	lr
	...

08011cb8 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011cb8:	680b      	ldr	r3, [r1, #0]
{
 8011cba:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8011cbc:	6083      	str	r3, [r0, #8]
                       Command->Response         | \
                       Command->WaitForInterrupt | \
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011cbe:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011cc0:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8011cc4:	4313      	orrs	r3, r2
                       Command->Response         | \
 8011cc6:	68ca      	ldr	r2, [r1, #12]
 8011cc8:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 8011cca:	690a      	ldr	r2, [r1, #16]
 8011ccc:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011cce:	4a03      	ldr	r2, [pc, #12]	; (8011cdc <SDMMC_SendCommand+0x24>)
 8011cd0:	4022      	ands	r2, r4
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	bd10      	pop	{r4, pc}
 8011cda:	bf00      	nop
 8011cdc:	fffee0c0 	.word	0xfffee0c0

08011ce0 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011ce0:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8011ce2:	5840      	ldr	r0, [r0, r1]
}
 8011ce4:	4770      	bx	lr

08011ce6 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011ce6:	680b      	ldr	r3, [r1, #0]
{
 8011ce8:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011cea:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011cec:	684b      	ldr	r3, [r1, #4]
 8011cee:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   | \
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011cf0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011cf2:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011cfa:	4323      	orrs	r3, r4
                       Data->TransferDir   | \
 8011cfc:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  | \
 8011cfe:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   | \
 8011d00:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 8011d02:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011d04:	4313      	orrs	r3, r2
 8011d06:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8011d08:	2000      	movs	r0, #0
 8011d0a:	bd10      	pop	{r4, pc}

08011d0c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011d0c:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011d0e:	2300      	movs	r3, #0
{
 8011d10:	b086      	sub	sp, #24
 8011d12:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d14:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011d16:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d1a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d22:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d24:	f7ff ffc8 	bl	8011cb8 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011d28:	4b0a      	ldr	r3, [pc, #40]	; (8011d54 <SDMMC_CmdGoIdleState+0x48>)
 8011d2a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d38:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	d307      	bcc.n	8011d4e <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011d3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011d40:	0612      	lsls	r2, r2, #24
 8011d42:	d5fa      	bpl.n	8011d3a <SDMMC_CmdGoIdleState+0x2e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d44:	4b04      	ldr	r3, [pc, #16]	; (8011d58 <SDMMC_CmdGoIdleState+0x4c>)

  return SDMMC_ERROR_NONE;
 8011d46:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d48:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011d4a:	b006      	add	sp, #24
 8011d4c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8011d4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8011d52:	e7fa      	b.n	8011d4a <SDMMC_CmdGoIdleState+0x3e>
 8011d54:	24000030 	.word	0x24000030
 8011d58:	002000c5 	.word	0x002000c5

08011d5c <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011d5c:	4b45      	ldr	r3, [pc, #276]	; (8011e74 <SDMMC_GetCmdResp1+0x118>)
{
 8011d5e:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011d60:	681b      	ldr	r3, [r3, #0]
{
 8011d62:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011d64:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8011d68:	fbb3 f3f0 	udiv	r3, r3, r0
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011d6c:	4842      	ldr	r0, [pc, #264]	; (8011e78 <SDMMC_GetCmdResp1+0x11c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011d6e:	435a      	muls	r2, r3
    if (count-- == 0U)
 8011d70:	2a00      	cmp	r2, #0
 8011d72:	d048      	beq.n	8011e06 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8011d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011d76:	4203      	tst	r3, r0
 8011d78:	d007      	beq.n	8011d8a <SDMMC_GetCmdResp1+0x2e>
 8011d7a:	049b      	lsls	r3, r3, #18
 8011d7c:	d405      	bmi.n	8011d8a <SDMMC_GetCmdResp1+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d80:	0758      	lsls	r0, r3, #29
 8011d82:	d504      	bpl.n	8011d8e <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d84:	2004      	movs	r0, #4
 8011d86:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8011d88:	bd10      	pop	{r4, pc}
 8011d8a:	3a01      	subs	r2, #1
 8011d8c:	e7f0      	b.n	8011d70 <SDMMC_GetCmdResp1+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011d90:	f010 0001 	ands.w	r0, r0, #1
 8011d94:	d002      	beq.n	8011d9c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d96:	2301      	movs	r3, #1
 8011d98:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d9a:	e7f5      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d9c:	4b37      	ldr	r3, [pc, #220]	; (8011e7c <SDMMC_GetCmdResp1+0x120>)
 8011d9e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011da0:	6923      	ldr	r3, [r4, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	4299      	cmp	r1, r3
 8011da6:	d131      	bne.n	8011e0c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8011da8:	6963      	ldr	r3, [r4, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011daa:	4835      	ldr	r0, [pc, #212]	; (8011e80 <SDMMC_GetCmdResp1+0x124>)
 8011dac:	4018      	ands	r0, r3
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d0ea      	beq.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	db2c      	blt.n	8011e10 <SDMMC_GetCmdResp1+0xb4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011db6:	005a      	lsls	r2, r3, #1
 8011db8:	d42d      	bmi.n	8011e16 <SDMMC_GetCmdResp1+0xba>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011dba:	009c      	lsls	r4, r3, #2
 8011dbc:	d42d      	bmi.n	8011e1a <SDMMC_GetCmdResp1+0xbe>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011dbe:	00d9      	lsls	r1, r3, #3
 8011dc0:	d42d      	bmi.n	8011e1e <SDMMC_GetCmdResp1+0xc2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011dc2:	011a      	lsls	r2, r3, #4
 8011dc4:	d42e      	bmi.n	8011e24 <SDMMC_GetCmdResp1+0xc8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011dc6:	015c      	lsls	r4, r3, #5
 8011dc8:	d42f      	bmi.n	8011e2a <SDMMC_GetCmdResp1+0xce>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011dca:	01d9      	lsls	r1, r3, #7
 8011dcc:	d430      	bmi.n	8011e30 <SDMMC_GetCmdResp1+0xd4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011dce:	021a      	lsls	r2, r3, #8
 8011dd0:	d431      	bmi.n	8011e36 <SDMMC_GetCmdResp1+0xda>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011dd2:	025c      	lsls	r4, r3, #9
 8011dd4:	d432      	bmi.n	8011e3c <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011dd6:	0299      	lsls	r1, r3, #10
 8011dd8:	d433      	bmi.n	8011e42 <SDMMC_GetCmdResp1+0xe6>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011dda:	02da      	lsls	r2, r3, #11
 8011ddc:	d434      	bmi.n	8011e48 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011dde:	035c      	lsls	r4, r3, #13
 8011de0:	d435      	bmi.n	8011e4e <SDMMC_GetCmdResp1+0xf2>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011de2:	0399      	lsls	r1, r3, #14
 8011de4:	d436      	bmi.n	8011e54 <SDMMC_GetCmdResp1+0xf8>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011de6:	03da      	lsls	r2, r3, #15
 8011de8:	d437      	bmi.n	8011e5a <SDMMC_GetCmdResp1+0xfe>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011dea:	041c      	lsls	r4, r3, #16
 8011dec:	d438      	bmi.n	8011e60 <SDMMC_GetCmdResp1+0x104>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011dee:	0459      	lsls	r1, r3, #17
 8011df0:	d439      	bmi.n	8011e66 <SDMMC_GetCmdResp1+0x10a>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011df2:	049a      	lsls	r2, r3, #18
 8011df4:	d43a      	bmi.n	8011e6c <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011df6:	f013 0f08 	tst.w	r3, #8
 8011dfa:	bf14      	ite	ne
 8011dfc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8011e00:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8011e04:	e7c0      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8011e06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011e0a:	e7bd      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e0c:	2001      	movs	r0, #1
 8011e0e:	e7bb      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011e10:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8011e14:	e7b8      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011e16:	2040      	movs	r0, #64	; 0x40
 8011e18:	e7b6      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011e1a:	2080      	movs	r0, #128	; 0x80
 8011e1c:	e7b4      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011e1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011e22:	e7b1      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011e24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011e28:	e7ae      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011e2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011e2e:	e7ab      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011e30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011e34:	e7a8      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011e36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011e3a:	e7a5      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011e3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011e40:	e7a2      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011e42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011e46:	e79f      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8011e48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011e4c:	e79c      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011e4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011e52:	e799      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011e54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011e58:	e796      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011e5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011e5e:	e793      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011e60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011e64:	e790      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011e66:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011e6a:	e78d      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8011e6c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011e70:	e78a      	b.n	8011d88 <SDMMC_GetCmdResp1+0x2c>
 8011e72:	bf00      	nop
 8011e74:	24000030 	.word	0x24000030
 8011e78:	00200045 	.word	0x00200045
 8011e7c:	002000c5 	.word	0x002000c5
 8011e80:	fdffe008 	.word	0xfdffe008

08011e84 <SDMMC_CmdBlockLength>:
{
 8011e84:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e86:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011e8a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e8c:	2510      	movs	r5, #16
{
 8011e8e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e90:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011e92:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e94:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e96:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ea2:	f7ff ff09 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eaa:	4629      	mov	r1, r5
 8011eac:	4620      	mov	r0, r4
}
 8011eae:	b007      	add	sp, #28
 8011eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011eb4:	f7ff bf52 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011eb8 <SDMMC_CmdReadSingleBlock>:
{
 8011eb8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eba:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011ebe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ec0:	2511      	movs	r5, #17
{
 8011ec2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ec4:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011ec6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ec8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eca:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ed6:	f7ff feef 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4620      	mov	r0, r4
}
 8011ee2:	b007      	add	sp, #28
 8011ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011ee8:	f7ff bf38 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011eec <SDMMC_CmdReadMultiBlock>:
{
 8011eec:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eee:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011ef2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ef4:	2512      	movs	r5, #18
{
 8011ef6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ef8:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011efa:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011efc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011efe:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f06:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f0a:	f7ff fed5 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f12:	4629      	mov	r1, r5
 8011f14:	4620      	mov	r0, r4
}
 8011f16:	b007      	add	sp, #28
 8011f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011f1c:	f7ff bf1e 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011f20 <SDMMC_CmdWriteSingleBlock>:
{
 8011f20:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f22:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011f26:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f28:	2518      	movs	r5, #24
{
 8011f2a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f2c:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011f2e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f30:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f32:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f3e:	f7ff febb 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f46:	4629      	mov	r1, r5
 8011f48:	4620      	mov	r0, r4
}
 8011f4a:	b007      	add	sp, #28
 8011f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011f50:	f7ff bf04 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011f54 <SDMMC_CmdWriteMultiBlock>:
{
 8011f54:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f56:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011f5a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f5c:	2519      	movs	r5, #25
{
 8011f5e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f60:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011f62:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f64:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f66:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f72:	f7ff fea1 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	4620      	mov	r0, r4
}
 8011f7e:	b007      	add	sp, #28
 8011f80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011f84:	f7ff beea 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011f88 <SDMMC_CmdSelDesel>:
{
 8011f88:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011f8e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f90:	2507      	movs	r5, #7
{
 8011f92:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f94:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011f96:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f98:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f9a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fa6:	f7ff fe87 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fae:	4629      	mov	r1, r5
 8011fb0:	4620      	mov	r0, r4
}
 8011fb2:	b007      	add	sp, #28
 8011fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011fb8:	f7ff bed0 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011fbc <SDMMC_CmdAppCommand>:
{
 8011fbc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011fc2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fc4:	2537      	movs	r5, #55	; 0x37
{
 8011fc6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fc8:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011fca:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fcc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fce:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fda:	f7ff fe6d 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	4620      	mov	r0, r4
}
 8011fe6:	b007      	add	sp, #28
 8011fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011fec:	f7ff beb6 	b.w	8011d5c <SDMMC_GetCmdResp1>

08011ff0 <SDMMC_CmdBusWidth>:
{
 8011ff0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8011ff6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ff8:	2506      	movs	r5, #6
{
 8011ffa:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ffc:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011ffe:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012000:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012002:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801200a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801200e:	f7ff fe53 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012012:	f241 3288 	movw	r2, #5000	; 0x1388
 8012016:	4629      	mov	r1, r5
 8012018:	4620      	mov	r0, r4
}
 801201a:	b007      	add	sp, #28
 801201c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012020:	f7ff be9c 	b.w	8011d5c <SDMMC_GetCmdResp1>

08012024 <SDMMC_CmdSendSCR>:
{
 8012024:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012026:	2300      	movs	r3, #0
{
 8012028:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801202a:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801202c:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8012030:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012032:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012034:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012038:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012040:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012042:	f7ff fe39 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012046:	f241 3288 	movw	r2, #5000	; 0x1388
 801204a:	4629      	mov	r1, r5
 801204c:	4620      	mov	r0, r4
}
 801204e:	b007      	add	sp, #28
 8012050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012054:	f7ff be82 	b.w	8011d5c <SDMMC_GetCmdResp1>

08012058 <SDMMC_CmdSendStatus>:
{
 8012058:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801205a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 801205e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012060:	250d      	movs	r5, #13
{
 8012062:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012064:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = Argument;
 8012066:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012068:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801206a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012072:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012076:	f7ff fe1f 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801207a:	f241 3288 	movw	r2, #5000	; 0x1388
 801207e:	4629      	mov	r1, r5
 8012080:	4620      	mov	r0, r4
}
 8012082:	b007      	add	sp, #28
 8012084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012088:	f7ff be68 	b.w	8011d5c <SDMMC_GetCmdResp1>

0801208c <SDMMC_CmdStatusRegister>:
{
 801208c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801208e:	2300      	movs	r3, #0
{
 8012090:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012092:	250d      	movs	r5, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012094:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8012098:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801209a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801209c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80120a0:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120a8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120aa:	f7ff fe05 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80120ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80120b2:	4629      	mov	r1, r5
 80120b4:	4620      	mov	r0, r4
}
 80120b6:	b007      	add	sp, #28
 80120b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80120bc:	f7ff be4e 	b.w	8011d5c <SDMMC_GetCmdResp1>

080120c0 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80120c0:	4b11      	ldr	r3, [pc, #68]	; (8012108 <SDMMC_GetCmdResp2+0x48>)
 80120c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80120cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80120d0:	4353      	muls	r3, r2
    if (count-- == 0U)
 80120d2:	3b01      	subs	r3, #1
 80120d4:	d314      	bcc.n	8012100 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 80120d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80120d8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80120dc:	d0f9      	beq.n	80120d2 <SDMMC_GetCmdResp2+0x12>
 80120de:	0492      	lsls	r2, r2, #18
 80120e0:	d4f7      	bmi.n	80120d2 <SDMMC_GetCmdResp2+0x12>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80120e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80120e4:	075b      	lsls	r3, r3, #29
 80120e6:	d503      	bpl.n	80120f0 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80120e8:	2304      	movs	r3, #4
 80120ea:	6383      	str	r3, [r0, #56]	; 0x38
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80120f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80120f2:	f013 0301 	ands.w	r3, r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80120f6:	bf14      	ite	ne
 80120f8:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80120fa:	4a04      	ldreq	r2, [pc, #16]	; (801210c <SDMMC_GetCmdResp2+0x4c>)
 80120fc:	6382      	str	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80120fe:	e7f5      	b.n	80120ec <SDMMC_GetCmdResp2+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012104:	e7f2      	b.n	80120ec <SDMMC_GetCmdResp2+0x2c>
 8012106:	bf00      	nop
 8012108:	24000030 	.word	0x24000030
 801210c:	002000c5 	.word	0x002000c5

08012110 <SDMMC_CmdSendCID>:
{
 8012110:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012112:	2300      	movs	r3, #0
{
 8012114:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012116:	2202      	movs	r2, #2
{
 8012118:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801211a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801211c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012120:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012124:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801212c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801212e:	f7ff fdc3 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012132:	4620      	mov	r0, r4
}
 8012134:	b006      	add	sp, #24
 8012136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801213a:	f7ff bfc1 	b.w	80120c0 <SDMMC_GetCmdResp2>

0801213e <SDMMC_CmdSendCSD>:
{
 801213e:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012140:	2209      	movs	r2, #9
{
 8012142:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012144:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 8012148:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 801214a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801214c:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801214e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012156:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801215a:	a901      	add	r1, sp, #4
 801215c:	f7ff fdac 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012160:	4620      	mov	r0, r4
}
 8012162:	b006      	add	sp, #24
 8012164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012168:	f7ff bfaa 	b.w	80120c0 <SDMMC_GetCmdResp2>

0801216c <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801216c:	4b0f      	ldr	r3, [pc, #60]	; (80121ac <SDMMC_GetCmdResp3+0x40>)
 801216e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	fbb3 f3f2 	udiv	r3, r3, r2
 8012178:	f241 3288 	movw	r2, #5000	; 0x1388
 801217c:	4353      	muls	r3, r2
    if (count-- == 0U)
 801217e:	3b01      	subs	r3, #1
 8012180:	d310      	bcc.n	80121a4 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 8012182:	6b42      	ldr	r2, [r0, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012184:	f012 0f45 	tst.w	r2, #69	; 0x45
 8012188:	d0f9      	beq.n	801217e <SDMMC_GetCmdResp3+0x12>
 801218a:	0492      	lsls	r2, r2, #18
 801218c:	d4f7      	bmi.n	801217e <SDMMC_GetCmdResp3+0x12>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801218e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012190:	f013 0304 	ands.w	r3, r3, #4
 8012194:	d003      	beq.n	801219e <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012196:	2304      	movs	r3, #4
 8012198:	6383      	str	r3, [r0, #56]	; 0x38
}
 801219a:	4618      	mov	r0, r3
 801219c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801219e:	4a04      	ldr	r2, [pc, #16]	; (80121b0 <SDMMC_GetCmdResp3+0x44>)
 80121a0:	6382      	str	r2, [r0, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80121a2:	e7fa      	b.n	801219a <SDMMC_GetCmdResp3+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80121a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121a8:	e7f7      	b.n	801219a <SDMMC_GetCmdResp3+0x2e>
 80121aa:	bf00      	nop
 80121ac:	24000030 	.word	0x24000030
 80121b0:	002000c5 	.word	0x002000c5

080121b4 <SDMMC_CmdAppOperCommand>:
{
 80121b4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b6:	2229      	movs	r2, #41	; 0x29
{
 80121b8:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121ba:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80121be:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80121c0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c2:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121cc:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121d0:	a901      	add	r1, sp, #4
 80121d2:	f7ff fd71 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80121d6:	4620      	mov	r0, r4
}
 80121d8:	b006      	add	sp, #24
 80121da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80121de:	f7ff bfc5 	b.w	801216c <SDMMC_GetCmdResp3>
	...

080121e4 <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80121e4:	4b1f      	ldr	r3, [pc, #124]	; (8012264 <SDMMC_GetCmdResp6+0x80>)
{
 80121e6:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80121e8:	681b      	ldr	r3, [r3, #0]
{
 80121ea:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80121ec:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80121f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80121f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80121f8:	4343      	muls	r3, r0
    if (count-- == 0U)
 80121fa:	3b01      	subs	r3, #1
 80121fc:	d329      	bcc.n	8012252 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 80121fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012200:	f010 0f45 	tst.w	r0, #69	; 0x45
 8012204:	d0f9      	beq.n	80121fa <SDMMC_GetCmdResp6+0x16>
 8012206:	0480      	lsls	r0, r0, #18
 8012208:	d4f7      	bmi.n	80121fa <SDMMC_GetCmdResp6+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801220a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801220c:	0758      	lsls	r0, r3, #29
 801220e:	d502      	bpl.n	8012216 <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012210:	2004      	movs	r0, #4
 8012212:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8012214:	bd10      	pop	{r4, pc}
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012216:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012218:	f010 0001 	ands.w	r0, r0, #1
 801221c:	d002      	beq.n	8012224 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801221e:	2301      	movs	r3, #1
 8012220:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012222:	e7f7      	b.n	8012214 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 8012224:	6923      	ldr	r3, [r4, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012226:	b2db      	uxtb	r3, r3
 8012228:	4299      	cmp	r1, r3
 801222a:	d115      	bne.n	8012258 <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801222c:	4b0e      	ldr	r3, [pc, #56]	; (8012268 <SDMMC_GetCmdResp6+0x84>)
 801222e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8012230:	6963      	ldr	r3, [r4, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012232:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8012236:	d102      	bne.n	801223e <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012238:	0c1b      	lsrs	r3, r3, #16
 801223a:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 801223c:	e7ea      	b.n	8012214 <SDMMC_GetCmdResp6+0x30>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801223e:	045a      	lsls	r2, r3, #17
 8012240:	d40c      	bmi.n	801225c <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012242:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8012246:	bf14      	ite	ne
 8012248:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 801224c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8012250:	e7e0      	b.n	8012214 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8012252:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8012256:	e7dd      	b.n	8012214 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012258:	2001      	movs	r0, #1
 801225a:	e7db      	b.n	8012214 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801225c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8012260:	e7d8      	b.n	8012214 <SDMMC_GetCmdResp6+0x30>
 8012262:	bf00      	nop
 8012264:	24000030 	.word	0x24000030
 8012268:	002000c5 	.word	0x002000c5

0801226c <SDMMC_CmdSetRelAdd>:
{
 801226c:	b530      	push	{r4, r5, lr}
 801226e:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012270:	2300      	movs	r3, #0
 8012272:	2503      	movs	r5, #3
{
 8012274:	4604      	mov	r4, r0
 8012276:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012278:	f44f 7180 	mov.w	r1, #256	; 0x100
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801227c:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012280:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012288:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801228a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801228c:	f7ff fd14 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012290:	9a01      	ldr	r2, [sp, #4]
 8012292:	4629      	mov	r1, r5
 8012294:	4620      	mov	r0, r4
}
 8012296:	b009      	add	sp, #36	; 0x24
 8012298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801229c:	f7ff bfa2 	b.w	80121e4 <SDMMC_GetCmdResp6>

080122a0 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80122a0:	4b14      	ldr	r3, [pc, #80]	; (80122f4 <SDMMC_GetCmdResp7+0x54>)
 80122a2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80122a6:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80122ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80122b2:	434b      	muls	r3, r1
    if (count-- == 0U)
 80122b4:	3b01      	subs	r3, #1
 80122b6:	d319      	bcc.n	80122ec <SDMMC_GetCmdResp7+0x4c>
    sta_reg = SDMMCx->STA;
 80122b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122ba:	f011 0f45 	tst.w	r1, #69	; 0x45
 80122be:	d0f9      	beq.n	80122b4 <SDMMC_GetCmdResp7+0x14>
 80122c0:	0489      	lsls	r1, r1, #18
 80122c2:	d4f7      	bmi.n	80122b4 <SDMMC_GetCmdResp7+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80122c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80122c6:	075b      	lsls	r3, r3, #29
 80122c8:	d502      	bpl.n	80122d0 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80122ca:	2004      	movs	r0, #4
 80122cc:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80122ce:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80122d0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80122d2:	f011 0101 	ands.w	r1, r1, #1
 80122d6:	d003      	beq.n	80122e0 <SDMMC_GetCmdResp7+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80122d8:	2301      	movs	r3, #1
  return SDMMC_ERROR_NONE;
 80122da:	4608      	mov	r0, r1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80122dc:	6393      	str	r3, [r2, #56]	; 0x38
 80122de:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80122e0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80122e2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80122e6:	d003      	beq.n	80122f0 <SDMMC_GetCmdResp7+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80122e8:	2340      	movs	r3, #64	; 0x40
 80122ea:	e7f6      	b.n	80122da <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 80122ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	24000030 	.word	0x24000030

080122f8 <SDMMC_CmdOperCond>:
{
 80122f8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80122fa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 80122fe:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012300:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012302:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8012306:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012308:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801230c:	2300      	movs	r3, #0
 801230e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012316:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012318:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801231a:	f7ff fccd 	bl	8011cb8 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801231e:	4620      	mov	r0, r4
}
 8012320:	b006      	add	sp, #24
 8012322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012326:	f7ff bfbb 	b.w	80122a0 <SDMMC_GetCmdResp7>
	...

0801232c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801232c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801232e:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8012330:	4a10      	ldr	r2, [pc, #64]	; (8012374 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8012332:	9301      	str	r3, [sp, #4]
    count++;
 8012334:	9b01      	ldr	r3, [sp, #4]
 8012336:	3301      	adds	r3, #1
 8012338:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 801233a:	9b01      	ldr	r3, [sp, #4]
 801233c:	4293      	cmp	r3, r2
 801233e:	d816      	bhi.n	801236e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012340:	6903      	ldr	r3, [r0, #16]
 8012342:	2b00      	cmp	r3, #0
 8012344:	daf6      	bge.n	8012334 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8012346:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8012348:	4a0a      	ldr	r2, [pc, #40]	; (8012374 <USB_CoreReset+0x48>)
  count = 0U;
 801234a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801234c:	6903      	ldr	r3, [r0, #16]
 801234e:	f043 0301 	orr.w	r3, r3, #1
 8012352:	6103      	str	r3, [r0, #16]
    count++;
 8012354:	9b01      	ldr	r3, [sp, #4]
 8012356:	3301      	adds	r3, #1
 8012358:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 801235a:	9b01      	ldr	r3, [sp, #4]
 801235c:	4293      	cmp	r3, r2
 801235e:	d806      	bhi.n	801236e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012360:	6903      	ldr	r3, [r0, #16]
 8012362:	f013 0301 	ands.w	r3, r3, #1
 8012366:	d1f5      	bne.n	8012354 <USB_CoreReset+0x28>

  return HAL_OK;
 8012368:	4618      	mov	r0, r3
}
 801236a:	b002      	add	sp, #8
 801236c:	4770      	bx	lr
      return HAL_TIMEOUT;
 801236e:	2003      	movs	r0, #3
 8012370:	e7fb      	b.n	801236a <USB_CoreReset+0x3e>
 8012372:	bf00      	nop
 8012374:	00030d40 	.word	0x00030d40

08012378 <USB_CoreInit>:
{
 8012378:	b084      	sub	sp, #16
 801237a:	b538      	push	{r3, r4, r5, lr}
 801237c:	ad05      	add	r5, sp, #20
 801237e:	4604      	mov	r4, r0
 8012380:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012386:	2b01      	cmp	r3, #1
 8012388:	d12f      	bne.n	80123ea <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801238a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012390:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012392:	68c3      	ldr	r3, [r0, #12]
 8012394:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8012398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801239c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801239e:	68c3      	ldr	r3, [r0, #12]
 80123a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80123a4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80123a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d103      	bne.n	80123b4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80123ac:	68c3      	ldr	r3, [r0, #12]
 80123ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80123b2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80123b4:	4620      	mov	r0, r4
 80123b6:	f7ff ffb9 	bl	801232c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80123ba:	9b07      	ldr	r3, [sp, #28]
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d110      	bne.n	80123e2 <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80123c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80123c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80123c8:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 80123cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80123d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80123d2:	68a3      	ldr	r3, [r4, #8]
 80123d4:	f043 0306 	orr.w	r3, r3, #6
 80123d8:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80123da:	68a3      	ldr	r3, [r4, #8]
 80123dc:	f043 0320 	orr.w	r3, r3, #32
 80123e0:	60a3      	str	r3, [r4, #8]
}
 80123e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123e6:	b004      	add	sp, #16
 80123e8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80123ea:	68c3      	ldr	r3, [r0, #12]
 80123ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123f0:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80123f2:	f7ff ff9b 	bl	801232c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80123f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123f8:	b923      	cbnz	r3, 8012404 <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80123fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80123fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012400:	63a3      	str	r3, [r4, #56]	; 0x38
 8012402:	e7da      	b.n	80123ba <USB_CoreInit+0x42>
 8012404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801240a:	e7f9      	b.n	8012400 <USB_CoreInit+0x88>

0801240c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801240c:	6883      	ldr	r3, [r0, #8]
 801240e:	f043 0301 	orr.w	r3, r3, #1
 8012412:	6083      	str	r3, [r0, #8]
}
 8012414:	2000      	movs	r0, #0
 8012416:	4770      	bx	lr

08012418 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012418:	6883      	ldr	r3, [r0, #8]
 801241a:	f023 0301 	bic.w	r3, r3, #1
 801241e:	6083      	str	r3, [r0, #8]
}
 8012420:	2000      	movs	r0, #0
 8012422:	4770      	bx	lr

08012424 <USB_SetCurrentMode>:
{
 8012424:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012426:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8012428:	2901      	cmp	r1, #1
{
 801242a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801242c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012430:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8012432:	d10f      	bne.n	8012454 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012434:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8012436:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801243c:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 801243e:	2001      	movs	r0, #1
      ms++;
 8012440:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8012442:	f7f7 fcf1 	bl	8009e28 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8012446:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012448:	07d9      	lsls	r1, r3, #31
 801244a:	d414      	bmi.n	8012476 <USB_SetCurrentMode+0x52>
 801244c:	2c32      	cmp	r4, #50	; 0x32
 801244e:	d1f6      	bne.n	801243e <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8012450:	2001      	movs	r0, #1
}
 8012452:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8012454:	2900      	cmp	r1, #0
 8012456:	d1fb      	bne.n	8012450 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012458:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801245a:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801245c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012460:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8012462:	2001      	movs	r0, #1
      ms++;
 8012464:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8012466:	f7f7 fcdf 	bl	8009e28 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 801246a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801246c:	07da      	lsls	r2, r3, #31
 801246e:	d502      	bpl.n	8012476 <USB_SetCurrentMode+0x52>
 8012470:	2c32      	cmp	r4, #50	; 0x32
 8012472:	d1f6      	bne.n	8012462 <USB_SetCurrentMode+0x3e>
 8012474:	e7ec      	b.n	8012450 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8012476:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 801247a:	4258      	negs	r0, r3
 801247c:	4158      	adcs	r0, r3
 801247e:	e7e8      	b.n	8012452 <USB_SetCurrentMode+0x2e>

08012480 <USB_FlushTxFifo>:
{
 8012480:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012482:	2300      	movs	r3, #0
    if (count > 200000U)
 8012484:	4a10      	ldr	r2, [pc, #64]	; (80124c8 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8012486:	9301      	str	r3, [sp, #4]
    count++;
 8012488:	9b01      	ldr	r3, [sp, #4]
 801248a:	3301      	adds	r3, #1
 801248c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 801248e:	9b01      	ldr	r3, [sp, #4]
 8012490:	4293      	cmp	r3, r2
 8012492:	d816      	bhi.n	80124c2 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012494:	6903      	ldr	r3, [r0, #16]
 8012496:	2b00      	cmp	r3, #0
 8012498:	daf6      	bge.n	8012488 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801249a:	0189      	lsls	r1, r1, #6
  count = 0U;
 801249c:	2300      	movs	r3, #0
    if (count > 200000U)
 801249e:	4a0a      	ldr	r2, [pc, #40]	; (80124c8 <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80124a0:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80124a4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80124a6:	6101      	str	r1, [r0, #16]
    count++;
 80124a8:	9b01      	ldr	r3, [sp, #4]
 80124aa:	3301      	adds	r3, #1
 80124ac:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80124ae:	9b01      	ldr	r3, [sp, #4]
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d806      	bhi.n	80124c2 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80124b4:	6903      	ldr	r3, [r0, #16]
 80124b6:	f013 0320 	ands.w	r3, r3, #32
 80124ba:	d1f5      	bne.n	80124a8 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80124bc:	4618      	mov	r0, r3
}
 80124be:	b002      	add	sp, #8
 80124c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80124c2:	2003      	movs	r0, #3
 80124c4:	e7fb      	b.n	80124be <USB_FlushTxFifo+0x3e>
 80124c6:	bf00      	nop
 80124c8:	00030d40 	.word	0x00030d40

080124cc <USB_FlushRxFifo>:
{
 80124cc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80124ce:	2300      	movs	r3, #0
    if (count > 200000U)
 80124d0:	4a0f      	ldr	r2, [pc, #60]	; (8012510 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 80124d2:	9301      	str	r3, [sp, #4]
    count++;
 80124d4:	9b01      	ldr	r3, [sp, #4]
 80124d6:	3301      	adds	r3, #1
 80124d8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80124da:	9b01      	ldr	r3, [sp, #4]
 80124dc:	4293      	cmp	r3, r2
 80124de:	d814      	bhi.n	801250a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80124e0:	6903      	ldr	r3, [r0, #16]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	daf6      	bge.n	80124d4 <USB_FlushRxFifo+0x8>
  count = 0U;
 80124e6:	2300      	movs	r3, #0
    if (count > 200000U)
 80124e8:	4a09      	ldr	r2, [pc, #36]	; (8012510 <USB_FlushRxFifo+0x44>)
  count = 0U;
 80124ea:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80124ec:	2310      	movs	r3, #16
 80124ee:	6103      	str	r3, [r0, #16]
    count++;
 80124f0:	9b01      	ldr	r3, [sp, #4]
 80124f2:	3301      	adds	r3, #1
 80124f4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80124f6:	9b01      	ldr	r3, [sp, #4]
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d806      	bhi.n	801250a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80124fc:	6903      	ldr	r3, [r0, #16]
 80124fe:	f013 0310 	ands.w	r3, r3, #16
 8012502:	d1f5      	bne.n	80124f0 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8012504:	4618      	mov	r0, r3
}
 8012506:	b002      	add	sp, #8
 8012508:	4770      	bx	lr
      return HAL_TIMEOUT;
 801250a:	2003      	movs	r0, #3
 801250c:	e7fb      	b.n	8012506 <USB_FlushRxFifo+0x3a>
 801250e:	bf00      	nop
 8012510:	00030d40 	.word	0x00030d40

08012514 <USB_WritePacket>:
{
 8012514:	b510      	push	{r4, lr}
 8012516:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 801251a:	b944      	cbnz	r4, 801252e <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 801251c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801251e:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8012520:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012522:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8012526:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 801252a:	428b      	cmp	r3, r1
 801252c:	d101      	bne.n	8012532 <USB_WritePacket+0x1e>
}
 801252e:	2000      	movs	r0, #0
 8012530:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012532:	f851 2b04 	ldr.w	r2, [r1], #4
 8012536:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8012538:	e7f7      	b.n	801252a <USB_WritePacket+0x16>

0801253a <USB_ReadPacket>:
{
 801253a:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 801253c:	2300      	movs	r3, #0
  uint32_t count32b = (uint32_t)len >> 2U;
 801253e:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012540:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
  uint16_t remaining_bytes = len % 4U;
 8012544:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8012548:	42a3      	cmp	r3, r4
 801254a:	d311      	bcc.n	8012570 <USB_ReadPacket+0x36>
 801254c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 8012550:	b162      	cbz	r2, 801256c <USB_ReadPacket+0x32>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012552:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    i = 0U;
 8012556:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012558:	6804      	ldr	r4, [r0, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801255a:	00d8      	lsls	r0, r3, #3
 801255c:	fa24 f000 	lsr.w	r0, r4, r0
 8012560:	54c8      	strb	r0, [r1, r3]
      i++;
 8012562:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8012564:	b298      	uxth	r0, r3
 8012566:	4282      	cmp	r2, r0
 8012568:	d1f7      	bne.n	801255a <USB_ReadPacket+0x20>
      pDest++;
 801256a:	4411      	add	r1, r2
}
 801256c:	4608      	mov	r0, r1
 801256e:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012570:	682e      	ldr	r6, [r5, #0]
 8012572:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < count32b; i++)
 8012576:	3301      	adds	r3, #1
 8012578:	e7e6      	b.n	8012548 <USB_ReadPacket+0xe>

0801257a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 801257a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 801257c:	6980      	ldr	r0, [r0, #24]
}
 801257e:	4010      	ands	r0, r2
 8012580:	4770      	bx	lr

08012582 <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 8012582:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8012586:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801258a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
}
 801258e:	4018      	ands	r0, r3
 8012590:	4770      	bx	lr

08012592 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8012592:	6940      	ldr	r0, [r0, #20]
}
 8012594:	f000 0001 	and.w	r0, r0, #1
 8012598:	4770      	bx	lr
	...

0801259c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801259c:	b084      	sub	sp, #16
 801259e:	b570      	push	{r4, r5, r6, lr}
 80125a0:	4604      	mov	r4, r0
 80125a2:	a805      	add	r0, sp, #20
 80125a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80125a8:	2300      	movs	r3, #0
 80125aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80125ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80125b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80125b4:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80125b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80125b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80125bc:	63a3      	str	r3, [r4, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80125be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80125c0:	05da      	lsls	r2, r3, #23
 80125c2:	d53a      	bpl.n	801263a <USB_HostInit+0x9e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80125c4:	9b08      	ldr	r3, [sp, #32]
 80125c6:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80125c8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 80125cc:	d137      	bne.n	801263e <USB_HostInit+0xa2>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80125ce:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80125d2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80125d6:	2110      	movs	r1, #16
 80125d8:	4620      	mov	r0, r4
 80125da:	f7ff ff51 	bl	8012480 <USB_FlushTxFifo>
 80125de:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff ff73 	bl	80124cc <USB_FlushRxFifo>
 80125e6:	4308      	orrs	r0, r1
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80125e8:	2300      	movs	r3, #0
 80125ea:	9e06      	ldr	r6, [sp, #24]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80125ec:	b2c0      	uxtb	r0, r0
 80125ee:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 80125f2:	461d      	mov	r5, r3
 80125f4:	f04f 31ff 	mov.w	r1, #4294967295
    ret = HAL_ERROR;
 80125f8:	3800      	subs	r0, #0
 80125fa:	bf18      	it	ne
 80125fc:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 80125fe:	429e      	cmp	r6, r3
 8012600:	d120      	bne.n	8012644 <USB_HostInit+0xa8>
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
    USBx_HC(i)->HCINTMSK = 0U;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012602:	61a5      	str	r5, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8012604:	6161      	str	r1, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012606:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012608:	05db      	lsls	r3, r3, #23
 801260a:	d520      	bpl.n	801264e <USB_HostInit+0xb2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801260c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012610:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8012612:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8012616:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8012618:	4b10      	ldr	r3, [pc, #64]	; (801265c <USB_HostInit+0xc0>)
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801261a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801261e:	9b07      	ldr	r3, [sp, #28]
 8012620:	b91b      	cbnz	r3, 801262a <USB_HostInit+0x8e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012622:	69a3      	ldr	r3, [r4, #24]
 8012624:	f043 0310 	orr.w	r3, r3, #16
 8012628:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801262a:	69a2      	ldr	r2, [r4, #24]
 801262c:	4b0c      	ldr	r3, [pc, #48]	; (8012660 <USB_HostInit+0xc4>)
 801262e:	4313      	orrs	r3, r2
 8012630:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8012632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012636:	b004      	add	sp, #16
 8012638:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801263a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 801263e:	f023 0304 	bic.w	r3, r3, #4
 8012642:	e7c6      	b.n	80125d2 <USB_HostInit+0x36>
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8012644:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8012646:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8012648:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801264a:	3220      	adds	r2, #32
 801264c:	e7d7      	b.n	80125fe <USB_HostInit+0x62>
    USBx->GRXFSIZ  = 0x80U;
 801264e:	2380      	movs	r3, #128	; 0x80
 8012650:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012652:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8012656:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012658:	4b02      	ldr	r3, [pc, #8]	; (8012664 <USB_HostInit+0xc8>)
 801265a:	e7de      	b.n	801261a <USB_HostInit+0x7e>
 801265c:	00e00300 	.word	0x00e00300
 8012660:	a3200008 	.word	0xa3200008
 8012664:	004000e0 	.word	0x004000e0

08012668 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8012668:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 801266c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801266e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8012672:	f023 0303 	bic.w	r3, r3, #3
{
 8012676:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8012678:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801267c:	f001 0303 	and.w	r3, r1, #3
 8012680:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8012684:	ea43 0304 	orr.w	r3, r3, r4
 8012688:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 801268c:	d104      	bne.n	8012698 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801268e:	f64b 3380 	movw	r3, #48000	; 0xbb80
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8012692:	2000      	movs	r0, #0
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8012694:	6053      	str	r3, [r2, #4]
}
 8012696:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8012698:	2902      	cmp	r1, #2
 801269a:	d102      	bne.n	80126a2 <USB_InitFSLSPClkSel+0x3a>
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801269c:	f241 7370 	movw	r3, #6000	; 0x1770
 80126a0:	e7f7      	b.n	8012692 <USB_InitFSLSPClkSel+0x2a>
    return HAL_ERROR;
 80126a2:	2001      	movs	r0, #1
 80126a4:	e7f7      	b.n	8012696 <USB_InitFSLSPClkSel+0x2e>

080126a6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80126a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80126a8:	2500      	movs	r5, #0
{
 80126aa:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 80126ac:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80126ae:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80126b2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80126b4:	9b01      	ldr	r3, [sp, #4]
 80126b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80126ba:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80126bc:	9b01      	ldr	r3, [sp, #4]
 80126be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80126c2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80126c6:	2064      	movs	r0, #100	; 0x64
 80126c8:	f7f7 fbae 	bl	8009e28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80126cc:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 80126ce:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80126d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126d4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80126d8:	f7f7 fba6 	bl	8009e28 <HAL_Delay>

  return HAL_OK;
}
 80126dc:	4628      	mov	r0, r5
 80126de:	b003      	add	sp, #12
 80126e0:	bd30      	pop	{r4, r5, pc}

080126e2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80126e2:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80126e4:	2300      	movs	r3, #0
 80126e6:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80126e8:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80126ec:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80126ee:	9b01      	ldr	r3, [sp, #4]
 80126f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80126f4:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80126f6:	9b01      	ldr	r3, [sp, #4]
 80126f8:	04da      	lsls	r2, r3, #19
 80126fa:	d406      	bmi.n	801270a <USB_DriveVbus+0x28>
 80126fc:	2901      	cmp	r1, #1
 80126fe:	d104      	bne.n	801270a <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012700:	9b01      	ldr	r3, [sp, #4]
 8012702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012706:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 801270a:	9b01      	ldr	r3, [sp, #4]
 801270c:	04db      	lsls	r3, r3, #19
 801270e:	d505      	bpl.n	801271c <USB_DriveVbus+0x3a>
 8012710:	b921      	cbnz	r1, 801271c <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012712:	9b01      	ldr	r3, [sp, #4]
 8012714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012718:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 801271c:	2000      	movs	r0, #0
 801271e:	b002      	add	sp, #8
 8012720:	4770      	bx	lr

08012722 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012722:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8012724:	2300      	movs	r3, #0
 8012726:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8012728:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 801272c:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801272e:	9801      	ldr	r0, [sp, #4]
}
 8012730:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8012734:	b002      	add	sp, #8
 8012736:	4770      	bx	lr

08012738 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8012738:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 801273c:	6880      	ldr	r0, [r0, #8]
}
 801273e:	b280      	uxth	r0, r0
 8012740:	4770      	bx	lr

08012742 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8012742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8012746:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 801274a:	461c      	mov	r4, r3
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 801274c:	f04f 35ff 	mov.w	r5, #4294967295
{
 8012750:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8012754:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8012758:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 801275c:	609d      	str	r5, [r3, #8]
  switch (ep_type)
 801275e:	2e03      	cmp	r6, #3
 8012760:	d86c      	bhi.n	801283c <USB_HC_Init+0xfa>
 8012762:	e8df f006 	tbb	[pc, r6]
 8012766:	6102      	.short	0x6102
 8012768:	5a02      	.short	0x5a02
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801276a:	f240 459d 	movw	r5, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 801276e:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012772:	60dd      	str	r5, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8012774:	da03      	bge.n	801277e <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012776:	68dd      	ldr	r5, [r3, #12]
 8012778:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 801277c:	e04b      	b.n	8012816 <USB_HC_Init+0xd4>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 801277e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8012780:	05ed      	lsls	r5, r5, #23
 8012782:	d445      	bmi.n	8012810 <USB_HC_Init+0xce>
  HAL_StatusTypeDef ret = HAL_OK;
 8012784:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8012786:	f8d3 e00c 	ldr.w	lr, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 801278a:	f001 010f 	and.w	r1, r1, #15
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 801278e:	f04e 0e02 	orr.w	lr, lr, #2
 8012792:	f8c3 e00c 	str.w	lr, [r3, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8012796:	2301      	movs	r3, #1
 8012798:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 801279c:	408b      	lsls	r3, r1

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801279e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80127a2:	ea43 0308 	orr.w	r3, r3, r8
  if ((epnum & 0x80U) == 0x80U)
 80127a6:	03c9      	lsls	r1, r1, #15
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80127a8:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80127ac:	6983      	ldr	r3, [r0, #24]
 80127ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80127b2:	6183      	str	r3, [r0, #24]
  else
  {
    HCcharEpDir = 0U;
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80127b4:	f7ff ffb5 	bl	8012722 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80127b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d13f      	bne.n	8012840 <USB_HC_Init+0xfe>
 80127c0:	3802      	subs	r0, #2
 80127c2:	bf18      	it	ne
 80127c4:	2001      	movne	r0, #1
 80127c6:	0440      	lsls	r0, r0, #17
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80127c8:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80127ca:	f8bd 4020 	ldrh.w	r4, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80127ce:	02d2      	lsls	r2, r2, #11
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80127d0:	f3c4 040a 	ubfx	r4, r4, #0, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80127d4:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80127d8:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80127dc:	4320      	orrs	r0, r4
 80127de:	4303      	orrs	r3, r0
 80127e0:	4313      	orrs	r3, r2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80127e2:	04b2      	lsls	r2, r6, #18

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80127e4:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80127e8:	430b      	orrs	r3, r1
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80127ea:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80127ee:	2e01      	cmp	r6, #1
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80127f0:	ea43 0302 	orr.w	r3, r3, r2
 80127f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80127f8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80127fc:	d105      	bne.n	801280a <USB_HC_Init+0xc8>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80127fe:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8012802:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012806:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 801280a:	4628      	mov	r0, r5
 801280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012810:	68dd      	ldr	r5, [r3, #12]
 8012812:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 8012816:	60dd      	str	r5, [r3, #12]
 8012818:	e7b4      	b.n	8012784 <USB_HC_Init+0x42>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801281a:	f240 659d 	movw	r5, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 801281e:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012822:	60dd      	str	r5, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8012824:	daae      	bge.n	8012784 <USB_HC_Init+0x42>
 8012826:	e7a6      	b.n	8012776 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012828:	f240 2525 	movw	r5, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 801282c:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012830:	60dd      	str	r5, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8012832:	daa7      	bge.n	8012784 <USB_HC_Init+0x42>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8012834:	68dd      	ldr	r5, [r3, #12]
 8012836:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 801283a:	e7ec      	b.n	8012816 <USB_HC_Init+0xd4>
  switch (ep_type)
 801283c:	2501      	movs	r5, #1
 801283e:	e7a2      	b.n	8012786 <USB_HC_Init+0x44>
    HCcharLowSpeed = 0U;
 8012840:	2000      	movs	r0, #0
 8012842:	e7c1      	b.n	80127c8 <USB_HC_Init+0x86>

08012844 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012844:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012848:	6940      	ldr	r0, [r0, #20]
}
 801284a:	b280      	uxth	r0, r0
 801284c:	4770      	bx	lr

0801284e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801284e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8012850:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012852:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 8012856:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012858:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 801285c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012860:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8012864:	6885      	ldr	r5, [r0, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012866:	0c9b      	lsrs	r3, r3, #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8012868:	06ad      	lsls	r5, r5, #26
 801286a:	d501      	bpl.n	8012870 <USB_HC_Halt+0x22>
 801286c:	2c00      	cmp	r4, #0
 801286e:	da25      	bge.n	80128bc <USB_HC_Halt+0x6e>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012870:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012874:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8012878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801287c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012880:	d11f      	bne.n	80128c2 <USB_HC_Halt+0x74>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012882:	6883      	ldr	r3, [r0, #8]
 8012884:	069b      	lsls	r3, r3, #26
 8012886:	d419      	bmi.n	80128bc <USB_HC_Halt+0x6e>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012888:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801288a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801288e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012892:	d132      	bne.n	80128fa <USB_HC_Halt+0xac>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012898:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801289c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80128a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80128a4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 80128a8:	9b01      	ldr	r3, [sp, #4]
 80128aa:	3301      	adds	r3, #1
 80128ac:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 80128ae:	9b01      	ldr	r3, [sp, #4]
 80128b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80128b4:	d802      	bhi.n	80128bc <USB_HC_Halt+0x6e>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80128b6:	6813      	ldr	r3, [r2, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	dbf5      	blt.n	80128a8 <USB_HC_Halt+0x5a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80128bc:	2000      	movs	r0, #0
 80128be:	b003      	add	sp, #12
 80128c0:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80128c2:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80128c6:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80128ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80128ce:	d114      	bne.n	80128fa <USB_HC_Halt+0xac>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80128d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128d4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80128d8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80128dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80128e0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 80128e4:	9b01      	ldr	r3, [sp, #4]
 80128e6:	3301      	adds	r3, #1
 80128e8:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 80128ea:	9b01      	ldr	r3, [sp, #4]
 80128ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80128f0:	d8e4      	bhi.n	80128bc <USB_HC_Halt+0x6e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80128f2:	6813      	ldr	r3, [r2, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	dbf5      	blt.n	80128e4 <USB_HC_Halt+0x96>
 80128f8:	e7e0      	b.n	80128bc <USB_HC_Halt+0x6e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80128fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80128fe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8012902:	e7db      	b.n	80128bc <USB_HC_Halt+0x6e>

08012904 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012904:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8012908:	4a06      	ldr	r2, [pc, #24]	; (8012924 <USB_DoPing+0x20>)
 801290a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801290e:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012912:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801291a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

  return HAL_OK;
}
 801291e:	2000      	movs	r0, #0
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	80080000 	.word	0x80080000

08012928 <USB_HC_StartXfer>:
{
 8012928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801292c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 801292e:	460c      	mov	r4, r1
 8012930:	4605      	mov	r5, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012932:	7849      	ldrb	r1, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8012934:	05db      	lsls	r3, r3, #23
 8012936:	d50f      	bpl.n	8012958 <USB_HC_StartXfer+0x30>
 8012938:	7923      	ldrb	r3, [r4, #4]
 801293a:	b96b      	cbnz	r3, 8012958 <USB_HC_StartXfer+0x30>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 801293c:	2a01      	cmp	r2, #1
 801293e:	d167      	bne.n	8012a10 <USB_HC_StartXfer+0xe8>
 8012940:	79e3      	ldrb	r3, [r4, #7]
 8012942:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012946:	d107      	bne.n	8012958 <USB_HC_StartXfer+0x30>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8012948:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 801294c:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8012950:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8012954:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
  if (hc->xfer_len > 0U)
 8012958:	6963      	ldr	r3, [r4, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d063      	beq.n	8012a26 <USB_HC_StartXfer+0xfe>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801295e:	8926      	ldrh	r6, [r4, #8]
 8012960:	1e58      	subs	r0, r3, #1
 8012962:	4430      	add	r0, r6
 8012964:	fbb0 f0f6 	udiv	r0, r0, r6
 8012968:	b280      	uxth	r0, r0
 801296a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801296e:	bf28      	it	cs
 8012970:	f44f 7080 	movcs.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8012974:	78e7      	ldrb	r7, [r4, #3]
 8012976:	2f00      	cmp	r7, #0
 8012978:	d057      	beq.n	8012a2a <USB_HC_StartXfer+0x102>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801297a:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 801297e:	fb00 f808 	mul.w	r8, r0, r8
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012982:	f894 c00a 	ldrb.w	ip, [r4, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012986:	eb05 1641 	add.w	r6, r5, r1, lsl #5
 801298a:	f8c4 8010 	str.w	r8, [r4, #16]
 801298e:	f3c8 0812 	ubfx	r8, r8, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012992:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8012996:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801299a:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
 801299e:	ea40 0008 	orr.w	r0, r0, r8
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80129a2:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
  if (dma != 0U)
 80129a6:	b112      	cbz	r2, 80129ae <USB_HC_StartXfer+0x86>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80129a8:	68e0      	ldr	r0, [r4, #12]
 80129aa:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80129ae:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 80129b2:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80129b6:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80129ba:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80129bc:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80129c0:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80129c2:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80129c6:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80129ca:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 80129ce:	ea40 000e 	orr.w	r0, r0, lr
 80129d2:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80129d6:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
 80129da:	9003      	str	r0, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80129dc:	9803      	ldr	r0, [sp, #12]
 80129de:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
 80129e2:	9003      	str	r0, [sp, #12]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80129e4:	9803      	ldr	r0, [sp, #12]
  if (hc->ep_is_in != 0U)
 80129e6:	b317      	cbz	r7, 8012a2e <USB_HC_StartXfer+0x106>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80129e8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80129ec:	9003      	str	r0, [sp, #12]
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80129ee:	4317      	orrs	r7, r2
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80129f0:	9803      	ldr	r0, [sp, #12]
 80129f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80129f6:	9003      	str	r0, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80129f8:	9803      	ldr	r0, [sp, #12]
 80129fa:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80129fe:	d10e      	bne.n	8012a1e <USB_HC_StartXfer+0xf6>
 8012a00:	b16b      	cbz	r3, 8012a1e <USB_HC_StartXfer+0xf6>
    switch (hc->ep_type)
 8012a02:	79e2      	ldrb	r2, [r4, #7]
 8012a04:	2a03      	cmp	r2, #3
 8012a06:	d820      	bhi.n	8012a4a <USB_HC_StartXfer+0x122>
 8012a08:	e8df f002 	tbb	[pc, r2]
 8012a0c:	28142814 	.word	0x28142814
    if ((dma == 0U) && (hc->do_ping == 1U))
 8012a10:	2a00      	cmp	r2, #0
 8012a12:	d1a1      	bne.n	8012958 <USB_HC_StartXfer+0x30>
 8012a14:	7963      	ldrb	r3, [r4, #5]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d19e      	bne.n	8012958 <USB_HC_StartXfer+0x30>
      (void)USB_DoPing(USBx, hc->ch_num);
 8012a1a:	f7ff ff73 	bl	8012904 <USB_DoPing>
}
 8012a1e:	2000      	movs	r0, #0
 8012a20:	b004      	add	sp, #16
 8012a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = 1U;
 8012a26:	2001      	movs	r0, #1
 8012a28:	e7a4      	b.n	8012974 <USB_HC_StartXfer+0x4c>
  if (hc->xfer_len > 0U)
 8012a2a:	4698      	mov	r8, r3
 8012a2c:	e7a9      	b.n	8012982 <USB_HC_StartXfer+0x5a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012a2e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8012a32:	e7db      	b.n	80129ec <USB_HC_StartXfer+0xc4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012a34:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012a36:	1cda      	adds	r2, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012a38:	b280      	uxth	r0, r0
 8012a3a:	f3c2 028f 	ubfx	r2, r2, #2, #16
 8012a3e:	4290      	cmp	r0, r2
 8012a40:	d203      	bcs.n	8012a4a <USB_HC_StartXfer+0x122>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012a42:	69aa      	ldr	r2, [r5, #24]
 8012a44:	f042 0220 	orr.w	r2, r2, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8012a48:	61aa      	str	r2, [r5, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	4628      	mov	r0, r5
 8012a50:	9200      	str	r2, [sp, #0]
 8012a52:	460a      	mov	r2, r1
 8012a54:	68e1      	ldr	r1, [r4, #12]
 8012a56:	f7ff fd5d 	bl	8012514 <USB_WritePacket>
 8012a5a:	e7e0      	b.n	8012a1e <USB_HC_StartXfer+0xf6>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012a5c:	f8dc 0010 	ldr.w	r0, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012a60:	1cda      	adds	r2, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012a62:	b280      	uxth	r0, r0
 8012a64:	f3c2 028f 	ubfx	r2, r2, #2, #16
 8012a68:	4290      	cmp	r0, r2
 8012a6a:	d2ee      	bcs.n	8012a4a <USB_HC_StartXfer+0x122>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8012a6c:	69aa      	ldr	r2, [r5, #24]
 8012a6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8012a72:	e7e9      	b.n	8012a48 <USB_HC_StartXfer+0x120>

08012a74 <USB_StopHost>:
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8012a74:	2300      	movs	r3, #0
{
 8012a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 8012a78:	9301      	str	r3, [sp, #4]
{
 8012a7a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012a7c:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012a7e:	2110      	movs	r1, #16
 8012a80:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012a84:	f023 0301 	bic.w	r3, r3, #1
 8012a88:	6083      	str	r3, [r0, #8]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012a8a:	f7ff fcf9 	bl	8012480 <USB_FlushTxFifo>
 8012a8e:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012a90:	4620      	mov	r0, r4
 8012a92:	f7ff fd1b 	bl	80124cc <USB_FlushRxFifo>
 8012a96:	4308      	orrs	r0, r1
 8012a98:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8012a9c:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	3800      	subs	r0, #0
 8012aa2:	bf18      	it	ne
 8012aa4:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8012aa6:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012aa8:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8012aac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8012ab0:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8012ab4:	42a9      	cmp	r1, r5
 8012ab6:	d1f6      	bne.n	8012aa6 <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8012ab8:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012abe:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8012ac2:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 8012ac4:	9a01      	ldr	r2, [sp, #4]
 8012ac6:	3201      	adds	r2, #1
 8012ac8:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 8012aca:	9a01      	ldr	r2, [sp, #4]
 8012acc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012ad0:	d802      	bhi.n	8012ad8 <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	2a00      	cmp	r2, #0
 8012ad6:	dbf5      	blt.n	8012ac4 <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 8012ad8:	3320      	adds	r3, #32
 8012ada:	42ab      	cmp	r3, r5
 8012adc:	d1ec      	bne.n	8012ab8 <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8012ade:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8012ae6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012ae8:	68a3      	ldr	r3, [r4, #8]
 8012aea:	f043 0301 	orr.w	r3, r3, #1
 8012aee:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8012af0:	b003      	add	sp, #12
 8012af2:	bd30      	pop	{r4, r5, pc}

08012af4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8012af4:	4b0e      	ldr	r3, [pc, #56]	; (8012b30 <FATFS_LinkDriverEx+0x3c>)
{
 8012af6:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8012af8:	7a5d      	ldrb	r5, [r3, #9]
 8012afa:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8012afe:	b9ad      	cbnz	r5, 8012b2c <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012b00:	7a5d      	ldrb	r5, [r3, #9]
 8012b02:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8012b04:	7a5d      	ldrb	r5, [r3, #9]
 8012b06:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012b0a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8012b0c:	7a58      	ldrb	r0, [r3, #9]
 8012b0e:	4418      	add	r0, r3
 8012b10:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8012b12:	7a5a      	ldrb	r2, [r3, #9]
 8012b14:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8012b16:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8012b18:	b2c0      	uxtb	r0, r0
 8012b1a:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8012b1c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8012b1e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8012b20:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8012b22:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8012b24:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8012b26:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8012b28:	4620      	mov	r0, r4
 8012b2a:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8012b2c:	2401      	movs	r4, #1
 8012b2e:	e7fb      	b.n	8012b28 <FATFS_LinkDriverEx+0x34>
 8012b30:	2400a044 	.word	0x2400a044

08012b34 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8012b34:	2200      	movs	r2, #0
 8012b36:	f7ff bfdd 	b.w	8012af4 <FATFS_LinkDriverEx>

08012b3a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012b3a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8012b3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012b40:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012b42:	f001 ff5f 	bl	8014a04 <xTaskGetSchedulerState>
 8012b46:	2801      	cmp	r0, #1
 8012b48:	d003      	beq.n	8012b52 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8012b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8012b4e:	f000 bc69 	b.w	8013424 <xPortSysTickHandler>
}
 8012b52:	bd08      	pop	{r3, pc}

08012b54 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b54:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b58:	b92b      	cbnz	r3, 8012b66 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8012b5a:	4b06      	ldr	r3, [pc, #24]	; (8012b74 <osKernelInitialize+0x20>)
 8012b5c:	6818      	ldr	r0, [r3, #0]
 8012b5e:	b928      	cbnz	r0, 8012b6c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012b60:	2201      	movs	r2, #1
 8012b62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012b64:	4770      	bx	lr
    stat = osErrorISR;
 8012b66:	f06f 0005 	mvn.w	r0, #5
 8012b6a:	4770      	bx	lr
    } else {
      stat = osError;
 8012b6c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	2400a2fc 	.word	0x2400a2fc

08012b78 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8012b78:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8012b7a:	f001 ff43 	bl	8014a04 <xTaskGetSchedulerState>
 8012b7e:	b138      	cbz	r0, 8012b90 <osKernelGetState+0x18>
 8012b80:	2802      	cmp	r0, #2
 8012b82:	d004      	beq.n	8012b8e <osKernelGetState+0x16>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8012b84:	4b03      	ldr	r3, [pc, #12]	; (8012b94 <osKernelGetState+0x1c>)
 8012b86:	6818      	ldr	r0, [r3, #0]
 8012b88:	1e43      	subs	r3, r0, #1
 8012b8a:	4258      	negs	r0, r3
 8012b8c:	4158      	adcs	r0, r3
      }
      break;
  }

  return (state);
}
 8012b8e:	bd08      	pop	{r3, pc}
  switch (xTaskGetSchedulerState()) {
 8012b90:	2003      	movs	r0, #3
  return (state);
 8012b92:	e7fc      	b.n	8012b8e <osKernelGetState+0x16>
 8012b94:	2400a2fc 	.word	0x2400a2fc

08012b98 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8012b98:	b510      	push	{r4, lr}
 8012b9a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b9e:	b95c      	cbnz	r4, 8012bb8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8012ba0:	4b08      	ldr	r3, [pc, #32]	; (8012bc4 <osKernelStart+0x2c>)
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	2a01      	cmp	r2, #1
 8012ba6:	d10a      	bne.n	8012bbe <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ba8:	4a07      	ldr	r2, [pc, #28]	; (8012bc8 <osKernelStart+0x30>)
 8012baa:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012bac:	2202      	movs	r2, #2
 8012bae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012bb0:	f001 fdb0 	bl	8014714 <vTaskStartScheduler>
      stat = osOK;
 8012bb4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8012bb6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8012bb8:	f06f 0005 	mvn.w	r0, #5
 8012bbc:	e7fb      	b.n	8012bb6 <osKernelStart+0x1e>
      stat = osError;
 8012bbe:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8012bc2:	e7f8      	b.n	8012bb6 <osKernelStart+0x1e>
 8012bc4:	2400a2fc 	.word	0x2400a2fc
 8012bc8:	e000ed00 	.word	0xe000ed00

08012bcc <osKernelGetTickCount>:
 8012bcc:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8012bd0:	b10b      	cbz	r3, 8012bd6 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8012bd2:	f001 bc5d 	b.w	8014490 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8012bd6:	f001 bc55 	b.w	8014484 <xTaskGetTickCount>

08012bda <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bdc:	460b      	mov	r3, r1
 8012bde:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012be0:	2100      	movs	r1, #0
 8012be2:	9105      	str	r1, [sp, #20]
 8012be4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8012be8:	b9cc      	cbnz	r4, 8012c1e <osThreadNew+0x44>
 8012bea:	b1c0      	cbz	r0, 8012c1e <osThreadNew+0x44>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8012bec:	b36a      	cbz	r2, 8012c4a <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8012bee:	6995      	ldr	r5, [r2, #24]
 8012bf0:	428d      	cmp	r5, r1
 8012bf2:	bf08      	it	eq
 8012bf4:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012bf6:	1e69      	subs	r1, r5, #1
 8012bf8:	46ac      	mov	ip, r5
 8012bfa:	2937      	cmp	r1, #55	; 0x37
 8012bfc:	d82a      	bhi.n	8012c54 <osThreadNew+0x7a>
 8012bfe:	6851      	ldr	r1, [r2, #4]
 8012c00:	07c9      	lsls	r1, r1, #31
 8012c02:	d427      	bmi.n	8012c54 <osThreadNew+0x7a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8012c04:	6956      	ldr	r6, [r2, #20]
 8012c06:	b16e      	cbz	r6, 8012c24 <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012c08:	08b4      	lsrs	r4, r6, #2
      if (attr->name != NULL) {
 8012c0a:	6811      	ldr	r1, [r2, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012c0c:	e9d2 7e02 	ldrd	r7, lr, [r2, #8]
 8012c10:	b157      	cbz	r7, 8012c28 <osThreadNew+0x4e>
 8012c12:	f1be 0fab 	cmp.w	lr, #171	; 0xab
 8012c16:	d902      	bls.n	8012c1e <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012c18:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012c1a:	b102      	cbz	r2, 8012c1e <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012c1c:	b9e6      	cbnz	r6, 8012c58 <osThreadNew+0x7e>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012c1e:	9805      	ldr	r0, [sp, #20]
}
 8012c20:	b007      	add	sp, #28
 8012c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8012c24:	2480      	movs	r4, #128	; 0x80
 8012c26:	e7f0      	b.n	8012c0a <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012c28:	f1be 0f00 	cmp.w	lr, #0
 8012c2c:	d1f7      	bne.n	8012c1e <osThreadNew+0x44>
      if (mem == 0) {
 8012c2e:	6912      	ldr	r2, [r2, #16]
 8012c30:	2a00      	cmp	r2, #0
 8012c32:	d1f4      	bne.n	8012c1e <osThreadNew+0x44>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012c34:	aa05      	add	r2, sp, #20
 8012c36:	e9cd c200 	strd	ip, r2, [sp]
 8012c3a:	b2a2      	uxth	r2, r4
 8012c3c:	f001 fbec 	bl	8014418 <xTaskCreate>
 8012c40:	2801      	cmp	r0, #1
            hTask = NULL;
 8012c42:	bf1c      	itt	ne
 8012c44:	2300      	movne	r3, #0
 8012c46:	9305      	strne	r3, [sp, #20]
 8012c48:	e7e9      	b.n	8012c1e <osThreadNew+0x44>
    name = NULL;
 8012c4a:	4611      	mov	r1, r2
    prio  = (UBaseType_t)osPriorityNormal;
 8012c4c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8012c50:	2480      	movs	r4, #128	; 0x80
 8012c52:	e7ef      	b.n	8012c34 <osThreadNew+0x5a>
        return (NULL);
 8012c54:	4620      	mov	r0, r4
 8012c56:	e7e3      	b.n	8012c20 <osThreadNew+0x46>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012c58:	e9cd 2701 	strd	r2, r7, [sp, #4]
 8012c5c:	9500      	str	r5, [sp, #0]
 8012c5e:	4622      	mov	r2, r4
 8012c60:	f001 fba2 	bl	80143a8 <xTaskCreateStatic>
 8012c64:	9005      	str	r0, [sp, #20]
 8012c66:	e7da      	b.n	8012c1e <osThreadNew+0x44>

08012c68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012c68:	b510      	push	{r4, lr}
 8012c6a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c6e:	b924      	cbnz	r4, 8012c7a <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8012c70:	b110      	cbz	r0, 8012c78 <osDelay+0x10>
      vTaskDelay(ticks);
 8012c72:	f001 fd1f 	bl	80146b4 <vTaskDelay>
    stat = osOK;
 8012c76:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 8012c78:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8012c7a:	f06f 0005 	mvn.w	r0, #5
 8012c7e:	e7fb      	b.n	8012c78 <osDelay+0x10>

08012c80 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8012c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c82:	4604      	mov	r4, r0
 8012c84:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8012c88:	b116      	cbz	r6, 8012c90 <osMutexNew+0x10>
  hMutex = NULL;
 8012c8a:	2700      	movs	r7, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8012c8c:	4638      	mov	r0, r7
 8012c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 8012c90:	b320      	cbz	r0, 8012cdc <osMutexNew+0x5c>
      type = attr->attr_bits;
 8012c92:	6845      	ldr	r5, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8012c94:	072b      	lsls	r3, r5, #28
 8012c96:	d4f8      	bmi.n	8012c8a <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012c98:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012c9c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8012ca0:	b199      	cbz	r1, 8012cca <osMutexNew+0x4a>
 8012ca2:	2b4f      	cmp	r3, #79	; 0x4f
 8012ca4:	d9f1      	bls.n	8012c8a <osMutexNew+0xa>
          if (rmtx != 0U) {
 8012ca6:	b1bd      	cbz	r5, 8012cd8 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012ca8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012caa:	f000 fecb 	bl	8013a44 <xQueueCreateMutexStatic>
 8012cae:	4607      	mov	r7, r0
      if (hMutex != NULL) {
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d0ea      	beq.n	8012c8a <osMutexNew+0xa>
          name = attr->name;
 8012cb4:	6824      	ldr	r4, [r4, #0]
 8012cb6:	462e      	mov	r6, r5
        vQueueAddToRegistry (hMutex, name);
 8012cb8:	4621      	mov	r1, r4
 8012cba:	4638      	mov	r0, r7
 8012cbc:	f001 f99c 	bl	8013ff8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012cc0:	2e00      	cmp	r6, #0
 8012cc2:	d0e3      	beq.n	8012c8c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012cc4:	f047 0701 	orr.w	r7, r7, #1
  return ((osMutexId_t)hMutex);
 8012cc8:	e7e0      	b.n	8012c8c <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d1dd      	bne.n	8012c8a <osMutexNew+0xa>
            if (rmtx != 0U) {
 8012cce:	b12d      	cbz	r5, 8012cdc <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8012cd0:	2004      	movs	r0, #4
 8012cd2:	f000 feea 	bl	8013aaa <xQueueCreateMutex>
 8012cd6:	e7ea      	b.n	8012cae <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012cd8:	2001      	movs	r0, #1
 8012cda:	e7e6      	b.n	8012caa <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 8012cdc:	2001      	movs	r0, #1
 8012cde:	f000 fee4 	bl	8013aaa <xQueueCreateMutex>
      if (hMutex != NULL) {
 8012ce2:	4607      	mov	r7, r0
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d0d0      	beq.n	8012c8a <osMutexNew+0xa>
        if (attr != NULL) {
 8012ce8:	2c00      	cmp	r4, #0
 8012cea:	d0e5      	beq.n	8012cb8 <osMutexNew+0x38>
 8012cec:	2500      	movs	r5, #0
 8012cee:	e7e1      	b.n	8012cb4 <osMutexNew+0x34>

08012cf0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012cf0:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012cf2:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012cf6:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8012cf8:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012cfc:	460c      	mov	r4, r1
 8012cfe:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8012d02:	b98a      	cbnz	r2, 8012d28 <osMutexAcquire+0x38>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8012d04:	b198      	cbz	r0, 8012d2e <osMutexAcquire+0x3e>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8012d06:	b163      	cbz	r3, 8012d22 <osMutexAcquire+0x32>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012d08:	f001 f904 	bl	8013f14 <xQueueTakeMutexRecursive>
 8012d0c:	2801      	cmp	r0, #1
 8012d0e:	d101      	bne.n	8012d14 <osMutexAcquire+0x24>
  stat = osOK;
 8012d10:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8012d12:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8012d14:	2c00      	cmp	r4, #0
 8012d16:	bf14      	ite	ne
 8012d18:	f06f 0001 	mvnne.w	r0, #1
 8012d1c:	f06f 0002 	mvneq.w	r0, #2
 8012d20:	e7f7      	b.n	8012d12 <osMutexAcquire+0x22>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012d22:	f001 f834 	bl	8013d8e <xQueueSemaphoreTake>
 8012d26:	e7f1      	b.n	8012d0c <osMutexAcquire+0x1c>
    stat = osErrorISR;
 8012d28:	f06f 0005 	mvn.w	r0, #5
 8012d2c:	e7f1      	b.n	8012d12 <osMutexAcquire+0x22>
    stat = osErrorParameter;
 8012d2e:	f06f 0003 	mvn.w	r0, #3
 8012d32:	e7ee      	b.n	8012d12 <osMutexAcquire+0x22>

08012d34 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8012d34:	b508      	push	{r3, lr}
 8012d36:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012d38:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8012d44:	b972      	cbnz	r2, 8012d64 <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8012d46:	b180      	cbz	r0, 8012d6a <osMutexRelease+0x36>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8012d48:	b13b      	cbz	r3, 8012d5a <osMutexRelease+0x26>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012d4a:	f000 fe90 	bl	8013a6e <xQueueGiveMutexRecursive>
 8012d4e:	2801      	cmp	r0, #1
  stat = osOK;
 8012d50:	bf0c      	ite	eq
 8012d52:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8012d54:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8012d58:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	f000 fdbe 	bl	80138de <xQueueGenericSend>
 8012d62:	e7f4      	b.n	8012d4e <osMutexRelease+0x1a>
    stat = osErrorISR;
 8012d64:	f06f 0005 	mvn.w	r0, #5
 8012d68:	e7f6      	b.n	8012d58 <osMutexRelease+0x24>
    stat = osErrorParameter;
 8012d6a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8012d6e:	e7f3      	b.n	8012d58 <osMutexRelease+0x24>

08012d70 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d72:	4604      	mov	r4, r0
 8012d74:	460e      	mov	r6, r1
 8012d76:	4615      	mov	r5, r2
 8012d78:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012d7c:	b11a      	cbz	r2, 8012d86 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8012d7e:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8012d80:	4620      	mov	r0, r4
 8012d82:	b003      	add	sp, #12
 8012d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d0f9      	beq.n	8012d7e <osSemaphoreNew+0xe>
 8012d8a:	4288      	cmp	r0, r1
 8012d8c:	d3f7      	bcc.n	8012d7e <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8012d8e:	b1e5      	cbz	r5, 8012dca <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012d90:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8012d94:	b1bb      	cbz	r3, 8012dc6 <osSemaphoreNew+0x56>
 8012d96:	2f4f      	cmp	r7, #79	; 0x4f
 8012d98:	d9f1      	bls.n	8012d7e <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8012d9a:	2801      	cmp	r0, #1
 8012d9c:	d12a      	bne.n	8012df4 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012d9e:	2103      	movs	r1, #3
 8012da0:	9100      	str	r1, [sp, #0]
 8012da2:	4611      	mov	r1, r2
 8012da4:	f000 fce6 	bl	8013774 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8012da8:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d0e7      	beq.n	8012d7e <osSemaphoreNew+0xe>
 8012dae:	b1de      	cbz	r6, 8012de8 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012db0:	2300      	movs	r3, #0
 8012db2:	461a      	mov	r2, r3
 8012db4:	4619      	mov	r1, r3
 8012db6:	f000 fd92 	bl	80138de <xQueueGenericSend>
 8012dba:	2801      	cmp	r0, #1
 8012dbc:	d014      	beq.n	8012de8 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f001 f940 	bl	8014044 <vQueueDelete>
 8012dc4:	e7db      	b.n	8012d7e <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012dc6:	2f00      	cmp	r7, #0
 8012dc8:	d1d9      	bne.n	8012d7e <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8012dca:	2c01      	cmp	r4, #1
 8012dcc:	d105      	bne.n	8012dda <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8012dce:	2203      	movs	r2, #3
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 fd1c 	bl	8013810 <xQueueGenericCreate>
 8012dd8:	e7e6      	b.n	8012da8 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012dda:	4620      	mov	r0, r4
 8012ddc:	4631      	mov	r1, r6
 8012dde:	f000 fd60 	bl	80138a2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8012de2:	4604      	mov	r4, r0
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d0ca      	beq.n	8012d7e <osSemaphoreNew+0xe>
        if (attr != NULL) {
 8012de8:	b955      	cbnz	r5, 8012e00 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 8012dea:	4629      	mov	r1, r5
 8012dec:	4620      	mov	r0, r4
 8012dee:	f001 f903 	bl	8013ff8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8012df2:	e7c5      	b.n	8012d80 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012df4:	461a      	mov	r2, r3
 8012df6:	f000 fd32 	bl	801385e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d0be      	beq.n	8012d7e <osSemaphoreNew+0xe>
          name = attr->name;
 8012e00:	682d      	ldr	r5, [r5, #0]
 8012e02:	e7f2      	b.n	8012dea <osSemaphoreNew+0x7a>

08012e04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012e04:	b513      	push	{r0, r1, r4, lr}
 8012e06:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8012e08:	b308      	cbz	r0, 8012e4e <osSemaphoreAcquire+0x4a>
 8012e0a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8012e0e:	b1b3      	cbz	r3, 8012e3e <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 8012e10:	b9e9      	cbnz	r1, 8012e4e <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012e12:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8012e14:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012e16:	f001 f89f 	bl	8013f58 <xQueueReceiveFromISR>
 8012e1a:	2801      	cmp	r0, #1
 8012e1c:	d114      	bne.n	8012e48 <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8012e1e:	9b01      	ldr	r3, [sp, #4]
 8012e20:	b913      	cbnz	r3, 8012e28 <osSemaphoreAcquire+0x24>
  stat = osOK;
 8012e22:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8012e24:	b002      	add	sp, #8
 8012e26:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8012e28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8012e34:	f3bf 8f4f 	dsb	sy
 8012e38:	f3bf 8f6f 	isb	sy
 8012e3c:	e7f1      	b.n	8012e22 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012e3e:	f000 ffa6 	bl	8013d8e <xQueueSemaphoreTake>
 8012e42:	2801      	cmp	r0, #1
 8012e44:	d0ed      	beq.n	8012e22 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 8012e46:	b92c      	cbnz	r4, 8012e54 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 8012e48:	f06f 0002 	mvn.w	r0, #2
 8012e4c:	e7ea      	b.n	8012e24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012e4e:	f06f 0003 	mvn.w	r0, #3
 8012e52:	e7e7      	b.n	8012e24 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 8012e54:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8012e58:	e7e4      	b.n	8012e24 <osSemaphoreAcquire+0x20>

08012e5a <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012e5a:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8012e5c:	b310      	cbz	r0, 8012ea4 <osSemaphoreRelease+0x4a>
 8012e5e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8012e62:	b1b3      	cbz	r3, 8012e92 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8012e64:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012e66:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8012e68:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012e6a:	f000 fe9d 	bl	8013ba8 <xQueueGiveFromISR>
 8012e6e:	2801      	cmp	r0, #1
 8012e70:	d115      	bne.n	8012e9e <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8012e72:	9b01      	ldr	r3, [sp, #4]
 8012e74:	b913      	cbnz	r3, 8012e7c <osSemaphoreRelease+0x22>
  stat = osOK;
 8012e76:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8012e78:	b002      	add	sp, #8
 8012e7a:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8012e7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8012e88:	f3bf 8f4f 	dsb	sy
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	e7f1      	b.n	8012e76 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012e92:	461a      	mov	r2, r3
 8012e94:	4619      	mov	r1, r3
 8012e96:	f000 fd22 	bl	80138de <xQueueGenericSend>
 8012e9a:	2801      	cmp	r0, #1
 8012e9c:	d0eb      	beq.n	8012e76 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8012e9e:	f06f 0002 	mvn.w	r0, #2
 8012ea2:	e7e9      	b.n	8012e78 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012ea4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8012ea8:	e7e6      	b.n	8012e78 <osSemaphoreRelease+0x1e>

08012eaa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eac:	4605      	mov	r5, r0
 8012eae:	460e      	mov	r6, r1
 8012eb0:	4614      	mov	r4, r2
 8012eb2:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012eb6:	b11f      	cbz	r7, 8012ec0 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8012eb8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8012eba:	4628      	mov	r0, r5
 8012ebc:	b003      	add	sp, #12
 8012ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d0f9      	beq.n	8012eb8 <osMessageQueueNew+0xe>
 8012ec4:	2900      	cmp	r1, #0
 8012ec6:	d0f7      	beq.n	8012eb8 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8012ec8:	b1da      	cbz	r2, 8012f02 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012eca:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8012ece:	b183      	cbz	r3, 8012ef2 <osMessageQueueNew+0x48>
 8012ed0:	2a4f      	cmp	r2, #79	; 0x4f
 8012ed2:	d9f1      	bls.n	8012eb8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012ed4:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012ed6:	2a00      	cmp	r2, #0
 8012ed8:	d0ee      	beq.n	8012eb8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012eda:	434d      	muls	r5, r1
 8012edc:	6966      	ldr	r6, [r4, #20]
 8012ede:	42ae      	cmp	r6, r5
 8012ee0:	d3ea      	bcc.n	8012eb8 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012ee2:	9700      	str	r7, [sp, #0]
 8012ee4:	f000 fc46 	bl	8013774 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8012ee8:	4605      	mov	r5, r0
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d0e4      	beq.n	8012eb8 <osMessageQueueNew+0xe>
        name = attr->name;
 8012eee:	6824      	ldr	r4, [r4, #0]
 8012ef0:	e011      	b.n	8012f16 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012ef2:	2a00      	cmp	r2, #0
 8012ef4:	d1e0      	bne.n	8012eb8 <osMessageQueueNew+0xe>
 8012ef6:	6923      	ldr	r3, [r4, #16]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1dd      	bne.n	8012eb8 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012efc:	6963      	ldr	r3, [r4, #20]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d1da      	bne.n	8012eb8 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8012f02:	4628      	mov	r0, r5
 8012f04:	2200      	movs	r2, #0
 8012f06:	4631      	mov	r1, r6
 8012f08:	f000 fc82 	bl	8013810 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8012f0c:	4605      	mov	r5, r0
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	d0d2      	beq.n	8012eb8 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8012f12:	2c00      	cmp	r4, #0
 8012f14:	d1eb      	bne.n	8012eee <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8012f16:	4621      	mov	r1, r4
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f001 f86d 	bl	8013ff8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8012f1e:	e7cc      	b.n	8012eba <osMessageQueueNew+0x10>

08012f20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f22:	461c      	mov	r4, r3
 8012f24:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8012f28:	b1c6      	cbz	r6, 8012f5c <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f2a:	b318      	cbz	r0, 8012f74 <osMessageQueuePut+0x54>
 8012f2c:	b311      	cbz	r1, 8012f74 <osMessageQueuePut+0x54>
 8012f2e:	bb0b      	cbnz	r3, 8012f74 <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012f30:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8012f32:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012f34:	f000 fdd6 	bl	8013ae4 <xQueueGenericSendFromISR>
 8012f38:	2801      	cmp	r0, #1
 8012f3a:	d118      	bne.n	8012f6e <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8012f3c:	9b01      	ldr	r3, [sp, #4]
 8012f3e:	b913      	cbnz	r3, 8012f46 <osMessageQueuePut+0x26>
  stat = osOK;
 8012f40:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8012f42:	b002      	add	sp, #8
 8012f44:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8012f46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8012f52:	f3bf 8f4f 	dsb	sy
 8012f56:	f3bf 8f6f 	isb	sy
 8012f5a:	e7f1      	b.n	8012f40 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012f5c:	b150      	cbz	r0, 8012f74 <osMessageQueuePut+0x54>
 8012f5e:	b149      	cbz	r1, 8012f74 <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012f60:	4633      	mov	r3, r6
 8012f62:	4622      	mov	r2, r4
 8012f64:	f000 fcbb 	bl	80138de <xQueueGenericSend>
 8012f68:	2801      	cmp	r0, #1
 8012f6a:	d0e9      	beq.n	8012f40 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8012f6c:	b92c      	cbnz	r4, 8012f7a <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 8012f6e:	f06f 0002 	mvn.w	r0, #2
 8012f72:	e7e6      	b.n	8012f42 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 8012f74:	f06f 0003 	mvn.w	r0, #3
 8012f78:	e7e3      	b.n	8012f42 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8012f7a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8012f7e:	e7e0      	b.n	8012f42 <osMessageQueuePut+0x22>

08012f80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f82:	461c      	mov	r4, r3
 8012f84:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8012f88:	b1c3      	cbz	r3, 8012fbc <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f8a:	b310      	cbz	r0, 8012fd2 <osMessageQueueGet+0x52>
 8012f8c:	b309      	cbz	r1, 8012fd2 <osMessageQueueGet+0x52>
 8012f8e:	bb04      	cbnz	r4, 8012fd2 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012f90:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8012f92:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012f94:	f000 ffe0 	bl	8013f58 <xQueueReceiveFromISR>
 8012f98:	2801      	cmp	r0, #1
 8012f9a:	d117      	bne.n	8012fcc <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8012f9c:	9b01      	ldr	r3, [sp, #4]
 8012f9e:	b913      	cbnz	r3, 8012fa6 <osMessageQueueGet+0x26>
  stat = osOK;
 8012fa0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8012fa2:	b003      	add	sp, #12
 8012fa4:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8012fa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8012fb2:	f3bf 8f4f 	dsb	sy
 8012fb6:	f3bf 8f6f 	isb	sy
 8012fba:	e7f1      	b.n	8012fa0 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012fbc:	b148      	cbz	r0, 8012fd2 <osMessageQueueGet+0x52>
 8012fbe:	b141      	cbz	r1, 8012fd2 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012fc0:	4622      	mov	r2, r4
 8012fc2:	f000 fe45 	bl	8013c50 <xQueueReceive>
 8012fc6:	2801      	cmp	r0, #1
 8012fc8:	d0ea      	beq.n	8012fa0 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8012fca:	b92c      	cbnz	r4, 8012fd8 <osMessageQueueGet+0x58>
          stat = osErrorResource;
 8012fcc:	f06f 0002 	mvn.w	r0, #2
 8012fd0:	e7e7      	b.n	8012fa2 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 8012fd2:	f06f 0003 	mvn.w	r0, #3
 8012fd6:	e7e4      	b.n	8012fa2 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8012fd8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8012fdc:	e7e1      	b.n	8012fa2 <osMessageQueueGet+0x22>
	...

08012fe0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012fe0:	4b03      	ldr	r3, [pc, #12]	; (8012ff0 <vApplicationGetIdleTaskMemory+0x10>)
 8012fe2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012fe4:	4b03      	ldr	r3, [pc, #12]	; (8012ff4 <vApplicationGetIdleTaskMemory+0x14>)
 8012fe6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012fe8:	2380      	movs	r3, #128	; 0x80
 8012fea:	6013      	str	r3, [r2, #0]
}
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop
 8012ff0:	2400a250 	.word	0x2400a250
 8012ff4:	2400a050 	.word	0x2400a050

08012ff8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ff8:	4b03      	ldr	r3, [pc, #12]	; (8013008 <vApplicationGetTimerTaskMemory+0x10>)
 8012ffa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012ffc:	4b03      	ldr	r3, [pc, #12]	; (801300c <vApplicationGetTimerTaskMemory+0x14>)
 8012ffe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013004:	6013      	str	r3, [r2, #0]
}
 8013006:	4770      	bx	lr
 8013008:	2400a700 	.word	0x2400a700
 801300c:	2400a300 	.word	0x2400a300

08013010 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013010:	4b10      	ldr	r3, [pc, #64]	; (8013054 <prvInsertBlockIntoFreeList+0x44>)
{
 8013012:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013014:	461a      	mov	r2, r3
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4283      	cmp	r3, r0
 801301a:	d3fb      	bcc.n	8013014 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801301c:	6854      	ldr	r4, [r2, #4]
 801301e:	1911      	adds	r1, r2, r4
 8013020:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013022:	bf01      	itttt	eq
 8013024:	6841      	ldreq	r1, [r0, #4]
 8013026:	4610      	moveq	r0, r2
 8013028:	1909      	addeq	r1, r1, r4
 801302a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801302c:	6844      	ldr	r4, [r0, #4]
 801302e:	1901      	adds	r1, r0, r4
 8013030:	428b      	cmp	r3, r1
 8013032:	d10c      	bne.n	801304e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013034:	4908      	ldr	r1, [pc, #32]	; (8013058 <prvInsertBlockIntoFreeList+0x48>)
 8013036:	6809      	ldr	r1, [r1, #0]
 8013038:	428b      	cmp	r3, r1
 801303a:	d003      	beq.n	8013044 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801303c:	6859      	ldr	r1, [r3, #4]
 801303e:	4421      	add	r1, r4
 8013040:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013042:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013044:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013046:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013048:	bf18      	it	ne
 801304a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801304c:	bd10      	pop	{r4, pc}
 801304e:	4619      	mov	r1, r3
 8013050:	e7f8      	b.n	8013044 <prvInsertBlockIntoFreeList+0x34>
 8013052:	bf00      	nop
 8013054:	2402a7c4 	.word	0x2402a7c4
 8013058:	2400a7ac 	.word	0x2400a7ac

0801305c <pvPortMalloc>:
{
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8013062:	f001 fa07 	bl	8014474 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8013066:	4942      	ldr	r1, [pc, #264]	; (8013170 <pvPortMalloc+0x114>)
 8013068:	4d42      	ldr	r5, [pc, #264]	; (8013174 <pvPortMalloc+0x118>)
 801306a:	680b      	ldr	r3, [r1, #0]
 801306c:	bb0b      	cbnz	r3, 80130b2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 801306e:	4a42      	ldr	r2, [pc, #264]	; (8013178 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013070:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013072:	4e42      	ldr	r6, [pc, #264]	; (801317c <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013074:	bf1b      	ittet	ne
 8013076:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013078:	f502 3200 	addne.w	r2, r2, #131072	; 0x20000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801307c:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013080:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013084:	bf1c      	itt	ne
 8013086:	1a13      	subne	r3, r2, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013088:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 801308a:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801308c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801308e:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013090:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8013092:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013094:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8013098:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801309c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 801309e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80130a0:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80130a4:	4b36      	ldr	r3, [pc, #216]	; (8013180 <pvPortMalloc+0x124>)
 80130a6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80130a8:	4b36      	ldr	r3, [pc, #216]	; (8013184 <pvPortMalloc+0x128>)
 80130aa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80130ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80130b0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80130b2:	682e      	ldr	r6, [r5, #0]
 80130b4:	4226      	tst	r6, r4
 80130b6:	d155      	bne.n	8013164 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 80130b8:	2c00      	cmp	r4, #0
 80130ba:	d046      	beq.n	801314a <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 80130bc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130c0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130c2:	bf1c      	itt	ne
 80130c4:	f023 0307 	bicne.w	r3, r3, #7
 80130c8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d04a      	beq.n	8013164 <pvPortMalloc+0x108>
 80130ce:	4f2d      	ldr	r7, [pc, #180]	; (8013184 <pvPortMalloc+0x128>)
 80130d0:	683c      	ldr	r4, [r7, #0]
 80130d2:	429c      	cmp	r4, r3
 80130d4:	d346      	bcc.n	8013164 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80130d6:	4a29      	ldr	r2, [pc, #164]	; (801317c <pvPortMalloc+0x120>)
 80130d8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130da:	6868      	ldr	r0, [r5, #4]
 80130dc:	4298      	cmp	r0, r3
 80130de:	d204      	bcs.n	80130ea <pvPortMalloc+0x8e>
 80130e0:	f8d5 c000 	ldr.w	ip, [r5]
 80130e4:	f1bc 0f00 	cmp.w	ip, #0
 80130e8:	d115      	bne.n	8013116 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80130ea:	6809      	ldr	r1, [r1, #0]
 80130ec:	42a9      	cmp	r1, r5
 80130ee:	d039      	beq.n	8013164 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130f0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80130f2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80130f8:	1ac2      	subs	r2, r0, r3
 80130fa:	2a10      	cmp	r2, #16
 80130fc:	d912      	bls.n	8013124 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80130fe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013100:	0741      	lsls	r1, r0, #29
 8013102:	d00b      	beq.n	801311c <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	e7fe      	b.n	8013114 <pvPortMalloc+0xb8>
 8013116:	462a      	mov	r2, r5
 8013118:	4665      	mov	r5, ip
 801311a:	e7de      	b.n	80130da <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801311c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801311e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013120:	f7ff ff76 	bl	8013010 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013124:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013126:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013128:	4915      	ldr	r1, [pc, #84]	; (8013180 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801312a:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801312c:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801312e:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8013130:	4a15      	ldr	r2, [pc, #84]	; (8013188 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013132:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 8013134:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8013136:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013138:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 801313a:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801313e:	bf38      	it	cc
 8013140:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013142:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013146:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8013148:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 801314a:	f001 fa3f 	bl	80145cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801314e:	0763      	lsls	r3, r4, #29
 8013150:	d00a      	beq.n	8013168 <pvPortMalloc+0x10c>
 8013152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013156:	f383 8811 	msr	BASEPRI, r3
 801315a:	f3bf 8f6f 	isb	sy
 801315e:	f3bf 8f4f 	dsb	sy
 8013162:	e7fe      	b.n	8013162 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8013164:	2400      	movs	r4, #0
 8013166:	e7f0      	b.n	801314a <pvPortMalloc+0xee>
}
 8013168:	4620      	mov	r0, r4
 801316a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801316e:	bf00      	nop
 8013170:	2400a7ac 	.word	0x2400a7ac
 8013174:	2402a7b0 	.word	0x2402a7b0
 8013178:	2400a7b0 	.word	0x2400a7b0
 801317c:	2402a7c4 	.word	0x2402a7c4
 8013180:	2402a7b8 	.word	0x2402a7b8
 8013184:	2402a7b4 	.word	0x2402a7b4
 8013188:	2402a7bc 	.word	0x2402a7bc

0801318c <vPortFree>:
{
 801318c:	b510      	push	{r4, lr}
	if( pv != NULL )
 801318e:	4604      	mov	r4, r0
 8013190:	b390      	cbz	r0, 80131f8 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013192:	4a1a      	ldr	r2, [pc, #104]	; (80131fc <vPortFree+0x70>)
 8013194:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013198:	6812      	ldr	r2, [r2, #0]
 801319a:	4213      	tst	r3, r2
 801319c:	d108      	bne.n	80131b0 <vPortFree+0x24>
 801319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	e7fe      	b.n	80131ae <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80131b0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80131b4:	b141      	cbz	r1, 80131c8 <vPortFree+0x3c>
 80131b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	e7fe      	b.n	80131c6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80131c8:	ea23 0302 	bic.w	r3, r3, r2
 80131cc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80131d0:	f001 f950 	bl	8014474 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80131d4:	4a0a      	ldr	r2, [pc, #40]	; (8013200 <vPortFree+0x74>)
 80131d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80131da:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80131de:	6811      	ldr	r1, [r2, #0]
 80131e0:	440b      	add	r3, r1
 80131e2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80131e4:	f7ff ff14 	bl	8013010 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80131e8:	4a06      	ldr	r2, [pc, #24]	; (8013204 <vPortFree+0x78>)
 80131ea:	6813      	ldr	r3, [r2, #0]
 80131ec:	3301      	adds	r3, #1
}
 80131ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80131f2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80131f4:	f001 b9ea 	b.w	80145cc <xTaskResumeAll>
}
 80131f8:	bd10      	pop	{r4, pc}
 80131fa:	bf00      	nop
 80131fc:	2402a7b0 	.word	0x2402a7b0
 8013200:	2402a7b4 	.word	0x2402a7b4
 8013204:	2402a7c0 	.word	0x2402a7c0

08013208 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013208:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801320c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013210:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013212:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013214:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013218:	2300      	movs	r3, #0
 801321a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801321c:	4770      	bx	lr

0801321e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801321e:	2300      	movs	r3, #0
 8013220:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013222:	4770      	bx	lr

08013224 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8013224:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013226:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8013228:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801322a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801322c:	689a      	ldr	r2, [r3, #8]
 801322e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013230:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8013232:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8013234:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8013236:	3301      	adds	r3, #1
 8013238:	6003      	str	r3, [r0, #0]
}
 801323a:	4770      	bx	lr

0801323c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801323c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801323e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013240:	1c63      	adds	r3, r4, #1
 8013242:	d10a      	bne.n	801325a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013244:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013246:	685a      	ldr	r2, [r3, #4]
 8013248:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801324a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801324c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801324e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8013250:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8013252:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8013254:	3301      	adds	r3, #1
 8013256:	6003      	str	r3, [r0, #0]
}
 8013258:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801325a:	f100 0208 	add.w	r2, r0, #8
 801325e:	4613      	mov	r3, r2
 8013260:	6852      	ldr	r2, [r2, #4]
 8013262:	6815      	ldr	r5, [r2, #0]
 8013264:	42a5      	cmp	r5, r4
 8013266:	d9fa      	bls.n	801325e <vListInsert+0x22>
 8013268:	e7ed      	b.n	8013246 <vListInsert+0xa>

0801326a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801326a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801326c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8013270:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013272:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013274:	6859      	ldr	r1, [r3, #4]
 8013276:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013278:	bf08      	it	eq
 801327a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801327c:	2200      	movs	r2, #0
 801327e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	3a01      	subs	r2, #1
 8013284:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013286:	6818      	ldr	r0, [r3, #0]
}
 8013288:	4770      	bx	lr
	...

0801328c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801328c:	4808      	ldr	r0, [pc, #32]	; (80132b0 <prvPortStartFirstTask+0x24>)
 801328e:	6800      	ldr	r0, [r0, #0]
 8013290:	6800      	ldr	r0, [r0, #0]
 8013292:	f380 8808 	msr	MSP, r0
 8013296:	f04f 0000 	mov.w	r0, #0
 801329a:	f380 8814 	msr	CONTROL, r0
 801329e:	b662      	cpsie	i
 80132a0:	b661      	cpsie	f
 80132a2:	f3bf 8f4f 	dsb	sy
 80132a6:	f3bf 8f6f 	isb	sy
 80132aa:	df00      	svc	0
 80132ac:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80132ae:	0000      	.short	0x0000
 80132b0:	e000ed08 	.word	0xe000ed08

080132b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80132b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80132c4 <vPortEnableVFP+0x10>
 80132b8:	6801      	ldr	r1, [r0, #0]
 80132ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80132be:	6001      	str	r1, [r0, #0]
 80132c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80132c2:	0000      	.short	0x0000
 80132c4:	e000ed88 	.word	0xe000ed88

080132c8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80132c8:	2300      	movs	r3, #0
{
 80132ca:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80132cc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80132ce:	4b0d      	ldr	r3, [pc, #52]	; (8013304 <prvTaskExitError+0x3c>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3301      	adds	r3, #1
 80132d4:	d008      	beq.n	80132e8 <prvTaskExitError+0x20>
 80132d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	e7fe      	b.n	80132e6 <prvTaskExitError+0x1e>
 80132e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ec:	f383 8811 	msr	BASEPRI, r3
 80132f0:	f3bf 8f6f 	isb	sy
 80132f4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80132f8:	9b01      	ldr	r3, [sp, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d0fc      	beq.n	80132f8 <prvTaskExitError+0x30>
}
 80132fe:	b002      	add	sp, #8
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	24000040 	.word	0x24000040

08013308 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801330c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013310:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8013314:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013316:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013318:	4b03      	ldr	r3, [pc, #12]	; (8013328 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801331a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801331c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801331e:	f06f 0302 	mvn.w	r3, #2
 8013322:	6203      	str	r3, [r0, #32]
}
 8013324:	4770      	bx	lr
 8013326:	bf00      	nop
 8013328:	080132c9 	.word	0x080132c9
 801332c:	00000000 	.word	0x00000000

08013330 <SVC_Handler>:
	__asm volatile (
 8013330:	4b07      	ldr	r3, [pc, #28]	; (8013350 <pxCurrentTCBConst2>)
 8013332:	6819      	ldr	r1, [r3, #0]
 8013334:	6808      	ldr	r0, [r1, #0]
 8013336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801333a:	f380 8809 	msr	PSP, r0
 801333e:	f3bf 8f6f 	isb	sy
 8013342:	f04f 0000 	mov.w	r0, #0
 8013346:	f380 8811 	msr	BASEPRI, r0
 801334a:	4770      	bx	lr
 801334c:	f3af 8000 	nop.w

08013350 <pxCurrentTCBConst2>:
 8013350:	2402a814 	.word	0x2402a814

08013354 <vPortEnterCritical>:
 8013354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013358:	f383 8811 	msr	BASEPRI, r3
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8013364:	4a0a      	ldr	r2, [pc, #40]	; (8013390 <vPortEnterCritical+0x3c>)
 8013366:	6813      	ldr	r3, [r2, #0]
 8013368:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801336a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801336c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801336e:	d10e      	bne.n	801338e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013370:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013374:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8013378:	b2db      	uxtb	r3, r3
 801337a:	b143      	cbz	r3, 801338e <vPortEnterCritical+0x3a>
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	e7fe      	b.n	801338c <vPortEnterCritical+0x38>
}
 801338e:	4770      	bx	lr
 8013390:	24000040 	.word	0x24000040

08013394 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8013394:	4a08      	ldr	r2, [pc, #32]	; (80133b8 <vPortExitCritical+0x24>)
 8013396:	6813      	ldr	r3, [r2, #0]
 8013398:	b943      	cbnz	r3, 80133ac <vPortExitCritical+0x18>
 801339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801339e:	f383 8811 	msr	BASEPRI, r3
 80133a2:	f3bf 8f6f 	isb	sy
 80133a6:	f3bf 8f4f 	dsb	sy
 80133aa:	e7fe      	b.n	80133aa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80133ac:	3b01      	subs	r3, #1
 80133ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80133b0:	b90b      	cbnz	r3, 80133b6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80133b2:	f383 8811 	msr	BASEPRI, r3
}
 80133b6:	4770      	bx	lr
 80133b8:	24000040 	.word	0x24000040
 80133bc:	00000000 	.word	0x00000000

080133c0 <PendSV_Handler>:
	__asm volatile
 80133c0:	f3ef 8009 	mrs	r0, PSP
 80133c4:	f3bf 8f6f 	isb	sy
 80133c8:	4b15      	ldr	r3, [pc, #84]	; (8013420 <pxCurrentTCBConst>)
 80133ca:	681a      	ldr	r2, [r3, #0]
 80133cc:	f01e 0f10 	tst.w	lr, #16
 80133d0:	bf08      	it	eq
 80133d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80133d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133da:	6010      	str	r0, [r2, #0]
 80133dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80133e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80133e4:	f380 8811 	msr	BASEPRI, r0
 80133e8:	f3bf 8f4f 	dsb	sy
 80133ec:	f3bf 8f6f 	isb	sy
 80133f0:	f001 f9e4 	bl	80147bc <vTaskSwitchContext>
 80133f4:	f04f 0000 	mov.w	r0, #0
 80133f8:	f380 8811 	msr	BASEPRI, r0
 80133fc:	bc09      	pop	{r0, r3}
 80133fe:	6819      	ldr	r1, [r3, #0]
 8013400:	6808      	ldr	r0, [r1, #0]
 8013402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013406:	f01e 0f10 	tst.w	lr, #16
 801340a:	bf08      	it	eq
 801340c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013410:	f380 8809 	msr	PSP, r0
 8013414:	f3bf 8f6f 	isb	sy
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	f3af 8000 	nop.w

08013420 <pxCurrentTCBConst>:
 8013420:	2402a814 	.word	0x2402a814

08013424 <xPortSysTickHandler>:
{
 8013424:	b508      	push	{r3, lr}
	__asm volatile
 8013426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8013436:	f001 f833 	bl	80144a0 <xTaskIncrementTick>
 801343a:	b128      	cbz	r0, 8013448 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801343c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8013448:	2300      	movs	r3, #0
 801344a:	f383 8811 	msr	BASEPRI, r3
}
 801344e:	bd08      	pop	{r3, pc}

08013450 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013450:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8013454:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801345a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801345c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801345e:	4b04      	ldr	r3, [pc, #16]	; (8013470 <vPortSetupTimerInterrupt+0x20>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	fbb3 f3f1 	udiv	r3, r3, r1
 8013466:	3b01      	subs	r3, #1
 8013468:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801346a:	2307      	movs	r3, #7
 801346c:	6113      	str	r3, [r2, #16]
}
 801346e:	4770      	bx	lr
 8013470:	24000030 	.word	0x24000030

08013474 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013474:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8013478:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801347a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 801347e:	4a3a      	ldr	r2, [pc, #232]	; (8013568 <xPortStartScheduler+0xf4>)
 8013480:	4291      	cmp	r1, r2
 8013482:	d108      	bne.n	8013496 <xPortStartScheduler+0x22>
	__asm volatile
 8013484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	e7fe      	b.n	8013494 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013496:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 801349a:	4b34      	ldr	r3, [pc, #208]	; (801356c <xPortStartScheduler+0xf8>)
 801349c:	429a      	cmp	r2, r3
 801349e:	d108      	bne.n	80134b2 <xPortStartScheduler+0x3e>
 80134a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a4:	f383 8811 	msr	BASEPRI, r3
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	f3bf 8f4f 	dsb	sy
 80134b0:	e7fe      	b.n	80134b0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80134b2:	4b2f      	ldr	r3, [pc, #188]	; (8013570 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134b4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80134b6:	781a      	ldrb	r2, [r3, #0]
 80134b8:	b2d2      	uxtb	r2, r2
 80134ba:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80134bc:	22ff      	movs	r2, #255	; 0xff
 80134be:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80134c0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80134c2:	4a2c      	ldr	r2, [pc, #176]	; (8013574 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80134ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80134ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80134d2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80134d4:	2307      	movs	r3, #7
 80134d6:	4a28      	ldr	r2, [pc, #160]	; (8013578 <xPortStartScheduler+0x104>)
 80134d8:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134da:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80134de:	1e5c      	subs	r4, r3, #1
 80134e0:	0600      	lsls	r0, r0, #24
 80134e2:	d40c      	bmi.n	80134fe <xPortStartScheduler+0x8a>
 80134e4:	b111      	cbz	r1, 80134ec <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	6013      	str	r3, [r2, #0]
 80134ea:	d011      	beq.n	8013510 <xPortStartScheduler+0x9c>
 80134ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	e7fe      	b.n	80134fc <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80134fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013502:	2101      	movs	r1, #1
 8013504:	005b      	lsls	r3, r3, #1
 8013506:	b2db      	uxtb	r3, r3
 8013508:	f88d 3003 	strb.w	r3, [sp, #3]
 801350c:	4623      	mov	r3, r4
 801350e:	e7e4      	b.n	80134da <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013510:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013514:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8013518:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801351a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801351c:	9b01      	ldr	r3, [sp, #4]
 801351e:	4a14      	ldr	r2, [pc, #80]	; (8013570 <xPortStartScheduler+0xfc>)
 8013520:	b2db      	uxtb	r3, r3
 8013522:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013524:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8013528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801352c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013530:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8013534:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013538:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 801353c:	f7ff ff88 	bl	8013450 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013540:	4b0e      	ldr	r3, [pc, #56]	; (801357c <xPortStartScheduler+0x108>)
 8013542:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8013544:	f7ff feb6 	bl	80132b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013548:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 801354c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013550:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8013554:	f7ff fe9a 	bl	801328c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8013558:	f001 f930 	bl	80147bc <vTaskSwitchContext>
}
 801355c:	4628      	mov	r0, r5
	prvTaskExitError();
 801355e:	f7ff feb3 	bl	80132c8 <prvTaskExitError>
}
 8013562:	b003      	add	sp, #12
 8013564:	bd30      	pop	{r4, r5, pc}
 8013566:	bf00      	nop
 8013568:	410fc271 	.word	0x410fc271
 801356c:	410fc270 	.word	0x410fc270
 8013570:	e000e400 	.word	0xe000e400
 8013574:	2402a7cc 	.word	0x2402a7cc
 8013578:	2402a7d0 	.word	0x2402a7d0
 801357c:	24000040 	.word	0x24000040

08013580 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013580:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013584:	2b0f      	cmp	r3, #15
 8013586:	d90e      	bls.n	80135a6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013588:	4a11      	ldr	r2, [pc, #68]	; (80135d0 <vPortValidateInterruptPriority+0x50>)
 801358a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801358c:	4a11      	ldr	r2, [pc, #68]	; (80135d4 <vPortValidateInterruptPriority+0x54>)
 801358e:	7812      	ldrb	r2, [r2, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d908      	bls.n	80135a6 <vPortValidateInterruptPriority+0x26>
 8013594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013598:	f383 8811 	msr	BASEPRI, r3
 801359c:	f3bf 8f6f 	isb	sy
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	e7fe      	b.n	80135a4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80135a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80135aa:	4a0b      	ldr	r2, [pc, #44]	; (80135d8 <vPortValidateInterruptPriority+0x58>)
 80135ac:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80135b0:	6812      	ldr	r2, [r2, #0]
 80135b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d908      	bls.n	80135cc <vPortValidateInterruptPriority+0x4c>
 80135ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135be:	f383 8811 	msr	BASEPRI, r3
 80135c2:	f3bf 8f6f 	isb	sy
 80135c6:	f3bf 8f4f 	dsb	sy
 80135ca:	e7fe      	b.n	80135ca <vPortValidateInterruptPriority+0x4a>
	}
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	e000e3f0 	.word	0xe000e3f0
 80135d4:	2402a7cc 	.word	0x2402a7cc
 80135d8:	2402a7d0 	.word	0x2402a7d0

080135dc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80135dc:	b510      	push	{r4, lr}
 80135de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135e0:	f7ff feb8 	bl	8013354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80135e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80135e6:	f7ff fed5 	bl	8013394 <vPortExitCritical>

	return xReturn;
}
 80135ea:	fab4 f084 	clz	r0, r4
 80135ee:	0940      	lsrs	r0, r0, #5
 80135f0:	bd10      	pop	{r4, pc}

080135f2 <prvCopyDataToQueue>:
{
 80135f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135f4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80135f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80135f8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135fa:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80135fc:	b952      	cbnz	r2, 8013614 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135fe:	6807      	ldr	r7, [r0, #0]
 8013600:	bb47      	cbnz	r7, 8013654 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013602:	6880      	ldr	r0, [r0, #8]
 8013604:	f001 fa4e 	bl	8014aa4 <xTaskPriorityDisinherit>
 8013608:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801360a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801360c:	3601      	adds	r6, #1
}
 801360e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013610:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8013612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8013614:	b965      	cbnz	r5, 8013630 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013616:	6840      	ldr	r0, [r0, #4]
 8013618:	f018 faea 	bl	802bbf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801361c:	6863      	ldr	r3, [r4, #4]
 801361e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013620:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013622:	68a2      	ldr	r2, [r4, #8]
 8013624:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013626:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013628:	d3f0      	bcc.n	801360c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	6063      	str	r3, [r4, #4]
 801362e:	e7ed      	b.n	801360c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013630:	68c0      	ldr	r0, [r0, #12]
 8013632:	f018 fadd 	bl	802bbf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013638:	68e3      	ldr	r3, [r4, #12]
 801363a:	4251      	negs	r1, r2
 801363c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801363e:	6822      	ldr	r2, [r4, #0]
 8013640:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013642:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013644:	bf3e      	ittt	cc
 8013646:	68a3      	ldrcc	r3, [r4, #8]
 8013648:	185b      	addcc	r3, r3, r1
 801364a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801364c:	2d02      	cmp	r5, #2
 801364e:	d101      	bne.n	8013654 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013650:	b116      	cbz	r6, 8013658 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8013652:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8013654:	2500      	movs	r5, #0
 8013656:	e7d9      	b.n	801360c <prvCopyDataToQueue+0x1a>
 8013658:	4635      	mov	r5, r6
 801365a:	e7d7      	b.n	801360c <prvCopyDataToQueue+0x1a>

0801365c <prvCopyDataFromQueue>:
{
 801365c:	4603      	mov	r3, r0
 801365e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8013662:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013664:	b162      	cbz	r2, 8013680 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013666:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013668:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801366a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801366c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801366e:	60dc      	str	r4, [r3, #12]
}
 8013670:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013674:	bf24      	itt	cs
 8013676:	6819      	ldrcs	r1, [r3, #0]
 8013678:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801367a:	68d9      	ldr	r1, [r3, #12]
 801367c:	f018 bab8 	b.w	802bbf0 <memcpy>
}
 8013680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013684:	4770      	bx	lr

08013686 <prvUnlockQueue>:
{
 8013686:	b570      	push	{r4, r5, r6, lr}
 8013688:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801368a:	f7ff fe63 	bl	8013354 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801368e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013692:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8013696:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013698:	2d00      	cmp	r5, #0
 801369a:	dc14      	bgt.n	80136c6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 801369c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801369e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80136a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80136a6:	f7ff fe75 	bl	8013394 <vPortExitCritical>
	taskENTER_CRITICAL();
 80136aa:	f7ff fe53 	bl	8013354 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80136ae:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80136b2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136b4:	2d00      	cmp	r5, #0
 80136b6:	dc12      	bgt.n	80136de <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80136b8:	23ff      	movs	r3, #255	; 0xff
 80136ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80136be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80136c2:	f7ff be67 	b.w	8013394 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80136c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d0e7      	beq.n	801369c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136cc:	4630      	mov	r0, r6
 80136ce:	f001 f901 	bl	80148d4 <xTaskRemoveFromEventList>
 80136d2:	b108      	cbz	r0, 80136d8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80136d4:	f001 f98a 	bl	80149ec <vTaskMissedYield>
			--cTxLock;
 80136d8:	3d01      	subs	r5, #1
 80136da:	b26d      	sxtb	r5, r5
 80136dc:	e7dc      	b.n	8013698 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136de:	6923      	ldr	r3, [r4, #16]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d0e9      	beq.n	80136b8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136e4:	4630      	mov	r0, r6
 80136e6:	f001 f8f5 	bl	80148d4 <xTaskRemoveFromEventList>
 80136ea:	b108      	cbz	r0, 80136f0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80136ec:	f001 f97e 	bl	80149ec <vTaskMissedYield>
				--cRxLock;
 80136f0:	3d01      	subs	r5, #1
 80136f2:	b26d      	sxtb	r5, r5
 80136f4:	e7de      	b.n	80136b4 <prvUnlockQueue+0x2e>

080136f6 <xQueueGenericReset>:
{
 80136f6:	b538      	push	{r3, r4, r5, lr}
 80136f8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80136fa:	4604      	mov	r4, r0
 80136fc:	b940      	cbnz	r0, 8013710 <xQueueGenericReset+0x1a>
 80136fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013702:	f383 8811 	msr	BASEPRI, r3
 8013706:	f3bf 8f6f 	isb	sy
 801370a:	f3bf 8f4f 	dsb	sy
 801370e:	e7fe      	b.n	801370e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8013710:	f7ff fe20 	bl	8013354 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013714:	6822      	ldr	r2, [r4, #0]
 8013716:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801371a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801371c:	434b      	muls	r3, r1
 801371e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013720:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013722:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013724:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013726:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8013728:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801372a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801372c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 801372e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8013736:	b9a5      	cbnz	r5, 8013762 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013738:	6923      	ldr	r3, [r4, #16]
 801373a:	b173      	cbz	r3, 801375a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801373c:	f104 0010 	add.w	r0, r4, #16
 8013740:	f001 f8c8 	bl	80148d4 <xTaskRemoveFromEventList>
 8013744:	b148      	cbz	r0, 801375a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8013746:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801374e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8013752:	f3bf 8f4f 	dsb	sy
 8013756:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 801375a:	f7ff fe1b 	bl	8013394 <vPortExitCritical>
}
 801375e:	2001      	movs	r0, #1
 8013760:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013762:	f104 0010 	add.w	r0, r4, #16
 8013766:	f7ff fd4f 	bl	8013208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801376a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801376e:	f7ff fd4b 	bl	8013208 <vListInitialise>
 8013772:	e7f2      	b.n	801375a <xQueueGenericReset+0x64>

08013774 <xQueueGenericCreateStatic>:
	{
 8013774:	b513      	push	{r0, r1, r4, lr}
 8013776:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013778:	b940      	cbnz	r0, 801378c <xQueueGenericCreateStatic+0x18>
 801377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	e7fe      	b.n	801378a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 801378c:	b943      	cbnz	r3, 80137a0 <xQueueGenericCreateStatic+0x2c>
 801378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	e7fe      	b.n	801379e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80137a0:	b14a      	cbz	r2, 80137b6 <xQueueGenericCreateStatic+0x42>
 80137a2:	b991      	cbnz	r1, 80137ca <xQueueGenericCreateStatic+0x56>
 80137a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a8:	f383 8811 	msr	BASEPRI, r3
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	f3bf 8f4f 	dsb	sy
 80137b4:	e7fe      	b.n	80137b4 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80137b6:	b141      	cbz	r1, 80137ca <xQueueGenericCreateStatic+0x56>
 80137b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	e7fe      	b.n	80137c8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137ca:	2350      	movs	r3, #80	; 0x50
 80137cc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137ce:	9b01      	ldr	r3, [sp, #4]
 80137d0:	2b50      	cmp	r3, #80	; 0x50
 80137d2:	d008      	beq.n	80137e6 <xQueueGenericCreateStatic+0x72>
 80137d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d8:	f383 8811 	msr	BASEPRI, r3
 80137dc:	f3bf 8f6f 	isb	sy
 80137e0:	f3bf 8f4f 	dsb	sy
 80137e4:	e7fe      	b.n	80137e4 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80137e6:	2900      	cmp	r1, #0
 80137e8:	bf08      	it	eq
 80137ea:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80137ec:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	6022      	str	r2, [r4, #0]
 80137f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80137f6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80137fa:	4619      	mov	r1, r3
 80137fc:	4620      	mov	r0, r4
 80137fe:	f7ff ff7a 	bl	80136f6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8013802:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8013806:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8013808:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 801380c:	b002      	add	sp, #8
 801380e:	bd10      	pop	{r4, pc}

08013810 <xQueueGenericCreate>:
	{
 8013810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013812:	460d      	mov	r5, r1
 8013814:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013816:	4606      	mov	r6, r0
 8013818:	b940      	cbnz	r0, 801382c <xQueueGenericCreate+0x1c>
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	f383 8811 	msr	BASEPRI, r3
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	e7fe      	b.n	801382a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801382c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801382e:	3050      	adds	r0, #80	; 0x50
 8013830:	f7ff fc14 	bl	801305c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013834:	4604      	mov	r4, r0
 8013836:	b170      	cbz	r0, 8013856 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013838:	2300      	movs	r3, #0
 801383a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 801383e:	b165      	cbz	r5, 801385a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013840:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013844:	2101      	movs	r1, #1
 8013846:	4620      	mov	r0, r4
 8013848:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801384a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801384e:	f7ff ff52 	bl	80136f6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8013852:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8013856:	4620      	mov	r0, r4
 8013858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801385a:	4603      	mov	r3, r0
 801385c:	e7f2      	b.n	8013844 <xQueueGenericCreate+0x34>

0801385e <xQueueCreateCountingSemaphoreStatic>:
	{
 801385e:	b513      	push	{r0, r1, r4, lr}
 8013860:	4613      	mov	r3, r2
 8013862:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8013864:	b940      	cbnz	r0, 8013878 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8013866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386a:	f383 8811 	msr	BASEPRI, r3
 801386e:	f3bf 8f6f 	isb	sy
 8013872:	f3bf 8f4f 	dsb	sy
 8013876:	e7fe      	b.n	8013876 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013878:	4288      	cmp	r0, r1
 801387a:	d208      	bcs.n	801388e <xQueueCreateCountingSemaphoreStatic+0x30>
 801387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	e7fe      	b.n	801388c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801388e:	2202      	movs	r2, #2
 8013890:	9200      	str	r2, [sp, #0]
 8013892:	2200      	movs	r2, #0
 8013894:	4611      	mov	r1, r2
 8013896:	f7ff ff6d 	bl	8013774 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 801389a:	b100      	cbz	r0, 801389e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801389c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 801389e:	b002      	add	sp, #8
 80138a0:	bd10      	pop	{r4, pc}

080138a2 <xQueueCreateCountingSemaphore>:
	{
 80138a2:	b510      	push	{r4, lr}
 80138a4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80138a6:	b940      	cbnz	r0, 80138ba <xQueueCreateCountingSemaphore+0x18>
 80138a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ac:	f383 8811 	msr	BASEPRI, r3
 80138b0:	f3bf 8f6f 	isb	sy
 80138b4:	f3bf 8f4f 	dsb	sy
 80138b8:	e7fe      	b.n	80138b8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80138ba:	4288      	cmp	r0, r1
 80138bc:	d208      	bcs.n	80138d0 <xQueueCreateCountingSemaphore+0x2e>
 80138be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c2:	f383 8811 	msr	BASEPRI, r3
 80138c6:	f3bf 8f6f 	isb	sy
 80138ca:	f3bf 8f4f 	dsb	sy
 80138ce:	e7fe      	b.n	80138ce <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80138d0:	2202      	movs	r2, #2
 80138d2:	2100      	movs	r1, #0
 80138d4:	f7ff ff9c 	bl	8013810 <xQueueGenericCreate>
		if( xHandle != NULL )
 80138d8:	b100      	cbz	r0, 80138dc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80138da:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80138dc:	bd10      	pop	{r4, pc}

080138de <xQueueGenericSend>:
{
 80138de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138e2:	b085      	sub	sp, #20
 80138e4:	4688      	mov	r8, r1
 80138e6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80138e8:	4604      	mov	r4, r0
{
 80138ea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80138ec:	b940      	cbnz	r0, 8013900 <xQueueGenericSend+0x22>
 80138ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	e7fe      	b.n	80138fe <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013900:	b951      	cbnz	r1, 8013918 <xQueueGenericSend+0x3a>
 8013902:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013904:	b143      	cbz	r3, 8013918 <xQueueGenericSend+0x3a>
 8013906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390a:	f383 8811 	msr	BASEPRI, r3
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	e7fe      	b.n	8013916 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013918:	2f02      	cmp	r7, #2
 801391a:	d10b      	bne.n	8013934 <xQueueGenericSend+0x56>
 801391c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801391e:	2b01      	cmp	r3, #1
 8013920:	d008      	beq.n	8013934 <xQueueGenericSend+0x56>
 8013922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013926:	f383 8811 	msr	BASEPRI, r3
 801392a:	f3bf 8f6f 	isb	sy
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	e7fe      	b.n	8013932 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013934:	f001 f866 	bl	8014a04 <xTaskGetSchedulerState>
 8013938:	4606      	mov	r6, r0
 801393a:	b950      	cbnz	r0, 8013952 <xQueueGenericSend+0x74>
 801393c:	9b01      	ldr	r3, [sp, #4]
 801393e:	b14b      	cbz	r3, 8013954 <xQueueGenericSend+0x76>
 8013940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013944:	f383 8811 	msr	BASEPRI, r3
 8013948:	f3bf 8f6f 	isb	sy
 801394c:	f3bf 8f4f 	dsb	sy
 8013950:	e7fe      	b.n	8013950 <xQueueGenericSend+0x72>
 8013952:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8013954:	f04f 0900 	mov.w	r9, #0
 8013958:	e037      	b.n	80139ca <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 801395a:	9d01      	ldr	r5, [sp, #4]
 801395c:	b91d      	cbnz	r5, 8013966 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 801395e:	f7ff fd19 	bl	8013394 <vPortExitCritical>
			return errQUEUE_FULL;
 8013962:	2000      	movs	r0, #0
 8013964:	e052      	b.n	8013a0c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8013966:	b916      	cbnz	r6, 801396e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013968:	a802      	add	r0, sp, #8
 801396a:	f000 fff7 	bl	801495c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801396e:	f7ff fd11 	bl	8013394 <vPortExitCritical>
		vTaskSuspendAll();
 8013972:	f000 fd7f 	bl	8014474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013976:	f7ff fced 	bl	8013354 <vPortEnterCritical>
 801397a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801397e:	2bff      	cmp	r3, #255	; 0xff
 8013980:	d101      	bne.n	8013986 <xQueueGenericSend+0xa8>
 8013982:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8013986:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801398a:	2bff      	cmp	r3, #255	; 0xff
 801398c:	d101      	bne.n	8013992 <xQueueGenericSend+0xb4>
 801398e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8013992:	f7ff fcff 	bl	8013394 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013996:	a901      	add	r1, sp, #4
 8013998:	a802      	add	r0, sp, #8
 801399a:	f000 ffeb 	bl	8014974 <xTaskCheckForTimeOut>
 801399e:	2800      	cmp	r0, #0
 80139a0:	d14a      	bne.n	8013a38 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80139a2:	f7ff fcd7 	bl	8013354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80139a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80139a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d131      	bne.n	8013a12 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80139ae:	f7ff fcf1 	bl	8013394 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80139b2:	9901      	ldr	r1, [sp, #4]
 80139b4:	f104 0010 	add.w	r0, r4, #16
 80139b8:	f000 ff54 	bl	8014864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80139bc:	4620      	mov	r0, r4
 80139be:	f7ff fe62 	bl	8013686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80139c2:	f000 fe03 	bl	80145cc <xTaskResumeAll>
 80139c6:	b360      	cbz	r0, 8013a22 <xQueueGenericSend+0x144>
 80139c8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80139ca:	f7ff fcc3 	bl	8013354 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80139d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d301      	bcc.n	80139da <xQueueGenericSend+0xfc>
 80139d6:	2f02      	cmp	r7, #2
 80139d8:	d1bf      	bne.n	801395a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139da:	463a      	mov	r2, r7
 80139dc:	4641      	mov	r1, r8
 80139de:	4620      	mov	r0, r4
 80139e0:	f7ff fe07 	bl	80135f2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139e6:	b11b      	cbz	r3, 80139f0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80139ec:	f000 ff72 	bl	80148d4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80139f0:	b148      	cbz	r0, 8013a06 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80139f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80139f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80139fe:	f3bf 8f4f 	dsb	sy
 8013a02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013a06:	f7ff fcc5 	bl	8013394 <vPortExitCritical>
				return pdPASS;
 8013a0a:	2001      	movs	r0, #1
}
 8013a0c:	b005      	add	sp, #20
 8013a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8013a12:	f7ff fcbf 	bl	8013394 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8013a16:	4620      	mov	r0, r4
 8013a18:	f7ff fe35 	bl	8013686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a1c:	f000 fdd6 	bl	80145cc <xTaskResumeAll>
 8013a20:	e7d2      	b.n	80139c8 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8013a22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8013a2e:	f3bf 8f4f 	dsb	sy
 8013a32:	f3bf 8f6f 	isb	sy
 8013a36:	e7c7      	b.n	80139c8 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f7ff fe24 	bl	8013686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a3e:	f000 fdc5 	bl	80145cc <xTaskResumeAll>
 8013a42:	e78e      	b.n	8013962 <xQueueGenericSend+0x84>

08013a44 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013a44:	2200      	movs	r2, #0
	{
 8013a46:	460b      	mov	r3, r1
 8013a48:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	9000      	str	r0, [sp, #0]
 8013a4e:	2001      	movs	r0, #1
 8013a50:	f7ff fe90 	bl	8013774 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8013a54:	4604      	mov	r4, r0
 8013a56:	b138      	cbz	r0, 8013a68 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013a58:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013a5e:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013a60:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013a62:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013a64:	f7ff ff3b 	bl	80138de <xQueueGenericSend>
	}
 8013a68:	4620      	mov	r0, r4
 8013a6a:	b002      	add	sp, #8
 8013a6c:	bd10      	pop	{r4, pc}

08013a6e <xQueueGiveMutexRecursive>:
	{
 8013a6e:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8013a70:	4604      	mov	r4, r0
 8013a72:	b940      	cbnz	r0, 8013a86 <xQueueGiveMutexRecursive+0x18>
 8013a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a78:	f383 8811 	msr	BASEPRI, r3
 8013a7c:	f3bf 8f6f 	isb	sy
 8013a80:	f3bf 8f4f 	dsb	sy
 8013a84:	e7fe      	b.n	8013a84 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013a86:	6885      	ldr	r5, [r0, #8]
 8013a88:	f000 ffb6 	bl	80149f8 <xTaskGetCurrentTaskHandle>
 8013a8c:	4285      	cmp	r5, r0
 8013a8e:	d10a      	bne.n	8013aa6 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8013a90:	68e3      	ldr	r3, [r4, #12]
 8013a92:	3b01      	subs	r3, #1
 8013a94:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013a96:	b923      	cbnz	r3, 8013aa2 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f7ff ff1e 	bl	80138de <xQueueGenericSend>
			xReturn = pdPASS;
 8013aa2:	2001      	movs	r0, #1
		return xReturn;
 8013aa4:	e000      	b.n	8013aa8 <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 8013aa6:	2000      	movs	r0, #0
	}
 8013aa8:	bd38      	pop	{r3, r4, r5, pc}

08013aaa <xQueueCreateMutex>:
	{
 8013aaa:	b570      	push	{r4, r5, r6, lr}
 8013aac:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013aae:	2050      	movs	r0, #80	; 0x50
 8013ab0:	f7ff fad4 	bl	801305c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	b198      	cbz	r0, 8013ae0 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013ab8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8013aba:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013abc:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013abe:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8013ac2:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013ac6:	f7ff fe16 	bl	80136f6 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013aca:	462b      	mov	r3, r5
 8013acc:	462a      	mov	r2, r5
 8013ace:	4629      	mov	r1, r5
 8013ad0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8013ad2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ad6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013ad8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013ada:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013adc:	f7ff feff 	bl	80138de <xQueueGenericSend>
	}
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	bd70      	pop	{r4, r5, r6, pc}

08013ae4 <xQueueGenericSendFromISR>:
{
 8013ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ae8:	4689      	mov	r9, r1
 8013aea:	4690      	mov	r8, r2
 8013aec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8013aee:	4604      	mov	r4, r0
 8013af0:	b940      	cbnz	r0, 8013b04 <xQueueGenericSendFromISR+0x20>
 8013af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af6:	f383 8811 	msr	BASEPRI, r3
 8013afa:	f3bf 8f6f 	isb	sy
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	e7fe      	b.n	8013b02 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b04:	b951      	cbnz	r1, 8013b1c <xQueueGenericSendFromISR+0x38>
 8013b06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013b08:	b143      	cbz	r3, 8013b1c <xQueueGenericSendFromISR+0x38>
 8013b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b0e:	f383 8811 	msr	BASEPRI, r3
 8013b12:	f3bf 8f6f 	isb	sy
 8013b16:	f3bf 8f4f 	dsb	sy
 8013b1a:	e7fe      	b.n	8013b1a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b1c:	2f02      	cmp	r7, #2
 8013b1e:	d10b      	bne.n	8013b38 <xQueueGenericSendFromISR+0x54>
 8013b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b22:	2b01      	cmp	r3, #1
 8013b24:	d008      	beq.n	8013b38 <xQueueGenericSendFromISR+0x54>
 8013b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2a:	f383 8811 	msr	BASEPRI, r3
 8013b2e:	f3bf 8f6f 	isb	sy
 8013b32:	f3bf 8f4f 	dsb	sy
 8013b36:	e7fe      	b.n	8013b36 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b38:	f7ff fd22 	bl	8013580 <vPortValidateInterruptPriority>
	__asm volatile
 8013b3c:	f3ef 8611 	mrs	r6, BASEPRI
 8013b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b44:	f383 8811 	msr	BASEPRI, r3
 8013b48:	f3bf 8f6f 	isb	sy
 8013b4c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d301      	bcc.n	8013b5c <xQueueGenericSendFromISR+0x78>
 8013b58:	2f02      	cmp	r7, #2
 8013b5a:	d123      	bne.n	8013ba4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b60:	463a      	mov	r2, r7
 8013b62:	4649      	mov	r1, r9
 8013b64:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b66:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b6a:	f7ff fd42 	bl	80135f2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8013b6e:	1c6b      	adds	r3, r5, #1
 8013b70:	d113      	bne.n	8013b9a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b74:	b90b      	cbnz	r3, 8013b7a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8013b76:	2001      	movs	r0, #1
 8013b78:	e00b      	b.n	8013b92 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013b7e:	f000 fea9 	bl	80148d4 <xTaskRemoveFromEventList>
 8013b82:	2800      	cmp	r0, #0
 8013b84:	d0f7      	beq.n	8013b76 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8013b86:	f1b8 0f00 	cmp.w	r8, #0
 8013b8a:	d0f4      	beq.n	8013b76 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b8c:	2001      	movs	r0, #1
 8013b8e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8013b92:	f386 8811 	msr	BASEPRI, r6
}
 8013b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b9a:	3501      	adds	r5, #1
 8013b9c:	b26d      	sxtb	r5, r5
 8013b9e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8013ba2:	e7e8      	b.n	8013b76 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	e7f4      	b.n	8013b92 <xQueueGenericSendFromISR+0xae>

08013ba8 <xQueueGiveFromISR>:
{
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8013bac:	4604      	mov	r4, r0
 8013bae:	b940      	cbnz	r0, 8013bc2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8013bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bb4:	f383 8811 	msr	BASEPRI, r3
 8013bb8:	f3bf 8f6f 	isb	sy
 8013bbc:	f3bf 8f4f 	dsb	sy
 8013bc0:	e7fe      	b.n	8013bc0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013bc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013bc4:	b143      	cbz	r3, 8013bd8 <xQueueGiveFromISR+0x30>
 8013bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bca:	f383 8811 	msr	BASEPRI, r3
 8013bce:	f3bf 8f6f 	isb	sy
 8013bd2:	f3bf 8f4f 	dsb	sy
 8013bd6:	e7fe      	b.n	8013bd6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013bd8:	6803      	ldr	r3, [r0, #0]
 8013bda:	b953      	cbnz	r3, 8013bf2 <xQueueGiveFromISR+0x4a>
 8013bdc:	6883      	ldr	r3, [r0, #8]
 8013bde:	b143      	cbz	r3, 8013bf2 <xQueueGiveFromISR+0x4a>
 8013be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be4:	f383 8811 	msr	BASEPRI, r3
 8013be8:	f3bf 8f6f 	isb	sy
 8013bec:	f3bf 8f4f 	dsb	sy
 8013bf0:	e7fe      	b.n	8013bf0 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bf2:	f7ff fcc5 	bl	8013580 <vPortValidateInterruptPriority>
	__asm volatile
 8013bf6:	f3ef 8611 	mrs	r6, BASEPRI
 8013bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d91c      	bls.n	8013c4c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013c12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c16:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8013c18:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8013c1a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c1c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013c1e:	d110      	bne.n	8013c42 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c22:	b90b      	cbnz	r3, 8013c28 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8013c24:	2001      	movs	r0, #1
 8013c26:	e009      	b.n	8013c3c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013c2c:	f000 fe52 	bl	80148d4 <xTaskRemoveFromEventList>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d0f7      	beq.n	8013c24 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8013c34:	2d00      	cmp	r5, #0
 8013c36:	d0f5      	beq.n	8013c24 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013c38:	2001      	movs	r0, #1
 8013c3a:	6028      	str	r0, [r5, #0]
	__asm volatile
 8013c3c:	f386 8811 	msr	BASEPRI, r6
}
 8013c40:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c42:	3301      	adds	r3, #1
 8013c44:	b25b      	sxtb	r3, r3
 8013c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c4a:	e7eb      	b.n	8013c24 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	e7f5      	b.n	8013c3c <xQueueGiveFromISR+0x94>

08013c50 <xQueueReceive>:
{
 8013c50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013c54:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8013c56:	4604      	mov	r4, r0
{
 8013c58:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013c5a:	b940      	cbnz	r0, 8013c6e <xQueueReceive+0x1e>
	__asm volatile
 8013c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c60:	f383 8811 	msr	BASEPRI, r3
 8013c64:	f3bf 8f6f 	isb	sy
 8013c68:	f3bf 8f4f 	dsb	sy
 8013c6c:	e7fe      	b.n	8013c6c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c6e:	b951      	cbnz	r1, 8013c86 <xQueueReceive+0x36>
 8013c70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013c72:	b143      	cbz	r3, 8013c86 <xQueueReceive+0x36>
 8013c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c78:	f383 8811 	msr	BASEPRI, r3
 8013c7c:	f3bf 8f6f 	isb	sy
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	e7fe      	b.n	8013c84 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c86:	f000 febd 	bl	8014a04 <xTaskGetSchedulerState>
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	b950      	cbnz	r0, 8013ca4 <xQueueReceive+0x54>
 8013c8e:	9b01      	ldr	r3, [sp, #4]
 8013c90:	b14b      	cbz	r3, 8013ca6 <xQueueReceive+0x56>
 8013c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c96:	f383 8811 	msr	BASEPRI, r3
 8013c9a:	f3bf 8f6f 	isb	sy
 8013c9e:	f3bf 8f4f 	dsb	sy
 8013ca2:	e7fe      	b.n	8013ca2 <xQueueReceive+0x52>
 8013ca4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8013ca6:	f04f 0800 	mov.w	r8, #0
 8013caa:	e03d      	b.n	8013d28 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cac:	9d01      	ldr	r5, [sp, #4]
 8013cae:	b91d      	cbnz	r5, 8013cb8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8013cb0:	f7ff fb70 	bl	8013394 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	e056      	b.n	8013d66 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8013cb8:	b916      	cbnz	r6, 8013cc0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cba:	a802      	add	r0, sp, #8
 8013cbc:	f000 fe4e 	bl	801495c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8013cc0:	f7ff fb68 	bl	8013394 <vPortExitCritical>
		vTaskSuspendAll();
 8013cc4:	f000 fbd6 	bl	8014474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cc8:	f7ff fb44 	bl	8013354 <vPortEnterCritical>
 8013ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013cd0:	2bff      	cmp	r3, #255	; 0xff
 8013cd2:	d101      	bne.n	8013cd8 <xQueueReceive+0x88>
 8013cd4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8013cd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013cdc:	2bff      	cmp	r3, #255	; 0xff
 8013cde:	d101      	bne.n	8013ce4 <xQueueReceive+0x94>
 8013ce0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8013ce4:	f7ff fb56 	bl	8013394 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ce8:	a901      	add	r1, sp, #4
 8013cea:	a802      	add	r0, sp, #8
 8013cec:	f000 fe42 	bl	8014974 <xTaskCheckForTimeOut>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d141      	bne.n	8013d78 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	f7ff fc71 	bl	80135dc <prvIsQueueEmpty>
 8013cfa:	b3b8      	cbz	r0, 8013d6c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013cfc:	9901      	ldr	r1, [sp, #4]
 8013cfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013d02:	f000 fdaf 	bl	8014864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d06:	4620      	mov	r0, r4
 8013d08:	f7ff fcbd 	bl	8013686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d0c:	f000 fc5e 	bl	80145cc <xTaskResumeAll>
 8013d10:	b948      	cbnz	r0, 8013d26 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8013d12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8013d1e:	f3bf 8f4f 	dsb	sy
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8013d28:	f7ff fb14 	bl	8013354 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d2e:	2d00      	cmp	r5, #0
 8013d30:	d0bc      	beq.n	8013cac <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d32:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d34:	4639      	mov	r1, r7
 8013d36:	4620      	mov	r0, r4
 8013d38:	f7ff fc90 	bl	801365c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d3c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d3e:	6923      	ldr	r3, [r4, #16]
 8013d40:	b173      	cbz	r3, 8013d60 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d42:	f104 0010 	add.w	r0, r4, #16
 8013d46:	f000 fdc5 	bl	80148d4 <xTaskRemoveFromEventList>
 8013d4a:	b148      	cbz	r0, 8013d60 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8013d4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013d60:	f7ff fb18 	bl	8013394 <vPortExitCritical>
				return pdPASS;
 8013d64:	2001      	movs	r0, #1
}
 8013d66:	b004      	add	sp, #16
 8013d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff fc8a 	bl	8013686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d72:	f000 fc2b 	bl	80145cc <xTaskResumeAll>
 8013d76:	e7d6      	b.n	8013d26 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f7ff fc84 	bl	8013686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d7e:	f000 fc25 	bl	80145cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d82:	4620      	mov	r0, r4
 8013d84:	f7ff fc2a 	bl	80135dc <prvIsQueueEmpty>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	d0cc      	beq.n	8013d26 <xQueueReceive+0xd6>
 8013d8c:	e792      	b.n	8013cb4 <xQueueReceive+0x64>

08013d8e <xQueueSemaphoreTake>:
{
 8013d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d90:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8013d92:	4604      	mov	r4, r0
{
 8013d94:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013d96:	b940      	cbnz	r0, 8013daa <xQueueSemaphoreTake+0x1c>
 8013d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9c:	f383 8811 	msr	BASEPRI, r3
 8013da0:	f3bf 8f6f 	isb	sy
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	e7fe      	b.n	8013da8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013daa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8013dac:	b145      	cbz	r5, 8013dc0 <xQueueSemaphoreTake+0x32>
 8013dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db2:	f383 8811 	msr	BASEPRI, r3
 8013db6:	f3bf 8f6f 	isb	sy
 8013dba:	f3bf 8f4f 	dsb	sy
 8013dbe:	e7fe      	b.n	8013dbe <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dc0:	f000 fe20 	bl	8014a04 <xTaskGetSchedulerState>
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	b950      	cbnz	r0, 8013dde <xQueueSemaphoreTake+0x50>
 8013dc8:	9b01      	ldr	r3, [sp, #4]
 8013dca:	b15b      	cbz	r3, 8013de4 <xQueueSemaphoreTake+0x56>
 8013dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	e7fe      	b.n	8013ddc <xQueueSemaphoreTake+0x4e>
 8013dde:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8013de0:	2700      	movs	r7, #0
 8013de2:	e053      	b.n	8013e8c <xQueueSemaphoreTake+0xfe>
 8013de4:	4605      	mov	r5, r0
 8013de6:	e7fb      	b.n	8013de0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013de8:	9b01      	ldr	r3, [sp, #4]
 8013dea:	b963      	cbnz	r3, 8013e06 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013dec:	b145      	cbz	r5, 8013e00 <xQueueSemaphoreTake+0x72>
 8013dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df2:	f383 8811 	msr	BASEPRI, r3
 8013df6:	f3bf 8f6f 	isb	sy
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	e7fe      	b.n	8013dfe <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8013e00:	f7ff fac8 	bl	8013394 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013e04:	e062      	b.n	8013ecc <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8013e06:	b916      	cbnz	r6, 8013e0e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e08:	a802      	add	r0, sp, #8
 8013e0a:	f000 fda7 	bl	801495c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8013e0e:	f7ff fac1 	bl	8013394 <vPortExitCritical>
		vTaskSuspendAll();
 8013e12:	f000 fb2f 	bl	8014474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e16:	f7ff fa9d 	bl	8013354 <vPortEnterCritical>
 8013e1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e1e:	2bff      	cmp	r3, #255	; 0xff
 8013e20:	d101      	bne.n	8013e26 <xQueueSemaphoreTake+0x98>
 8013e22:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8013e26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013e2a:	2bff      	cmp	r3, #255	; 0xff
 8013e2c:	d101      	bne.n	8013e32 <xQueueSemaphoreTake+0xa4>
 8013e2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013e32:	f7ff faaf 	bl	8013394 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e36:	a901      	add	r1, sp, #4
 8013e38:	a802      	add	r0, sp, #8
 8013e3a:	f000 fd9b 	bl	8014974 <xTaskCheckForTimeOut>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	d14d      	bne.n	8013ede <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013e42:	4620      	mov	r0, r4
 8013e44:	f7ff fbca 	bl	80135dc <prvIsQueueEmpty>
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	d042      	beq.n	8013ed2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e4c:	6823      	ldr	r3, [r4, #0]
 8013e4e:	b93b      	cbnz	r3, 8013e60 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8013e50:	f7ff fa80 	bl	8013354 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e54:	68a0      	ldr	r0, [r4, #8]
 8013e56:	f000 fde5 	bl	8014a24 <xTaskPriorityInherit>
 8013e5a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8013e5c:	f7ff fa9a 	bl	8013394 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013e60:	9901      	ldr	r1, [sp, #4]
 8013e62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013e66:	f000 fcfd 	bl	8014864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f7ff fc0b 	bl	8013686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013e70:	f000 fbac 	bl	80145cc <xTaskResumeAll>
 8013e74:	b948      	cbnz	r0, 8013e8a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8013e76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8013e8c:	f7ff fa62 	bl	8013354 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013e90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d0a8      	beq.n	8013de8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013e96:	3b01      	subs	r3, #1
 8013e98:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e9a:	6823      	ldr	r3, [r4, #0]
 8013e9c:	b913      	cbnz	r3, 8013ea4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013e9e:	f000 fe97 	bl	8014bd0 <pvTaskIncrementMutexHeldCount>
 8013ea2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	b173      	cbz	r3, 8013ec6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ea8:	f104 0010 	add.w	r0, r4, #16
 8013eac:	f000 fd12 	bl	80148d4 <xTaskRemoveFromEventList>
 8013eb0:	b148      	cbz	r0, 8013ec6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8013eb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8013eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013eba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8013ebe:	f3bf 8f4f 	dsb	sy
 8013ec2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8013ec6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8013ec8:	f7ff fa64 	bl	8013394 <vPortExitCritical>
}
 8013ecc:	4628      	mov	r0, r5
 8013ece:	b005      	add	sp, #20
 8013ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7ff fbd7 	bl	8013686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ed8:	f000 fb78 	bl	80145cc <xTaskResumeAll>
 8013edc:	e7d5      	b.n	8013e8a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f7ff fbd1 	bl	8013686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ee4:	f000 fb72 	bl	80145cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ee8:	4620      	mov	r0, r4
 8013eea:	f7ff fb77 	bl	80135dc <prvIsQueueEmpty>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d0cb      	beq.n	8013e8a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8013ef2:	2d00      	cmp	r5, #0
 8013ef4:	d0ea      	beq.n	8013ecc <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8013ef6:	f7ff fa2d 	bl	8013354 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013efa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013efc:	b119      	cbz	r1, 8013f06 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f00:	6819      	ldr	r1, [r3, #0]
 8013f02:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013f06:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8013f08:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013f0a:	f000 fe0f 	bl	8014b2c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8013f0e:	f7ff fa41 	bl	8013394 <vPortExitCritical>
 8013f12:	e7db      	b.n	8013ecc <xQueueSemaphoreTake+0x13e>

08013f14 <xQueueTakeMutexRecursive>:
	{
 8013f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8013f16:	4604      	mov	r4, r0
 8013f18:	b940      	cbnz	r0, 8013f2c <xQueueTakeMutexRecursive+0x18>
 8013f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f1e:	f383 8811 	msr	BASEPRI, r3
 8013f22:	f3bf 8f6f 	isb	sy
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	e7fe      	b.n	8013f2a <xQueueTakeMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013f2c:	6885      	ldr	r5, [r0, #8]
 8013f2e:	9101      	str	r1, [sp, #4]
 8013f30:	f000 fd62 	bl	80149f8 <xTaskGetCurrentTaskHandle>
 8013f34:	4285      	cmp	r5, r0
 8013f36:	9901      	ldr	r1, [sp, #4]
 8013f38:	d105      	bne.n	8013f46 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013f3a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8013f3c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013f3e:	3301      	adds	r3, #1
 8013f40:	60e3      	str	r3, [r4, #12]
	}
 8013f42:	b003      	add	sp, #12
 8013f44:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8013f46:	4620      	mov	r0, r4
 8013f48:	f7ff ff21 	bl	8013d8e <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d0f8      	beq.n	8013f42 <xQueueTakeMutexRecursive+0x2e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013f50:	68e3      	ldr	r3, [r4, #12]
 8013f52:	3301      	adds	r3, #1
 8013f54:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8013f56:	e7f4      	b.n	8013f42 <xQueueTakeMutexRecursive+0x2e>

08013f58 <xQueueReceiveFromISR>:
{
 8013f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f5c:	4689      	mov	r9, r1
 8013f5e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8013f60:	4605      	mov	r5, r0
 8013f62:	b940      	cbnz	r0, 8013f76 <xQueueReceiveFromISR+0x1e>
 8013f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f68:	f383 8811 	msr	BASEPRI, r3
 8013f6c:	f3bf 8f6f 	isb	sy
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	e7fe      	b.n	8013f74 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f76:	b951      	cbnz	r1, 8013f8e <xQueueReceiveFromISR+0x36>
 8013f78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013f7a:	b143      	cbz	r3, 8013f8e <xQueueReceiveFromISR+0x36>
 8013f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f80:	f383 8811 	msr	BASEPRI, r3
 8013f84:	f3bf 8f6f 	isb	sy
 8013f88:	f3bf 8f4f 	dsb	sy
 8013f8c:	e7fe      	b.n	8013f8c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013f8e:	f7ff faf7 	bl	8013580 <vPortValidateInterruptPriority>
	__asm volatile
 8013f92:	f3ef 8711 	mrs	r7, BASEPRI
 8013f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013fa6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fa8:	b31c      	cbz	r4, 8013ff2 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8013faa:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013fae:	4649      	mov	r1, r9
 8013fb0:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013fb2:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8013fb4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013fb6:	f7ff fb51 	bl	801365c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013fba:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013fbc:	1c73      	adds	r3, r6, #1
 8013fbe:	d113      	bne.n	8013fe8 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fc0:	692b      	ldr	r3, [r5, #16]
 8013fc2:	b90b      	cbnz	r3, 8013fc8 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8013fc4:	2001      	movs	r0, #1
 8013fc6:	e00b      	b.n	8013fe0 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fc8:	f105 0010 	add.w	r0, r5, #16
 8013fcc:	f000 fc82 	bl	80148d4 <xTaskRemoveFromEventList>
 8013fd0:	2800      	cmp	r0, #0
 8013fd2:	d0f7      	beq.n	8013fc4 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8013fd4:	f1b8 0f00 	cmp.w	r8, #0
 8013fd8:	d0f4      	beq.n	8013fc4 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013fda:	2001      	movs	r0, #1
 8013fdc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8013fe0:	f387 8811 	msr	BASEPRI, r7
}
 8013fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013fe8:	3601      	adds	r6, #1
 8013fea:	b276      	sxtb	r6, r6
 8013fec:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8013ff0:	e7e8      	b.n	8013fc4 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	e7f4      	b.n	8013fe0 <xQueueReceiveFromISR+0x88>
	...

08013ff8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ff8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013ffa:	4a07      	ldr	r2, [pc, #28]	; (8014018 <vQueueAddToRegistry+0x20>)
	{
 8013ffc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013ffe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8014002:	b92c      	cbnz	r4, 8014010 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014004:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014008:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801400c:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801400e:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014010:	3301      	adds	r3, #1
 8014012:	2b08      	cmp	r3, #8
 8014014:	d1f3      	bne.n	8013ffe <vQueueAddToRegistry+0x6>
 8014016:	e7fa      	b.n	801400e <vQueueAddToRegistry+0x16>
 8014018:	2402a7d4 	.word	0x2402a7d4

0801401c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801401c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801401e:	4a08      	ldr	r2, [pc, #32]	; (8014040 <vQueueUnregisterQueue+0x24>)
	{
 8014020:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014022:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014026:	684c      	ldr	r4, [r1, #4]
 8014028:	4284      	cmp	r4, r0
 801402a:	d104      	bne.n	8014036 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801402c:	2000      	movs	r0, #0
 801402e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014032:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014034:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014036:	3301      	adds	r3, #1
 8014038:	2b08      	cmp	r3, #8
 801403a:	d1f2      	bne.n	8014022 <vQueueUnregisterQueue+0x6>
 801403c:	e7fa      	b.n	8014034 <vQueueUnregisterQueue+0x18>
 801403e:	bf00      	nop
 8014040:	2402a7d4 	.word	0x2402a7d4

08014044 <vQueueDelete>:
{
 8014044:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8014046:	4604      	mov	r4, r0
 8014048:	b940      	cbnz	r0, 801405c <vQueueDelete+0x18>
	__asm volatile
 801404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801404e:	f383 8811 	msr	BASEPRI, r3
 8014052:	f3bf 8f6f 	isb	sy
 8014056:	f3bf 8f4f 	dsb	sy
 801405a:	e7fe      	b.n	801405a <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 801405c:	f7ff ffde 	bl	801401c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014060:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014064:	b923      	cbnz	r3, 8014070 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8014066:	4620      	mov	r0, r4
}
 8014068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 801406c:	f7ff b88e 	b.w	801318c <vPortFree>
}
 8014070:	bd10      	pop	{r4, pc}

08014072 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014072:	b570      	push	{r4, r5, r6, lr}
 8014074:	4604      	mov	r4, r0
 8014076:	460d      	mov	r5, r1
 8014078:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801407a:	f7ff f96b 	bl	8013354 <vPortEnterCritical>
 801407e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014082:	2bff      	cmp	r3, #255	; 0xff
 8014084:	d102      	bne.n	801408c <vQueueWaitForMessageRestricted+0x1a>
 8014086:	2300      	movs	r3, #0
 8014088:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801408c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014090:	2bff      	cmp	r3, #255	; 0xff
 8014092:	d102      	bne.n	801409a <vQueueWaitForMessageRestricted+0x28>
 8014094:	2300      	movs	r3, #0
 8014096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801409a:	f7ff f97b 	bl	8013394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801409e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80140a0:	b92b      	cbnz	r3, 80140ae <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80140a2:	4632      	mov	r2, r6
 80140a4:	4629      	mov	r1, r5
 80140a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80140aa:	f000 fbf5 	bl	8014898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80140ae:	4620      	mov	r0, r4
	}
 80140b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80140b4:	f7ff bae7 	b.w	8013686 <prvUnlockQueue>

080140b8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80140b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140bc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80140be:	f7ff f949 	bl	8013354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80140c2:	4b2f      	ldr	r3, [pc, #188]	; (8014180 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80140c4:	4e2f      	ldr	r6, [pc, #188]	; (8014184 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	4f2f      	ldr	r7, [pc, #188]	; (8014188 <prvAddNewTaskToReadyList+0xd0>)
 80140ca:	3201      	adds	r2, #1
 80140cc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80140ce:	6835      	ldr	r5, [r6, #0]
 80140d0:	2d00      	cmp	r5, #0
 80140d2:	d14a      	bne.n	801416a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80140d4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d11f      	bne.n	801411c <prvAddNewTaskToReadyList+0x64>
 80140dc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80140de:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80140e0:	4640      	mov	r0, r8
 80140e2:	f7ff f891 	bl	8013208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80140e6:	f108 0814 	add.w	r8, r8, #20
 80140ea:	2d38      	cmp	r5, #56	; 0x38
 80140ec:	d1f7      	bne.n	80140de <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80140ee:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80141b0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80140f2:	4d26      	ldr	r5, [pc, #152]	; (801418c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80140f4:	4640      	mov	r0, r8
 80140f6:	f7ff f887 	bl	8013208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7ff f884 	bl	8013208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014100:	4823      	ldr	r0, [pc, #140]	; (8014190 <prvAddNewTaskToReadyList+0xd8>)
 8014102:	f7ff f881 	bl	8013208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014106:	4823      	ldr	r0, [pc, #140]	; (8014194 <prvAddNewTaskToReadyList+0xdc>)
 8014108:	f7ff f87e 	bl	8013208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801410c:	4822      	ldr	r0, [pc, #136]	; (8014198 <prvAddNewTaskToReadyList+0xe0>)
 801410e:	f7ff f87b 	bl	8013208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014112:	4b22      	ldr	r3, [pc, #136]	; (801419c <prvAddNewTaskToReadyList+0xe4>)
 8014114:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014118:	4b21      	ldr	r3, [pc, #132]	; (80141a0 <prvAddNewTaskToReadyList+0xe8>)
 801411a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 801411c:	4a21      	ldr	r2, [pc, #132]	; (80141a4 <prvAddNewTaskToReadyList+0xec>)
 801411e:	6813      	ldr	r3, [r2, #0]
 8014120:	3301      	adds	r3, #1
 8014122:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8014124:	4a20      	ldr	r2, [pc, #128]	; (80141a8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014126:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8014128:	6811      	ldr	r1, [r2, #0]
 801412a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801412c:	428b      	cmp	r3, r1
 801412e:	d900      	bls.n	8014132 <prvAddNewTaskToReadyList+0x7a>
 8014130:	6013      	str	r3, [r2, #0]
 8014132:	2014      	movs	r0, #20
 8014134:	1d21      	adds	r1, r4, #4
 8014136:	fb00 7003 	mla	r0, r0, r3, r7
 801413a:	f7ff f873 	bl	8013224 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801413e:	f7ff f929 	bl	8013394 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8014142:	4b1a      	ldr	r3, [pc, #104]	; (80141ac <prvAddNewTaskToReadyList+0xf4>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	b173      	cbz	r3, 8014166 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014148:	6833      	ldr	r3, [r6, #0]
 801414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801414c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801414e:	429a      	cmp	r2, r3
 8014150:	d209      	bcs.n	8014166 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8014152:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801415a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	f3bf 8f6f 	isb	sy
}
 8014166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 801416a:	4b10      	ldr	r3, [pc, #64]	; (80141ac <prvAddNewTaskToReadyList+0xf4>)
 801416c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801416e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8014170:	2a00      	cmp	r2, #0
 8014172:	d1d3      	bne.n	801411c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014174:	6832      	ldr	r2, [r6, #0]
 8014176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014178:	429a      	cmp	r2, r3
 801417a:	d8cf      	bhi.n	801411c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 801417c:	6034      	str	r4, [r6, #0]
 801417e:	e7cd      	b.n	801411c <prvAddNewTaskToReadyList+0x64>
 8014180:	2402ac80 	.word	0x2402ac80
 8014184:	2402a814 	.word	0x2402a814
 8014188:	2402a820 	.word	0x2402a820
 801418c:	2402aca8 	.word	0x2402aca8
 8014190:	2402acc8 	.word	0x2402acc8
 8014194:	2402acf4 	.word	0x2402acf4
 8014198:	2402ace0 	.word	0x2402ace0
 801419c:	2402a818 	.word	0x2402a818
 80141a0:	2402a81c 	.word	0x2402a81c
 80141a4:	2402ac8c 	.word	0x2402ac8c
 80141a8:	2402ac90 	.word	0x2402ac90
 80141ac:	2402acdc 	.word	0x2402acdc
 80141b0:	2402ac94 	.word	0x2402ac94

080141b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80141b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80141b6:	4b15      	ldr	r3, [pc, #84]	; (801420c <prvAddCurrentTaskToDelayedList+0x58>)
{
 80141b8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141ba:	4d15      	ldr	r5, [pc, #84]	; (8014210 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80141bc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80141be:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141c0:	6828      	ldr	r0, [r5, #0]
 80141c2:	3004      	adds	r0, #4
 80141c4:	f7ff f851 	bl	801326a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80141c8:	1c73      	adds	r3, r6, #1
 80141ca:	d107      	bne.n	80141dc <prvAddCurrentTaskToDelayedList+0x28>
 80141cc:	b137      	cbz	r7, 80141dc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141ce:	6829      	ldr	r1, [r5, #0]
 80141d0:	4810      	ldr	r0, [pc, #64]	; (8014214 <prvAddCurrentTaskToDelayedList+0x60>)
 80141d2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80141d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141d8:	f7ff b824 	b.w	8013224 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80141dc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80141de:	682b      	ldr	r3, [r5, #0]
 80141e0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80141e2:	d307      	bcc.n	80141f4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141e4:	4b0c      	ldr	r3, [pc, #48]	; (8014218 <prvAddCurrentTaskToDelayedList+0x64>)
 80141e6:	6818      	ldr	r0, [r3, #0]
 80141e8:	6829      	ldr	r1, [r5, #0]
}
 80141ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141ee:	3104      	adds	r1, #4
 80141f0:	f7ff b824 	b.w	801323c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141f4:	4b09      	ldr	r3, [pc, #36]	; (801421c <prvAddCurrentTaskToDelayedList+0x68>)
 80141f6:	6818      	ldr	r0, [r3, #0]
 80141f8:	6829      	ldr	r1, [r5, #0]
 80141fa:	3104      	adds	r1, #4
 80141fc:	f7ff f81e 	bl	801323c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014200:	4b07      	ldr	r3, [pc, #28]	; (8014220 <prvAddCurrentTaskToDelayedList+0x6c>)
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	42a2      	cmp	r2, r4
 8014206:	d900      	bls.n	801420a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8014208:	601c      	str	r4, [r3, #0]
}
 801420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801420c:	2402ad08 	.word	0x2402ad08
 8014210:	2402a814 	.word	0x2402a814
 8014214:	2402ace0 	.word	0x2402ace0
 8014218:	2402a81c 	.word	0x2402a81c
 801421c:	2402a818 	.word	0x2402a818
 8014220:	2402acbc 	.word	0x2402acbc

08014224 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014224:	4a06      	ldr	r2, [pc, #24]	; (8014240 <prvResetNextTaskUnblockTime+0x1c>)
 8014226:	6813      	ldr	r3, [r2, #0]
 8014228:	6819      	ldr	r1, [r3, #0]
 801422a:	4b06      	ldr	r3, [pc, #24]	; (8014244 <prvResetNextTaskUnblockTime+0x20>)
 801422c:	b919      	cbnz	r1, 8014236 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 801422e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014232:	601a      	str	r2, [r3, #0]
}
 8014234:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014236:	6812      	ldr	r2, [r2, #0]
 8014238:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801423a:	68d2      	ldr	r2, [r2, #12]
 801423c:	6852      	ldr	r2, [r2, #4]
 801423e:	e7f8      	b.n	8014232 <prvResetNextTaskUnblockTime+0xe>
 8014240:	2402a818 	.word	0x2402a818
 8014244:	2402acbc 	.word	0x2402acbc

08014248 <prvDeleteTCB>:
	{
 8014248:	b510      	push	{r4, lr}
 801424a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801424c:	3058      	adds	r0, #88	; 0x58
 801424e:	f017 fbf3 	bl	802ba38 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014252:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8014256:	b93b      	cbnz	r3, 8014268 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8014258:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801425a:	f7fe ff97 	bl	801318c <vPortFree>
				vPortFree( pxTCB );
 801425e:	4620      	mov	r0, r4
	}
 8014260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8014264:	f7fe bf92 	b.w	801318c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014268:	2b01      	cmp	r3, #1
 801426a:	d0f8      	beq.n	801425e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801426c:	2b02      	cmp	r3, #2
 801426e:	d008      	beq.n	8014282 <prvDeleteTCB+0x3a>
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	e7fe      	b.n	8014280 <prvDeleteTCB+0x38>
	}
 8014282:	bd10      	pop	{r4, pc}

08014284 <prvIdleTask>:
{
 8014284:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014286:	4c14      	ldr	r4, [pc, #80]	; (80142d8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014288:	4f14      	ldr	r7, [pc, #80]	; (80142dc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 801428a:	4d15      	ldr	r5, [pc, #84]	; (80142e0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801428c:	6823      	ldr	r3, [r4, #0]
 801428e:	b983      	cbnz	r3, 80142b2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014290:	4b14      	ldr	r3, [pc, #80]	; (80142e4 <prvIdleTask+0x60>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b01      	cmp	r3, #1
 8014296:	d909      	bls.n	80142ac <prvIdleTask+0x28>
				taskYIELD();
 8014298:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80142a4:	f3bf 8f4f 	dsb	sy
 80142a8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80142ac:	f7ec fe6f 	bl	8000f8e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80142b0:	e7eb      	b.n	801428a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80142b2:	f7ff f84f 	bl	8013354 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142ba:	1d30      	adds	r0, r6, #4
 80142bc:	f7fe ffd5 	bl	801326a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80142c0:	682b      	ldr	r3, [r5, #0]
 80142c2:	3b01      	subs	r3, #1
 80142c4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80142c6:	6823      	ldr	r3, [r4, #0]
 80142c8:	3b01      	subs	r3, #1
 80142ca:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80142cc:	f7ff f862 	bl	8013394 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80142d0:	4630      	mov	r0, r6
 80142d2:	f7ff ffb9 	bl	8014248 <prvDeleteTCB>
 80142d6:	e7d9      	b.n	801428c <prvIdleTask+0x8>
 80142d8:	2402ac84 	.word	0x2402ac84
 80142dc:	2402acf4 	.word	0x2402acf4
 80142e0:	2402ac80 	.word	0x2402ac80
 80142e4:	2402a820 	.word	0x2402a820

080142e8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80142e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80142ec:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80142f0:	4606      	mov	r6, r0
 80142f2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80142f4:	21a5      	movs	r1, #165	; 0xa5
 80142f6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80142f8:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142fa:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80142fe:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014302:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014304:	f017 fb3d 	bl	802b982 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014308:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801430a:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801430c:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 8014310:	2d00      	cmp	r5, #0
 8014312:	d043      	beq.n	801439c <prvInitialiseNewTask.constprop.0+0xb4>
 8014314:	1e6b      	subs	r3, r5, #1
 8014316:	f104 0233 	add.w	r2, r4, #51	; 0x33
 801431a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801431c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014320:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8014324:	b109      	cbz	r1, 801432a <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014326:	42ab      	cmp	r3, r5
 8014328:	d1f8      	bne.n	801431c <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801432a:	2300      	movs	r3, #0
 801432c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014330:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8014332:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014336:	1d20      	adds	r0, r4, #4
 8014338:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 801433a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 801433e:	bf28      	it	cs
 8014340:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8014342:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8014344:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014346:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801434a:	f7fe ff68 	bl	801321e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801434e:	f104 0018 	add.w	r0, r4, #24
 8014352:	f7fe ff64 	bl	801321e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014356:	224c      	movs	r2, #76	; 0x4c
 8014358:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 801435a:	f8c4 a0a4 	str.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801435e:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014362:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014364:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014366:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8014368:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801436c:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014370:	f017 fb07 	bl	802b982 <memset>
 8014374:	4b0b      	ldr	r3, [pc, #44]	; (80143a4 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014376:	4631      	mov	r1, r6
 8014378:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801437a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801437e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014380:	33d0      	adds	r3, #208	; 0xd0
 8014382:	6622      	str	r2, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014384:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014386:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014388:	f7fe ffbe 	bl	8013308 <pxPortInitialiseStack>
 801438c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801438e:	f1b8 0f00 	cmp.w	r8, #0
 8014392:	d001      	beq.n	8014398 <prvInitialiseNewTask.constprop.0+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014394:	f8c8 4000 	str.w	r4, [r8]
}
 8014398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801439c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80143a0:	e7c6      	b.n	8014330 <prvInitialiseNewTask.constprop.0+0x48>
 80143a2:	bf00      	nop
 80143a4:	2402b7c0 	.word	0x2402b7c0

080143a8 <xTaskCreateStatic>:
	{
 80143a8:	b570      	push	{r4, r5, r6, lr}
 80143aa:	b086      	sub	sp, #24
 80143ac:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80143b0:	b945      	cbnz	r5, 80143c4 <xTaskCreateStatic+0x1c>
 80143b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b6:	f383 8811 	msr	BASEPRI, r3
 80143ba:	f3bf 8f6f 	isb	sy
 80143be:	f3bf 8f4f 	dsb	sy
 80143c2:	e7fe      	b.n	80143c2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80143c4:	b944      	cbnz	r4, 80143d8 <xTaskCreateStatic+0x30>
 80143c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ca:	f383 8811 	msr	BASEPRI, r3
 80143ce:	f3bf 8f6f 	isb	sy
 80143d2:	f3bf 8f4f 	dsb	sy
 80143d6:	e7fe      	b.n	80143d6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80143d8:	26ac      	movs	r6, #172	; 0xac
 80143da:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80143dc:	9e05      	ldr	r6, [sp, #20]
 80143de:	2eac      	cmp	r6, #172	; 0xac
 80143e0:	d008      	beq.n	80143f4 <xTaskCreateStatic+0x4c>
 80143e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e6:	f383 8811 	msr	BASEPRI, r3
 80143ea:	f3bf 8f6f 	isb	sy
 80143ee:	f3bf 8f4f 	dsb	sy
 80143f2:	e7fe      	b.n	80143f2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80143f4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80143f6:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80143f8:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80143fa:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80143fe:	ad04      	add	r5, sp, #16
 8014400:	9402      	str	r4, [sp, #8]
 8014402:	9501      	str	r5, [sp, #4]
 8014404:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014406:	9500      	str	r5, [sp, #0]
 8014408:	f7ff ff6e 	bl	80142e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801440c:	4620      	mov	r0, r4
 801440e:	f7ff fe53 	bl	80140b8 <prvAddNewTaskToReadyList>
	}
 8014412:	9804      	ldr	r0, [sp, #16]
 8014414:	b006      	add	sp, #24
 8014416:	bd70      	pop	{r4, r5, r6, pc}

08014418 <xTaskCreate>:
	{
 8014418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801441c:	4607      	mov	r7, r0
 801441e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014420:	0090      	lsls	r0, r2, #2
	{
 8014422:	4688      	mov	r8, r1
 8014424:	4616      	mov	r6, r2
 8014426:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014428:	f7fe fe18 	bl	801305c <pvPortMalloc>
			if( pxStack != NULL )
 801442c:	4605      	mov	r5, r0
 801442e:	b1e8      	cbz	r0, 801446c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014430:	20ac      	movs	r0, #172	; 0xac
 8014432:	f7fe fe13 	bl	801305c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8014436:	4604      	mov	r4, r0
 8014438:	b1a8      	cbz	r0, 8014466 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801443a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 801443c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801443e:	4632      	mov	r2, r6
 8014440:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014442:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014448:	9002      	str	r0, [sp, #8]
 801444a:	4638      	mov	r0, r7
 801444c:	9301      	str	r3, [sp, #4]
 801444e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014450:	9300      	str	r3, [sp, #0]
 8014452:	464b      	mov	r3, r9
 8014454:	f7ff ff48 	bl	80142e8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014458:	4620      	mov	r0, r4
 801445a:	f7ff fe2d 	bl	80140b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801445e:	2001      	movs	r0, #1
	}
 8014460:	b005      	add	sp, #20
 8014462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8014466:	4628      	mov	r0, r5
 8014468:	f7fe fe90 	bl	801318c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801446c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8014470:	e7f6      	b.n	8014460 <xTaskCreate+0x48>
	...

08014474 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8014474:	4a02      	ldr	r2, [pc, #8]	; (8014480 <vTaskSuspendAll+0xc>)
 8014476:	6813      	ldr	r3, [r2, #0]
 8014478:	3301      	adds	r3, #1
 801447a:	6013      	str	r3, [r2, #0]
}
 801447c:	4770      	bx	lr
 801447e:	bf00      	nop
 8014480:	2402ac88 	.word	0x2402ac88

08014484 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8014484:	4b01      	ldr	r3, [pc, #4]	; (801448c <xTaskGetTickCount+0x8>)
 8014486:	6818      	ldr	r0, [r3, #0]
}
 8014488:	4770      	bx	lr
 801448a:	bf00      	nop
 801448c:	2402ad08 	.word	0x2402ad08

08014490 <xTaskGetTickCountFromISR>:
{
 8014490:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014492:	f7ff f875 	bl	8013580 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8014496:	4b01      	ldr	r3, [pc, #4]	; (801449c <xTaskGetTickCountFromISR+0xc>)
 8014498:	6818      	ldr	r0, [r3, #0]
}
 801449a:	bd08      	pop	{r3, pc}
 801449c:	2402ad08 	.word	0x2402ad08

080144a0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a0:	4b3f      	ldr	r3, [pc, #252]	; (80145a0 <xTaskIncrementTick+0x100>)
 80144a2:	681b      	ldr	r3, [r3, #0]
{
 80144a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d172      	bne.n	8014592 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144ac:	4b3d      	ldr	r3, [pc, #244]	; (80145a4 <xTaskIncrementTick+0x104>)
 80144ae:	681d      	ldr	r5, [r3, #0]
 80144b0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80144b2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80144b4:	b9bd      	cbnz	r5, 80144e6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80144b6:	4b3c      	ldr	r3, [pc, #240]	; (80145a8 <xTaskIncrementTick+0x108>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	6812      	ldr	r2, [r2, #0]
 80144bc:	b142      	cbz	r2, 80144d0 <xTaskIncrementTick+0x30>
 80144be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c2:	f383 8811 	msr	BASEPRI, r3
 80144c6:	f3bf 8f6f 	isb	sy
 80144ca:	f3bf 8f4f 	dsb	sy
 80144ce:	e7fe      	b.n	80144ce <xTaskIncrementTick+0x2e>
 80144d0:	4a36      	ldr	r2, [pc, #216]	; (80145ac <xTaskIncrementTick+0x10c>)
 80144d2:	6819      	ldr	r1, [r3, #0]
 80144d4:	6810      	ldr	r0, [r2, #0]
 80144d6:	6018      	str	r0, [r3, #0]
 80144d8:	6011      	str	r1, [r2, #0]
 80144da:	4a35      	ldr	r2, [pc, #212]	; (80145b0 <xTaskIncrementTick+0x110>)
 80144dc:	6813      	ldr	r3, [r2, #0]
 80144de:	3301      	adds	r3, #1
 80144e0:	6013      	str	r3, [r2, #0]
 80144e2:	f7ff fe9f 	bl	8014224 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80144e6:	4e33      	ldr	r6, [pc, #204]	; (80145b4 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 80144e8:	2400      	movs	r4, #0
 80144ea:	4f33      	ldr	r7, [pc, #204]	; (80145b8 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80144ec:	6833      	ldr	r3, [r6, #0]
 80144ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80145c4 <xTaskIncrementTick+0x124>
 80144f2:	429d      	cmp	r5, r3
 80144f4:	d211      	bcs.n	801451a <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80144f6:	f8d8 3000 	ldr.w	r3, [r8]
 80144fa:	2214      	movs	r2, #20
 80144fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144fe:	4353      	muls	r3, r2
 8014500:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8014502:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8014504:	4b2d      	ldr	r3, [pc, #180]	; (80145bc <xTaskIncrementTick+0x11c>)
 8014506:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8014508:	bf28      	it	cs
 801450a:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 801450c:	2b00      	cmp	r3, #0
 801450e:	bf18      	it	ne
 8014510:	2401      	movne	r4, #1
}
 8014512:	4620      	mov	r0, r4
 8014514:	b003      	add	sp, #12
 8014516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801451a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80145a8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 801451e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80145c8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014522:	f8d9 3000 	ldr.w	r3, [r9]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	b91b      	cbnz	r3, 8014532 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801452a:	f04f 33ff 	mov.w	r3, #4294967295
 801452e:	6033      	str	r3, [r6, #0]
					break;
 8014530:	e7e1      	b.n	80144f6 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014532:	f8d9 3000 	ldr.w	r3, [r9]
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801453c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8014540:	4295      	cmp	r5, r2
 8014542:	d201      	bcs.n	8014548 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8014544:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014546:	e7d6      	b.n	80144f6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014548:	f10b 0104 	add.w	r1, fp, #4
 801454c:	4608      	mov	r0, r1
 801454e:	9101      	str	r1, [sp, #4]
 8014550:	f7fe fe8b 	bl	801326a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014554:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8014558:	9901      	ldr	r1, [sp, #4]
 801455a:	b122      	cbz	r2, 8014566 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801455c:	f10b 0018 	add.w	r0, fp, #24
 8014560:	f7fe fe83 	bl	801326a <uxListRemove>
 8014564:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8014566:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801456a:	f8da 2000 	ldr.w	r2, [sl]
 801456e:	4290      	cmp	r0, r2
 8014570:	d901      	bls.n	8014576 <xTaskIncrementTick+0xd6>
 8014572:	f8ca 0000 	str.w	r0, [sl]
 8014576:	2314      	movs	r3, #20
 8014578:	fb03 7000 	mla	r0, r3, r0, r7
 801457c:	f7fe fe52 	bl	8013224 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014580:	f8d8 1000 	ldr.w	r1, [r8]
 8014584:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8014588:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801458a:	429a      	cmp	r2, r3
 801458c:	bf28      	it	cs
 801458e:	2401      	movcs	r4, #1
 8014590:	e7c7      	b.n	8014522 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8014592:	4a0b      	ldr	r2, [pc, #44]	; (80145c0 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8014594:	2400      	movs	r4, #0
		++xPendedTicks;
 8014596:	6813      	ldr	r3, [r2, #0]
 8014598:	3301      	adds	r3, #1
 801459a:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 801459c:	e7b9      	b.n	8014512 <xTaskIncrementTick+0x72>
 801459e:	bf00      	nop
 80145a0:	2402ac88 	.word	0x2402ac88
 80145a4:	2402ad08 	.word	0x2402ad08
 80145a8:	2402a818 	.word	0x2402a818
 80145ac:	2402a81c 	.word	0x2402a81c
 80145b0:	2402acc0 	.word	0x2402acc0
 80145b4:	2402acbc 	.word	0x2402acbc
 80145b8:	2402a820 	.word	0x2402a820
 80145bc:	2402ad0c 	.word	0x2402ad0c
 80145c0:	2402acc4 	.word	0x2402acc4
 80145c4:	2402a814 	.word	0x2402a814
 80145c8:	2402ac90 	.word	0x2402ac90

080145cc <xTaskResumeAll>:
{
 80145cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80145ce:	4c31      	ldr	r4, [pc, #196]	; (8014694 <xTaskResumeAll+0xc8>)
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	b943      	cbnz	r3, 80145e6 <xTaskResumeAll+0x1a>
 80145d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145d8:	f383 8811 	msr	BASEPRI, r3
 80145dc:	f3bf 8f6f 	isb	sy
 80145e0:	f3bf 8f4f 	dsb	sy
 80145e4:	e7fe      	b.n	80145e4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80145e6:	f7fe feb5 	bl	8013354 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	3b01      	subs	r3, #1
 80145ee:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145f0:	6824      	ldr	r4, [r4, #0]
 80145f2:	b12c      	cbz	r4, 8014600 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 80145f4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80145f6:	f7fe fecd 	bl	8013394 <vPortExitCritical>
}
 80145fa:	4620      	mov	r0, r4
 80145fc:	b003      	add	sp, #12
 80145fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014600:	4b25      	ldr	r3, [pc, #148]	; (8014698 <xTaskResumeAll+0xcc>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d0f5      	beq.n	80145f4 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014608:	4d24      	ldr	r5, [pc, #144]	; (801469c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 801460a:	4e25      	ldr	r6, [pc, #148]	; (80146a0 <xTaskResumeAll+0xd4>)
 801460c:	4f25      	ldr	r7, [pc, #148]	; (80146a4 <xTaskResumeAll+0xd8>)
 801460e:	e01e      	b.n	801464e <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014610:	68eb      	ldr	r3, [r5, #12]
 8014612:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014614:	f104 0018 	add.w	r0, r4, #24
 8014618:	f7fe fe27 	bl	801326a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801461c:	1d21      	adds	r1, r4, #4
 801461e:	4608      	mov	r0, r1
 8014620:	9101      	str	r1, [sp, #4]
 8014622:	f7fe fe22 	bl	801326a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014628:	6832      	ldr	r2, [r6, #0]
 801462a:	9901      	ldr	r1, [sp, #4]
 801462c:	4293      	cmp	r3, r2
 801462e:	d900      	bls.n	8014632 <xTaskResumeAll+0x66>
 8014630:	6033      	str	r3, [r6, #0]
 8014632:	2014      	movs	r0, #20
 8014634:	fb00 7003 	mla	r0, r0, r3, r7
 8014638:	f7fe fdf4 	bl	8013224 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801463c:	4b1a      	ldr	r3, [pc, #104]	; (80146a8 <xTaskResumeAll+0xdc>)
 801463e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014644:	429a      	cmp	r2, r3
 8014646:	d302      	bcc.n	801464e <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 8014648:	4b18      	ldr	r3, [pc, #96]	; (80146ac <xTaskResumeAll+0xe0>)
 801464a:	2201      	movs	r2, #1
 801464c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801464e:	682b      	ldr	r3, [r5, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d1dd      	bne.n	8014610 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8014654:	b10c      	cbz	r4, 801465a <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8014656:	f7ff fde5 	bl	8014224 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801465a:	4d15      	ldr	r5, [pc, #84]	; (80146b0 <xTaskResumeAll+0xe4>)
 801465c:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 801465e:	b144      	cbz	r4, 8014672 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8014660:	4e12      	ldr	r6, [pc, #72]	; (80146ac <xTaskResumeAll+0xe0>)
 8014662:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8014664:	f7ff ff1c 	bl	80144a0 <xTaskIncrementTick>
 8014668:	b100      	cbz	r0, 801466c <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 801466a:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801466c:	3c01      	subs	r4, #1
 801466e:	d1f9      	bne.n	8014664 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8014670:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8014672:	4b0e      	ldr	r3, [pc, #56]	; (80146ac <xTaskResumeAll+0xe0>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d0bc      	beq.n	80145f4 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 801467a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014682:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014686:	f3bf 8f4f 	dsb	sy
 801468a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801468e:	2401      	movs	r4, #1
 8014690:	e7b1      	b.n	80145f6 <xTaskResumeAll+0x2a>
 8014692:	bf00      	nop
 8014694:	2402ac88 	.word	0x2402ac88
 8014698:	2402ac80 	.word	0x2402ac80
 801469c:	2402acc8 	.word	0x2402acc8
 80146a0:	2402ac90 	.word	0x2402ac90
 80146a4:	2402a820 	.word	0x2402a820
 80146a8:	2402a814 	.word	0x2402a814
 80146ac:	2402ad0c 	.word	0x2402ad0c
 80146b0:	2402acc4 	.word	0x2402acc4

080146b4 <vTaskDelay>:
	{
 80146b4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146b6:	b950      	cbnz	r0, 80146ce <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80146b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80146bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80146c4:	f3bf 8f4f 	dsb	sy
 80146c8:	f3bf 8f6f 	isb	sy
	}
 80146cc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80146ce:	4b0a      	ldr	r3, [pc, #40]	; (80146f8 <vTaskDelay+0x44>)
 80146d0:	6819      	ldr	r1, [r3, #0]
 80146d2:	b141      	cbz	r1, 80146e6 <vTaskDelay+0x32>
 80146d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d8:	f383 8811 	msr	BASEPRI, r3
 80146dc:	f3bf 8f6f 	isb	sy
 80146e0:	f3bf 8f4f 	dsb	sy
 80146e4:	e7fe      	b.n	80146e4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80146e6:	f7ff fec5 	bl	8014474 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80146ea:	f7ff fd63 	bl	80141b4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80146ee:	f7ff ff6d 	bl	80145cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80146f2:	2800      	cmp	r0, #0
 80146f4:	d0e0      	beq.n	80146b8 <vTaskDelay+0x4>
 80146f6:	e7e9      	b.n	80146cc <vTaskDelay+0x18>
 80146f8:	2402ac88 	.word	0x2402ac88

080146fc <xTaskCallApplicationTaskHook>:
	{
 80146fc:	4603      	mov	r3, r0
 80146fe:	4608      	mov	r0, r1
		if( xTask == NULL )
 8014700:	b90b      	cbnz	r3, 8014706 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8014702:	4b03      	ldr	r3, [pc, #12]	; (8014710 <xTaskCallApplicationTaskHook+0x14>)
 8014704:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8014706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014708:	b103      	cbz	r3, 801470c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 801470a:	4718      	bx	r3
	}
 801470c:	4618      	mov	r0, r3
 801470e:	4770      	bx	lr
 8014710:	2402a814 	.word	0x2402a814

08014714 <vTaskStartScheduler>:
{
 8014714:	b510      	push	{r4, lr}
 8014716:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014718:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801471a:	aa07      	add	r2, sp, #28
 801471c:	a906      	add	r1, sp, #24
 801471e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014720:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014724:	f7fe fc5c 	bl	8012fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014728:	9b05      	ldr	r3, [sp, #20]
 801472a:	9a07      	ldr	r2, [sp, #28]
 801472c:	9302      	str	r3, [sp, #8]
 801472e:	9b06      	ldr	r3, [sp, #24]
 8014730:	491b      	ldr	r1, [pc, #108]	; (80147a0 <vTaskStartScheduler+0x8c>)
 8014732:	481c      	ldr	r0, [pc, #112]	; (80147a4 <vTaskStartScheduler+0x90>)
 8014734:	e9cd 4300 	strd	r4, r3, [sp]
 8014738:	4623      	mov	r3, r4
 801473a:	f7ff fe35 	bl	80143a8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801473e:	b360      	cbz	r0, 801479a <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 8014740:	f000 faa4 	bl	8014c8c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8014744:	2801      	cmp	r0, #1
 8014746:	d11d      	bne.n	8014784 <vTaskStartScheduler+0x70>
 8014748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801474c:	f383 8811 	msr	BASEPRI, r3
 8014750:	f3bf 8f6f 	isb	sy
 8014754:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014758:	4a13      	ldr	r2, [pc, #76]	; (80147a8 <vTaskStartScheduler+0x94>)
 801475a:	4914      	ldr	r1, [pc, #80]	; (80147ac <vTaskStartScheduler+0x98>)
 801475c:	6813      	ldr	r3, [r2, #0]
 801475e:	3358      	adds	r3, #88	; 0x58
 8014760:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8014762:	f04f 31ff 	mov.w	r1, #4294967295
 8014766:	4b12      	ldr	r3, [pc, #72]	; (80147b0 <vTaskStartScheduler+0x9c>)
 8014768:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 801476a:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 801476c:	4b11      	ldr	r3, [pc, #68]	; (80147b4 <vTaskStartScheduler+0xa0>)
 801476e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014770:	4b11      	ldr	r3, [pc, #68]	; (80147b8 <vTaskStartScheduler+0xa4>)
 8014772:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8014774:	6810      	ldr	r0, [r2, #0]
 8014776:	f7ff ffc1 	bl	80146fc <xTaskCallApplicationTaskHook>
}
 801477a:	b008      	add	sp, #32
 801477c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8014780:	f7fe be78 	b.w	8013474 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014784:	3001      	adds	r0, #1
 8014786:	d108      	bne.n	801479a <vTaskStartScheduler+0x86>
 8014788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801478c:	f383 8811 	msr	BASEPRI, r3
 8014790:	f3bf 8f6f 	isb	sy
 8014794:	f3bf 8f4f 	dsb	sy
 8014798:	e7fe      	b.n	8014798 <vTaskStartScheduler+0x84>
}
 801479a:	b008      	add	sp, #32
 801479c:	bd10      	pop	{r4, pc}
 801479e:	bf00      	nop
 80147a0:	0802f624 	.word	0x0802f624
 80147a4:	08014285 	.word	0x08014285
 80147a8:	2402a814 	.word	0x2402a814
 80147ac:	2400013c 	.word	0x2400013c
 80147b0:	2402acbc 	.word	0x2402acbc
 80147b4:	2402acdc 	.word	0x2402acdc
 80147b8:	2402ad08 	.word	0x2402ad08

080147bc <vTaskSwitchContext>:
{
 80147bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80147be:	4b23      	ldr	r3, [pc, #140]	; (801484c <vTaskSwitchContext+0x90>)
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	4b23      	ldr	r3, [pc, #140]	; (8014850 <vTaskSwitchContext+0x94>)
 80147c4:	b112      	cbz	r2, 80147cc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80147c6:	2201      	movs	r2, #1
 80147c8:	601a      	str	r2, [r3, #0]
}
 80147ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80147cc:	4c21      	ldr	r4, [pc, #132]	; (8014854 <vTaskSwitchContext+0x98>)
 80147ce:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 80147d0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80147d2:	6820      	ldr	r0, [r4, #0]
 80147d4:	f7ff ff92 	bl	80146fc <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 80147d8:	6822      	ldr	r2, [r4, #0]
 80147da:	6823      	ldr	r3, [r4, #0]
 80147dc:	6812      	ldr	r2, [r2, #0]
 80147de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d804      	bhi.n	80147ee <vTaskSwitchContext+0x32>
 80147e4:	6820      	ldr	r0, [r4, #0]
 80147e6:	6821      	ldr	r1, [r4, #0]
 80147e8:	3134      	adds	r1, #52	; 0x34
 80147ea:	f7ec fbd1 	bl	8000f90 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147ee:	4e1a      	ldr	r6, [pc, #104]	; (8014858 <vTaskSwitchContext+0x9c>)
 80147f0:	2714      	movs	r7, #20
 80147f2:	491a      	ldr	r1, [pc, #104]	; (801485c <vTaskSwitchContext+0xa0>)
 80147f4:	6832      	ldr	r2, [r6, #0]
 80147f6:	fb07 f302 	mul.w	r3, r7, r2
 80147fa:	58cd      	ldr	r5, [r1, r3]
 80147fc:	18c8      	adds	r0, r1, r3
 80147fe:	b1c5      	cbz	r5, 8014832 <vTaskSwitchContext+0x76>
 8014800:	6845      	ldr	r5, [r0, #4]
 8014802:	3308      	adds	r3, #8
 8014804:	686d      	ldr	r5, [r5, #4]
 8014806:	440b      	add	r3, r1
 8014808:	429d      	cmp	r5, r3
 801480a:	6045      	str	r5, [r0, #4]
 801480c:	bf04      	itt	eq
 801480e:	686b      	ldreq	r3, [r5, #4]
 8014810:	6043      	streq	r3, [r0, #4]
 8014812:	2314      	movs	r3, #20
 8014814:	fb03 1102 	mla	r1, r3, r2, r1
 8014818:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 801481a:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	6023      	str	r3, [r4, #0]
 8014820:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8014822:	6820      	ldr	r0, [r4, #0]
 8014824:	f7ff ff6a 	bl	80146fc <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	4a0d      	ldr	r2, [pc, #52]	; (8014860 <vTaskSwitchContext+0xa4>)
 801482c:	3358      	adds	r3, #88	; 0x58
 801482e:	6013      	str	r3, [r2, #0]
}
 8014830:	e7cb      	b.n	80147ca <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014832:	b942      	cbnz	r2, 8014846 <vTaskSwitchContext+0x8a>
 8014834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014838:	f383 8811 	msr	BASEPRI, r3
 801483c:	f3bf 8f6f 	isb	sy
 8014840:	f3bf 8f4f 	dsb	sy
 8014844:	e7fe      	b.n	8014844 <vTaskSwitchContext+0x88>
 8014846:	3a01      	subs	r2, #1
 8014848:	e7d5      	b.n	80147f6 <vTaskSwitchContext+0x3a>
 801484a:	bf00      	nop
 801484c:	2402ac88 	.word	0x2402ac88
 8014850:	2402ad0c 	.word	0x2402ad0c
 8014854:	2402a814 	.word	0x2402a814
 8014858:	2402ac90 	.word	0x2402ac90
 801485c:	2402a820 	.word	0x2402a820
 8014860:	2400013c 	.word	0x2400013c

08014864 <vTaskPlaceOnEventList>:
{
 8014864:	b510      	push	{r4, lr}
 8014866:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8014868:	b940      	cbnz	r0, 801487c <vTaskPlaceOnEventList+0x18>
 801486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486e:	f383 8811 	msr	BASEPRI, r3
 8014872:	f3bf 8f6f 	isb	sy
 8014876:	f3bf 8f4f 	dsb	sy
 801487a:	e7fe      	b.n	801487a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801487c:	4b05      	ldr	r3, [pc, #20]	; (8014894 <vTaskPlaceOnEventList+0x30>)
 801487e:	6819      	ldr	r1, [r3, #0]
 8014880:	3118      	adds	r1, #24
 8014882:	f7fe fcdb 	bl	801323c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014886:	4620      	mov	r0, r4
 8014888:	2101      	movs	r1, #1
}
 801488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801488e:	f7ff bc91 	b.w	80141b4 <prvAddCurrentTaskToDelayedList>
 8014892:	bf00      	nop
 8014894:	2402a814 	.word	0x2402a814

08014898 <vTaskPlaceOnEventListRestricted>:
	{
 8014898:	b538      	push	{r3, r4, r5, lr}
 801489a:	460d      	mov	r5, r1
 801489c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 801489e:	b940      	cbnz	r0, 80148b2 <vTaskPlaceOnEventListRestricted+0x1a>
 80148a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	e7fe      	b.n	80148b0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148b2:	4b07      	ldr	r3, [pc, #28]	; (80148d0 <vTaskPlaceOnEventListRestricted+0x38>)
 80148b4:	6819      	ldr	r1, [r3, #0]
 80148b6:	3118      	adds	r1, #24
 80148b8:	f7fe fcb4 	bl	8013224 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80148bc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80148be:	4621      	mov	r1, r4
 80148c0:	bf0c      	ite	eq
 80148c2:	4628      	moveq	r0, r5
 80148c4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80148c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80148cc:	f7ff bc72 	b.w	80141b4 <prvAddCurrentTaskToDelayedList>
 80148d0:	2402a814 	.word	0x2402a814

080148d4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148d4:	68c3      	ldr	r3, [r0, #12]
{
 80148d6:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80148da:	b944      	cbnz	r4, 80148ee <xTaskRemoveFromEventList+0x1a>
 80148dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e0:	f383 8811 	msr	BASEPRI, r3
 80148e4:	f3bf 8f6f 	isb	sy
 80148e8:	f3bf 8f4f 	dsb	sy
 80148ec:	e7fe      	b.n	80148ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80148ee:	f104 0118 	add.w	r1, r4, #24
 80148f2:	4608      	mov	r0, r1
 80148f4:	9101      	str	r1, [sp, #4]
 80148f6:	f7fe fcb8 	bl	801326a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148fa:	4b12      	ldr	r3, [pc, #72]	; (8014944 <xTaskRemoveFromEventList+0x70>)
 80148fc:	9901      	ldr	r1, [sp, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	b9e3      	cbnz	r3, 801493c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014902:	1d21      	adds	r1, r4, #4
 8014904:	4608      	mov	r0, r1
 8014906:	9101      	str	r1, [sp, #4]
 8014908:	f7fe fcaf 	bl	801326a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801490c:	4a0e      	ldr	r2, [pc, #56]	; (8014948 <xTaskRemoveFromEventList+0x74>)
 801490e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014910:	6810      	ldr	r0, [r2, #0]
 8014912:	9901      	ldr	r1, [sp, #4]
 8014914:	4283      	cmp	r3, r0
 8014916:	d900      	bls.n	801491a <xTaskRemoveFromEventList+0x46>
 8014918:	6013      	str	r3, [r2, #0]
 801491a:	4a0c      	ldr	r2, [pc, #48]	; (801494c <xTaskRemoveFromEventList+0x78>)
 801491c:	2014      	movs	r0, #20
 801491e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014922:	f7fe fc7f 	bl	8013224 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014926:	4b0a      	ldr	r3, [pc, #40]	; (8014950 <xTaskRemoveFromEventList+0x7c>)
 8014928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801492e:	429a      	cmp	r2, r3
 8014930:	d906      	bls.n	8014940 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8014932:	2001      	movs	r0, #1
 8014934:	4b07      	ldr	r3, [pc, #28]	; (8014954 <xTaskRemoveFromEventList+0x80>)
 8014936:	6018      	str	r0, [r3, #0]
}
 8014938:	b002      	add	sp, #8
 801493a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801493c:	4806      	ldr	r0, [pc, #24]	; (8014958 <xTaskRemoveFromEventList+0x84>)
 801493e:	e7f0      	b.n	8014922 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8014940:	2000      	movs	r0, #0
	return xReturn;
 8014942:	e7f9      	b.n	8014938 <xTaskRemoveFromEventList+0x64>
 8014944:	2402ac88 	.word	0x2402ac88
 8014948:	2402ac90 	.word	0x2402ac90
 801494c:	2402a820 	.word	0x2402a820
 8014950:	2402a814 	.word	0x2402a814
 8014954:	2402ad0c 	.word	0x2402ad0c
 8014958:	2402acc8 	.word	0x2402acc8

0801495c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801495c:	4b03      	ldr	r3, [pc, #12]	; (801496c <vTaskInternalSetTimeOutState+0x10>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014962:	4b03      	ldr	r3, [pc, #12]	; (8014970 <vTaskInternalSetTimeOutState+0x14>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	6043      	str	r3, [r0, #4]
}
 8014968:	4770      	bx	lr
 801496a:	bf00      	nop
 801496c:	2402acc0 	.word	0x2402acc0
 8014970:	2402ad08 	.word	0x2402ad08

08014974 <xTaskCheckForTimeOut>:
{
 8014974:	b570      	push	{r4, r5, r6, lr}
 8014976:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8014978:	4605      	mov	r5, r0
 801497a:	b940      	cbnz	r0, 801498e <xTaskCheckForTimeOut+0x1a>
 801497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014980:	f383 8811 	msr	BASEPRI, r3
 8014984:	f3bf 8f6f 	isb	sy
 8014988:	f3bf 8f4f 	dsb	sy
 801498c:	e7fe      	b.n	801498c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801498e:	b941      	cbnz	r1, 80149a2 <xTaskCheckForTimeOut+0x2e>
 8014990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014994:	f383 8811 	msr	BASEPRI, r3
 8014998:	f3bf 8f6f 	isb	sy
 801499c:	f3bf 8f4f 	dsb	sy
 80149a0:	e7fe      	b.n	80149a0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80149a2:	f7fe fcd7 	bl	8013354 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80149a6:	4b0f      	ldr	r3, [pc, #60]	; (80149e4 <xTaskCheckForTimeOut+0x70>)
 80149a8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	1c5a      	adds	r2, r3, #1
 80149ae:	d010      	beq.n	80149d2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80149b0:	480d      	ldr	r0, [pc, #52]	; (80149e8 <xTaskCheckForTimeOut+0x74>)
 80149b2:	682e      	ldr	r6, [r5, #0]
 80149b4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80149b6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80149b8:	4286      	cmp	r6, r0
 80149ba:	d001      	beq.n	80149c0 <xTaskCheckForTimeOut+0x4c>
 80149bc:	428a      	cmp	r2, r1
 80149be:	d90f      	bls.n	80149e0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80149c0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80149c2:	4283      	cmp	r3, r0
 80149c4:	d90a      	bls.n	80149dc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80149c6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80149c8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80149ca:	4413      	add	r3, r2
 80149cc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80149ce:	f7ff ffc5 	bl	801495c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80149d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80149d4:	f7fe fcde 	bl	8013394 <vPortExitCritical>
}
 80149d8:	4620      	mov	r0, r4
 80149da:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80149dc:	2300      	movs	r3, #0
 80149de:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80149e0:	2401      	movs	r4, #1
 80149e2:	e7f7      	b.n	80149d4 <xTaskCheckForTimeOut+0x60>
 80149e4:	2402ad08 	.word	0x2402ad08
 80149e8:	2402acc0 	.word	0x2402acc0

080149ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80149ec:	4b01      	ldr	r3, [pc, #4]	; (80149f4 <vTaskMissedYield+0x8>)
 80149ee:	2201      	movs	r2, #1
 80149f0:	601a      	str	r2, [r3, #0]
}
 80149f2:	4770      	bx	lr
 80149f4:	2402ad0c 	.word	0x2402ad0c

080149f8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80149f8:	4b01      	ldr	r3, [pc, #4]	; (8014a00 <xTaskGetCurrentTaskHandle+0x8>)
 80149fa:	6818      	ldr	r0, [r3, #0]
	}
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop
 8014a00:	2402a814 	.word	0x2402a814

08014a04 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8014a04:	4b05      	ldr	r3, [pc, #20]	; (8014a1c <xTaskGetSchedulerState+0x18>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	b133      	cbz	r3, 8014a18 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a0a:	4b05      	ldr	r3, [pc, #20]	; (8014a20 <xTaskGetSchedulerState+0x1c>)
 8014a0c:	6818      	ldr	r0, [r3, #0]
 8014a0e:	fab0 f080 	clz	r0, r0
 8014a12:	0940      	lsrs	r0, r0, #5
 8014a14:	0040      	lsls	r0, r0, #1
 8014a16:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014a18:	2001      	movs	r0, #1
	}
 8014a1a:	4770      	bx	lr
 8014a1c:	2402acdc 	.word	0x2402acdc
 8014a20:	2402ac88 	.word	0x2402ac88

08014a24 <xTaskPriorityInherit>:
	{
 8014a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8014a26:	4604      	mov	r4, r0
 8014a28:	b340      	cbz	r0, 8014a7c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014a2a:	4d1b      	ldr	r5, [pc, #108]	; (8014a98 <xTaskPriorityInherit+0x74>)
 8014a2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014a2e:	682a      	ldr	r2, [r5, #0]
 8014a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014a32:	4293      	cmp	r3, r2
 8014a34:	d228      	bcs.n	8014a88 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014a36:	6982      	ldr	r2, [r0, #24]
 8014a38:	2a00      	cmp	r2, #0
 8014a3a:	db04      	blt.n	8014a46 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a3c:	682a      	ldr	r2, [r5, #0]
 8014a3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014a40:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014a44:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014a46:	2214      	movs	r2, #20
 8014a48:	4e14      	ldr	r6, [pc, #80]	; (8014a9c <xTaskPriorityInherit+0x78>)
 8014a4a:	fb02 6303 	mla	r3, r2, r3, r6
 8014a4e:	6962      	ldr	r2, [r4, #20]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d115      	bne.n	8014a80 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a54:	1d21      	adds	r1, r4, #4
 8014a56:	4608      	mov	r0, r1
 8014a58:	9101      	str	r1, [sp, #4]
 8014a5a:	f7fe fc06 	bl	801326a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014a5e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014a60:	4a0f      	ldr	r2, [pc, #60]	; (8014aa0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014a64:	6810      	ldr	r0, [r2, #0]
 8014a66:	9901      	ldr	r1, [sp, #4]
 8014a68:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014a6c:	d900      	bls.n	8014a70 <xTaskPriorityInherit+0x4c>
 8014a6e:	6013      	str	r3, [r2, #0]
 8014a70:	2014      	movs	r0, #20
 8014a72:	fb00 6003 	mla	r0, r0, r3, r6
 8014a76:	f7fe fbd5 	bl	8013224 <vListInsertEnd>
				xReturn = pdTRUE;
 8014a7a:	2001      	movs	r0, #1
	}
 8014a7c:	b002      	add	sp, #8
 8014a7e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014a80:	682b      	ldr	r3, [r5, #0]
 8014a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a86:	e7f8      	b.n	8014a7a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a8e:	4298      	cmp	r0, r3
 8014a90:	bf2c      	ite	cs
 8014a92:	2000      	movcs	r0, #0
 8014a94:	2001      	movcc	r0, #1
 8014a96:	e7f1      	b.n	8014a7c <xTaskPriorityInherit+0x58>
 8014a98:	2402a814 	.word	0x2402a814
 8014a9c:	2402a820 	.word	0x2402a820
 8014aa0:	2402ac90 	.word	0x2402ac90

08014aa4 <xTaskPriorityDisinherit>:
	{
 8014aa4:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8014aa6:	b910      	cbnz	r0, 8014aae <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8014aa8:	2000      	movs	r0, #0
	}
 8014aaa:	b002      	add	sp, #8
 8014aac:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8014aae:	4b1c      	ldr	r3, [pc, #112]	; (8014b20 <xTaskPriorityDisinherit+0x7c>)
 8014ab0:	681c      	ldr	r4, [r3, #0]
 8014ab2:	4284      	cmp	r4, r0
 8014ab4:	d008      	beq.n	8014ac8 <xTaskPriorityDisinherit+0x24>
 8014ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aba:	f383 8811 	msr	BASEPRI, r3
 8014abe:	f3bf 8f6f 	isb	sy
 8014ac2:	f3bf 8f4f 	dsb	sy
 8014ac6:	e7fe      	b.n	8014ac6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8014ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014aca:	b943      	cbnz	r3, 8014ade <xTaskPriorityDisinherit+0x3a>
 8014acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad0:	f383 8811 	msr	BASEPRI, r3
 8014ad4:	f3bf 8f6f 	isb	sy
 8014ad8:	f3bf 8f4f 	dsb	sy
 8014adc:	e7fe      	b.n	8014adc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014ade:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8014ae0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014ae2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8014ae4:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014ae6:	4291      	cmp	r1, r2
 8014ae8:	d0de      	beq.n	8014aa8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d1dc      	bne.n	8014aa8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014aee:	1d21      	adds	r1, r4, #4
 8014af0:	4608      	mov	r0, r1
 8014af2:	9101      	str	r1, [sp, #4]
 8014af4:	f7fe fbb9 	bl	801326a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014af8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8014afa:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014afc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014b00:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b02:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014b04:	4a07      	ldr	r2, [pc, #28]	; (8014b24 <xTaskPriorityDisinherit+0x80>)
 8014b06:	6810      	ldr	r0, [r2, #0]
 8014b08:	4283      	cmp	r3, r0
 8014b0a:	d900      	bls.n	8014b0e <xTaskPriorityDisinherit+0x6a>
 8014b0c:	6013      	str	r3, [r2, #0]
 8014b0e:	4a06      	ldr	r2, [pc, #24]	; (8014b28 <xTaskPriorityDisinherit+0x84>)
 8014b10:	2014      	movs	r0, #20
 8014b12:	fb00 2003 	mla	r0, r0, r3, r2
 8014b16:	f7fe fb85 	bl	8013224 <vListInsertEnd>
					xReturn = pdTRUE;
 8014b1a:	2001      	movs	r0, #1
		return xReturn;
 8014b1c:	e7c5      	b.n	8014aaa <xTaskPriorityDisinherit+0x6>
 8014b1e:	bf00      	nop
 8014b20:	2402a814 	.word	0x2402a814
 8014b24:	2402ac90 	.word	0x2402ac90
 8014b28:	2402a820 	.word	0x2402a820

08014b2c <vTaskPriorityDisinheritAfterTimeout>:
	{
 8014b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8014b2e:	4604      	mov	r4, r0
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d044      	beq.n	8014bbe <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 8014b34:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8014b36:	b942      	cbnz	r2, 8014b4a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8014b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b3c:	f383 8811 	msr	BASEPRI, r3
 8014b40:	f3bf 8f6f 	isb	sy
 8014b44:	f3bf 8f4f 	dsb	sy
 8014b48:	e7fe      	b.n	8014b48 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014b4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014b4c:	4299      	cmp	r1, r3
 8014b4e:	bf38      	it	cc
 8014b50:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014b52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014b54:	428b      	cmp	r3, r1
 8014b56:	d032      	beq.n	8014bbe <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014b58:	2a01      	cmp	r2, #1
 8014b5a:	d130      	bne.n	8014bbe <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8014b5c:	4a19      	ldr	r2, [pc, #100]	; (8014bc4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8014b5e:	6812      	ldr	r2, [r2, #0]
 8014b60:	4282      	cmp	r2, r0
 8014b62:	d108      	bne.n	8014b76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8014b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b68:	f383 8811 	msr	BASEPRI, r3
 8014b6c:	f3bf 8f6f 	isb	sy
 8014b70:	f3bf 8f4f 	dsb	sy
 8014b74:	e7fe      	b.n	8014b74 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014b76:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b78:	4d13      	ldr	r5, [pc, #76]	; (8014bc8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014b7a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b7c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8014b80:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b82:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b86:	bfa8      	it	ge
 8014b88:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b8c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b8e:	bfa8      	it	ge
 8014b90:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d113      	bne.n	8014bbe <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b96:	1d01      	adds	r1, r0, #4
 8014b98:	4608      	mov	r0, r1
 8014b9a:	9101      	str	r1, [sp, #4]
 8014b9c:	f7fe fb65 	bl	801326a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8014ba0:	4a0a      	ldr	r2, [pc, #40]	; (8014bcc <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8014ba2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014ba4:	6810      	ldr	r0, [r2, #0]
 8014ba6:	9901      	ldr	r1, [sp, #4]
 8014ba8:	4283      	cmp	r3, r0
 8014baa:	d900      	bls.n	8014bae <vTaskPriorityDisinheritAfterTimeout+0x82>
 8014bac:	6013      	str	r3, [r2, #0]
 8014bae:	2014      	movs	r0, #20
 8014bb0:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8014bb4:	b003      	add	sp, #12
 8014bb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8014bba:	f7fe bb33 	b.w	8013224 <vListInsertEnd>
	}
 8014bbe:	b003      	add	sp, #12
 8014bc0:	bd30      	pop	{r4, r5, pc}
 8014bc2:	bf00      	nop
 8014bc4:	2402a814 	.word	0x2402a814
 8014bc8:	2402a820 	.word	0x2402a820
 8014bcc:	2402ac90 	.word	0x2402ac90

08014bd0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8014bd0:	4b04      	ldr	r3, [pc, #16]	; (8014be4 <pvTaskIncrementMutexHeldCount+0x14>)
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	b11a      	cbz	r2, 8014bde <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8014bd6:	6819      	ldr	r1, [r3, #0]
 8014bd8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8014bda:	3201      	adds	r2, #1
 8014bdc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8014bde:	6818      	ldr	r0, [r3, #0]
	}
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	2402a814 	.word	0x2402a814

08014be8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8014bea:	4c11      	ldr	r4, [pc, #68]	; (8014c30 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8014bec:	f7fe fbb2 	bl	8013354 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8014bf0:	6825      	ldr	r5, [r4, #0]
 8014bf2:	b9bd      	cbnz	r5, 8014c24 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8014bf4:	4f0f      	ldr	r7, [pc, #60]	; (8014c34 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8014bf6:	4e10      	ldr	r6, [pc, #64]	; (8014c38 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8014bf8:	4638      	mov	r0, r7
 8014bfa:	f7fe fb05 	bl	8013208 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014bfe:	4630      	mov	r0, r6
 8014c00:	f7fe fb02 	bl	8013208 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014c04:	4b0d      	ldr	r3, [pc, #52]	; (8014c3c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c06:	4a0e      	ldr	r2, [pc, #56]	; (8014c40 <prvCheckForValidListAndQueue+0x58>)
 8014c08:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8014c0a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c0c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8014c0e:	4b0d      	ldr	r3, [pc, #52]	; (8014c44 <prvCheckForValidListAndQueue+0x5c>)
 8014c10:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014c12:	4b0d      	ldr	r3, [pc, #52]	; (8014c48 <prvCheckForValidListAndQueue+0x60>)
 8014c14:	9500      	str	r5, [sp, #0]
 8014c16:	f7fe fdad 	bl	8013774 <xQueueGenericCreateStatic>
 8014c1a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014c1c:	b110      	cbz	r0, 8014c24 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014c1e:	490b      	ldr	r1, [pc, #44]	; (8014c4c <prvCheckForValidListAndQueue+0x64>)
 8014c20:	f7ff f9ea 	bl	8013ff8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8014c24:	b003      	add	sp, #12
 8014c26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8014c2a:	f7fe bbb3 	b.w	8013394 <vPortExitCritical>
 8014c2e:	bf00      	nop
 8014c30:	2402ae34 	.word	0x2402ae34
 8014c34:	2402adb8 	.word	0x2402adb8
 8014c38:	2402adcc 	.word	0x2402adcc
 8014c3c:	2402ad10 	.word	0x2402ad10
 8014c40:	2402ad18 	.word	0x2402ad18
 8014c44:	2402ad14 	.word	0x2402ad14
 8014c48:	2402ade4 	.word	0x2402ade4
 8014c4c:	0802f629 	.word	0x0802f629

08014c50 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8014c50:	4291      	cmp	r1, r2
{
 8014c52:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014c54:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c56:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8014c58:	d80a      	bhi.n	8014c70 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	6982      	ldr	r2, [r0, #24]
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d20d      	bcs.n	8014c7e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014c62:	1d01      	adds	r1, r0, #4
 8014c64:	4b07      	ldr	r3, [pc, #28]	; (8014c84 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014c66:	6818      	ldr	r0, [r3, #0]
 8014c68:	f7fe fae8 	bl	801323c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8014c6c:	2000      	movs	r0, #0
}
 8014c6e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d201      	bcs.n	8014c78 <prvInsertTimerInActiveList+0x28>
 8014c74:	4299      	cmp	r1, r3
 8014c76:	d202      	bcs.n	8014c7e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014c78:	1d01      	adds	r1, r0, #4
 8014c7a:	4b03      	ldr	r3, [pc, #12]	; (8014c88 <prvInsertTimerInActiveList+0x38>)
 8014c7c:	e7f3      	b.n	8014c66 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8014c7e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8014c80:	e7f5      	b.n	8014c6e <prvInsertTimerInActiveList+0x1e>
 8014c82:	bf00      	nop
 8014c84:	2402ad14 	.word	0x2402ad14
 8014c88:	2402ad10 	.word	0x2402ad10

08014c8c <xTimerCreateTimerTask>:
{
 8014c8c:	b510      	push	{r4, lr}
 8014c8e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8014c90:	f7ff ffaa 	bl	8014be8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8014c94:	4b12      	ldr	r3, [pc, #72]	; (8014ce0 <xTimerCreateTimerTask+0x54>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	b1b3      	cbz	r3, 8014cc8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014c9a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014c9c:	aa07      	add	r2, sp, #28
 8014c9e:	a906      	add	r1, sp, #24
 8014ca0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014ca2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014ca6:	f7fe f9a7 	bl	8012ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014caa:	9b05      	ldr	r3, [sp, #20]
 8014cac:	9a07      	ldr	r2, [sp, #28]
 8014cae:	9302      	str	r3, [sp, #8]
 8014cb0:	9b06      	ldr	r3, [sp, #24]
 8014cb2:	490c      	ldr	r1, [pc, #48]	; (8014ce4 <xTimerCreateTimerTask+0x58>)
 8014cb4:	9301      	str	r3, [sp, #4]
 8014cb6:	2302      	movs	r3, #2
 8014cb8:	480b      	ldr	r0, [pc, #44]	; (8014ce8 <xTimerCreateTimerTask+0x5c>)
 8014cba:	9300      	str	r3, [sp, #0]
 8014cbc:	4623      	mov	r3, r4
 8014cbe:	f7ff fb73 	bl	80143a8 <xTaskCreateStatic>
 8014cc2:	4b0a      	ldr	r3, [pc, #40]	; (8014cec <xTimerCreateTimerTask+0x60>)
 8014cc4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8014cc6:	b940      	cbnz	r0, 8014cda <xTimerCreateTimerTask+0x4e>
 8014cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ccc:	f383 8811 	msr	BASEPRI, r3
 8014cd0:	f3bf 8f6f 	isb	sy
 8014cd4:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8014cd8:	e7fe      	b.n	8014cd8 <xTimerCreateTimerTask+0x4c>
}
 8014cda:	2001      	movs	r0, #1
 8014cdc:	b008      	add	sp, #32
 8014cde:	bd10      	pop	{r4, pc}
 8014ce0:	2402ae34 	.word	0x2402ae34
 8014ce4:	0802f62e 	.word	0x0802f62e
 8014ce8:	08014df1 	.word	0x08014df1
 8014cec:	2402ae38 	.word	0x2402ae38

08014cf0 <xTimerGenericCommand>:
{
 8014cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014cf2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8014cf4:	4604      	mov	r4, r0
{
 8014cf6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8014cf8:	b940      	cbnz	r0, 8014d0c <xTimerGenericCommand+0x1c>
 8014cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfe:	f383 8811 	msr	BASEPRI, r3
 8014d02:	f3bf 8f6f 	isb	sy
 8014d06:	f3bf 8f4f 	dsb	sy
 8014d0a:	e7fe      	b.n	8014d0a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8014d0c:	4d0c      	ldr	r5, [pc, #48]	; (8014d40 <xTimerGenericCommand+0x50>)
 8014d0e:	6828      	ldr	r0, [r5, #0]
 8014d10:	b178      	cbz	r0, 8014d32 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014d12:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014d14:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014d16:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014d1a:	dc0c      	bgt.n	8014d36 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014d1c:	f7ff fe72 	bl	8014a04 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014d20:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014d22:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014d24:	4669      	mov	r1, sp
 8014d26:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014d28:	bf0c      	ite	eq
 8014d2a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014d2c:	461a      	movne	r2, r3
 8014d2e:	f7fe fdd6 	bl	80138de <xQueueGenericSend>
}
 8014d32:	b004      	add	sp, #16
 8014d34:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014d36:	2300      	movs	r3, #0
 8014d38:	4669      	mov	r1, sp
 8014d3a:	f7fe fed3 	bl	8013ae4 <xQueueGenericSendFromISR>
 8014d3e:	e7f8      	b.n	8014d32 <xTimerGenericCommand+0x42>
 8014d40:	2402ae34 	.word	0x2402ae34

08014d44 <prvSampleTimeNow>:
{
 8014d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8014d48:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8014dec <prvSampleTimeNow+0xa8>
{
 8014d4c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8014d4e:	f7ff fb99 	bl	8014484 <xTaskGetTickCount>
 8014d52:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8014d54:	f8d8 3000 	ldr.w	r3, [r8]
 8014d58:	4283      	cmp	r3, r0
 8014d5a:	d90b      	bls.n	8014d74 <prvSampleTimeNow+0x30>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014d5c:	4f21      	ldr	r7, [pc, #132]	; (8014de4 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014d5e:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	b96a      	cbnz	r2, 8014d84 <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8014d68:	4a1f      	ldr	r2, [pc, #124]	; (8014de8 <prvSampleTimeNow+0xa4>)
 8014d6a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014d6c:	6013      	str	r3, [r2, #0]
 8014d6e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8014d70:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8014d72:	e000      	b.n	8014d76 <prvSampleTimeNow+0x32>
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8014d78:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8014d7a:	f8c8 5000 	str.w	r5, [r8]
}
 8014d7e:	b004      	add	sp, #16
 8014d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014d84:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d86:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014d88:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d8c:	1d21      	adds	r1, r4, #4
 8014d8e:	4608      	mov	r0, r1
 8014d90:	9103      	str	r1, [sp, #12]
 8014d92:	f7fe fa6a 	bl	801326a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d96:	6a23      	ldr	r3, [r4, #32]
 8014d98:	4620      	mov	r0, r4
 8014d9a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014d9c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014da0:	9903      	ldr	r1, [sp, #12]
 8014da2:	f013 0f04 	tst.w	r3, #4
 8014da6:	d0dc      	beq.n	8014d62 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014da8:	69a3      	ldr	r3, [r4, #24]
 8014daa:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8014dac:	459a      	cmp	sl, r3
 8014dae:	d205      	bcs.n	8014dbc <prvSampleTimeNow+0x78>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014db0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014db2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014db4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014db6:	f7fe fa41 	bl	801323c <vListInsert>
 8014dba:	e7d2      	b.n	8014d62 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	4652      	mov	r2, sl
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f8cd 9000 	str.w	r9, [sp]
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	f7ff ff92 	bl	8014cf0 <xTimerGenericCommand>
				configASSERT( xResult );
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d1c8      	bne.n	8014d62 <prvSampleTimeNow+0x1e>
 8014dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd4:	f383 8811 	msr	BASEPRI, r3
 8014dd8:	f3bf 8f6f 	isb	sy
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	e7fe      	b.n	8014de0 <prvSampleTimeNow+0x9c>
 8014de2:	bf00      	nop
 8014de4:	2402ad10 	.word	0x2402ad10
 8014de8:	2402ad14 	.word	0x2402ad14
 8014dec:	2402ade0 	.word	0x2402ade0

08014df0 <prvTimerTask>:
{
 8014df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014df4:	4d6e      	ldr	r5, [pc, #440]	; (8014fb0 <prvTimerTask+0x1c0>)
{
 8014df6:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014df8:	4e6e      	ldr	r6, [pc, #440]	; (8014fb4 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014dfa:	682b      	ldr	r3, [r5, #0]
 8014dfc:	f8d3 8000 	ldr.w	r8, [r3]
 8014e00:	f1b8 0f00 	cmp.w	r8, #0
 8014e04:	d035      	beq.n	8014e72 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e06:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014e08:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e0a:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8014e0e:	f7ff fb31 	bl	8014474 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014e12:	a804      	add	r0, sp, #16
 8014e14:	f7ff ff96 	bl	8014d44 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8014e18:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014e1a:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d169      	bne.n	8014ef4 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014e20:	2c00      	cmp	r4, #0
 8014e22:	d14c      	bne.n	8014ebe <prvTimerTask+0xce>
 8014e24:	4540      	cmp	r0, r8
 8014e26:	d350      	bcc.n	8014eca <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8014e28:	f7ff fbd0 	bl	80145cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e2c:	682b      	ldr	r3, [r5, #0]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014e32:	1d38      	adds	r0, r7, #4
 8014e34:	f7fe fa19 	bl	801326a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014e38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e3c:	0758      	lsls	r0, r3, #29
 8014e3e:	d51a      	bpl.n	8014e76 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014e40:	69b9      	ldr	r1, [r7, #24]
 8014e42:	4643      	mov	r3, r8
 8014e44:	464a      	mov	r2, r9
 8014e46:	4638      	mov	r0, r7
 8014e48:	4441      	add	r1, r8
 8014e4a:	f7ff ff01 	bl	8014c50 <prvInsertTimerInActiveList>
 8014e4e:	b1b0      	cbz	r0, 8014e7e <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014e50:	4623      	mov	r3, r4
 8014e52:	4642      	mov	r2, r8
 8014e54:	4621      	mov	r1, r4
 8014e56:	4638      	mov	r0, r7
 8014e58:	9400      	str	r4, [sp, #0]
 8014e5a:	f7ff ff49 	bl	8014cf0 <xTimerGenericCommand>
			configASSERT( xResult );
 8014e5e:	b970      	cbnz	r0, 8014e7e <prvTimerTask+0x8e>
 8014e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e64:	f383 8811 	msr	BASEPRI, r3
 8014e68:	f3bf 8f6f 	isb	sy
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	e7fe      	b.n	8014e70 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014e72:	2401      	movs	r4, #1
 8014e74:	e7cb      	b.n	8014e0e <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e76:	f023 0301 	bic.w	r3, r3, #1
 8014e7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014e7e:	6a3b      	ldr	r3, [r7, #32]
 8014e80:	4638      	mov	r0, r7
 8014e82:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014e84:	2200      	movs	r2, #0
 8014e86:	a904      	add	r1, sp, #16
 8014e88:	6830      	ldr	r0, [r6, #0]
 8014e8a:	f7fe fee1 	bl	8013c50 <xQueueReceive>
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d0b3      	beq.n	8014dfa <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014e92:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014e94:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	db2f      	blt.n	8014efa <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014e9a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014e9c:	6963      	ldr	r3, [r4, #20]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d132      	bne.n	8014f08 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014ea2:	a803      	add	r0, sp, #12
 8014ea4:	f7ff ff4e 	bl	8014d44 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8014ea8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014eaa:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8014eac:	2b09      	cmp	r3, #9
 8014eae:	d8e9      	bhi.n	8014e84 <prvTimerTask+0x94>
 8014eb0:	e8df f003 	tbb	[pc, r3]
 8014eb4:	572e2e2e 	.word	0x572e2e2e
 8014eb8:	2e2e765e 	.word	0x2e2e765e
 8014ebc:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014ebe:	4b3e      	ldr	r3, [pc, #248]	; (8014fb8 <prvTimerTask+0x1c8>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	681c      	ldr	r4, [r3, #0]
 8014ec4:	fab4 f484 	clz	r4, r4
 8014ec8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014eca:	4622      	mov	r2, r4
 8014ecc:	eba8 0109 	sub.w	r1, r8, r9
 8014ed0:	6830      	ldr	r0, [r6, #0]
 8014ed2:	f7ff f8ce 	bl	8014072 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014ed6:	f7ff fb79 	bl	80145cc <xTaskResumeAll>
 8014eda:	2800      	cmp	r0, #0
 8014edc:	d1d2      	bne.n	8014e84 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8014ede:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ee6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014eea:	f3bf 8f4f 	dsb	sy
 8014eee:	f3bf 8f6f 	isb	sy
 8014ef2:	e7c7      	b.n	8014e84 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8014ef4:	f7ff fb6a 	bl	80145cc <xTaskResumeAll>
}
 8014ef8:	e7c4      	b.n	8014e84 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014efa:	9b05      	ldr	r3, [sp, #20]
 8014efc:	9907      	ldr	r1, [sp, #28]
 8014efe:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014f00:	9b04      	ldr	r3, [sp, #16]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	dbbe      	blt.n	8014e84 <prvTimerTask+0x94>
 8014f06:	e7c8      	b.n	8014e9a <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014f08:	1d20      	adds	r0, r4, #4
 8014f0a:	f7fe f9ae 	bl	801326a <uxListRemove>
 8014f0e:	e7c8      	b.n	8014ea2 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014f10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014f14:	4620      	mov	r0, r4
 8014f16:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014f18:	f043 0301 	orr.w	r3, r3, #1
 8014f1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014f20:	9b05      	ldr	r3, [sp, #20]
 8014f22:	4419      	add	r1, r3
 8014f24:	f7ff fe94 	bl	8014c50 <prvInsertTimerInActiveList>
 8014f28:	2800      	cmp	r0, #0
 8014f2a:	d0ab      	beq.n	8014e84 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014f2c:	6a23      	ldr	r3, [r4, #32]
 8014f2e:	4620      	mov	r0, r4
 8014f30:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014f32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014f36:	0759      	lsls	r1, r3, #29
 8014f38:	d5a4      	bpl.n	8014e84 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014f3a:	69a2      	ldr	r2, [r4, #24]
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	9905      	ldr	r1, [sp, #20]
 8014f40:	4620      	mov	r0, r4
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	440a      	add	r2, r1
 8014f46:	4619      	mov	r1, r3
 8014f48:	f7ff fed2 	bl	8014cf0 <xTimerGenericCommand>
							configASSERT( xResult );
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d199      	bne.n	8014e84 <prvTimerTask+0x94>
 8014f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f54:	f383 8811 	msr	BASEPRI, r3
 8014f58:	f3bf 8f6f 	isb	sy
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	e7fe      	b.n	8014f60 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014f62:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014f66:	f023 0301 	bic.w	r3, r3, #1
 8014f6a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8014f6e:	e789      	b.n	8014e84 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014f70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014f74:	f043 0301 	orr.w	r3, r3, #1
 8014f78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014f7c:	9905      	ldr	r1, [sp, #20]
 8014f7e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014f80:	b941      	cbnz	r1, 8014f94 <prvTimerTask+0x1a4>
 8014f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f86:	f383 8811 	msr	BASEPRI, r3
 8014f8a:	f3bf 8f6f 	isb	sy
 8014f8e:	f3bf 8f4f 	dsb	sy
 8014f92:	e7fe      	b.n	8014f92 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014f94:	4603      	mov	r3, r0
 8014f96:	4401      	add	r1, r0
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f7ff fe59 	bl	8014c50 <prvInsertTimerInActiveList>
					break;
 8014f9e:	e771      	b.n	8014e84 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014fa0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014fa4:	079a      	lsls	r2, r3, #30
 8014fa6:	d4de      	bmi.n	8014f66 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f7fe f8ef 	bl	801318c <vPortFree>
 8014fae:	e769      	b.n	8014e84 <prvTimerTask+0x94>
 8014fb0:	2402ad10 	.word	0x2402ad10
 8014fb4:	2402ae34 	.word	0x2402ae34
 8014fb8:	2402ad14 	.word	0x2402ad14

08014fbc <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8014fbc:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8014fbe:	2640      	movs	r6, #64	; 0x40
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8014fc0:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 8014fc2:	2100      	movs	r1, #0
 8014fc4:	f500 7061 	add.w	r0, r0, #900	; 0x384
 8014fc8:	4632      	mov	r2, r6
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
  }

  phost->gState = HOST_IDLE;
 8014fca:	2500      	movs	r5, #0
    phost->Pipes[i] = 0U;
 8014fcc:	f016 fcd9 	bl	802b982 <memset>
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8014fd0:	2301      	movs	r3, #1

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8014fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8014fd6:	4629      	mov	r1, r5
  phost->RequestState = CMD_SEND;
 8014fd8:	70a3      	strb	r3, [r4, #2]
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8014fda:	f104 001c 	add.w	r0, r4, #28
  phost->Control.state = CTRL_SETUP;
 8014fde:	8323      	strh	r3, [r4, #24]
  phost->gState = HOST_IDLE;
 8014fe0:	7025      	strb	r5, [r4, #0]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8014fe2:	f8c4 231c 	str.w	r2, [r4, #796]	; 0x31c
  phost->EnumState = ENUM_IDLE;
 8014fe6:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 8014fe8:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8014fec:	71a6      	strb	r6, [r4, #6]
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8014fee:	f016 fcc8 	bl	802b982 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8014ff2:	4629      	mov	r1, r5
 8014ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ff8:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8014ffc:	f016 fcc1 	bl	802b982 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015000:	4629      	mov	r1, r5
 8015002:	2212      	movs	r2, #18
 8015004:	f204 3026 	addw	r0, r4, #806	; 0x326
 8015008:	f016 fcbb 	bl	802b982 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 801500c:	4629      	mov	r1, r5
 801500e:	f504 704e 	add.w	r0, r4, #824	; 0x338
 8015012:	223e      	movs	r2, #62	; 0x3e

  return USBH_OK;
}
 8015014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015018:	f016 bcb3 	b.w	802b982 <memset>

0801501c <USBH_Init>:
{
 801501c:	b570      	push	{r4, r5, r6, lr}
 801501e:	460e      	mov	r6, r1
  if (phost == NULL)
 8015020:	4604      	mov	r4, r0
 8015022:	b350      	cbz	r0, 801507a <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 8015024:	2500      	movs	r5, #0
  phost->id = id;
 8015026:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->ClassNumber = 0U;
 801502a:	e9c0 55df 	strd	r5, r5, [r0, #892]	; 0x37c
  (void)DeInitStateMachine(phost);
 801502e:	f7ff ffc5 	bl	8014fbc <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 8015032:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8015036:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 801503a:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801503e:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8015042:	b10e      	cbz	r6, 8015048 <USBH_Init+0x2c>
    phost->pUser = pUsrFunc;
 8015044:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8015048:	2200      	movs	r2, #0
 801504a:	2104      	movs	r1, #4
 801504c:	2010      	movs	r0, #16
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 801504e:	2500      	movs	r5, #0
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8015050:	f7fd ff2b 	bl	8012eaa <osMessageQueueNew>
  USBH_Thread_Atrr.name = "USBH_Queue";
 8015054:	4a0a      	ldr	r2, [pc, #40]	; (8015080 <USBH_Init+0x64>)
 8015056:	4b0b      	ldr	r3, [pc, #44]	; (8015084 <USBH_Init+0x68>)
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8015058:	4621      	mov	r1, r4
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 801505a:	f8c4 03d8 	str.w	r0, [r4, #984]	; 0x3d8
  USBH_Thread_Atrr.name = "USBH_Queue";
 801505e:	6013      	str	r3, [r2, #0]
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8015060:	2318      	movs	r3, #24
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8015062:	4809      	ldr	r0, [pc, #36]	; (8015088 <USBH_Init+0x6c>)
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8015064:	e9c2 5305 	strd	r5, r3, [r2, #20]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8015068:	f7fd fdb7 	bl	8012bda <osThreadNew>
 801506c:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
  (void)USBH_LL_Init(phost);
 8015070:	4620      	mov	r0, r4
 8015072:	f7f2 fc5f 	bl	8007934 <USBH_LL_Init>
  return USBH_OK;
 8015076:	4628      	mov	r0, r5
}
 8015078:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 801507a:	2002      	movs	r0, #2
 801507c:	e7fc      	b.n	8015078 <USBH_Init+0x5c>
 801507e:	bf00      	nop
 8015080:	2402ae3c 	.word	0x2402ae3c
 8015084:	0802f636 	.word	0x0802f636
 8015088:	0801552d 	.word	0x0801552d

0801508c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 801508c:	b149      	cbz	r1, 80150a2 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801508e:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8015092:	b933      	cbnz	r3, 80150a2 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015094:	2201      	movs	r2, #1
 8015096:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
 801509a:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
      status = USBH_OK;
 801509e:	4618      	mov	r0, r3
 80150a0:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80150a2:	2002      	movs	r0, #2
  }

  return status;
}
 80150a4:	4770      	bx	lr

080150a6 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80150a6:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 80150aa:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80150ac:	bf86      	itte	hi
 80150ae:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 80150b2:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80150b4:	2002      	movls	r0, #2
  }

  return status;
}
 80150b6:	4770      	bx	lr

080150b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80150b8:	b570      	push	{r4, r5, r6, lr}
 80150ba:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80150bc:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 80150c0:	b2e5      	uxtb	r5, r4
 80150c2:	428e      	cmp	r6, r1
 80150c4:	d001      	beq.n	80150ca <USBH_FindInterface+0x12>
 80150c6:	29ff      	cmp	r1, #255	; 0xff
 80150c8:	d10b      	bne.n	80150e2 <USBH_FindInterface+0x2a>
 80150ca:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 80150ce:	4296      	cmp	r6, r2
 80150d0:	d001      	beq.n	80150d6 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80150d2:	2aff      	cmp	r2, #255	; 0xff
 80150d4:	d105      	bne.n	80150e2 <USBH_FindInterface+0x2a>
 80150d6:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 80150da:	429e      	cmp	r6, r3
 80150dc:	d004      	beq.n	80150e8 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80150de:	2bff      	cmp	r3, #255	; 0xff
 80150e0:	d002      	beq.n	80150e8 <USBH_FindInterface+0x30>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80150e2:	301a      	adds	r0, #26
 80150e4:	b114      	cbz	r4, 80150ec <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80150e6:	25ff      	movs	r5, #255	; 0xff
}
 80150e8:	4628      	mov	r0, r5
 80150ea:	bd70      	pop	{r4, r5, r6, pc}
 80150ec:	2401      	movs	r4, #1
 80150ee:	e7e5      	b.n	80150bc <USBH_FindInterface+0x4>

080150f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80150f0:	b510      	push	{r4, lr}
 80150f2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80150f4:	f7f2 fc8c 	bl	8007a10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80150f8:	2101      	movs	r1, #1
 80150fa:	4620      	mov	r0, r4
 80150fc:	f7f2 fc54 	bl	80079a8 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8015100:	2000      	movs	r0, #0
 8015102:	bd10      	pop	{r4, pc}

08015104 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015104:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015106:	2302      	movs	r3, #2
{
 8015108:	b086      	sub	sp, #24
 801510a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801510c:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015110:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8015114:	2b01      	cmp	r3, #1
 8015116:	d101      	bne.n	801511c <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015118:	2303      	movs	r3, #3
 801511a:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 801511c:	7823      	ldrb	r3, [r4, #0]
 801511e:	2b0b      	cmp	r3, #11
 8015120:	f200 81de 	bhi.w	80154e0 <USBH_Process+0x3dc>
 8015124:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015128:	0028000c 	.word	0x0028000c
 801512c:	01df004a 	.word	0x01df004a
 8015130:	008001dc 	.word	0x008001dc
 8015134:	017a01c3 	.word	0x017a01c3
 8015138:	018c0182 	.word	0x018c0182
 801513c:	01d601a1 	.word	0x01d601a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8015140:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8015144:	2b00      	cmp	r3, #0
 8015146:	f000 81cb 	beq.w	80154e0 <USBH_Process+0x3dc>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801514a:	2501      	movs	r5, #1
        USBH_Delay(200U);
 801514c:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801514e:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 8015150:	f7f2 fc53 	bl	80079fa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8015154:	4620      	mov	r0, r4
 8015156:	f7f2 fc6d 	bl	8007a34 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 801515a:	2300      	movs	r3, #0
        phost->Timeout = 0U;

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801515c:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015160:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8015164:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015168:	461a      	mov	r2, r3
 801516a:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 801516e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8015172:	f7fd fed5 	bl	8012f20 <osMessageQueuePut>
#endif
#endif
      break;
 8015176:	e1b3      	b.n	80154e0 <USBH_Process+0x3dc>
      if (phost->device.PortEnabled == 1U)
 8015178:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 801517c:	2b01      	cmp	r3, #1
 801517e:	d105      	bne.n	801518c <USBH_Process+0x88>
        phost->device.RstCnt = 0U;
 8015180:	2300      	movs	r3, #0
 8015182:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015186:	2302      	movs	r3, #2
        phost->gState = HOST_CHECK_CLASS;
 8015188:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801518a:	e015      	b.n	80151b8 <USBH_Process+0xb4>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801518c:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8015190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015194:	d90a      	bls.n	80151ac <USBH_Process+0xa8>
          phost->device.RstCnt++;
 8015196:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 801519a:	3301      	adds	r3, #1
 801519c:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 801519e:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 80151a0:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
            phost->gState = HOST_ABORT_STATE;
 80151a4:	bf8c      	ite	hi
 80151a6:	230d      	movhi	r3, #13
            phost->gState = HOST_IDLE;
 80151a8:	2300      	movls	r3, #0
 80151aa:	e7ed      	b.n	8015188 <USBH_Process+0x84>
          phost->Timeout += 10U;
 80151ac:	330a      	adds	r3, #10
          USBH_Delay(10U);
 80151ae:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 80151b0:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 80151b4:	f7f2 fc21 	bl	80079fa <USBH_Delay>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80151b8:	2301      	movs	r3, #1
 80151ba:	e174      	b.n	80154a6 <USBH_Process+0x3a2>
      if (phost->pUser != NULL)
 80151bc:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80151c0:	b113      	cbz	r3, 80151c8 <USBH_Process+0xc4>
        phost->pUser(phost, HOST_USER_CONNECTION);
 80151c2:	2104      	movs	r1, #4
 80151c4:	4620      	mov	r0, r4
 80151c6:	4798      	blx	r3
      USBH_Delay(100U);
 80151c8:	2064      	movs	r0, #100	; 0x64
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80151ca:	2500      	movs	r5, #0
      USBH_Delay(100U);
 80151cc:	f7f2 fc15 	bl	80079fa <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80151d0:	4620      	mov	r0, r4
 80151d2:	f7f2 fbd7 	bl	8007984 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 80151d6:	2305      	movs	r3, #5
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80151d8:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80151dc:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
 80151de:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80151e0:	4620      	mov	r0, r4
 80151e2:	f001 f98e 	bl	8016502 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80151e6:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80151e8:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80151ea:	4620      	mov	r0, r4
 80151ec:	f001 f989 	bl	8016502 <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80151f0:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80151f2:	4601      	mov	r1, r0
 80151f4:	7120      	strb	r0, [r4, #4]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80151f6:	9302      	str	r3, [sp, #8]
 80151f8:	2280      	movs	r2, #128	; 0x80
 80151fa:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80151fe:	4620      	mov	r0, r4
 8015200:	9501      	str	r5, [sp, #4]
 8015202:	9300      	str	r3, [sp, #0]
 8015204:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8015208:	f001 f967 	bl	80164da <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801520c:	79a3      	ldrb	r3, [r4, #6]
 801520e:	462a      	mov	r2, r5
 8015210:	7961      	ldrb	r1, [r4, #5]
 8015212:	4620      	mov	r0, r4
 8015214:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8015218:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 801521c:	9300      	str	r3, [sp, #0]
 801521e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8015222:	f001 f95a 	bl	80164da <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015226:	e7c7      	b.n	80151b8 <USBH_Process+0xb4>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8015228:	7865      	ldrb	r5, [r4, #1]
 801522a:	2d07      	cmp	r5, #7
 801522c:	d82c      	bhi.n	8015288 <USBH_Process+0x184>
 801522e:	e8df f005 	tbb	[pc, r5]
 8015232:	4204      	.short	0x4204
 8015234:	b4979073 	.word	0xb4979073
 8015238:	e1d0      	.short	0xe1d0
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801523a:	2108      	movs	r1, #8
 801523c:	4620      	mov	r0, r4
 801523e:	f000 fb3f 	bl	80158c0 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8015242:	4606      	mov	r6, r0
 8015244:	b9f0      	cbnz	r0, 8015284 <USBH_Process+0x180>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8015246:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801524a:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801524c:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801524e:	7065      	strb	r5, [r4, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015250:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8015254:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8015258:	9300      	str	r3, [sp, #0]
 801525a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801525e:	7921      	ldrb	r1, [r4, #4]
 8015260:	2280      	movs	r2, #128	; 0x80
 8015262:	4620      	mov	r0, r4
 8015264:	f001 f939 	bl	80164da <USBH_OpenPipe>
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015268:	79a3      	ldrb	r3, [r4, #6]
 801526a:	4632      	mov	r2, r6
 801526c:	7961      	ldrb	r1, [r4, #5]
 801526e:	4620      	mov	r0, r4
 8015270:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015274:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8015278:	9300      	str	r3, [sp, #0]
 801527a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 801527e:	f001 f92c 	bl	80164da <USBH_OpenPipe>
 8015282:	e01f      	b.n	80152c4 <USBH_Process+0x1c0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015284:	2803      	cmp	r0, #3
 8015286:	d001      	beq.n	801528c <USBH_Process+0x188>
  switch (phost->EnumState)
 8015288:	2501      	movs	r5, #1
 801528a:	e01b      	b.n	80152c4 <USBH_Process+0x1c0>
        phost->device.EnumCnt++;
 801528c:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8015290:	3301      	adds	r3, #1
 8015292:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8015294:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8015296:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801529a:	d901      	bls.n	80152a0 <USBH_Process+0x19c>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 801529c:	230d      	movs	r3, #13
 801529e:	e008      	b.n	80152b2 <USBH_Process+0x1ae>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80152a0:	7961      	ldrb	r1, [r4, #5]
 80152a2:	4620      	mov	r0, r4
 80152a4:	f001 f945 	bl	8016532 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80152a8:	7921      	ldrb	r1, [r4, #4]
 80152aa:	4620      	mov	r0, r4
 80152ac:	f001 f941 	bl	8016532 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80152b0:	2300      	movs	r3, #0
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 80152b2:	7023      	strb	r3, [r4, #0]
 80152b4:	e7e8      	b.n	8015288 <USBH_Process+0x184>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80152b6:	2112      	movs	r1, #18
 80152b8:	4620      	mov	r0, r4
 80152ba:	f000 fb01 	bl	80158c0 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80152be:	b998      	cbnz	r0, 80152e8 <USBH_Process+0x1e4>
        phost->EnumState = ENUM_SET_ADDR;
 80152c0:	2302      	movs	r3, #2
 80152c2:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 80152c4:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 80152c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80152cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f040 8105 	bne.w	80154e0 <USBH_Process+0x3dc>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80152d6:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 80152da:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80152de:	2b01      	cmp	r3, #1
 80152e0:	f040 8099 	bne.w	8015416 <USBH_Process+0x312>
        phost->gState = HOST_SET_CONFIGURATION;
 80152e4:	2308      	movs	r3, #8
 80152e6:	e097      	b.n	8015418 <USBH_Process+0x314>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80152e8:	2803      	cmp	r0, #3
 80152ea:	d1cd      	bne.n	8015288 <USBH_Process+0x184>
        phost->device.EnumCnt++;
 80152ec:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80152f0:	3301      	adds	r3, #1
 80152f2:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80152f4:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80152f6:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80152fa:	d902      	bls.n	8015302 <USBH_Process+0x1fe>
          phost->gState = HOST_ABORT_STATE;
 80152fc:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 80152fe:	7023      	strb	r3, [r4, #0]
 8015300:	e7e0      	b.n	80152c4 <USBH_Process+0x1c0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015302:	7961      	ldrb	r1, [r4, #5]
 8015304:	4620      	mov	r0, r4
 8015306:	f001 f914 	bl	8016532 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801530a:	7921      	ldrb	r1, [r4, #4]
 801530c:	4620      	mov	r0, r4
 801530e:	f001 f910 	bl	8016532 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015312:	2300      	movs	r3, #0
 8015314:	7063      	strb	r3, [r4, #1]
 8015316:	e7f2      	b.n	80152fe <USBH_Process+0x1fa>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015318:	2101      	movs	r1, #1
 801531a:	4620      	mov	r0, r4
 801531c:	f000 fc64 	bl	8015be8 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8015320:	4606      	mov	r6, r0
 8015322:	b978      	cbnz	r0, 8015344 <USBH_Process+0x240>
        USBH_Delay(2U);
 8015324:	2002      	movs	r0, #2
        phost->device.address = USBH_DEVICE_ADDRESS;
 8015326:	2501      	movs	r5, #1
        USBH_Delay(2U);
 8015328:	f7f2 fb67 	bl	80079fa <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 801532c:	2303      	movs	r3, #3
        phost->device.address = USBH_DEVICE_ADDRESS;
 801532e:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015332:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015334:	79a3      	ldrb	r3, [r4, #6]
 8015336:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801533a:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	462b      	mov	r3, r5
 8015342:	e78c      	b.n	801525e <USBH_Process+0x15a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015344:	2803      	cmp	r0, #3
 8015346:	d19f      	bne.n	8015288 <USBH_Process+0x184>
        phost->gState = HOST_ABORT_STATE;
 8015348:	230d      	movs	r3, #13
 801534a:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 801534c:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801534e:	7063      	strb	r3, [r4, #1]
 8015350:	e79a      	b.n	8015288 <USBH_Process+0x184>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8015352:	2109      	movs	r1, #9
 8015354:	4620      	mov	r0, r4
 8015356:	f000 fb1f 	bl	8015998 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 801535a:	b948      	cbnz	r0, 8015370 <USBH_Process+0x26c>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801535c:	2304      	movs	r3, #4
 801535e:	e7f6      	b.n	801534e <USBH_Process+0x24a>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8015360:	f8b4 133a 	ldrh.w	r1, [r4, #826]	; 0x33a
 8015364:	4620      	mov	r0, r4
 8015366:	f000 fb17 	bl	8015998 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 801536a:	b908      	cbnz	r0, 8015370 <USBH_Process+0x26c>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801536c:	2305      	movs	r3, #5
 801536e:	e7ee      	b.n	801534e <USBH_Process+0x24a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015370:	2803      	cmp	r0, #3
 8015372:	d189      	bne.n	8015288 <USBH_Process+0x184>
        phost->device.EnumCnt++;
 8015374:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8015378:	3301      	adds	r3, #1
 801537a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 801537c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 801537e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015382:	d88b      	bhi.n	801529c <USBH_Process+0x198>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015384:	7961      	ldrb	r1, [r4, #5]
 8015386:	4620      	mov	r0, r4
 8015388:	f001 f8d3 	bl	8016532 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801538c:	7921      	ldrb	r1, [r4, #4]
 801538e:	4620      	mov	r0, r4
 8015390:	f001 f8cf 	bl	8016532 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015394:	2300      	movs	r3, #0
 8015396:	7063      	strb	r3, [r4, #1]
 8015398:	e78b      	b.n	80152b2 <USBH_Process+0x1ae>
      if (phost->device.DevDesc.iManufacturer != 0U)
 801539a:	f894 1334 	ldrb.w	r1, [r4, #820]	; 0x334
 801539e:	b131      	cbz	r1, 80153ae <USBH_Process+0x2aa>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80153a0:	23ff      	movs	r3, #255	; 0xff
 80153a2:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80153a6:	4620      	mov	r0, r4
 80153a8:	f000 fbf1 	bl	8015b8e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80153ac:	b968      	cbnz	r0, 80153ca <USBH_Process+0x2c6>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80153ae:	2306      	movs	r3, #6
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80153b0:	7063      	strb	r3, [r4, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80153b2:	2305      	movs	r3, #5
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80153b4:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 80153b8:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80153bc:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80153c0:	2300      	movs	r3, #0
 80153c2:	461a      	mov	r2, r3
 80153c4:	f7fd fdac 	bl	8012f20 <osMessageQueuePut>
 80153c8:	e75e      	b.n	8015288 <USBH_Process+0x184>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80153ca:	2803      	cmp	r0, #3
 80153cc:	f47f af5c 	bne.w	8015288 <USBH_Process+0x184>
 80153d0:	e7ed      	b.n	80153ae <USBH_Process+0x2aa>
      if (phost->device.DevDesc.iProduct != 0U)
 80153d2:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 80153d6:	b159      	cbz	r1, 80153f0 <USBH_Process+0x2ec>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80153d8:	23ff      	movs	r3, #255	; 0xff
 80153da:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80153de:	4620      	mov	r0, r4
 80153e0:	f000 fbd5 	bl	8015b8e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80153e4:	b908      	cbnz	r0, 80153ea <USBH_Process+0x2e6>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80153e6:	2307      	movs	r3, #7
 80153e8:	e7b1      	b.n	801534e <USBH_Process+0x24a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80153ea:	2803      	cmp	r0, #3
 80153ec:	f47f af4c 	bne.w	8015288 <USBH_Process+0x184>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80153f0:	2307      	movs	r3, #7
 80153f2:	e7dd      	b.n	80153b0 <USBH_Process+0x2ac>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80153f4:	f894 1336 	ldrb.w	r1, [r4, #822]	; 0x336
 80153f8:	b909      	cbnz	r1, 80153fe <USBH_Process+0x2fa>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 80153fa:	2500      	movs	r5, #0
 80153fc:	e762      	b.n	80152c4 <USBH_Process+0x1c0>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80153fe:	23ff      	movs	r3, #255	; 0xff
 8015400:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8015404:	4620      	mov	r0, r4
 8015406:	f000 fbc2 	bl	8015b8e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 801540a:	2800      	cmp	r0, #0
 801540c:	d0f5      	beq.n	80153fa <USBH_Process+0x2f6>
  USBH_StatusTypeDef Status = USBH_BUSY;
 801540e:	1ec5      	subs	r5, r0, #3
 8015410:	bf18      	it	ne
 8015412:	2501      	movne	r5, #1
 8015414:	e756      	b.n	80152c4 <USBH_Process+0x1c0>
          phost->gState = HOST_INPUT;
 8015416:	2307      	movs	r3, #7
        phost->gState = HOST_ABORT_STATE;
 8015418:	7023      	strb	r3, [r4, #0]
 801541a:	e043      	b.n	80154a4 <USBH_Process+0x3a0>
      if (phost->pUser != NULL)
 801541c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8015420:	2b00      	cmp	r3, #0
 8015422:	d05d      	beq.n	80154e0 <USBH_Process+0x3dc>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015424:	2101      	movs	r1, #1
 8015426:	4620      	mov	r0, r4
 8015428:	4798      	blx	r3
 801542a:	e75b      	b.n	80152e4 <USBH_Process+0x1e0>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801542c:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 8015430:	4620      	mov	r0, r4
 8015432:	f000 fbe6 	bl	8015c02 <USBH_SetCfg>
 8015436:	2800      	cmp	r0, #0
 8015438:	f47f aebe 	bne.w	80151b8 <USBH_Process+0xb4>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801543c:	2309      	movs	r3, #9
 801543e:	e6a3      	b.n	8015188 <USBH_Process+0x84>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8015440:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 8015444:	069b      	lsls	r3, r3, #26
 8015446:	d508      	bpl.n	801545a <USBH_Process+0x356>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8015448:	2101      	movs	r1, #1
 801544a:	4620      	mov	r0, r4
 801544c:	f000 fbe6 	bl	8015c1c <USBH_SetFeature>
 8015450:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8015454:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8015458:	b90b      	cbnz	r3, 801545e <USBH_Process+0x35a>
        phost->gState = HOST_CHECK_CLASS;
 801545a:	230a      	movs	r3, #10
 801545c:	e694      	b.n	8015188 <USBH_Process+0x84>
        else if (status == USBH_NOT_SUPPORTED)
 801545e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8015462:	2b03      	cmp	r3, #3
 8015464:	f47f aea8 	bne.w	80151b8 <USBH_Process+0xb4>
 8015468:	e7f7      	b.n	801545a <USBH_Process+0x356>
      if (phost->ClassNumber == 0U)
 801546a:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 801546e:	b1cb      	cbz	r3, 80154a4 <USBH_Process+0x3a0>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015470:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8015474:	f894 2347 	ldrb.w	r2, [r4, #839]	; 0x347
 8015478:	7919      	ldrb	r1, [r3, #4]
 801547a:	4291      	cmp	r1, r2
 801547c:	d004      	beq.n	8015488 <USBH_Process+0x384>
 801547e:	2300      	movs	r3, #0
 8015480:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        phost->gState = HOST_ABORT_STATE;
 8015484:	230d      	movs	r3, #13
 8015486:	e7c7      	b.n	8015418 <USBH_Process+0x314>
 8015488:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801548c:	4620      	mov	r0, r4
 801548e:	689b      	ldr	r3, [r3, #8]
 8015490:	4798      	blx	r3
 8015492:	2800      	cmp	r0, #0
 8015494:	d1f6      	bne.n	8015484 <USBH_Process+0x380>
            phost->gState = HOST_CLASS_REQUEST;
 8015496:	2306      	movs	r3, #6
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015498:	2103      	movs	r1, #3
 801549a:	4620      	mov	r0, r4
            phost->gState = HOST_CLASS_REQUEST;
 801549c:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801549e:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80154a2:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80154a4:	2305      	movs	r3, #5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80154a6:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80154aa:	2300      	movs	r3, #0
 80154ac:	e65c      	b.n	8015168 <USBH_Process+0x64>
      if (phost->pActiveClass != NULL)
 80154ae:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d0e6      	beq.n	8015484 <USBH_Process+0x380>
        status = phost->pActiveClass->Requests(phost);
 80154b6:	691b      	ldr	r3, [r3, #16]
 80154b8:	4620      	mov	r0, r4
 80154ba:	4798      	blx	r3
 80154bc:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80154c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80154c4:	b90b      	cbnz	r3, 80154ca <USBH_Process+0x3c6>
          phost->gState = HOST_CLASS;
 80154c6:	230b      	movs	r3, #11
 80154c8:	e7a6      	b.n	8015418 <USBH_Process+0x314>
        else if (status == USBH_FAIL)
 80154ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	d1e8      	bne.n	80154a4 <USBH_Process+0x3a0>
 80154d2:	e7d7      	b.n	8015484 <USBH_Process+0x380>
      if (phost->pActiveClass != NULL)
 80154d4:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80154d8:	b113      	cbz	r3, 80154e0 <USBH_Process+0x3dc>
        phost->pActiveClass->BgndProcess(phost);
 80154da:	695b      	ldr	r3, [r3, #20]
 80154dc:	4620      	mov	r0, r4
 80154de:	4798      	blx	r3
}
 80154e0:	2000      	movs	r0, #0
 80154e2:	b006      	add	sp, #24
 80154e4:	bd70      	pop	{r4, r5, r6, pc}
      phost->device.is_disconnected = 0U;
 80154e6:	2500      	movs	r5, #0
      (void)DeInitStateMachine(phost);
 80154e8:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
 80154ea:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 80154ee:	f7ff fd65 	bl	8014fbc <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 80154f2:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80154f6:	b123      	cbz	r3, 8015502 <USBH_Process+0x3fe>
        phost->pActiveClass->DeInit(phost);
 80154f8:	68db      	ldr	r3, [r3, #12]
 80154fa:	4620      	mov	r0, r4
 80154fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80154fe:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 8015502:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8015506:	b113      	cbz	r3, 801550e <USBH_Process+0x40a>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015508:	2105      	movs	r1, #5
 801550a:	4620      	mov	r0, r4
 801550c:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 801550e:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8015512:	2b01      	cmp	r3, #1
 8015514:	d106      	bne.n	8015524 <USBH_Process+0x420>
        phost->device.is_ReEnumerated = 0U;
 8015516:	2300      	movs	r3, #0
        (void)USBH_Start(phost);
 8015518:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 801551a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 801551e:	f7ff fde7 	bl	80150f0 <USBH_Start>
 8015522:	e649      	b.n	80151b8 <USBH_Process+0xb4>
        (void)USBH_LL_Start(phost);
 8015524:	4620      	mov	r0, r4
 8015526:	f7f2 fa73 	bl	8007a10 <USBH_LL_Start>
 801552a:	e645      	b.n	80151b8 <USBH_Process+0xb4>

0801552c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	4604      	mov	r4, r0
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8015530:	f500 7578 	add.w	r5, r0, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8015534:	f04f 33ff 	mov.w	r3, #4294967295
 8015538:	2200      	movs	r2, #0
 801553a:	4629      	mov	r1, r5
 801553c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8015540:	f7fd fd1e 	bl	8012f80 <osMessageQueueGet>
    if (status == osOK)
 8015544:	2800      	cmp	r0, #0
 8015546:	d1f5      	bne.n	8015534 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8015548:	4620      	mov	r0, r4
 801554a:	f7ff fddb 	bl	8015104 <USBH_Process>
 801554e:	e7f1      	b.n	8015534 <USBH_Process_OS+0x8>

08015550 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8015550:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8015554:	4770      	bx	lr

08015556 <USBH_LL_IncTimer>:
  phost->Timer++;
 8015556:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 801555a:	3201      	adds	r2, #1
 801555c:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8015560:	7802      	ldrb	r2, [r0, #0]
 8015562:	2a0b      	cmp	r2, #11
 8015564:	d104      	bne.n	8015570 <USBH_LL_IncTimer+0x1a>
 8015566:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 801556a:	b10b      	cbz	r3, 8015570 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 801556c:	699b      	ldr	r3, [r3, #24]
 801556e:	4718      	bx	r3
}
 8015570:	4770      	bx	lr

08015572 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8015572:	2301      	movs	r3, #1
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015574:	f500 7178 	add.w	r1, r0, #992	; 0x3e0
  phost->device.PortEnabled = 1U;
 8015578:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801557c:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015580:	2300      	movs	r3, #0
 8015582:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8015586:	461a      	mov	r2, r3
 8015588:	f7fd bcca 	b.w	8012f20 <osMessageQueuePut>

0801558c <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 801558c:	2300      	movs	r3, #0
 801558e:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 8015592:	4770      	bx	lr

08015594 <USBH_LL_Connect>:
{
 8015594:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 8015596:	2301      	movs	r3, #1
  phost->device.is_disconnected = 0U;
 8015598:	2400      	movs	r4, #0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 801559a:	f500 7178 	add.w	r1, r0, #992	; 0x3e0
  phost->device.is_connected = 1U;
 801559e:	f880 3320 	strb.w	r3, [r0, #800]	; 0x320
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80155a2:	4622      	mov	r2, r4
  phost->device.is_disconnected = 0U;
 80155a4:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80155a8:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80155ac:	4623      	mov	r3, r4
  phost->device.is_ReEnumerated = 0U;
 80155ae:	f880 4322 	strb.w	r4, [r0, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80155b2:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 80155b6:	f7fd fcb3 	bl	8012f20 <osMessageQueuePut>
}
 80155ba:	4620      	mov	r0, r4
 80155bc:	bd10      	pop	{r4, pc}

080155be <USBH_LL_Disconnect>:
{
 80155be:	b570      	push	{r4, r5, r6, lr}
  phost->device.is_connected = 0U;
 80155c0:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 80155c2:	2601      	movs	r6, #1
{
 80155c4:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 80155c6:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 80155ca:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 80155ce:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  (void)USBH_LL_Stop(phost);
 80155d2:	f7f2 fa26 	bl	8007a22 <USBH_LL_Stop>
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80155d6:	7921      	ldrb	r1, [r4, #4]
 80155d8:	4620      	mov	r0, r4
 80155da:	f000 ffaa 	bl	8016532 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80155de:	7961      	ldrb	r1, [r4, #5]
 80155e0:	4620      	mov	r0, r4
 80155e2:	f000 ffa6 	bl	8016532 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80155e6:	462b      	mov	r3, r5
 80155e8:	462a      	mov	r2, r5
 80155ea:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 80155ee:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80155f2:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80155f6:	f7fd fc93 	bl	8012f20 <osMessageQueuePut>
}
 80155fa:	4628      	mov	r0, r5
 80155fc:	bd70      	pop	{r4, r5, r6, pc}

080155fe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80155fe:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015600:	2301      	movs	r3, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015602:	f500 7178 	add.w	r1, r0, #992	; 0x3e0
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015606:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 801560a:	2300      	movs	r3, #0
 801560c:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8015610:	461a      	mov	r2, r3
 8015612:	f7fd fc85 	bl	8012f20 <osMessageQueuePut>
#endif

  return USBH_OK;
}
 8015616:	2000      	movs	r0, #0
 8015618:	bd08      	pop	{r3, pc}

0801561a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801561a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 801561c:	7885      	ldrb	r5, [r0, #2]
{
 801561e:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8015620:	2d01      	cmp	r5, #1
 8015622:	d005      	beq.n	8015630 <USBH_CtlReq+0x16>
 8015624:	2d02      	cmp	r5, #2
 8015626:	d014      	beq.n	8015652 <USBH_CtlReq+0x38>
 8015628:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 801562a:	4628      	mov	r0, r5
 801562c:	b002      	add	sp, #8
 801562e:	bd70      	pop	{r4, r5, r6, pc}
      phost->RequestState = CMD_WAIT;
 8015630:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 8015632:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 8015634:	8182      	strh	r2, [r0, #12]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015636:	f500 7178 	add.w	r1, r0, #992	; 0x3e0
      phost->RequestState = CMD_WAIT;
 801563a:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801563c:	2303      	movs	r3, #3
      phost->Control.state = CTRL_SETUP;
 801563e:	7605      	strb	r5, [r0, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015640:	f8c0 33e0 	str.w	r3, [r0, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015644:	2300      	movs	r3, #0
 8015646:	461a      	mov	r2, r3
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015648:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 801564c:	f7fd fc68 	bl	8012f20 <osMessageQueuePut>
  return status;
 8015650:	e7eb      	b.n	801562a <USBH_CtlReq+0x10>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8015652:	7e05      	ldrb	r5, [r0, #24]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015654:	f500 7678 	add.w	r6, r0, #992	; 0x3e0
  switch (phost->Control.state)
 8015658:	1e6b      	subs	r3, r5, #1
 801565a:	2b0a      	cmp	r3, #10
 801565c:	d85f      	bhi.n	801571e <USBH_CtlReq+0x104>
 801565e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015662:	000b      	.short	0x000b
 8015664:	00420013 	.word	0x00420013
 8015668:	0073004d 	.word	0x0073004d
 801566c:	00a3007f 	.word	0x00a3007f
 8015670:	00d700ad 	.word	0x00d700ad
 8015674:	00f800e3 	.word	0x00f800e3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8015678:	7942      	ldrb	r2, [r0, #5]
 801567a:	f100 0110 	add.w	r1, r0, #16
 801567e:	f000 fae7 	bl	8015c50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8015682:	2302      	movs	r3, #2
        phost->Control.state = CTRL_IDLE;
 8015684:	7623      	strb	r3, [r4, #24]
 8015686:	e018      	b.n	80156ba <USBH_CtlReq+0xa0>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015688:	7941      	ldrb	r1, [r0, #5]
 801568a:	f7f2 f989 	bl	80079a0 <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801568e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015690:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8015692:	d11e      	bne.n	80156d2 <USBH_CtlReq+0xb8>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8015694:	8ae2      	ldrh	r2, [r4, #22]
 8015696:	f994 3010 	ldrsb.w	r3, [r4, #16]
 801569a:	b1aa      	cbz	r2, 80156c8 <USBH_CtlReq+0xae>
        {
          if (direction == USB_D2H)
 801569c:	2b00      	cmp	r3, #0
 801569e:	bfac      	ite	ge
 80156a0:	2305      	movge	r3, #5
 80156a2:	2303      	movlt	r3, #3
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);

      if (URB_Status == USBH_URB_DONE)
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80156a4:	7623      	strb	r3, [r4, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156a6:	2303      	movs	r3, #3
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80156a8:	4631      	mov	r1, r6
 80156aa:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156ae:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80156b2:	2300      	movs	r3, #0
 80156b4:	461a      	mov	r2, r3
 80156b6:	f7fd fc33 	bl	8012f20 <osMessageQueuePut>
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156ba:	2303      	movs	r3, #3
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80156bc:	4631      	mov	r1, r6
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156be:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80156c2:	2300      	movs	r3, #0
 80156c4:	461a      	mov	r2, r3
 80156c6:	e7bf      	b.n	8015648 <USBH_CtlReq+0x2e>
          if (direction == USB_D2H)
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	bfac      	ite	ge
 80156cc:	2307      	movge	r3, #7
 80156ce:	2309      	movlt	r3, #9
 80156d0:	e7e8      	b.n	80156a4 <USBH_CtlReq+0x8a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80156d2:	2804      	cmp	r0, #4
 80156d4:	d001      	beq.n	80156da <USBH_CtlReq+0xc0>
 80156d6:	2802      	cmp	r0, #2
 80156d8:	d121      	bne.n	801571e <USBH_CtlReq+0x104>
          phost->Control.state = CTRL_ERROR;
 80156da:	230b      	movs	r3, #11
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
      {
        /* Nack received from device */
        phost->Control.state = CTRL_DATA_OUT;
 80156dc:	7623      	strb	r3, [r4, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156de:	2303      	movs	r3, #3
 80156e0:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
 80156e4:	e014      	b.n	8015710 <USBH_CtlReq+0xf6>
      phost->Control.timer = (uint16_t)phost->Timer;
 80156e6:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80156ea:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 80156ec:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80156ee:	6881      	ldr	r1, [r0, #8]
 80156f0:	7903      	ldrb	r3, [r0, #4]
 80156f2:	f000 fad4 	bl	8015c9e <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80156f6:	2304      	movs	r3, #4
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80156f8:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 80156fa:	e010      	b.n	801571e <USBH_CtlReq+0x104>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80156fc:	7901      	ldrb	r1, [r0, #4]
 80156fe:	2503      	movs	r5, #3
 8015700:	f7f2 f94e 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8015704:	2801      	cmp	r0, #1
 8015706:	d10c      	bne.n	8015722 <USBH_CtlReq+0x108>
        phost->Control.state = CTRL_STATUS_OUT;
 8015708:	2309      	movs	r3, #9
          phost->Control.state = CTRL_ERROR;
 801570a:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801570c:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015710:	2300      	movs	r3, #0
 8015712:	4631      	mov	r1, r6
 8015714:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8015718:	461a      	mov	r2, r3
 801571a:	f7fd fc01 	bl	8012f20 <osMessageQueuePut>
  switch (phost->Control.state)
 801571e:	2501      	movs	r5, #1
 8015720:	e7cb      	b.n	80156ba <USBH_CtlReq+0xa0>
      if (URB_Status == USBH_URB_STALL)
 8015722:	2805      	cmp	r0, #5
 8015724:	d10c      	bne.n	8015740 <USBH_CtlReq+0x126>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015726:	2300      	movs	r3, #0
 8015728:	4631      	mov	r1, r6
 801572a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 801572e:	461a      	mov	r2, r3
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015730:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015734:	f7fd fbf4 	bl	8012f20 <osMessageQueuePut>
        phost->RequestState = CMD_SEND;
 8015738:	2301      	movs	r3, #1
 801573a:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 801573c:	2300      	movs	r3, #0
 801573e:	e7a1      	b.n	8015684 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 8015740:	2804      	cmp	r0, #4
 8015742:	d1ec      	bne.n	801571e <USBH_CtlReq+0x104>
          phost->Control.state = CTRL_ERROR;
 8015744:	230b      	movs	r3, #11
 8015746:	e7e0      	b.n	801570a <USBH_CtlReq+0xf0>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8015748:	2501      	movs	r5, #1
 801574a:	9500      	str	r5, [sp, #0]
 801574c:	7943      	ldrb	r3, [r0, #5]
 801574e:	8982      	ldrh	r2, [r0, #12]
 8015750:	6881      	ldr	r1, [r0, #8]
 8015752:	f000 fa8d 	bl	8015c70 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8015756:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 801575a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801575c:	2306      	movs	r3, #6
 801575e:	e791      	b.n	8015684 <USBH_CtlReq+0x6a>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015760:	7941      	ldrb	r1, [r0, #5]
 8015762:	f7f2 f91d 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8015766:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015768:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 801576a:	d101      	bne.n	8015770 <USBH_CtlReq+0x156>
        phost->Control.state = CTRL_STATUS_IN;
 801576c:	2307      	movs	r3, #7
 801576e:	e799      	b.n	80156a4 <USBH_CtlReq+0x8a>
      else if (URB_Status == USBH_URB_STALL)
 8015770:	2805      	cmp	r0, #5
 8015772:	d103      	bne.n	801577c <USBH_CtlReq+0x162>
        phost->Control.state = CTRL_STALLED;
 8015774:	230c      	movs	r3, #12
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015776:	2503      	movs	r5, #3
        phost->Control.state = CTRL_STALLED;
 8015778:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801577a:	e7d4      	b.n	8015726 <USBH_CtlReq+0x10c>
      else if (URB_Status == USBH_URB_NOTREADY)
 801577c:	2802      	cmp	r0, #2
 801577e:	d101      	bne.n	8015784 <USBH_CtlReq+0x16a>
        phost->Control.state = CTRL_DATA_OUT;
 8015780:	2305      	movs	r3, #5
 8015782:	e7ab      	b.n	80156dc <USBH_CtlReq+0xc2>
        if (URB_Status == USBH_URB_ERROR)
 8015784:	2804      	cmp	r0, #4
 8015786:	d1ca      	bne.n	801571e <USBH_CtlReq+0x104>
          phost->Control.state = CTRL_ERROR;
 8015788:	230b      	movs	r3, #11
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 801578a:	4631      	mov	r1, r6
 801578c:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
          phost->Control.state = CTRL_ERROR;
 8015790:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015792:	2303      	movs	r3, #3
 8015794:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015798:	2300      	movs	r3, #0
 801579a:	461a      	mov	r2, r3
 801579c:	f7fd fbc0 	bl	8012f20 <osMessageQueuePut>
        phost->RequestState = CMD_SEND;
 80157a0:	2301      	movs	r3, #1
 80157a2:	2502      	movs	r5, #2
 80157a4:	70a3      	strb	r3, [r4, #2]
 80157a6:	e788      	b.n	80156ba <USBH_CtlReq+0xa0>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80157a8:	2200      	movs	r2, #0
 80157aa:	7903      	ldrb	r3, [r0, #4]
 80157ac:	4611      	mov	r1, r2
 80157ae:	f000 fa76 	bl	8015c9e <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80157b2:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80157b6:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80157b8:	2308      	movs	r3, #8
 80157ba:	e79d      	b.n	80156f8 <USBH_CtlReq+0xde>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80157bc:	7901      	ldrb	r1, [r0, #4]
 80157be:	f7f2 f8ef 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80157c2:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80157c4:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 80157c6:	d10d      	bne.n	80157e4 <USBH_CtlReq+0x1ca>
    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
      if (URB_Status == USBH_URB_DONE)
      {
        status = USBH_OK;
        phost->Control.state = CTRL_COMPLETE;
 80157c8:	230d      	movs	r3, #13
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80157ca:	4631      	mov	r1, r6
 80157cc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
        status = USBH_OK;
 80157d0:	2500      	movs	r5, #0
        phost->Control.state = CTRL_COMPLETE;
 80157d2:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80157d4:	2303      	movs	r3, #3
 80157d6:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80157da:	2300      	movs	r3, #0
 80157dc:	461a      	mov	r2, r3
 80157de:	f7fd fb9f 	bl	8012f20 <osMessageQueuePut>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80157e2:	e7a9      	b.n	8015738 <USBH_CtlReq+0x11e>
      else if (URB_Status == USBH_URB_ERROR)
 80157e4:	2b04      	cmp	r3, #4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80157e6:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 80157ea:	f04f 0503 	mov.w	r5, #3
      else if (URB_Status == USBH_URB_ERROR)
 80157ee:	d107      	bne.n	8015800 <USBH_CtlReq+0x1e6>
        phost->Control.state = CTRL_ERROR;
 80157f0:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80157f2:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        phost->Control.state = CTRL_ERROR;
 80157f6:	7623      	strb	r3, [r4, #24]
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80157f8:	2300      	movs	r3, #0
 80157fa:	4631      	mov	r1, r6
 80157fc:	461a      	mov	r2, r3
 80157fe:	e78c      	b.n	801571a <USBH_CtlReq+0x100>
        if (URB_Status == USBH_URB_STALL)
 8015800:	2b05      	cmp	r3, #5
 8015802:	d18c      	bne.n	801571e <USBH_CtlReq+0x104>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015804:	2300      	movs	r3, #0
 8015806:	4631      	mov	r1, r6
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015808:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 801580c:	461a      	mov	r2, r3
 801580e:	e791      	b.n	8015734 <USBH_CtlReq+0x11a>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8015810:	2200      	movs	r2, #0
 8015812:	2501      	movs	r5, #1
 8015814:	4611      	mov	r1, r2
 8015816:	9500      	str	r5, [sp, #0]
 8015818:	7943      	ldrb	r3, [r0, #5]
 801581a:	f000 fa29 	bl	8015c70 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801581e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8015822:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015824:	230a      	movs	r3, #10
 8015826:	e72d      	b.n	8015684 <USBH_CtlReq+0x6a>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015828:	7941      	ldrb	r1, [r0, #5]
 801582a:	f7f2 f8b9 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801582e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015830:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 8015832:	d0c9      	beq.n	80157c8 <USBH_CtlReq+0x1ae>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015834:	2b02      	cmp	r3, #2
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015836:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
      else if (URB_Status == USBH_URB_NOTREADY)
 801583a:	d105      	bne.n	8015848 <USBH_CtlReq+0x22e>
        phost->Control.state = CTRL_STATUS_OUT;
 801583c:	2309      	movs	r3, #9
 801583e:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015840:	2303      	movs	r3, #3
 8015842:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
 8015846:	e7d7      	b.n	80157f8 <USBH_CtlReq+0x1de>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8015848:	2b04      	cmp	r3, #4
 801584a:	f47f af68 	bne.w	801571e <USBH_CtlReq+0x104>
        {
          phost->Control.state = CTRL_ERROR;
 801584e:	230b      	movs	r3, #11
 8015850:	e7f5      	b.n	801583e <USBH_CtlReq+0x224>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015852:	7e43      	ldrb	r3, [r0, #25]
 8015854:	3301      	adds	r3, #1
 8015856:	b2db      	uxtb	r3, r3
 8015858:	2b02      	cmp	r3, #2
 801585a:	7643      	strb	r3, [r0, #25]
 801585c:	d803      	bhi.n	8015866 <USBH_CtlReq+0x24c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801585e:	2501      	movs	r5, #1
 8015860:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8015862:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 8015864:	e729      	b.n	80156ba <USBH_CtlReq+0xa0>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 8015866:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015868:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 801586c:	2106      	movs	r1, #6
 801586e:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015870:	7961      	ldrb	r1, [r4, #5]
 8015872:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 8015874:	7665      	strb	r5, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015876:	f000 fe5c 	bl	8016532 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801587a:	7921      	ldrb	r1, [r4, #4]
 801587c:	4620      	mov	r0, r4
 801587e:	f000 fe58 	bl	8016532 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8015882:	7025      	strb	r5, [r4, #0]
      else if (status == USBH_FAIL)
 8015884:	e78c      	b.n	80157a0 <USBH_CtlReq+0x186>

08015886 <USBH_GetDescriptor>:
{
 8015886:	b430      	push	{r4, r5}
 8015888:	460c      	mov	r4, r1
 801588a:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 801588c:	7883      	ldrb	r3, [r0, #2]
{
 801588e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8015892:	2b01      	cmp	r3, #1
 8015894:	d10f      	bne.n	80158b6 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8015896:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801589a:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
 801589c:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801589e:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80158a0:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80158a4:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80158a6:	f240 4309 	movw	r3, #1033	; 0x409
 80158aa:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 80158ae:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
 80158b0:	bf18      	it	ne
 80158b2:	2300      	movne	r3, #0
 80158b4:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 80158b6:	462a      	mov	r2, r5
}
 80158b8:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80158ba:	f7ff beae 	b.w	801561a <USBH_CtlReq>
	...

080158c0 <USBH_Get_DevDesc>:
  if (length > sizeof(phost->device.Data))
 80158c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80158c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158c6:	4604      	mov	r4, r0
 80158c8:	460d      	mov	r5, r1
  if (length > sizeof(phost->device.Data))
 80158ca:	d860      	bhi.n	801598e <USBH_Get_DevDesc+0xce>
  status = USBH_GetDescriptor(phost,
 80158cc:	9100      	str	r1, [sp, #0]
 80158ce:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80158d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80158d6:	2100      	movs	r1, #0
 80158d8:	f7ff ffd5 	bl	8015886 <USBH_GetDescriptor>
  if (status == USBH_OK)
 80158dc:	2800      	cmp	r0, #0
 80158de:	d148      	bne.n	8015972 <USBH_Get_DevDesc+0xb2>
  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80158e0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80158e4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80158e8:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80158ec:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80158f0:	2a01      	cmp	r2, #1
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80158f2:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80158f6:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80158fa:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80158fe:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8015902:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8015906:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 801590a:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801590e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8015912:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8015916:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 801591a:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801591e:	d830      	bhi.n	8015982 <USBH_Get_DevDesc+0xc2>
    switch (dev_desc->bMaxPacketSize)
 8015920:	2b20      	cmp	r3, #32
 8015922:	d828      	bhi.n	8015976 <USBH_Get_DevDesc+0xb6>
 8015924:	2b07      	cmp	r3, #7
 8015926:	d928      	bls.n	801597a <USBH_Get_DevDesc+0xba>
 8015928:	3b08      	subs	r3, #8
 801592a:	4a1a      	ldr	r2, [pc, #104]	; (8015994 <USBH_Get_DevDesc+0xd4>)
 801592c:	b2db      	uxtb	r3, r3
 801592e:	fa22 f303 	lsr.w	r3, r2, r3
 8015932:	07db      	lsls	r3, r3, #31
 8015934:	d521      	bpl.n	801597a <USBH_Get_DevDesc+0xba>
  if (length > 8U)
 8015936:	2d08      	cmp	r5, #8
 8015938:	d91b      	bls.n	8015972 <USBH_Get_DevDesc+0xb2>
    dev_desc->idVendor           = LE16(buf +  8);
 801593a:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 801593e:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 8015942:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8015946:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 801594a:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 801594e:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8015952:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8015956:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801595a:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 801595e:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8015962:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8015966:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801596a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801596e:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 8015972:	b003      	add	sp, #12
 8015974:	bd30      	pop	{r4, r5, pc}
    switch (dev_desc->bMaxPacketSize)
 8015976:	2b40      	cmp	r3, #64	; 0x40
    if (dev_desc->bMaxPacketSize != 8U)
 8015978:	d0dd      	beq.n	8015936 <USBH_Get_DevDesc+0x76>
      dev_desc->bMaxPacketSize = 8U;
 801597a:	2308      	movs	r3, #8
 801597c:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 8015980:	e7d9      	b.n	8015936 <USBH_Get_DevDesc+0x76>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8015982:	2a02      	cmp	r2, #2
 8015984:	d101      	bne.n	801598a <USBH_Get_DevDesc+0xca>
    if (dev_desc->bMaxPacketSize != 8U)
 8015986:	2b08      	cmp	r3, #8
 8015988:	e7f6      	b.n	8015978 <USBH_Get_DevDesc+0xb8>
    status = USBH_NOT_SUPPORTED;
 801598a:	2003      	movs	r0, #3
 801598c:	e7d3      	b.n	8015936 <USBH_Get_DevDesc+0x76>
    return USBH_NOT_SUPPORTED;
 801598e:	2003      	movs	r0, #3
 8015990:	e7ef      	b.n	8015972 <USBH_Get_DevDesc+0xb2>
 8015992:	bf00      	nop
 8015994:	01000101 	.word	0x01000101

08015998 <USBH_Get_CfgDesc>:
  if (length > sizeof(phost->device.CfgDesc_Raw))
 8015998:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 801599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a0:	4605      	mov	r5, r0
 80159a2:	b087      	sub	sp, #28
 80159a4:	460e      	mov	r6, r1
  if (length > sizeof(phost->device.CfgDesc_Raw))
 80159a6:	d903      	bls.n	80159b0 <USBH_Get_CfgDesc+0x18>
    return USBH_NOT_SUPPORTED;
 80159a8:	2003      	movs	r0, #3
}
 80159aa:	b007      	add	sp, #28
 80159ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80159b0:	f100 041c 	add.w	r4, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80159b4:	9100      	str	r1, [sp, #0]
 80159b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80159ba:	2100      	movs	r1, #0
 80159bc:	4623      	mov	r3, r4
 80159be:	f7ff ff62 	bl	8015886 <USBH_GetDescriptor>
  if (status == USBH_OK)
 80159c2:	2800      	cmp	r0, #0
 80159c4:	d1f1      	bne.n	80159aa <USBH_Get_CfgDesc+0x12>
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80159c6:	7f6b      	ldrb	r3, [r5, #29]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80159c8:	f8b5 801e 	ldrh.w	r8, [r5, #30]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80159cc:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80159d0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80159d4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80159d8:	f895 b020 	ldrb.w	fp, [r5, #32]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80159dc:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80159e0:	bf28      	it	cs
 80159e2:	f44f 7880 	movcs.w	r8, #256	; 0x100
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80159e6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80159ea:	f8a5 833a 	strh.w	r8, [r5, #826]	; 0x33a
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80159ee:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80159f2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80159f6:	f885 b33c 	strb.w	fp, [r5, #828]	; 0x33c
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80159fa:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80159fe:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8015a02:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8015a06:	2309      	movs	r3, #9
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8015a08:	429e      	cmp	r6, r3
 8015a0a:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
 8015a0e:	d9cc      	bls.n	80159aa <USBH_Get_CfgDesc+0x12>
 8015a10:	4629      	mov	r1, r5
 8015a12:	4686      	mov	lr, r0
 8015a14:	fa5f f68e 	uxtb.w	r6, lr
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8015a18:	f1be 0f02 	cmp.w	lr, #2
 8015a1c:	d0c5      	beq.n	80159aa <USBH_Get_CfgDesc+0x12>
 8015a1e:	4598      	cmp	r8, r3
 8015a20:	d806      	bhi.n	8015a30 <USBH_Get_CfgDesc+0x98>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8015a22:	465b      	mov	r3, fp
 8015a24:	2b02      	cmp	r3, #2
 8015a26:	bf28      	it	cs
 8015a28:	2302      	movcs	r3, #2
 8015a2a:	42b3      	cmp	r3, r6
 8015a2c:	d9bd      	bls.n	80159aa <USBH_Get_CfgDesc+0x12>
 8015a2e:	e7bb      	b.n	80159a8 <USBH_Get_CfgDesc+0x10>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015a30:	7822      	ldrb	r2, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8015a32:	4414      	add	r4, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015a34:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8015a36:	7862      	ldrb	r2, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015a38:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8015a3a:	2a04      	cmp	r2, #4
 8015a3c:	d1ec      	bne.n	8015a18 <USBH_Get_CfgDesc+0x80>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8015a3e:	7822      	ldrb	r2, [r4, #0]
        ep_ix = 0U;
 8015a40:	f04f 0c00 	mov.w	ip, #0
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8015a44:	2a09      	cmp	r2, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8015a46:	bf1c      	itt	ne
 8015a48:	2209      	movne	r2, #9
 8015a4a:	7022      	strbne	r2, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8015a4c:	7822      	ldrb	r2, [r4, #0]
 8015a4e:	f881 2342 	strb.w	r2, [r1, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8015a52:	7862      	ldrb	r2, [r4, #1]
 8015a54:	f881 2343 	strb.w	r2, [r1, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8015a58:	78a2      	ldrb	r2, [r4, #2]
 8015a5a:	f881 2344 	strb.w	r2, [r1, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8015a5e:	78e2      	ldrb	r2, [r4, #3]
 8015a60:	f881 2345 	strb.w	r2, [r1, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8015a64:	7922      	ldrb	r2, [r4, #4]
 8015a66:	f881 2346 	strb.w	r2, [r1, #838]	; 0x346
 8015a6a:	9202      	str	r2, [sp, #8]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8015a6c:	7962      	ldrb	r2, [r4, #5]
 8015a6e:	f881 2347 	strb.w	r2, [r1, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8015a72:	f894 a006 	ldrb.w	sl, [r4, #6]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8015a76:	9203      	str	r2, [sp, #12]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8015a78:	f881 a348 	strb.w	sl, [r1, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8015a7c:	79e2      	ldrb	r2, [r4, #7]
 8015a7e:	9204      	str	r2, [sp, #16]
 8015a80:	f881 2349 	strb.w	r2, [r1, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8015a84:	7a22      	ldrb	r2, [r4, #8]
 8015a86:	f881 234a 	strb.w	r2, [r1, #842]	; 0x34a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8015a8a:	221a      	movs	r2, #26
 8015a8c:	fb02 f20e 	mul.w	r2, r2, lr
 8015a90:	9205      	str	r2, [sp, #20]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015a92:	9a02      	ldr	r2, [sp, #8]
 8015a94:	4594      	cmp	ip, r2
 8015a96:	d276      	bcs.n	8015b86 <USBH_Get_CfgDesc+0x1ee>
 8015a98:	4598      	cmp	r8, r3
 8015a9a:	d985      	bls.n	80159a8 <USBH_Get_CfgDesc+0x10>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015a9c:	7822      	ldrb	r2, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8015a9e:	4414      	add	r4, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015aa0:	4413      	add	r3, r2
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015aa2:	7862      	ldrb	r2, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8015aa4:	b29b      	uxth	r3, r3
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015aa6:	2a05      	cmp	r2, #5
 8015aa8:	d1f3      	bne.n	8015a92 <USBH_Get_CfgDesc+0xfa>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8015aaa:	9a03      	ldr	r2, [sp, #12]
 8015aac:	2a01      	cmp	r2, #1
 8015aae:	d13a      	bne.n	8015b26 <USBH_Get_CfgDesc+0x18e>
 8015ab0:	f1ba 0f02 	cmp.w	sl, #2
 8015ab4:	d137      	bne.n	8015b26 <USBH_Get_CfgDesc+0x18e>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8015ab6:	9a04      	ldr	r2, [sp, #16]
 8015ab8:	b92a      	cbnz	r2, 8015ac6 <USBH_Get_CfgDesc+0x12e>
 8015aba:	7822      	ldrb	r2, [r4, #0]
 8015abc:	2a09      	cmp	r2, #9
 8015abe:	d002      	beq.n	8015ac6 <USBH_Get_CfgDesc+0x12e>
                pdesc->bLength = 0x09U;
 8015ac0:	f04f 0209 	mov.w	r2, #9
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8015ac4:	7022      	strb	r2, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8015ac6:	9e05      	ldr	r6, [sp, #20]
 8015ac8:	f10c 0001 	add.w	r0, ip, #1
 8015acc:	7822      	ldrb	r2, [r4, #0]
 8015ace:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
 8015ad2:	4428      	add	r0, r5
 8015ad4:	f880 2344 	strb.w	r2, [r0, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8015ad8:	7862      	ldrb	r2, [r4, #1]
 8015ada:	f880 2345 	strb.w	r2, [r0, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8015ade:	78a2      	ldrb	r2, [r4, #2]
 8015ae0:	f880 2346 	strb.w	r2, [r0, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8015ae4:	78e2      	ldrb	r2, [r4, #3]
 8015ae6:	f880 2347 	strb.w	r2, [r0, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8015aea:	88a6      	ldrh	r6, [r4, #4]
 8015aec:	f8a0 6348 	strh.w	r6, [r0, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8015af0:	79a7      	ldrb	r7, [r4, #6]
 8015af2:	f880 734a 	strb.w	r7, [r0, #842]	; 0x34a
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8015af6:	1e70      	subs	r0, r6, #1
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8015af8:	f895 931d 	ldrb.w	r9, [r5, #797]	; 0x31d
    status = USBH_NOT_SUPPORTED;
 8015afc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8015b00:	bf34      	ite	cc
 8015b02:	2000      	movcc	r0, #0
 8015b04:	2003      	movcs	r0, #3
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8015b06:	f1b9 0f00 	cmp.w	r9, #0
 8015b0a:	d117      	bne.n	8015b3c <USBH_Get_CfgDesc+0x1a4>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8015b0c:	f002 0203 	and.w	r2, r2, #3
 8015b10:	2a02      	cmp	r2, #2
 8015b12:	d10b      	bne.n	8015b2c <USBH_Get_CfgDesc+0x194>
        status = USBH_NOT_SUPPORTED;
 8015b14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8015b18:	bf88      	it	hi
 8015b1a:	2003      	movhi	r0, #3
            ep_ix++;
 8015b1c:	f10c 0c01 	add.w	ip, ip, #1
 8015b20:	fa5f fc8c 	uxtb.w	ip, ip
 8015b24:	e7b5      	b.n	8015a92 <USBH_Get_CfgDesc+0xfa>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8015b26:	f04f 0207 	mov.w	r2, #7
 8015b2a:	e7cb      	b.n	8015ac4 <USBH_Get_CfgDesc+0x12c>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8015b2c:	b91a      	cbnz	r2, 8015b36 <USBH_Get_CfgDesc+0x19e>
        status = USBH_NOT_SUPPORTED;
 8015b2e:	2e41      	cmp	r6, #65	; 0x41
 8015b30:	bf28      	it	cs
 8015b32:	2003      	movcs	r0, #3
 8015b34:	e7f2      	b.n	8015b1c <USBH_Get_CfgDesc+0x184>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8015b36:	3f01      	subs	r7, #1
        status = USBH_NOT_SUPPORTED;
 8015b38:	2f0f      	cmp	r7, #15
 8015b3a:	e7ed      	b.n	8015b18 <USBH_Get_CfgDesc+0x180>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8015b3c:	f1b9 0f01 	cmp.w	r9, #1
 8015b40:	d110      	bne.n	8015b64 <USBH_Get_CfgDesc+0x1cc>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8015b42:	f012 0f01 	tst.w	r2, #1
 8015b46:	d0f2      	beq.n	8015b2e <USBH_Get_CfgDesc+0x196>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8015b48:	f002 0203 	and.w	r2, r2, #3
 8015b4c:	2a01      	cmp	r2, #1
 8015b4e:	d104      	bne.n	8015b5a <USBH_Get_CfgDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) ||
 8015b50:	3f01      	subs	r7, #1
 8015b52:	2f0f      	cmp	r7, #15
 8015b54:	d9eb      	bls.n	8015b2e <USBH_Get_CfgDesc+0x196>
        status = USBH_NOT_SUPPORTED;
 8015b56:	2003      	movs	r0, #3
 8015b58:	e7e0      	b.n	8015b1c <USBH_Get_CfgDesc+0x184>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8015b5a:	2f00      	cmp	r7, #0
 8015b5c:	d0fb      	beq.n	8015b56 <USBH_Get_CfgDesc+0x1be>
        status = USBH_NOT_SUPPORTED;
 8015b5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b62:	e7e5      	b.n	8015b30 <USBH_Get_CfgDesc+0x198>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8015b64:	f1b9 0f02 	cmp.w	r9, #2
 8015b68:	d1f5      	bne.n	8015b56 <USBH_Get_CfgDesc+0x1be>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8015b6a:	f012 0203 	ands.w	r2, r2, #3
 8015b6e:	d103      	bne.n	8015b78 <USBH_Get_CfgDesc+0x1e0>
        status = USBH_NOT_SUPPORTED;
 8015b70:	2e08      	cmp	r6, #8
 8015b72:	bf18      	it	ne
 8015b74:	2003      	movne	r0, #3
 8015b76:	e7d1      	b.n	8015b1c <USBH_Get_CfgDesc+0x184>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8015b78:	2a03      	cmp	r2, #3
 8015b7a:	d1ec      	bne.n	8015b56 <USBH_Get_CfgDesc+0x1be>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8015b7c:	b10f      	cbz	r7, 8015b82 <USBH_Get_CfgDesc+0x1ea>
        status = USBH_NOT_SUPPORTED;
 8015b7e:	2e09      	cmp	r6, #9
 8015b80:	e7d6      	b.n	8015b30 <USBH_Get_CfgDesc+0x198>
 8015b82:	4610      	mov	r0, r2
 8015b84:	e7ca      	b.n	8015b1c <USBH_Get_CfgDesc+0x184>
        if_ix++;
 8015b86:	f10e 0e01 	add.w	lr, lr, #1
 8015b8a:	311a      	adds	r1, #26
 8015b8c:	e742      	b.n	8015a14 <USBH_Get_CfgDesc+0x7c>

08015b8e <USBH_Get_StringDesc>:
  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8015b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
{
 8015b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b94:	4604      	mov	r4, r0
 8015b96:	4615      	mov	r5, r2
 8015b98:	461e      	mov	r6, r3
  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8015b9a:	d823      	bhi.n	8015be4 <USBH_Get_StringDesc+0x56>
 8015b9c:	b312      	cbz	r2, 8015be4 <USBH_Get_StringDesc+0x56>
  status = USBH_GetDescriptor(phost,
 8015b9e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8015ba2:	9300      	str	r3, [sp, #0]
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8015baa:	f7ff fe6c 	bl	8015886 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8015bae:	b990      	cbnz	r0, 8015bd6 <USBH_Get_StringDesc+0x48>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8015bb0:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8015bb4:	2b03      	cmp	r3, #3
 8015bb6:	d10e      	bne.n	8015bd6 <USBH_Get_StringDesc+0x48>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015bb8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 8015bbc:	4602      	mov	r2, r0
      *pdest =  psrc[idx];
 8015bbe:	f504 748f 	add.w	r4, r4, #286	; 0x11e
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015bc2:	1e8b      	subs	r3, r1, #2
 8015bc4:	42b3      	cmp	r3, r6
 8015bc6:	bf28      	it	cs
 8015bc8:	4633      	movcs	r3, r6
 8015bca:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8015bcc:	b291      	uxth	r1, r2
 8015bce:	428b      	cmp	r3, r1
 8015bd0:	d803      	bhi.n	8015bda <USBH_Get_StringDesc+0x4c>
    *pdest = 0U; /* mark end of string */
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	702b      	strb	r3, [r5, #0]
}
 8015bd6:	b002      	add	sp, #8
 8015bd8:	bd70      	pop	{r4, r5, r6, pc}
      *pdest =  psrc[idx];
 8015bda:	5ca1      	ldrb	r1, [r4, r2]
 8015bdc:	3202      	adds	r2, #2
 8015bde:	f805 1b01 	strb.w	r1, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8015be2:	e7f3      	b.n	8015bcc <USBH_Get_StringDesc+0x3e>
    return USBH_NOT_SUPPORTED;
 8015be4:	2003      	movs	r0, #3
 8015be6:	e7f6      	b.n	8015bd6 <USBH_Get_StringDesc+0x48>

08015be8 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8015be8:	7883      	ldrb	r3, [r0, #2]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d105      	bne.n	8015bfa <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015bee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8015bf2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015bf4:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	4611      	mov	r1, r2
 8015bfe:	f7ff bd0c 	b.w	801561a <USBH_CtlReq>

08015c02 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8015c02:	7883      	ldrb	r3, [r0, #2]
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d105      	bne.n	8015c14 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015c08:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
 8015c0c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015c0e:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8015c10:	2300      	movs	r3, #0
 8015c12:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8015c14:	2200      	movs	r2, #0
 8015c16:	4611      	mov	r1, r2
 8015c18:	f7ff bcff 	b.w	801561a <USBH_CtlReq>

08015c1c <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8015c1c:	7883      	ldrb	r3, [r0, #2]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d105      	bne.n	8015c2e <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015c22:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
 8015c26:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8015c28:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8015c2e:	2200      	movs	r2, #0
 8015c30:	4611      	mov	r1, r2
 8015c32:	f7ff bcf2 	b.w	801561a <USBH_CtlReq>

08015c36 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8015c36:	7883      	ldrb	r3, [r0, #2]
 8015c38:	2b01      	cmp	r3, #1
 8015c3a:	d105      	bne.n	8015c48 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8015c3c:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
 8015c40:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8015c42:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8015c44:	2300      	movs	r3, #0
 8015c46:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 8015c48:	2200      	movs	r2, #0
 8015c4a:	4611      	mov	r1, r2
 8015c4c:	f7ff bce5 	b.w	801561a <USBH_CtlReq>

08015c50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8015c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015c52:	2400      	movs	r4, #0
{
 8015c54:	460b      	mov	r3, r1
 8015c56:	4611      	mov	r1, r2
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015c58:	2208      	movs	r2, #8
 8015c5a:	e9cd 4300 	strd	r4, r3, [sp]
 8015c5e:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8015c62:	4623      	mov	r3, r4
 8015c64:	4622      	mov	r2, r4
 8015c66:	f7f1 ff0a 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	b004      	add	sp, #16
 8015c6e:	bd10      	pop	{r4, pc}

08015c70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8015c70:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015c72:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8015c76:	b085      	sub	sp, #20
 8015c78:	460c      	mov	r4, r1
 8015c7a:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 8015c7c:	2d00      	cmp	r5, #0
{
 8015c7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015c82:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8015c84:	bf18      	it	ne
 8015c86:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015c8c:	2301      	movs	r3, #1
 8015c8e:	9300      	str	r3, [sp, #0]
 8015c90:	2300      	movs	r3, #0
 8015c92:	461a      	mov	r2, r3
 8015c94:	f7f1 fef3 	bl	8007a7e <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8015c98:	2000      	movs	r0, #0
 8015c9a:	b005      	add	sp, #20
 8015c9c:	bd30      	pop	{r4, r5, pc}

08015c9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015c9e:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015ca0:	2400      	movs	r4, #0
{
 8015ca2:	b085      	sub	sp, #20
 8015ca4:	460d      	mov	r5, r1
 8015ca6:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015ca8:	4623      	mov	r3, r4
 8015caa:	9501      	str	r5, [sp, #4]
 8015cac:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	9200      	str	r2, [sp, #0]
 8015cb4:	f7f1 fee3 	bl	8007a7e <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8015cb8:	4620      	mov	r0, r4
 8015cba:	b005      	add	sp, #20
 8015cbc:	bd30      	pop	{r4, r5, pc}

08015cbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8015cbe:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015cc0:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8015cc4:	b085      	sub	sp, #20
 8015cc6:	460c      	mov	r4, r1
 8015cc8:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 8015cca:	2d00      	cmp	r5, #0
{
 8015ccc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015cd0:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8015cd2:	bf18      	it	ne
 8015cd4:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015cda:	2301      	movs	r3, #1
 8015cdc:	2200      	movs	r2, #0
 8015cde:	9300      	str	r3, [sp, #0]
 8015ce0:	2302      	movs	r3, #2
 8015ce2:	f7f1 fecc 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8015ce6:	2000      	movs	r0, #0
 8015ce8:	b005      	add	sp, #20
 8015cea:	bd30      	pop	{r4, r5, pc}

08015cec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8015cec:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015cee:	2400      	movs	r4, #0
{
 8015cf0:	b085      	sub	sp, #20
 8015cf2:	460d      	mov	r5, r1
 8015cf4:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015cf6:	2302      	movs	r3, #2
 8015cf8:	9501      	str	r5, [sp, #4]
 8015cfa:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8015cfe:	2201      	movs	r2, #1
 8015d00:	9200      	str	r2, [sp, #0]
 8015d02:	f7f1 febc 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8015d06:	4620      	mov	r0, r4
 8015d08:	b005      	add	sp, #20
 8015d0a:	bd30      	pop	{r4, r5, pc}

08015d0c <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	4770      	bx	lr

08015d10 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015d10:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8015d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015d18:	69dc      	ldr	r4, [r3, #28]
{
 8015d1a:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 8015d1c:	7b23      	ldrb	r3, [r4, #12]
 8015d1e:	b123      	cbz	r3, 8015d2a <USBH_MSC_Process+0x1a>
  USBH_StatusTypeDef error = USBH_BUSY;
 8015d20:	1e58      	subs	r0, r3, #1
 8015d22:	bf18      	it	ne
 8015d24:	2001      	movne	r0, #1
}
 8015d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8015d2a:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015d2e:	f500 7878 	add.w	r8, r0, #992	; 0x3e0
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8015d32:	7822      	ldrb	r2, [r4, #0]
 8015d34:	2701      	movs	r7, #1
 8015d36:	428a      	cmp	r2, r1
 8015d38:	f240 80bb 	bls.w	8015eb2 <USBH_MSC_Process+0x1a2>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8015d3c:	2534      	movs	r5, #52	; 0x34
 8015d3e:	fb05 4301 	mla	r3, r5, r1, r4
 8015d42:	f883 7091 	strb.w	r7, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8015d46:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8015d4a:	2b08      	cmp	r3, #8
 8015d4c:	d80f      	bhi.n	8015d6e <USBH_MSC_Process+0x5e>
 8015d4e:	e8df f003 	tbb	[pc, r3]
 8015d52:	0e05      	.short	0x0e05
 8015d54:	771a6431 	.word	0x771a6431
 8015d58:	0e0e      	.short	0x0e0e
 8015d5a:	ac          	.byte	0xac
 8015d5b:	00          	.byte	0x00
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8015d5c:	2304      	movs	r3, #4
 8015d5e:	fb05 4101 	mla	r1, r5, r1, r4
 8015d62:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8015d66:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8015d6a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015d6e:	2304      	movs	r3, #4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015d70:	4641      	mov	r1, r8
 8015d72:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015d76:	f8c6 33e0 	str.w	r3, [r6, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	461a      	mov	r2, r3
 8015d7e:	f7fd f8cf 	bl	8012f20 <osMessageQueuePut>
  USBH_StatusTypeDef error = USBH_BUSY;
 8015d82:	2001      	movs	r0, #1
 8015d84:	e7cf      	b.n	8015d26 <USBH_MSC_Process+0x16>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8015d86:	fb05 4201 	mla	r2, r5, r1, r4
 8015d8a:	b2c9      	uxtb	r1, r1
 8015d8c:	329f      	adds	r2, #159	; 0x9f
 8015d8e:	f000 fb07 	bl	80163a0 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8015d92:	b938      	cbnz	r0, 8015da4 <USBH_MSC_Process+0x94>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8015d94:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015d98:	2202      	movs	r2, #2
 8015d9a:	fb05 4303 	mla	r3, r5, r3, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015d9e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8015da2:	e7e4      	b.n	8015d6e <USBH_MSC_Process+0x5e>
            if (scsi_status == USBH_FAIL)
 8015da4:	2802      	cmp	r0, #2
 8015da6:	d178      	bne.n	8015e9a <USBH_MSC_Process+0x18a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015da8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015dac:	2205      	movs	r2, #5
 8015dae:	fb05 4303 	mla	r3, r5, r3, r4
 8015db2:	e7f4      	b.n	8015d9e <USBH_MSC_Process+0x8e>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8015db4:	b2c9      	uxtb	r1, r1
 8015db6:	f000 fa9b 	bl	80162f0 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8015dba:	b988      	cbnz	r0, 8015de0 <USBH_MSC_Process+0xd0>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8015dbc:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015dc0:	2234      	movs	r2, #52	; 0x34
 8015dc2:	fb02 4303 	mla	r3, r2, r3, r4
 8015dc6:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8015dca:	3a00      	subs	r2, #0
 8015dcc:	bf18      	it	ne
 8015dce:	2201      	movne	r2, #1
 8015dd0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8015dd4:	2203      	movs	r2, #3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015dd6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8015dda:	f883 0092 	strb.w	r0, [r3, #146]	; 0x92
 8015dde:	e7c6      	b.n	8015d6e <USBH_MSC_Process+0x5e>
            if (ready_status == USBH_FAIL)
 8015de0:	2802      	cmp	r0, #2
 8015de2:	d10e      	bne.n	8015e02 <USBH_MSC_Process+0xf2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8015de4:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015de8:	2234      	movs	r2, #52	; 0x34
 8015dea:	fb02 4303 	mla	r3, r2, r3, r4
 8015dee:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8015df2:	3a02      	subs	r2, #2
 8015df4:	bf18      	it	ne
 8015df6:	2201      	movne	r2, #1
 8015df8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015dfc:	f240 1205 	movw	r2, #261	; 0x105
 8015e00:	e7e9      	b.n	8015dd6 <USBH_MSC_Process+0xc6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8015e02:	2804      	cmp	r0, #4
 8015e04:	d1b3      	bne.n	8015d6e <USBH_MSC_Process+0x5e>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015e06:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015e0a:	2234      	movs	r2, #52	; 0x34
 8015e0c:	fb02 4303 	mla	r3, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015e10:	f240 2201 	movw	r2, #513	; 0x201
 8015e14:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8015e18:	e7a9      	b.n	8015d6e <USBH_MSC_Process+0x5e>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8015e1a:	fb05 4201 	mla	r2, r5, r1, r4
 8015e1e:	b2c9      	uxtb	r1, r1
 8015e20:	3294      	adds	r2, #148	; 0x94
 8015e22:	f000 fa88 	bl	8016336 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8015e26:	2800      	cmp	r0, #0
 8015e28:	d1bc      	bne.n	8015da4 <USBH_MSC_Process+0x94>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8015e2a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015e2e:	2201      	movs	r2, #1
 8015e30:	fb05 4503 	mla	r5, r5, r3, r4
              MSC_Handle->current_lun++;
 8015e34:	4413      	add	r3, r2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015e36:	f8a5 2090 	strh.w	r2, [r5, #144]	; 0x90
              MSC_Handle->current_lun++;
 8015e3a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8015e3e:	e796      	b.n	8015d6e <USBH_MSC_Process+0x5e>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8015e40:	fb05 4201 	mla	r2, r5, r1, r4
 8015e44:	b2c9      	uxtb	r1, r1
 8015e46:	329c      	adds	r2, #156	; 0x9c
 8015e48:	f000 fb0a 	bl	8016460 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8015e4c:	b9e8      	cbnz	r0, 8015e8a <USBH_MSC_Process+0x17a>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8015e4e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015e52:	fb05 4503 	mla	r5, r5, r3, r4
 8015e56:	f895 209c 	ldrb.w	r2, [r5, #156]	; 0x9c
 8015e5a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8015e5e:	2a02      	cmp	r2, #2
 8015e60:	d10b      	bne.n	8015e7a <USBH_MSC_Process+0x16a>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8015e62:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8015e66:	f8d6 13c4 	ldr.w	r1, [r6, #964]	; 0x3c4
 8015e6a:	1a09      	subs	r1, r1, r0
 8015e6c:	f242 700f 	movw	r0, #9999	; 0x270f
 8015e70:	4281      	cmp	r1, r0
 8015e72:	d802      	bhi.n	8015e7a <USBH_MSC_Process+0x16a>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8015e74:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                  break;
 8015e78:	e779      	b.n	8015d6e <USBH_MSC_Process+0x5e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015e7a:	2234      	movs	r2, #52	; 0x34
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	fb02 4203 	mla	r2, r2, r3, r4
              MSC_Handle->current_lun++;
 8015e82:	440b      	add	r3, r1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015e84:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 8015e88:	e7d7      	b.n	8015e3a <USBH_MSC_Process+0x12a>
            if (scsi_status == USBH_FAIL)
 8015e8a:	2802      	cmp	r0, #2
 8015e8c:	d105      	bne.n	8015e9a <USBH_MSC_Process+0x18a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015e8e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015e92:	2208      	movs	r2, #8
 8015e94:	fb05 4303 	mla	r3, r5, r3, r4
 8015e98:	e781      	b.n	8015d9e <USBH_MSC_Process+0x8e>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8015e9a:	2804      	cmp	r0, #4
 8015e9c:	f47f af67 	bne.w	8015d6e <USBH_MSC_Process+0x5e>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015ea0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8015ea4:	fb05 4303 	mla	r3, r5, r3, r4
 8015ea8:	e7b2      	b.n	8015e10 <USBH_MSC_Process+0x100>
            MSC_Handle->current_lun++;
 8015eaa:	3101      	adds	r1, #1
 8015eac:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
            break;
 8015eb0:	e75d      	b.n	8015d6e <USBH_MSC_Process+0x5e>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015eb2:	2204      	movs	r2, #4
        MSC_Handle->current_lun = 0U;
 8015eb4:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8015eb8:	7327      	strb	r7, [r4, #12]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015eba:	4641      	mov	r1, r8
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015ebc:	f8c0 23e0 	str.w	r2, [r0, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8015ec6:	f7fd f82b 	bl	8012f20 <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8015eca:	4630      	mov	r0, r6
 8015ecc:	f8d6 33d4 	ldr.w	r3, [r6, #980]	; 0x3d4
 8015ed0:	2102      	movs	r1, #2
 8015ed2:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 8015ed4:	4638      	mov	r0, r7
 8015ed6:	e726      	b.n	8015d26 <USBH_MSC_Process+0x16>

08015ed8 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015ed8:	f8d0 237c 	ldr.w	r2, [r0, #892]	; 0x37c
{
 8015edc:	4603      	mov	r3, r0
 8015ede:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015ee0:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 8015ee2:	7ba2      	ldrb	r2, [r4, #14]
 8015ee4:	2a02      	cmp	r2, #2
 8015ee6:	d002      	beq.n	8015eee <USBH_MSC_ClassRequest+0x16>
 8015ee8:	2a03      	cmp	r2, #3
 8015eea:	d01f      	beq.n	8015f2c <USBH_MSC_ClassRequest+0x54>
 8015eec:	bb22      	cbnz	r2, 8015f38 <USBH_MSC_ClassRequest+0x60>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8015eee:	4621      	mov	r1, r4
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f000 f8d5 	bl	80160a0 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8015ef6:	2803      	cmp	r0, #3
 8015ef8:	d115      	bne.n	8015f26 <USBH_MSC_ClassRequest+0x4e>
        MSC_Handle->max_lun = 0U;
 8015efa:	2300      	movs	r3, #0
 8015efc:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8015efe:	7823      	ldrb	r3, [r4, #0]
 8015f00:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
 8015f02:	2000      	movs	r0, #0
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8015f04:	2b02      	cmp	r3, #2
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8015f06:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8015f0a:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8015f0e:	bf96      	itet	ls
 8015f10:	3301      	addls	r3, #1
 8015f12:	4613      	movhi	r3, r2
 8015f14:	b2db      	uxtbls	r3, r3
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	7023      	strb	r3, [r4, #0]
 8015f1a:	d006      	beq.n	8015f2a <USBH_MSC_ClassRequest+0x52>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8015f1c:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 8015f20:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8015f24:	e001      	b.n	8015f2a <USBH_MSC_ClassRequest+0x52>
      if (status == USBH_OK)
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d0e9      	beq.n	8015efe <USBH_MSC_ClassRequest+0x26>
}
 8015f2a:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	f7ff fe82 	bl	8015c36 <USBH_ClrFeature>
 8015f32:	b908      	cbnz	r0, 8015f38 <USBH_MSC_ClassRequest+0x60>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8015f34:	7be3      	ldrb	r3, [r4, #15]
 8015f36:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8015f38:	2001      	movs	r0, #1
 8015f3a:	e7f6      	b.n	8015f2a <USBH_MSC_ClassRequest+0x52>

08015f3c <USBH_MSC_InterfaceDeInit>:
{
 8015f3c:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015f3e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8015f42:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015f44:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 8015f46:	7969      	ldrb	r1, [r5, #5]
 8015f48:	b139      	cbz	r1, 8015f5a <USBH_MSC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8015f4a:	f000 fad5 	bl	80164f8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8015f4e:	7969      	ldrb	r1, [r5, #5]
 8015f50:	4620      	mov	r0, r4
 8015f52:	f000 faee 	bl	8016532 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8015f56:	2300      	movs	r3, #0
 8015f58:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 8015f5a:	7929      	ldrb	r1, [r5, #4]
 8015f5c:	b141      	cbz	r1, 8015f70 <USBH_MSC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8015f5e:	4620      	mov	r0, r4
 8015f60:	f000 faca 	bl	80164f8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8015f64:	7929      	ldrb	r1, [r5, #4]
 8015f66:	4620      	mov	r0, r4
 8015f68:	f000 fae3 	bl	8016532 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 8015f70:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8015f74:	69d8      	ldr	r0, [r3, #28]
 8015f76:	b128      	cbz	r0, 8015f84 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 8015f78:	f015 fb3c 	bl	802b5f4 <free>
    phost->pActiveClass->pData = 0U;
 8015f7c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8015f80:	2200      	movs	r2, #0
 8015f82:	61da      	str	r2, [r3, #28]
}
 8015f84:	2000      	movs	r0, #0
 8015f86:	bd38      	pop	{r3, r4, r5, pc}

08015f88 <USBH_MSC_InterfaceInit>:
{
 8015f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8015f8c:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8015f90:	2350      	movs	r3, #80	; 0x50
 8015f92:	2206      	movs	r2, #6
{
 8015f94:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8015f96:	7909      	ldrb	r1, [r1, #4]
 8015f98:	f7ff f88e 	bl	80150b8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8015f9c:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8015f9e:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8015fa0:	d904      	bls.n	8015fac <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 8015fa2:	2702      	movs	r7, #2
}
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	b004      	add	sp, #16
 8015fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 8015fac:	4601      	mov	r1, r0
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f7ff f879 	bl	80150a6 <USBH_SelectInterface>
  if (status != USBH_OK)
 8015fb4:	4607      	mov	r7, r0
 8015fb6:	2800      	cmp	r0, #0
 8015fb8:	d1f3      	bne.n	8015fa2 <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8015fba:	f8d5 837c 	ldr.w	r8, [r5, #892]	; 0x37c
 8015fbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015fc2:	f015 fb0f 	bl	802b5e4 <malloc>
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	d0e8      	beq.n	8015fa2 <USBH_MSC_InterfaceInit+0x1a>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8015fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fd4:	4639      	mov	r1, r7
 8015fd6:	f015 fcd4 	bl	802b982 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8015fda:	221a      	movs	r2, #26
 8015fdc:	fb02 5306 	mla	r3, r2, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8015fe0:	fb02 5606 	mla	r6, r2, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8015fe4:	f993 034e 	ldrsb.w	r0, [r3, #846]	; 0x34e
 8015fe8:	f893 134e 	ldrb.w	r1, [r3, #846]	; 0x34e
 8015fec:	2800      	cmp	r0, #0
 8015fee:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8015ff2:	f896 2356 	ldrb.w	r2, [r6, #854]	; 0x356
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8015ff6:	4628      	mov	r0, r5
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8015ff8:	bfac      	ite	ge
 8015ffa:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8015ffc:	71e1      	strblt	r1, [r4, #7]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8015ffe:	f996 1356 	ldrsb.w	r1, [r6, #854]	; 0x356
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8016002:	bfb4      	ite	lt
 8016004:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8016006:	8123      	strhge	r3, [r4, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8016008:	2900      	cmp	r1, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801600a:	f8b6 3358 	ldrh.w	r3, [r6, #856]	; 0x358
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 801600e:	bfa8      	it	ge
 8016010:	71a2      	strbge	r2, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8016012:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8016014:	bfba      	itte	lt
 8016016:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8016018:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801601a:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 801601c:	f000 fa71 	bl	8016502 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8016020:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8016022:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8016024:	4628      	mov	r0, r5
 8016026:	f000 fa6c 	bl	8016502 <USBH_AllocPipe>
 801602a:	7120      	strb	r0, [r4, #4]
  (void)USBH_MSC_BOT_Init(phost);
 801602c:	4628      	mov	r0, r5
 801602e:	f000 f841 	bl	80160b4 <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8016032:	79a2      	ldrb	r2, [r4, #6]
 8016034:	b90a      	cbnz	r2, 801603a <USBH_MSC_InterfaceInit+0xb2>
    return USBH_NOT_SUPPORTED;
 8016036:	2703      	movs	r7, #3
 8016038:	e7b4      	b.n	8015fa4 <USBH_MSC_InterfaceInit+0x1c>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 801603a:	8923      	ldrh	r3, [r4, #8]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d0fa      	beq.n	8016036 <USBH_MSC_InterfaceInit+0xae>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8016040:	9302      	str	r3, [sp, #8]
 8016042:	2602      	movs	r6, #2
 8016044:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 8016048:	4628      	mov	r0, r5
 801604a:	7961      	ldrb	r1, [r4, #5]
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	9601      	str	r6, [sp, #4]
 8016050:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8016054:	f000 fa41 	bl	80164da <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8016058:	79e2      	ldrb	r2, [r4, #7]
 801605a:	2a00      	cmp	r2, #0
 801605c:	d0eb      	beq.n	8016036 <USBH_MSC_InterfaceInit+0xae>
 801605e:	8963      	ldrh	r3, [r4, #10]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0e8      	beq.n	8016036 <USBH_MSC_InterfaceInit+0xae>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8016064:	7921      	ldrb	r1, [r4, #4]
 8016066:	4628      	mov	r0, r5
 8016068:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801606c:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8016076:	f000 fa30 	bl	80164da <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 801607a:	7921      	ldrb	r1, [r4, #4]
 801607c:	2200      	movs	r2, #0
 801607e:	4628      	mov	r0, r5
 8016080:	f7f1 fc9e 	bl	80079c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8016084:	2200      	movs	r2, #0
 8016086:	7961      	ldrb	r1, [r4, #5]
 8016088:	4628      	mov	r0, r5
 801608a:	f7f1 fc99 	bl	80079c0 <USBH_LL_SetToggle>
  return USBH_OK;
 801608e:	e789      	b.n	8015fa4 <USBH_MSC_InterfaceInit+0x1c>

08016090 <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 8016090:	f64f 7121 	movw	r1, #65313	; 0xff21
 8016094:	2200      	movs	r2, #0
 8016096:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 801609a:	4611      	mov	r1, r2
 801609c:	f7ff babd 	b.w	801561a <USBH_CtlReq>

080160a0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 80160a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80160a4:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 80160a8:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 80160ac:	2201      	movs	r2, #1
 80160ae:	f7ff bab4 	b.w	801561a <USBH_CtlReq>
	...

080160b4 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80160b4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 80160b8:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80160ba:	4905      	ldr	r1, [pc, #20]	; (80160d0 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80160bc:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80160be:	4a05      	ldr	r2, [pc, #20]	; (80160d4 <USBH_MSC_BOT_Init+0x20>)
 80160c0:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80160c4:	2201      	movs	r2, #1
 80160c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80160ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 80160ce:	4770      	bx	lr
 80160d0:	43425355 	.word	0x43425355
 80160d4:	20304050 	.word	0x20304050

080160d8 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80160d8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80160dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80160de:	69dc      	ldr	r4, [r3, #28]
{
 80160e0:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 80160e2:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 80160e6:	1e6b      	subs	r3, r5, #1
 80160e8:	2b0a      	cmp	r3, #10
 80160ea:	d868      	bhi.n	80161be <USBH_MSC_BOT_Process+0xe6>
 80160ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80160f0:	001b000b 	.word	0x001b000b
 80160f4:	003e0034 	.word	0x003e0034
 80160f8:	00750069 	.word	0x00750069
 80160fc:	00ae00a6 	.word	0x00ae00a6
 8016100:	00dd00d3 	.word	0x00dd00d3
 8016104:	00f6      	.short	0x00f6
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8016106:	2302      	movs	r3, #2
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8016108:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 801610a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 801610e:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8016112:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8016116:	7963      	ldrb	r3, [r4, #5]
 8016118:	9200      	str	r2, [sp, #0]
 801611a:	221f      	movs	r2, #31
 801611c:	f7ff fdcf 	bl	8015cbe <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 8016120:	4628      	mov	r0, r5
 8016122:	b003      	add	sp, #12
 8016124:	bdf0      	pop	{r4, r5, r6, r7, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016126:	7961      	ldrb	r1, [r4, #5]
 8016128:	f7f1 fc3a 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801612c:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 801612e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8016130:	d10a      	bne.n	8016148 <USBH_MSC_BOT_Process+0x70>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8016132:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8016134:	b363      	cbz	r3, 8016190 <USBH_MSC_BOT_Process+0xb8>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8016136:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 801613a:	2b00      	cmp	r3, #0
 801613c:	bfac      	ite	ge
 801613e:	2305      	movge	r3, #5
 8016140:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016142:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8016146:	e060      	b.n	801620a <USBH_MSC_BOT_Process+0x132>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016148:	2802      	cmp	r0, #2
 801614a:	d173      	bne.n	8016234 <USBH_MSC_BOT_Process+0x15c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 801614c:	2701      	movs	r7, #1
 801614e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8016152:	f8c6 53e0 	str.w	r5, [r6, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8016156:	e02a      	b.n	80161ae <USBH_MSC_BOT_Process+0xd6>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8016158:	7923      	ldrb	r3, [r4, #4]
 801615a:	8962      	ldrh	r2, [r4, #10]
 801615c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8016160:	f7ff fdc4 	bl	8015cec <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8016164:	2304      	movs	r3, #4
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8016166:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 801616a:	e028      	b.n	80161be <USBH_MSC_BOT_Process+0xe6>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 801616c:	7921      	ldrb	r1, [r4, #4]
 801616e:	f7f1 fc17 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8016172:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016174:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8016176:	d112      	bne.n	801619e <USBH_MSC_BOT_Process+0xc6>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8016178:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801617a:	8962      	ldrh	r2, [r4, #10]
 801617c:	4293      	cmp	r3, r2
 801617e:	d950      	bls.n	8016222 <USBH_MSC_BOT_Process+0x14a>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8016180:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8016184:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8016186:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8016188:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 801618a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 801618e:	b90b      	cbnz	r3, 8016194 <USBH_MSC_BOT_Process+0xbc>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8016190:	2307      	movs	r3, #7
 8016192:	e7d6      	b.n	8016142 <USBH_MSC_BOT_Process+0x6a>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8016194:	7923      	ldrb	r3, [r4, #4]
 8016196:	4630      	mov	r0, r6
 8016198:	f7ff fda8 	bl	8015cec <USBH_BulkReceiveData>
 801619c:	e7c0      	b.n	8016120 <USBH_MSC_BOT_Process+0x48>
      else if (URB_Status == USBH_URB_STALL)
 801619e:	2805      	cmp	r0, #5
 80161a0:	d10d      	bne.n	80161be <USBH_MSC_BOT_Process+0xe6>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80161a2:	2309      	movs	r3, #9
 80161a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80161a8:	2302      	movs	r3, #2
 80161aa:	f8c6 33e0 	str.w	r3, [r6, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80161ae:	2300      	movs	r3, #0
 80161b0:	f506 7178 	add.w	r1, r6, #992	; 0x3e0
 80161b4:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
 80161b8:	461a      	mov	r2, r3
 80161ba:	f7fc feb1 	bl	8012f20 <osMessageQueuePut>
  switch (MSC_Handle->hbot.state)
 80161be:	2501      	movs	r5, #1
 80161c0:	e7ae      	b.n	8016120 <USBH_MSC_BOT_Process+0x48>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80161c2:	2501      	movs	r5, #1
 80161c4:	7963      	ldrb	r3, [r4, #5]
 80161c6:	8922      	ldrh	r2, [r4, #8]
 80161c8:	9500      	str	r5, [sp, #0]
 80161ca:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80161ce:	f7ff fd76 	bl	8015cbe <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80161d2:	2306      	movs	r3, #6
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80161d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80161d8:	e7a2      	b.n	8016120 <USBH_MSC_BOT_Process+0x48>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80161da:	7961      	ldrb	r1, [r4, #5]
 80161dc:	f7f1 fbe0 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80161e0:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80161e2:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80161e4:	d120      	bne.n	8016228 <USBH_MSC_BOT_Process+0x150>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80161e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80161e8:	8922      	ldrh	r2, [r4, #8]
 80161ea:	4293      	cmp	r3, r2
 80161ec:	d919      	bls.n	8016222 <USBH_MSC_BOT_Process+0x14a>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80161ee:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80161f2:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80161f4:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80161f6:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80161f8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d0c7      	beq.n	8016190 <USBH_MSC_BOT_Process+0xb8>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8016200:	7963      	ldrb	r3, [r4, #5]
 8016202:	9000      	str	r0, [sp, #0]
 8016204:	4630      	mov	r0, r6
 8016206:	f7ff fd5a 	bl	8015cbe <USBH_BulkSendData>
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801620a:	2302      	movs	r3, #2
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 801620c:	f506 7178 	add.w	r1, r6, #992	; 0x3e0
 8016210:	f8d6 03d8 	ldr.w	r0, [r6, #984]	; 0x3d8
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8016214:	f8c6 33e0 	str.w	r3, [r6, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8016218:	2300      	movs	r3, #0
 801621a:	461a      	mov	r2, r3
 801621c:	f7fc fe80 	bl	8012f20 <osMessageQueuePut>
 8016220:	e77e      	b.n	8016120 <USBH_MSC_BOT_Process+0x48>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8016222:	2300      	movs	r3, #0
 8016224:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8016226:	e7b3      	b.n	8016190 <USBH_MSC_BOT_Process+0xb8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016228:	2802      	cmp	r0, #2
 801622a:	d103      	bne.n	8016234 <USBH_MSC_BOT_Process+0x15c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 801622c:	2305      	movs	r3, #5
 801622e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8016232:	e78e      	b.n	8016152 <USBH_MSC_BOT_Process+0x7a>
      else if (URB_Status == USBH_URB_STALL)
 8016234:	2d05      	cmp	r5, #5
 8016236:	d1c2      	bne.n	80161be <USBH_MSC_BOT_Process+0xe6>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8016238:	230a      	movs	r3, #10
 801623a:	e7b3      	b.n	80161a4 <USBH_MSC_BOT_Process+0xcc>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 801623c:	7923      	ldrb	r3, [r4, #4]
 801623e:	220d      	movs	r2, #13
 8016240:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8016244:	f7ff fd52 	bl	8015cec <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8016248:	2308      	movs	r3, #8
 801624a:	e78c      	b.n	8016166 <USBH_MSC_BOT_Process+0x8e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 801624c:	7921      	ldrb	r1, [r4, #4]
 801624e:	f7f1 fba7 	bl	80079a0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8016252:	2801      	cmp	r0, #1
 8016254:	d11d      	bne.n	8016292 <USBH_MSC_BOT_Process+0x1ba>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016256:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 801625a:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 801625e:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016260:	f8d6 337c 	ldr.w	r3, [r6, #892]	; 0x37c
 8016264:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8016266:	7921      	ldrb	r1, [r4, #4]
 8016268:	f7f1 fb96 	bl	8007998 <USBH_LL_GetLastXferSize>
 801626c:	280d      	cmp	r0, #13
 801626e:	d10e      	bne.n	801628e <USBH_MSC_BOT_Process+0x1b6>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8016270:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8016272:	4b1e      	ldr	r3, [pc, #120]	; (80162ec <USBH_MSC_BOT_Process+0x214>)
 8016274:	429a      	cmp	r2, r3
 8016276:	d10a      	bne.n	801628e <USBH_MSC_BOT_Process+0x1b6>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8016278:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801627a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801627c:	429a      	cmp	r2, r3
 801627e:	d106      	bne.n	801628e <USBH_MSC_BOT_Process+0x1b6>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8016280:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
 8016284:	3d00      	subs	r5, #0
 8016286:	bf18      	it	ne
 8016288:	2501      	movne	r5, #1
 801628a:	006d      	lsls	r5, r5, #1
 801628c:	e7bd      	b.n	801620a <USBH_MSC_BOT_Process+0x132>
          status = USBH_FAIL;
 801628e:	2502      	movs	r5, #2
 8016290:	e7bb      	b.n	801620a <USBH_MSC_BOT_Process+0x132>
      else if (URB_Status == USBH_URB_STALL)
 8016292:	2805      	cmp	r0, #5
 8016294:	e784      	b.n	80161a0 <USBH_MSC_BOT_Process+0xc8>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8016296:	79e1      	ldrb	r1, [r4, #7]
 8016298:	f7ff fccd 	bl	8015c36 <USBH_ClrFeature>
      if (error == USBH_OK)
 801629c:	b908      	cbnz	r0, 80162a2 <USBH_MSC_BOT_Process+0x1ca>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 801629e:	2307      	movs	r3, #7
 80162a0:	e761      	b.n	8016166 <USBH_MSC_BOT_Process+0x8e>
      else if (error == USBH_UNRECOVERED_ERROR)
 80162a2:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 80162a4:	d18b      	bne.n	80161be <USBH_MSC_BOT_Process+0xe6>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80162a6:	230b      	movs	r3, #11
 80162a8:	e75d      	b.n	8016166 <USBH_MSC_BOT_Process+0x8e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80162aa:	79a1      	ldrb	r1, [r4, #6]
 80162ac:	f7ff fcc3 	bl	8015c36 <USBH_ClrFeature>
      if (error == USBH_OK)
 80162b0:	4605      	mov	r5, r0
 80162b2:	b988      	cbnz	r0, 80162d8 <USBH_MSC_BOT_Process+0x200>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80162b4:	7961      	ldrb	r1, [r4, #5]
 80162b6:	4630      	mov	r0, r6
 80162b8:	f7f1 fb91 	bl	80079de <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80162bc:	f1c0 0001 	rsb	r0, r0, #1
 80162c0:	7961      	ldrb	r1, [r4, #5]
 80162c2:	b2c2      	uxtb	r2, r0
 80162c4:	4630      	mov	r0, r6
 80162c6:	f7f1 fb7b 	bl	80079c0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80162ca:	462a      	mov	r2, r5
 80162cc:	7921      	ldrb	r1, [r4, #4]
 80162ce:	4630      	mov	r0, r6
 80162d0:	f7f1 fb76 	bl	80079c0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80162d4:	2309      	movs	r3, #9
 80162d6:	e746      	b.n	8016166 <USBH_MSC_BOT_Process+0x8e>
        if (error == USBH_UNRECOVERED_ERROR)
 80162d8:	2804      	cmp	r0, #4
 80162da:	e7e3      	b.n	80162a4 <USBH_MSC_BOT_Process+0x1cc>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80162dc:	f7ff fed8 	bl	8016090 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 80162e0:	4605      	mov	r5, r0
 80162e2:	2800      	cmp	r0, #0
 80162e4:	f47f af1c 	bne.w	8016120 <USBH_MSC_BOT_Process+0x48>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80162e8:	2301      	movs	r3, #1
 80162ea:	e773      	b.n	80161d4 <USBH_MSC_BOT_Process+0xfc>
 80162ec:	53425355 	.word	0x53425355

080162f0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80162f0:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80162f2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80162f6:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80162f8:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80162fc:	2d01      	cmp	r5, #1
 80162fe:	d004      	beq.n	801630a <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8016300:	2d02      	cmp	r5, #2
 8016302:	d014      	beq.n	801632e <USBH_MSC_SCSI_TestUnitReady+0x3e>
 8016304:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8016306:	4628      	mov	r0, r5
 8016308:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 801630a:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801630c:	230a      	movs	r3, #10
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801630e:	2210      	movs	r2, #16
 8016310:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016314:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8016318:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801631a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801631e:	f015 fb30 	bl	802b982 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016322:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016324:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016328:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
 801632c:	e7eb      	b.n	8016306 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 801632e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8016332:	f7ff bed1 	b.w	80160d8 <USBH_MSC_BOT_Process>

08016336 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016336:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 801633a:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801633c:	69dc      	ldr	r4, [r3, #28]
{
 801633e:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
 8016340:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8016344:	2d01      	cmp	r5, #1
 8016346:	d004      	beq.n	8016352 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8016348:	2d02      	cmp	r5, #2
 801634a:	d01b      	beq.n	8016384 <USBH_MSC_SCSI_ReadCapacity+0x4e>
 801634c:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
 801634e:	4628      	mov	r0, r5
 8016350:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8016352:	2308      	movs	r3, #8
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016354:	2210      	movs	r2, #16
 8016356:	2100      	movs	r1, #0
 8016358:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 801635c:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801635e:	2380      	movs	r3, #128	; 0x80
 8016360:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016364:	f015 fb0d 	bl	802b982 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016368:	f242 530a 	movw	r3, #9482	; 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801636c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016370:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016374:	2302      	movs	r3, #2
 8016376:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801637a:	f104 0310 	add.w	r3, r4, #16
 801637e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8016382:	e7e4      	b.n	801634e <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016384:	f7ff fea8 	bl	80160d8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8016388:	4605      	mov	r5, r0
 801638a:	2800      	cmp	r0, #0
 801638c:	d1df      	bne.n	801634e <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 801638e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8016392:	6813      	ldr	r3, [r2, #0]
 8016394:	ba1b      	rev	r3, r3
 8016396:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8016398:	88d3      	ldrh	r3, [r2, #6]
 801639a:	ba5b      	rev16	r3, r3
 801639c:	80b3      	strh	r3, [r6, #4]
 801639e:	e7d6      	b.n	801634e <USBH_MSC_SCSI_ReadCapacity+0x18>

080163a0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80163a0:	b570      	push	{r4, r5, r6, lr}
 80163a2:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80163a4:	f8d0 237c 	ldr.w	r2, [r0, #892]	; 0x37c
{
 80163a8:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80163aa:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80163ac:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80163b0:	2d01      	cmp	r5, #1
 80163b2:	d004      	beq.n	80163be <USBH_MSC_SCSI_Inquiry+0x1e>
 80163b4:	2d02      	cmp	r5, #2
 80163b6:	d021      	beq.n	80163fc <USBH_MSC_SCSI_Inquiry+0x5c>
 80163b8:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 80163ba:	4628      	mov	r0, r5
 80163bc:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80163be:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80163c0:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80163c2:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80163c4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80163c8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80163cc:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80163ce:	65e1      	str	r1, [r4, #92]	; 0x5c
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80163d0:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80163d4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80163d8:	2302      	movs	r3, #2
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80163da:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 80163de:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80163e2:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80163e6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80163ea:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80163ee:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80163f2:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80163f6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80163fa:	e7de      	b.n	80163ba <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 80163fc:	f7ff fe6c 	bl	80160d8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8016400:	4605      	mov	r5, r0
 8016402:	2800      	cmp	r0, #0
 8016404:	d1d9      	bne.n	80163ba <USBH_MSC_SCSI_Inquiry+0x1a>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8016406:	4601      	mov	r1, r0
 8016408:	2222      	movs	r2, #34	; 0x22
 801640a:	4630      	mov	r0, r6
 801640c:	f015 fab9 	bl	802b982 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8016410:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8016414:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8016418:	781a      	ldrb	r2, [r3, #0]
 801641a:	f002 021f 	and.w	r2, r2, #31
 801641e:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8016420:	781a      	ldrb	r2, [r3, #0]
 8016422:	0952      	lsrs	r2, r2, #5
 8016424:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8016426:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801642a:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
 801642c:	bfbc      	itt	lt
 801642e:	2201      	movlt	r2, #1
 8016430:	70b2      	strblt	r2, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8016432:	689a      	ldr	r2, [r3, #8]
 8016434:	f8c6 2003 	str.w	r2, [r6, #3]
 8016438:	68da      	ldr	r2, [r3, #12]
 801643a:	f8c6 2007 	str.w	r2, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 801643e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016442:	f103 0210 	add.w	r2, r3, #16
 8016446:	3320      	adds	r3, #32
 8016448:	f852 0b04 	ldr.w	r0, [r2], #4
 801644c:	429a      	cmp	r2, r3
 801644e:	f841 0b04 	str.w	r0, [r1], #4
 8016452:	d1f9      	bne.n	8016448 <USBH_MSC_SCSI_Inquiry+0xa8>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8016454:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016458:	6a1b      	ldr	r3, [r3, #32]
 801645a:	f8c6 301d 	str.w	r3, [r6, #29]
 801645e:	e7ac      	b.n	80163ba <USBH_MSC_SCSI_Inquiry+0x1a>

08016460 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8016460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016462:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8016466:	460f      	mov	r7, r1
 8016468:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801646a:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 801646c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8016470:	2d01      	cmp	r5, #1
 8016472:	d004      	beq.n	801647e <USBH_MSC_SCSI_RequestSense+0x1e>
 8016474:	2d02      	cmp	r5, #2
 8016476:	d020      	beq.n	80164ba <USBH_MSC_SCSI_RequestSense+0x5a>
 8016478:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 801647a:	4628      	mov	r0, r5
 801647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801647e:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8016480:	260e      	movs	r6, #14
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016482:	2210      	movs	r2, #16
 8016484:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016486:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801648a:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 801648e:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8016490:	017f      	lsls	r7, r7, #5
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016492:	f015 fa76 	bl	802b982 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016496:	f240 330a 	movw	r3, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 801649a:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801649e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80164a2:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80164a4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80164a8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80164ac:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80164b0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80164b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80164b8:	e7df      	b.n	801647a <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 80164ba:	f7ff fe0d 	bl	80160d8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 80164be:	4605      	mov	r5, r0
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d1da      	bne.n	801647a <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80164c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80164c8:	789a      	ldrb	r2, [r3, #2]
 80164ca:	f002 020f 	and.w	r2, r2, #15
 80164ce:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80164d0:	7b1a      	ldrb	r2, [r3, #12]
 80164d2:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80164d4:	7b5b      	ldrb	r3, [r3, #13]
 80164d6:	70b3      	strb	r3, [r6, #2]
 80164d8:	e7cf      	b.n	801647a <USBH_MSC_SCSI_RequestSense+0x1a>

080164da <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80164da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80164dc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80164e0:	9402      	str	r4, [sp, #8]
 80164e2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80164e6:	9401      	str	r4, [sp, #4]
 80164e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80164ec:	9400      	str	r4, [sp, #0]
 80164ee:	f7f1 faaa 	bl	8007a46 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 80164f2:	2000      	movs	r0, #0
 80164f4:	b004      	add	sp, #16
 80164f6:	bd10      	pop	{r4, pc}

080164f8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80164f8:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80164fa:	f7f1 fab7 	bl	8007a6c <USBH_LL_ClosePipe>

  return USBH_OK;
}
 80164fe:	2000      	movs	r0, #0
 8016500:	bd08      	pop	{r3, pc}

08016502 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8016502:	b530      	push	{r4, r5, lr}
 8016504:	2300      	movs	r3, #0
 8016506:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801650a:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801650e:	b2da      	uxtb	r2, r3
 8016510:	042d      	lsls	r5, r5, #16
 8016512:	d408      	bmi.n	8016526 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8016514:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016518:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 801651c:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801651e:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 8016522:	b2d0      	uxtb	r0, r2
 8016524:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8016526:	3301      	adds	r3, #1
 8016528:	2b10      	cmp	r3, #16
 801652a:	d1ee      	bne.n	801650a <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 801652c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016530:	e7f7      	b.n	8016522 <USBH_AllocPipe+0x20>

08016532 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8016532:	290f      	cmp	r1, #15
    phost->Pipes[idx] &= 0x7FFFU;
 8016534:	bf9f      	itttt	ls
 8016536:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
 801653a:	f8d0 3384 	ldrls.w	r3, [r0, #900]	; 0x384
 801653e:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8016542:	f8c0 3384 	strls.w	r3, [r0, #900]	; 0x384
}
 8016546:	2000      	movs	r0, #0
 8016548:	4770      	bx	lr

0801654a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801654a:	8880      	ldrh	r0, [r0, #4]
 801654c:	4770      	bx	lr

0801654e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801654e:	b570      	push	{r4, r5, r6, lr}
 8016550:	6803      	ldr	r3, [r0, #0]
 8016552:	460c      	mov	r4, r1
 8016554:	2100      	movs	r1, #0
 8016556:	4605      	mov	r5, r0
 8016558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801655a:	4798      	blx	r3
 801655c:	4606      	mov	r6, r0
 801655e:	682b      	ldr	r3, [r5, #0]
 8016560:	4628      	mov	r0, r5
 8016562:	1ba4      	subs	r4, r4, r6
 8016564:	6a1b      	ldr	r3, [r3, #32]
 8016566:	b2a4      	uxth	r4, r4
 8016568:	4798      	blx	r3
 801656a:	fbb4 f0f0 	udiv	r0, r4, r0
 801656e:	bd70      	pop	{r4, r5, r6, pc}

08016570 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016570:	2300      	movs	r3, #0
 8016572:	8083      	strh	r3, [r0, #4]
 8016574:	4770      	bx	lr

08016576 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016576:	b510      	push	{r4, lr}
 8016578:	6803      	ldr	r3, [r0, #0]
 801657a:	4604      	mov	r4, r0
 801657c:	8881      	ldrh	r1, [r0, #4]
 801657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016580:	4798      	blx	r3
 8016582:	88a3      	ldrh	r3, [r4, #4]
 8016584:	3301      	adds	r3, #1
 8016586:	80a3      	strh	r3, [r4, #4]
 8016588:	bd10      	pop	{r4, pc}

0801658a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801658e:	4718      	bx	r3

08016590 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016590:	4770      	bx	lr
	...

08016594 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016594:	4a02      	ldr	r2, [pc, #8]	; (80165a0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016596:	6002      	str	r2, [r0, #0]
 8016598:	2200      	movs	r2, #0
 801659a:	8082      	strh	r2, [r0, #4]
 801659c:	4770      	bx	lr
 801659e:	bf00      	nop
 80165a0:	0802f650 	.word	0x0802f650

080165a4 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 80165a4:	b510      	push	{r4, lr}
 80165a6:	6803      	ldr	r3, [r0, #0]
 80165a8:	4604      	mov	r4, r0
 80165aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80165ae:	4798      	blx	r3
 80165b0:	b110      	cbz	r0, 80165b8 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 80165b2:	4620      	mov	r0, r4
 80165b4:	f7ef ff8e 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80165b8:	bd10      	pop	{r4, pc}

080165ba <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80165ba:	f8c0 10e0 	str.w	r1, [r0, #224]	; 0xe0
 80165be:	4770      	bx	lr

080165c0 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80165c0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 80165c4:	4770      	bx	lr

080165c6 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80165c6:	b538      	push	{r3, r4, r5, lr}
 80165c8:	4604      	mov	r4, r0
 80165ca:	460d      	mov	r5, r1
 80165cc:	f000 f95a 	bl	8016884 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80165d0:	f884 50de 	strb.w	r5, [r4, #222]	; 0xde
 80165d4:	bd38      	pop	{r3, r4, r5, pc}

080165d6 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80165d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80165da:	4617      	mov	r7, r2
 80165dc:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80165e0:	2200      	movs	r2, #0
 80165e2:	4604      	mov	r4, r0
 80165e4:	460e      	mov	r6, r1
 80165e6:	4698      	mov	r8, r3
 80165e8:	4611      	mov	r1, r2
 80165ea:	9500      	str	r5, [sp, #0]
 80165ec:	30b8      	adds	r0, #184	; 0xb8
 80165ee:	f7f2 f811 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
 80165f2:	4643      	mov	r3, r8
 80165f4:	463a      	mov	r2, r7
 80165f6:	4631      	mov	r1, r6
 80165f8:	4620      	mov	r0, r4
 80165fa:	9508      	str	r5, [sp, #32]
 80165fc:	b002      	add	sp, #8
 80165fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016602:	f000 ba06 	b.w	8016a12 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016606 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8016606:	b530      	push	{r4, r5, lr}
 8016608:	4604      	mov	r4, r0
 801660a:	b085      	sub	sp, #20
 801660c:	f000 f985 	bl	801691a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016610:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8016614:	2b03      	cmp	r3, #3
 8016616:	d814      	bhi.n	8016642 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8016618:	e8df f003 	tbb	[pc, r3]
 801661c:	10100202 	.word	0x10100202
 8016620:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8016624:	4620      	mov	r0, r4
 8016626:	f000 f99a 	bl	801695e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801662a:	b200      	sxth	r0, r0
 801662c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8016630:	2b03      	cmp	r3, #3
 8016632:	d830      	bhi.n	8016696 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 8016634:	e8df f003 	tbb	[pc, r3]
 8016638:	64423107 	.word	0x64423107
 801663c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8016640:	e7f0      	b.n	8016624 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8016642:	2000      	movs	r0, #0
 8016644:	e7f2      	b.n	801662c <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8016646:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801664a:	2200      	movs	r2, #0
 801664c:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	; 0xc0
 8016650:	9300      	str	r3, [sp, #0]
 8016652:	4611      	mov	r1, r2
 8016654:	4603      	mov	r3, r0
 8016656:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801665a:	f7f1 ffdb 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
 801665e:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 8016662:	4629      	mov	r1, r5
 8016664:	429d      	cmp	r5, r3
 8016666:	eba5 0503 	sub.w	r5, r5, r3
 801666a:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 801666e:	bfa8      	it	ge
 8016670:	4619      	movge	r1, r3
 8016672:	2d00      	cmp	r5, #0
 8016674:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016678:	f8ad 1008 	strh.w	r1, [sp, #8]
 801667c:	f04f 0100 	mov.w	r1, #0
 8016680:	bfb8      	it	lt
 8016682:	426d      	neglt	r5, r5
 8016684:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016688:	f8ad 500c 	strh.w	r5, [sp, #12]
 801668c:	a902      	add	r1, sp, #8
 801668e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016692:	f005 fa85 	bl	801bba0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8016696:	b005      	add	sp, #20
 8016698:	bd30      	pop	{r4, r5, pc}
 801669a:	8921      	ldrh	r1, [r4, #8]
 801669c:	2200      	movs	r2, #0
 801669e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80166a2:	1a09      	subs	r1, r1, r0
 80166a4:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	; 0xbc
 80166a8:	9300      	str	r3, [sp, #0]
 80166aa:	4603      	mov	r3, r0
 80166ac:	b209      	sxth	r1, r1
 80166ae:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80166b2:	f7f1 ffaf 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
 80166b6:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	; 0xbc
 80166ba:	e7d2      	b.n	8016662 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 80166bc:	2200      	movs	r2, #0
 80166be:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80166c2:	9000      	str	r0, [sp, #0]
 80166c4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80166c8:	4611      	mov	r1, r2
 80166ca:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	; 0xc2
 80166ce:	f7f1 ffa1 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
 80166d2:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	; 0xc2
 80166d6:	2100      	movs	r1, #0
 80166d8:	429d      	cmp	r5, r3
 80166da:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	; 0xc0
 80166de:	f8ad 1008 	strh.w	r1, [sp, #8]
 80166e2:	4629      	mov	r1, r5
 80166e4:	eba5 0503 	sub.w	r5, r5, r3
 80166e8:	bfa8      	it	ge
 80166ea:	4619      	movge	r1, r3
 80166ec:	f8ad 200c 	strh.w	r2, [sp, #12]
 80166f0:	2d00      	cmp	r5, #0
 80166f2:	f8ad 100a 	strh.w	r1, [sp, #10]
 80166f6:	bfb8      	it	lt
 80166f8:	426d      	neglt	r5, r5
 80166fa:	f8ad 500e 	strh.w	r5, [sp, #14]
 80166fe:	e7c5      	b.n	801668c <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 8016700:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016704:	2100      	movs	r1, #0
 8016706:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801670a:	1a12      	subs	r2, r2, r0
 801670c:	9000      	str	r0, [sp, #0]
 801670e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8016712:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	; 0xbe
 8016716:	b212      	sxth	r2, r2
 8016718:	f7f1 ff7c 	bl	8008614 <_ZN8touchgfx8Drawable11setPositionEssss>
 801671c:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	; 0xbe
 8016720:	e7d9      	b.n	80166d6 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>
	...

08016724 <_ZN8touchgfx11BoxProgressC1Ev>:
 8016724:	b510      	push	{r4, lr}
 8016726:	4604      	mov	r4, r0
 8016728:	f000 f852 	bl	80167d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801672c:	2201      	movs	r2, #1
 801672e:	4b17      	ldr	r3, [pc, #92]	; (801678c <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8016730:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016734:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 8016738:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
 801673c:	4a14      	ldr	r2, [pc, #80]	; (8016790 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 801673e:	6023      	str	r3, [r4, #0]
 8016740:	2300      	movs	r3, #0
 8016742:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 8016746:	22ff      	movs	r2, #255	; 0xff
 8016748:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 801674c:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 8016750:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 8016754:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8016758:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 801675c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8016760:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8016764:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 8016768:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 801676c:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
 8016770:	f8a4 30da 	strh.w	r3, [r4, #218]	; 0xda
 8016774:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 8016778:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
 801677c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8016780:	e9c4 3333 	strd	r3, r3, [r4, #204]	; 0xcc
 8016784:	f000 fb80 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016788:	4620      	mov	r0, r4
 801678a:	bd10      	pop	{r4, pc}
 801678c:	0802f684 	.word	0x0802f684
 8016790:	0802fe0c 	.word	0x0802fe0c

08016794 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8016794:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
 8016798:	4770      	bx	lr

0801679a <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 801679a:	b570      	push	{r4, r5, r6, lr}
 801679c:	4604      	mov	r4, r0
 801679e:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 80167a2:	3058      	adds	r0, #88	; 0x58
 80167a4:	f005 f9ab 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 80167a8:	6823      	ldr	r3, [r4, #0]
 80167aa:	4620      	mov	r0, r4
 80167ac:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80167b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80167b4:	4798      	blx	r3
 80167b6:	462b      	mov	r3, r5
 80167b8:	4601      	mov	r1, r0
 80167ba:	4620      	mov	r0, r4
 80167bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167c0:	4718      	bx	r3

080167c2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80167c2:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 80167c6:	428b      	cmp	r3, r1
 80167c8:	d001      	beq.n	80167ce <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 80167ca:	f7ff bfe6 	b.w	801679a <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 80167ce:	4770      	bx	lr

080167d0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80167d0:	b510      	push	{r4, lr}
 80167d2:	4604      	mov	r4, r0
 80167d4:	f000 f94a 	bl	8016a6c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80167d8:	4b03      	ldr	r3, [pc, #12]	; (80167e8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80167da:	4620      	mov	r0, r4
 80167dc:	6023      	str	r3, [r4, #0]
 80167de:	2300      	movs	r3, #0
 80167e0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80167e4:	bd10      	pop	{r4, pc}
 80167e6:	bf00      	nop
 80167e8:	0802f768 	.word	0x0802f768

080167ec <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80167ec:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80167f0:	4770      	bx	lr

080167f2 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80167f2:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80167f6:	4770      	bx	lr

080167f8 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80167f8:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80167fc:	4770      	bx	lr

080167fe <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80167fe:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016802:	4770      	bx	lr

08016804 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016806:	461e      	mov	r6, r3
 8016808:	6803      	ldr	r3, [r0, #0]
 801680a:	460f      	mov	r7, r1
 801680c:	4604      	mov	r4, r0
 801680e:	4615      	mov	r5, r2
 8016810:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016814:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801681c:	4798      	blx	r3
 801681e:	b93e      	cbnz	r6, 8016830 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8016820:	1bed      	subs	r5, r5, r7
 8016822:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8016826:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801682a:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 801682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016830:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8016834:	e7f7      	b.n	8016826 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

08016836 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016836:	b510      	push	{r4, lr}
 8016838:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 801683c:	600c      	str	r4, [r1, #0]
 801683e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016842:	6011      	str	r1, [r2, #0]
 8016844:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016848:	801a      	strh	r2, [r3, #0]
 801684a:	9b02      	ldr	r3, [sp, #8]
 801684c:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016850:	801a      	strh	r2, [r3, #0]
 8016852:	bd10      	pop	{r4, pc}

08016854 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016854:	b510      	push	{r4, lr}
 8016856:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 801685a:	600c      	str	r4, [r1, #0]
 801685c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016860:	6011      	str	r1, [r2, #0]
 8016862:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016866:	801a      	strh	r2, [r3, #0]
 8016868:	bd10      	pop	{r4, pc}

0801686a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 801686a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801686e:	600b      	str	r3, [r1, #0]
 8016870:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016874:	6013      	str	r3, [r2, #0]
 8016876:	4770      	bx	lr

08016878 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016878:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 801687c:	4770      	bx	lr

0801687e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801687e:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016882:	4770      	bx	lr

08016884 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8016884:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016888:	4770      	bx	lr

0801688a <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 801688a:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 801688e:	4770      	bx	lr

08016890 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016890:	b570      	push	{r4, r5, r6, lr}
 8016892:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016896:	4604      	mov	r4, r0
 8016898:	4616      	mov	r6, r2
 801689a:	428d      	cmp	r5, r1
 801689c:	bfb8      	it	lt
 801689e:	460d      	movlt	r5, r1
 80168a0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80168a4:	428d      	cmp	r5, r1
 80168a6:	bfa8      	it	ge
 80168a8:	460d      	movge	r5, r1
 80168aa:	b99a      	cbnz	r2, 80168d4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80168ac:	6803      	ldr	r3, [r0, #0]
 80168ae:	4629      	mov	r1, r5
 80168b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80168b4:	4798      	blx	r3
 80168b6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80168ba:	b368      	cbz	r0, 8016918 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80168bc:	6803      	ldr	r3, [r0, #0]
 80168be:	68db      	ldr	r3, [r3, #12]
 80168c0:	4798      	blx	r3
 80168c2:	b348      	cbz	r0, 8016918 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80168c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80168c8:	4621      	mov	r1, r4
 80168ca:	6803      	ldr	r3, [r0, #0]
 80168cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168d0:	689b      	ldr	r3, [r3, #8]
 80168d2:	4718      	bx	r3
 80168d4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80168d8:	2b00      	cmp	r3, #0
 80168da:	dd08      	ble.n	80168ee <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 80168dc:	f004 f84c 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 80168e0:	4621      	mov	r1, r4
 80168e2:	3004      	adds	r0, #4
 80168e4:	f004 f86d 	bl	801a9c2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80168e8:	2300      	movs	r3, #0
 80168ea:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 80168ee:	6823      	ldr	r3, [r4, #0]
 80168f0:	4620      	mov	r0, r4
 80168f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80168f6:	4798      	blx	r3
 80168f8:	2300      	movs	r3, #0
 80168fa:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 80168fe:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016902:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8016906:	f004 f837 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 801690a:	4621      	mov	r1, r4
 801690c:	3004      	adds	r0, #4
 801690e:	f004 f901 	bl	801ab14 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8016912:	2301      	movs	r3, #1
 8016914:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016918:	bd70      	pop	{r4, r5, r6, pc}

0801691a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801691a:	b510      	push	{r4, lr}
 801691c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016920:	4604      	mov	r4, r0
 8016922:	4299      	cmp	r1, r3
 8016924:	bfb8      	it	lt
 8016926:	4619      	movlt	r1, r3
 8016928:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801692c:	4299      	cmp	r1, r3
 801692e:	bfa8      	it	ge
 8016930:	4619      	movge	r1, r3
 8016932:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016936:	428b      	cmp	r3, r1
 8016938:	d010      	beq.n	801695c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801693a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 801693e:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8016942:	b158      	cbz	r0, 801695c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016944:	6803      	ldr	r3, [r0, #0]
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	4798      	blx	r3
 801694a:	b138      	cbz	r0, 801695c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801694c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016950:	4621      	mov	r1, r4
 8016952:	6803      	ldr	r3, [r0, #0]
 8016954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016958:	689b      	ldr	r3, [r3, #8]
 801695a:	4718      	bx	r3
 801695c:	bd10      	pop	{r4, pc}

0801695e <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801695e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016960:	4604      	mov	r4, r0
 8016962:	460d      	mov	r5, r1
 8016964:	b1a9      	cbz	r1, 8016992 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016966:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 801696a:	ab01      	add	r3, sp, #4
 801696c:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8016970:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8016974:	1b89      	subs	r1, r1, r6
 8016976:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 801697a:	1a12      	subs	r2, r2, r0
 801697c:	1a38      	subs	r0, r7, r0
 801697e:	f005 fa69 	bl	801be54 <_ZN8touchgfx6muldivElllRl>
 8016982:	4629      	mov	r1, r5
 8016984:	ab01      	add	r3, sp, #4
 8016986:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 801698a:	4430      	add	r0, r6
 801698c:	f005 fa62 	bl	801be54 <_ZN8touchgfx6muldivElllRl>
 8016990:	b285      	uxth	r5, r0
 8016992:	4628      	mov	r0, r5
 8016994:	b003      	add	sp, #12
 8016996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016998 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016998:	b570      	push	{r4, r5, r6, lr}
 801699a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 801699e:	4604      	mov	r4, r0
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d035      	beq.n	8016a10 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80169a4:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 80169a8:	2100      	movs	r1, #0
 80169aa:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 80169ae:	3001      	adds	r0, #1
 80169b0:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 80169b4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 80169b8:	b280      	uxth	r0, r0
 80169ba:	1ad2      	subs	r2, r2, r3
 80169bc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80169c0:	b212      	sxth	r2, r2
 80169c2:	47a8      	blx	r5
 80169c4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80169c8:	6823      	ldr	r3, [r4, #0]
 80169ca:	4401      	add	r1, r0
 80169cc:	4620      	mov	r0, r4
 80169ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80169d2:	4798      	blx	r3
 80169d4:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 80169d8:	429a      	cmp	r2, r3
 80169da:	db19      	blt.n	8016a10 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80169dc:	2500      	movs	r5, #0
 80169de:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80169e2:	f003 ffc9 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 80169e6:	4621      	mov	r1, r4
 80169e8:	3004      	adds	r0, #4
 80169ea:	f003 ffea 	bl	801a9c2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80169ee:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80169f2:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 80169f6:	b158      	cbz	r0, 8016a10 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80169f8:	6803      	ldr	r3, [r0, #0]
 80169fa:	68db      	ldr	r3, [r3, #12]
 80169fc:	4798      	blx	r3
 80169fe:	b138      	cbz	r0, 8016a10 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8016a00:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016a04:	4621      	mov	r1, r4
 8016a06:	6803      	ldr	r3, [r0, #0]
 8016a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a0c:	689b      	ldr	r3, [r3, #8]
 8016a0e:	4718      	bx	r3
 8016a10:	bd70      	pop	{r4, r5, r6, pc}

08016a12 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a16:	4604      	mov	r4, r0
 8016a18:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8016a1c:	4698      	mov	r8, r3
 8016a1e:	460e      	mov	r6, r1
 8016a20:	4615      	mov	r5, r2
 8016a22:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8016a26:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	463a      	mov	r2, r7
 8016a2e:	3058      	adds	r0, #88	; 0x58
 8016a30:	f7f1 fe2f 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016a34:	4446      	add	r6, r8
 8016a36:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016a3a:	443d      	add	r5, r7
 8016a3c:	42b3      	cmp	r3, r6
 8016a3e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016a42:	bfb8      	it	lt
 8016a44:	8126      	strhlt	r6, [r4, #8]
 8016a46:	42ab      	cmp	r3, r5
 8016a48:	bfb8      	it	lt
 8016a4a:	8165      	strhlt	r5, [r4, #10]
 8016a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a50 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8016a50:	b510      	push	{r4, lr}
 8016a52:	4604      	mov	r4, r0
 8016a54:	302c      	adds	r0, #44	; 0x2c
 8016a56:	f002 fa53 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016a5a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8016a5e:	4620      	mov	r0, r4
 8016a60:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8016a64:	f7f1 fe15 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016a68:	bd10      	pop	{r4, pc}
	...

08016a6c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8016a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a6e:	4604      	mov	r4, r0
 8016a70:	2500      	movs	r5, #0
 8016a72:	f7f1 fd9f 	bl	80085b4 <_ZN8touchgfx8DrawableC1Ev>
 8016a76:	4b24      	ldr	r3, [pc, #144]	; (8016b08 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8016a78:	4626      	mov	r6, r4
 8016a7a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016a7e:	2226      	movs	r2, #38	; 0x26
 8016a80:	4629      	mov	r1, r5
 8016a82:	62a5      	str	r5, [r4, #40]	; 0x28
 8016a84:	f846 3b2c 	str.w	r3, [r6], #44
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016a8e:	f014 ff78 	bl	802b982 <memset>
 8016a92:	4630      	mov	r0, r6
 8016a94:	f7f1 fd8e 	bl	80085b4 <_ZN8touchgfx8DrawableC1Ev>
 8016a98:	a902      	add	r1, sp, #8
 8016a9a:	4b1c      	ldr	r3, [pc, #112]	; (8016b0c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8016aa2:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016aa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016aa8:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8016aac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016ab0:	f002 fa26 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016ab4:	4638      	mov	r0, r7
 8016ab6:	f7f1 fd7d 	bl	80085b4 <_ZN8touchgfx8DrawableC1Ev>
 8016aba:	4b15      	ldr	r3, [pc, #84]	; (8016b10 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8016abc:	4629      	mov	r1, r5
 8016abe:	4630      	mov	r0, r6
 8016ac0:	65a3      	str	r3, [r4, #88]	; 0x58
 8016ac2:	2364      	movs	r3, #100	; 0x64
 8016ac4:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016ac8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016acc:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8016ad0:	4b10      	ldr	r3, [pc, #64]	; (8016b14 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016ad2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8016ad6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8016ada:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8016ade:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016ae2:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8016ae6:	f7ef fd13 	bl	8006510 <_ZN8touchgfx8Drawable4setXEs>
 8016aea:	4629      	mov	r1, r5
 8016aec:	4630      	mov	r0, r6
 8016aee:	f7ef fd1e 	bl	800652e <_ZN8touchgfx8Drawable4setYEs>
 8016af2:	4631      	mov	r1, r6
 8016af4:	4620      	mov	r0, r4
 8016af6:	f000 f9c7 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016afa:	4620      	mov	r0, r4
 8016afc:	4639      	mov	r1, r7
 8016afe:	f000 f9c3 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016b02:	4620      	mov	r0, r4
 8016b04:	b003      	add	sp, #12
 8016b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b08:	0802f844 	.word	0x0802f844
 8016b0c:	0802ff04 	.word	0x0802ff04
 8016b10:	0802fac8 	.word	0x0802fac8
 8016b14:	0801c53d 	.word	0x0801c53d

08016b18 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8016b18:	b508      	push	{r3, lr}
 8016b1a:	3034      	adds	r0, #52	; 0x34
 8016b1c:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8016b20:	f7f1 feb4 	bl	800888c <_ZN8touchgfx8TextArea8setWidthEs>
 8016b24:	bd08      	pop	{r3, pc}

08016b26 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8016b26:	b508      	push	{r3, lr}
 8016b28:	3034      	adds	r0, #52	; 0x34
 8016b2a:	f820 1c2a 	strh.w	r1, [r0, #-42]
 8016b2e:	f7f1 fecd 	bl	80088cc <_ZN8touchgfx8TextArea9setHeightEs>
 8016b32:	bd08      	pop	{r3, pc}

08016b34 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8016b34:	4a11      	ldr	r2, [pc, #68]	; (8016b7c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8016b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b3a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016b3e:	4604      	mov	r4, r0
 8016b40:	8812      	ldrh	r2, [r2, #0]
 8016b42:	460d      	mov	r5, r1
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d916      	bls.n	8016b76 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8016b48:	6802      	ldr	r2, [r0, #0]
 8016b4a:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8016b4e:	6d96      	ldr	r6, [r2, #88]	; 0x58
 8016b50:	4a0b      	ldr	r2, [pc, #44]	; (8016b80 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 8016b52:	6812      	ldr	r2, [r2, #0]
 8016b54:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016b58:	4b0a      	ldr	r3, [pc, #40]	; (8016b84 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016b60:	6803      	ldr	r3, [r0, #0]
 8016b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b64:	4798      	blx	r3
 8016b66:	1a2a      	subs	r2, r5, r0
 8016b68:	4639      	mov	r1, r7
 8016b6a:	4620      	mov	r0, r4
 8016b6c:	4633      	mov	r3, r6
 8016b6e:	b212      	sxth	r2, r2
 8016b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b74:	4718      	bx	r3
 8016b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b7a:	bf00      	nop
 8016b7c:	2402aec0 	.word	0x2402aec0
 8016b80:	2402aebc 	.word	0x2402aebc
 8016b84:	2402aec4 	.word	0x2402aec4

08016b88 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8016b88:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8016b8c:	4770      	bx	lr

08016b8e <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8016b8e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016b92:	4770      	bx	lr

08016b94 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8016b94:	b508      	push	{r3, lr}
 8016b96:	3034      	adds	r0, #52	; 0x34
 8016b98:	6301      	str	r1, [r0, #48]	; 0x30
 8016b9a:	f7ef fc9b 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8016b9e:	bd08      	pop	{r3, pc}

08016ba0 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8016ba0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016ba2:	4770      	bx	lr

08016ba4 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8016baa:	460d      	mov	r5, r1
 8016bac:	4620      	mov	r0, r4
 8016bae:	f7ef fc91 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	f002 f8e5 	bl	8018d84 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f7ef fc8a 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8016bc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08016bc4 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8016bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bc8:	f100 0634 	add.w	r6, r0, #52	; 0x34
 8016bcc:	4604      	mov	r4, r0
 8016bce:	4630      	mov	r0, r6
 8016bd0:	f7ef fc80 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8016bd4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8016bd8:	bb0b      	cbnz	r3, 8016c1e <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8016bda:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016bde:	4620      	mov	r0, r4
 8016be0:	4a40      	ldr	r2, [pc, #256]	; (8016ce4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8016be2:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8016be6:	4d40      	ldr	r5, [pc, #256]	; (8016ce8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	bf08      	it	eq
 8016bec:	4615      	moveq	r5, r2
 8016bee:	f000 f928 	bl	8016e42 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8016bf2:	4680      	mov	r8, r0
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f000 f937 	bl	8016e68 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016bfa:	4681      	mov	r9, r0
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f000 f92c 	bl	8016e5a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016c02:	2800      	cmp	r0, #0
 8016c04:	462a      	mov	r2, r5
 8016c06:	f04f 010c 	mov.w	r1, #12
 8016c0a:	bf14      	ite	ne
 8016c0c:	2341      	movne	r3, #65	; 0x41
 8016c0e:	2350      	moveq	r3, #80	; 0x50
 8016c10:	4638      	mov	r0, r7
 8016c12:	e9cd 9300 	strd	r9, r3, [sp]
 8016c16:	4643      	mov	r3, r8
 8016c18:	f006 ff90 	bl	801db3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016c1c:	e017      	b.n	8016c4e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d11b      	bne.n	8016c5a <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 8016c22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016c26:	4620      	mov	r0, r4
 8016c28:	4a30      	ldr	r2, [pc, #192]	; (8016cec <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8016c2a:	4d31      	ldr	r5, [pc, #196]	; (8016cf0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	bf08      	it	eq
 8016c30:	4615      	moveq	r5, r2
 8016c32:	f000 f903 	bl	8016e3c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8016c36:	4607      	mov	r7, r0
 8016c38:	4620      	mov	r0, r4
 8016c3a:	f000 f915 	bl	8016e68 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016c3e:	462a      	mov	r2, r5
 8016c40:	9000      	str	r0, [sp, #0]
 8016c42:	463b      	mov	r3, r7
 8016c44:	210c      	movs	r1, #12
 8016c46:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8016c4a:	f006 ff77 	bl	801db3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016c4e:	4630      	mov	r0, r6
 8016c50:	f7ef fc40 	bl	80064d4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8016c54:	b004      	add	sp, #16
 8016c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c5a:	2b02      	cmp	r3, #2
 8016c5c:	d126      	bne.n	8016cac <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 8016c5e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016c62:	4620      	mov	r0, r4
 8016c64:	4a23      	ldr	r2, [pc, #140]	; (8016cf4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8016c66:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8016c6a:	4d23      	ldr	r5, [pc, #140]	; (8016cf8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	bf08      	it	eq
 8016c70:	4615      	moveq	r5, r2
 8016c72:	f000 f8e6 	bl	8016e42 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8016c76:	4680      	mov	r8, r0
 8016c78:	4620      	mov	r0, r4
 8016c7a:	f000 f8f5 	bl	8016e68 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016c7e:	4681      	mov	r9, r0
 8016c80:	4620      	mov	r0, r4
 8016c82:	f000 f8f4 	bl	8016e6e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8016c86:	4682      	mov	sl, r0
 8016c88:	4620      	mov	r0, r4
 8016c8a:	f000 f8e6 	bl	8016e5a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	f8cd 9000 	str.w	r9, [sp]
 8016c94:	462a      	mov	r2, r5
 8016c96:	bf14      	ite	ne
 8016c98:	2341      	movne	r3, #65	; 0x41
 8016c9a:	2350      	moveq	r3, #80	; 0x50
 8016c9c:	210c      	movs	r1, #12
 8016c9e:	4638      	mov	r0, r7
 8016ca0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016ca4:	4643      	mov	r3, r8
 8016ca6:	f006 ff49 	bl	801db3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016caa:	e7d0      	b.n	8016c4e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8016cac:	2b03      	cmp	r3, #3
 8016cae:	d1ce      	bne.n	8016c4e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8016cb0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	4a11      	ldr	r2, [pc, #68]	; (8016cfc <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8016cb8:	4d11      	ldr	r5, [pc, #68]	; (8016d00 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	bf08      	it	eq
 8016cbe:	4615      	moveq	r5, r2
 8016cc0:	f000 f8bc 	bl	8016e3c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8016cc4:	4607      	mov	r7, r0
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f000 f8ce 	bl	8016e68 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016ccc:	4680      	mov	r8, r0
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f000 f8cd 	bl	8016e6e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8016cd4:	463b      	mov	r3, r7
 8016cd6:	462a      	mov	r2, r5
 8016cd8:	210c      	movs	r1, #12
 8016cda:	e9cd 8000 	strd	r8, r0, [sp]
 8016cde:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8016ce2:	e799      	b.n	8016c18 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 8016ce4:	0802f910 	.word	0x0802f910
 8016ce8:	0802f93a 	.word	0x0802f93a
 8016cec:	0802f91c 	.word	0x0802f91c
 8016cf0:	0802f95a 	.word	0x0802f95a
 8016cf4:	0802f937 	.word	0x0802f937
 8016cf8:	0802f924 	.word	0x0802f924
 8016cfc:	0802f957 	.word	0x0802f957
 8016d00:	0802f948 	.word	0x0802f948

08016d04 <_ZN8touchgfx12DigitalClockC1Ev>:
 8016d04:	b510      	push	{r4, lr}
 8016d06:	4604      	mov	r4, r0
 8016d08:	f000 f87c 	bl	8016e04 <_ZN8touchgfx13AbstractClockC1Ev>
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	4b21      	ldr	r3, [pc, #132]	; (8016d94 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 8016d10:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8016d14:	4620      	mov	r0, r4
 8016d16:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8016d1a:	4a1f      	ldr	r2, [pc, #124]	; (8016d98 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 8016d1c:	6023      	str	r3, [r4, #0]
 8016d1e:	2303      	movs	r3, #3
 8016d20:	65e2      	str	r2, [r4, #92]	; 0x5c
 8016d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d26:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8016d30:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
 8016d34:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
 8016d38:	4a18      	ldr	r2, [pc, #96]	; (8016d9c <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8016d3a:	66a1      	str	r1, [r4, #104]	; 0x68
 8016d3c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8016d40:	6362      	str	r2, [r4, #52]	; 0x34
 8016d42:	4622      	mov	r2, r4
 8016d44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8016d48:	8723      	strh	r3, [r4, #56]	; 0x38
 8016d4a:	8763      	strh	r3, [r4, #58]	; 0x3a
 8016d4c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8016d4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8016d50:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8016d54:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8016d58:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8016d5c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8016d60:	6523      	str	r3, [r4, #80]	; 0x50
 8016d62:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8016d66:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8016d6a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8016d6e:	6663      	str	r3, [r4, #100]	; 0x64
 8016d70:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8016d74:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8016d78:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 8016d7c:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8016d80:	67a3      	str	r3, [r4, #120]	; 0x78
 8016d82:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d86:	f822 3f80 	strh.w	r3, [r2, #128]!
 8016d8a:	67e2      	str	r2, [r4, #124]	; 0x7c
 8016d8c:	f000 f87c 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016d90:	4620      	mov	r0, r4
 8016d92:	bd10      	pop	{r4, pc}
 8016d94:	0802f96c 	.word	0x0802f96c
 8016d98:	0802f00c 	.word	0x0802f00c
 8016d9c:	0802f1ec 	.word	0x0802f1ec

08016da0 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8016da0:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 8016da4:	4770      	bx	lr

08016da6 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8016da6:	b470      	push	{r4, r5, r6}
 8016da8:	2518      	movs	r5, #24
 8016daa:	fbb1 f6f5 	udiv	r6, r1, r5
 8016dae:	fb06 1115 	mls	r1, r6, r5, r1
 8016db2:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8016db6:	213c      	movs	r1, #60	; 0x3c
 8016db8:	fbb2 f5f1 	udiv	r5, r2, r1
 8016dbc:	fb05 2211 	mls	r2, r5, r1, r2
 8016dc0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8016dc4:	fbb3 f2f1 	udiv	r2, r3, r1
 8016dc8:	fb02 3311 	mls	r3, r2, r1, r3
 8016dcc:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8016dd0:	6803      	ldr	r3, [r0, #0]
 8016dd2:	bc70      	pop	{r4, r5, r6}
 8016dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016dd8:	4718      	bx	r3

08016dda <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8016dda:	b4f0      	push	{r4, r5, r6, r7}
 8016ddc:	6804      	ldr	r4, [r0, #0]
 8016dde:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8016de2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8016de6:	240c      	movs	r4, #12
 8016de8:	2e00      	cmp	r6, #0
 8016dea:	46ac      	mov	ip, r5
 8016dec:	fbb1 f7f4 	udiv	r7, r1, r4
 8016df0:	fb07 1114 	mls	r1, r7, r4, r1
 8016df4:	bf18      	it	ne
 8016df6:	2400      	movne	r4, #0
 8016df8:	fa54 f181 	uxtab	r1, r4, r1
 8016dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8016dfe:	b2c9      	uxtb	r1, r1
 8016e00:	4760      	bx	ip
	...

08016e04 <_ZN8touchgfx13AbstractClockC1Ev>:
 8016e04:	2101      	movs	r1, #1
 8016e06:	2200      	movs	r2, #0
 8016e08:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016e0c:	490a      	ldr	r1, [pc, #40]	; (8016e38 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8016e0e:	8082      	strh	r2, [r0, #4]
 8016e10:	80c2      	strh	r2, [r0, #6]
 8016e12:	8102      	strh	r2, [r0, #8]
 8016e14:	8142      	strh	r2, [r0, #10]
 8016e16:	8182      	strh	r2, [r0, #12]
 8016e18:	81c2      	strh	r2, [r0, #14]
 8016e1a:	8202      	strh	r2, [r0, #16]
 8016e1c:	8242      	strh	r2, [r0, #18]
 8016e1e:	61c2      	str	r2, [r0, #28]
 8016e20:	8402      	strh	r2, [r0, #32]
 8016e22:	8442      	strh	r2, [r0, #34]	; 0x22
 8016e24:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016e28:	6001      	str	r1, [r0, #0]
 8016e2a:	6282      	str	r2, [r0, #40]	; 0x28
 8016e2c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016e2e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016e32:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016e36:	4770      	bx	lr
 8016e38:	0802fa2c 	.word	0x0802fa2c

08016e3c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8016e3c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016e40:	4770      	bx	lr

08016e42 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8016e42:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016e46:	220c      	movs	r2, #12
 8016e48:	f100 030b 	add.w	r3, r0, #11
 8016e4c:	fb93 f0f2 	sdiv	r0, r3, r2
 8016e50:	fb02 3010 	mls	r0, r2, r0, r3
 8016e54:	3001      	adds	r0, #1
 8016e56:	b2c0      	uxtb	r0, r0
 8016e58:	4770      	bx	lr

08016e5a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8016e5a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016e5e:	280b      	cmp	r0, #11
 8016e60:	bf8c      	ite	hi
 8016e62:	2000      	movhi	r0, #0
 8016e64:	2001      	movls	r0, #1
 8016e66:	4770      	bx	lr

08016e68 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8016e68:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8016e6c:	4770      	bx	lr

08016e6e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8016e6e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016e72:	4770      	bx	lr

08016e74 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016e74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e76:	2000      	movs	r0, #0
 8016e78:	b12b      	cbz	r3, 8016e86 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016e7a:	b920      	cbnz	r0, 8016e86 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016e7c:	1a5a      	subs	r2, r3, r1
 8016e7e:	699b      	ldr	r3, [r3, #24]
 8016e80:	4250      	negs	r0, r2
 8016e82:	4150      	adcs	r0, r2
 8016e84:	e7f8      	b.n	8016e78 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016e86:	4770      	bx	lr

08016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016e88:	2300      	movs	r3, #0
 8016e8a:	6148      	str	r0, [r1, #20]
 8016e8c:	618b      	str	r3, [r1, #24]
 8016e8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e90:	b913      	cbnz	r3, 8016e98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016e92:	6281      	str	r1, [r0, #40]	; 0x28
 8016e94:	4770      	bx	lr
 8016e96:	4613      	mov	r3, r2
 8016e98:	699a      	ldr	r2, [r3, #24]
 8016e9a:	2a00      	cmp	r2, #0
 8016e9c:	d1fb      	bne.n	8016e96 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016e9e:	6199      	str	r1, [r3, #24]
 8016ea0:	4770      	bx	lr

08016ea2 <_ZN8touchgfx9Container9removeAllEv>:
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ea6:	b123      	cbz	r3, 8016eb2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016ea8:	6999      	ldr	r1, [r3, #24]
 8016eaa:	6281      	str	r1, [r0, #40]	; 0x28
 8016eac:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016eb0:	e7f8      	b.n	8016ea4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016eb2:	4770      	bx	lr

08016eb4 <_ZN8touchgfx9Container6unlinkEv>:
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	6283      	str	r3, [r0, #40]	; 0x28
 8016eb8:	4770      	bx	lr

08016eba <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016eba:	2200      	movs	r2, #0
 8016ebc:	8002      	strh	r2, [r0, #0]
 8016ebe:	8042      	strh	r2, [r0, #2]
 8016ec0:	8082      	strh	r2, [r0, #4]
 8016ec2:	80c2      	strh	r2, [r0, #6]
 8016ec4:	4770      	bx	lr

08016ec6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016ec6:	b570      	push	{r4, r5, r6, lr}
 8016ec8:	460d      	mov	r5, r1
 8016eca:	4616      	mov	r6, r2
 8016ecc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016ece:	b13c      	cbz	r4, 8016ee0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016ed0:	6823      	ldr	r3, [r4, #0]
 8016ed2:	4620      	mov	r0, r4
 8016ed4:	4632      	mov	r2, r6
 8016ed6:	4629      	mov	r1, r5
 8016ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016eda:	4798      	blx	r3
 8016edc:	69a4      	ldr	r4, [r4, #24]
 8016ede:	e7f6      	b.n	8016ece <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016ee0:	bd70      	pop	{r4, r5, r6, pc}

08016ee2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016ee2:	b538      	push	{r3, r4, r5, lr}
 8016ee4:	460d      	mov	r5, r1
 8016ee6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016ee8:	b134      	cbz	r4, 8016ef8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016eea:	682b      	ldr	r3, [r5, #0]
 8016eec:	4621      	mov	r1, r4
 8016eee:	4628      	mov	r0, r5
 8016ef0:	689b      	ldr	r3, [r3, #8]
 8016ef2:	4798      	blx	r3
 8016ef4:	69a4      	ldr	r4, [r4, #24]
 8016ef6:	e7f7      	b.n	8016ee8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016ef8:	bd38      	pop	{r3, r4, r5, pc}

08016efa <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016efa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016efc:	b19b      	cbz	r3, 8016f26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016efe:	428b      	cmp	r3, r1
 8016f00:	d109      	bne.n	8016f16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016f02:	699a      	ldr	r2, [r3, #24]
 8016f04:	2100      	movs	r1, #0
 8016f06:	6159      	str	r1, [r3, #20]
 8016f08:	6282      	str	r2, [r0, #40]	; 0x28
 8016f0a:	b902      	cbnz	r2, 8016f0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016f0c:	4770      	bx	lr
 8016f0e:	6199      	str	r1, [r3, #24]
 8016f10:	4770      	bx	lr
 8016f12:	4613      	mov	r3, r2
 8016f14:	b13a      	cbz	r2, 8016f26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016f16:	699a      	ldr	r2, [r3, #24]
 8016f18:	428a      	cmp	r2, r1
 8016f1a:	d1fa      	bne.n	8016f12 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016f1c:	698a      	ldr	r2, [r1, #24]
 8016f1e:	619a      	str	r2, [r3, #24]
 8016f20:	2300      	movs	r3, #0
 8016f22:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016f26:	4770      	bx	lr

08016f28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016f28:	b410      	push	{r4}
 8016f2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	b92b      	cbnz	r3, 8016f3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016f30:	6803      	ldr	r3, [r0, #0]
 8016f32:	4611      	mov	r1, r2
 8016f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f3a:	4718      	bx	r3
 8016f3c:	b941      	cbnz	r1, 8016f50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016f3e:	6193      	str	r3, [r2, #24]
 8016f40:	6282      	str	r2, [r0, #40]	; 0x28
 8016f42:	6154      	str	r4, [r2, #20]
 8016f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f48:	4770      	bx	lr
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	2800      	cmp	r0, #0
 8016f4e:	d0f9      	beq.n	8016f44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016f50:	4299      	cmp	r1, r3
 8016f52:	6998      	ldr	r0, [r3, #24]
 8016f54:	d1f9      	bne.n	8016f4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016f56:	6190      	str	r0, [r2, #24]
 8016f58:	618a      	str	r2, [r1, #24]
 8016f5a:	e7f2      	b.n	8016f42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016f5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f60:	461f      	mov	r7, r3
 8016f62:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016f66:	460d      	mov	r5, r1
 8016f68:	4616      	mov	r6, r2
 8016f6a:	b103      	cbz	r3, 8016f6e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016f6c:	6038      	str	r0, [r7, #0]
 8016f6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f70:	b314      	cbz	r4, 8016fb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016f72:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016f76:	b1eb      	cbz	r3, 8016fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f78:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016f7c:	428d      	cmp	r5, r1
 8016f7e:	db19      	blt.n	8016fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f80:	b289      	uxth	r1, r1
 8016f82:	8923      	ldrh	r3, [r4, #8]
 8016f84:	440b      	add	r3, r1
 8016f86:	b21b      	sxth	r3, r3
 8016f88:	429d      	cmp	r5, r3
 8016f8a:	da13      	bge.n	8016fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f8c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016f90:	4296      	cmp	r6, r2
 8016f92:	db0f      	blt.n	8016fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016f94:	b292      	uxth	r2, r2
 8016f96:	8963      	ldrh	r3, [r4, #10]
 8016f98:	4413      	add	r3, r2
 8016f9a:	b21b      	sxth	r3, r3
 8016f9c:	429e      	cmp	r6, r3
 8016f9e:	da09      	bge.n	8016fb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016fa0:	6823      	ldr	r3, [r4, #0]
 8016fa2:	1ab2      	subs	r2, r6, r2
 8016fa4:	1a69      	subs	r1, r5, r1
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016fac:	b212      	sxth	r2, r2
 8016fae:	463b      	mov	r3, r7
 8016fb0:	b209      	sxth	r1, r1
 8016fb2:	47c0      	blx	r8
 8016fb4:	69a4      	ldr	r4, [r4, #24]
 8016fb6:	e7db      	b.n	8016f70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc0:	4c6d      	ldr	r4, [pc, #436]	; (8017178 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016fc2:	b0a1      	sub	sp, #132	; 0x84
 8016fc4:	4606      	mov	r6, r0
 8016fc6:	6824      	ldr	r4, [r4, #0]
 8016fc8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016fca:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016fce:	2400      	movs	r4, #0
 8016fd0:	9303      	str	r3, [sp, #12]
 8016fd2:	802c      	strh	r4, [r5, #0]
 8016fd4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016fd6:	802c      	strh	r4, [r5, #0]
 8016fd8:	601c      	str	r4, [r3, #0]
 8016fda:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016fde:	f7ff ffbd 	bl	8016f5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016fe2:	f1b9 0f03 	cmp.w	r9, #3
 8016fe6:	f340 80c1 	ble.w	801716c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8016fea:	4631      	mov	r1, r6
 8016fec:	a80c      	add	r0, sp, #48	; 0x30
 8016fee:	f004 fe21 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ff2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016ff6:	9306      	str	r3, [sp, #24]
 8016ff8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016ffc:	9307      	str	r3, [sp, #28]
 8016ffe:	9b03      	ldr	r3, [sp, #12]
 8017000:	f8d3 a000 	ldr.w	sl, [r3]
 8017004:	f1ba 0f00 	cmp.w	sl, #0
 8017008:	f000 80b3 	beq.w	8017172 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 801700c:	4651      	mov	r1, sl
 801700e:	a810      	add	r0, sp, #64	; 0x40
 8017010:	f004 fe10 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017014:	2002      	movs	r0, #2
 8017016:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801701a:	9b01      	ldr	r3, [sp, #4]
 801701c:	9a06      	ldr	r2, [sp, #24]
 801701e:	fb91 f1f0 	sdiv	r1, r1, r0
 8017022:	189d      	adds	r5, r3, r2
 8017024:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017028:	9a07      	ldr	r2, [sp, #28]
 801702a:	4419      	add	r1, r3
 801702c:	9b02      	ldr	r3, [sp, #8]
 801702e:	4413      	add	r3, r2
 8017030:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017034:	1a6d      	subs	r5, r5, r1
 8017036:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801703a:	fb92 f2f0 	sdiv	r2, r2, r0
 801703e:	440a      	add	r2, r1
 8017040:	1a9b      	subs	r3, r3, r2
 8017042:	435b      	muls	r3, r3
 8017044:	fb05 3505 	mla	r5, r5, r5, r3
 8017048:	4f4c      	ldr	r7, [pc, #304]	; (801717c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801704a:	ac10      	add	r4, sp, #64	; 0x40
 801704c:	f1b9 0f0c 	cmp.w	r9, #12
 8017050:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017054:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017058:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801705a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801705c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017064:	f04f 0303 	mov.w	r3, #3
 8017068:	bfd8      	it	le
 801706a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801706e:	f04f 0400 	mov.w	r4, #0
 8017072:	f8cd 9000 	str.w	r9, [sp]
 8017076:	bfcc      	ite	gt
 8017078:	4698      	movgt	r8, r3
 801707a:	fb92 f8f3 	sdivle	r8, r2, r3
 801707e:	1c63      	adds	r3, r4, #1
 8017080:	aa10      	add	r2, sp, #64	; 0x40
 8017082:	f004 0401 	and.w	r4, r4, #1
 8017086:	f04f 0b00 	mov.w	fp, #0
 801708a:	9308      	str	r3, [sp, #32]
 801708c:	9b00      	ldr	r3, [sp, #0]
 801708e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017092:	fb93 f3f8 	sdiv	r3, r3, r8
 8017096:	3404      	adds	r4, #4
 8017098:	b29b      	uxth	r3, r3
 801709a:	9304      	str	r3, [sp, #16]
 801709c:	9a04      	ldr	r2, [sp, #16]
 801709e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80170a2:	fb13 f302 	smulbb	r3, r3, r2
 80170a6:	9a01      	ldr	r2, [sp, #4]
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	1899      	adds	r1, r3, r2
 80170ac:	9305      	str	r3, [sp, #20]
 80170ae:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80170b2:	b209      	sxth	r1, r1
 80170b4:	4299      	cmp	r1, r3
 80170b6:	db4d      	blt.n	8017154 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170b8:	8932      	ldrh	r2, [r6, #8]
 80170ba:	4413      	add	r3, r2
 80170bc:	b21b      	sxth	r3, r3
 80170be:	4299      	cmp	r1, r3
 80170c0:	da48      	bge.n	8017154 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170c2:	9b04      	ldr	r3, [sp, #16]
 80170c4:	6827      	ldr	r7, [r4, #0]
 80170c6:	fb17 f703 	smulbb	r7, r7, r3
 80170ca:	9b02      	ldr	r3, [sp, #8]
 80170cc:	b2bf      	uxth	r7, r7
 80170ce:	18fa      	adds	r2, r7, r3
 80170d0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80170d4:	b212      	sxth	r2, r2
 80170d6:	429a      	cmp	r2, r3
 80170d8:	db3c      	blt.n	8017154 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170da:	8970      	ldrh	r0, [r6, #10]
 80170dc:	4403      	add	r3, r0
 80170de:	b21b      	sxth	r3, r3
 80170e0:	429a      	cmp	r2, r3
 80170e2:	da37      	bge.n	8017154 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170e4:	2300      	movs	r3, #0
 80170e6:	4630      	mov	r0, r6
 80170e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80170ea:	ab0b      	add	r3, sp, #44	; 0x2c
 80170ec:	f7ff ff36 	bl	8016f5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80170f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80170f2:	b37a      	cbz	r2, 8017154 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170f4:	4552      	cmp	r2, sl
 80170f6:	d02d      	beq.n	8017154 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80170f8:	4611      	mov	r1, r2
 80170fa:	a80e      	add	r0, sp, #56	; 0x38
 80170fc:	9209      	str	r2, [sp, #36]	; 0x24
 80170fe:	f004 fd99 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017102:	f04f 0e02 	mov.w	lr, #2
 8017106:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801710a:	9a06      	ldr	r2, [sp, #24]
 801710c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017110:	9b01      	ldr	r3, [sp, #4]
 8017112:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017116:	4413      	add	r3, r2
 8017118:	9a07      	ldr	r2, [sp, #28]
 801711a:	fb91 f1fe 	sdiv	r1, r1, lr
 801711e:	fb9c fcfe 	sdiv	ip, ip, lr
 8017122:	4401      	add	r1, r0
 8017124:	1a58      	subs	r0, r3, r1
 8017126:	9b02      	ldr	r3, [sp, #8]
 8017128:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801712c:	4413      	add	r3, r2
 801712e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017130:	448c      	add	ip, r1
 8017132:	eba3 030c 	sub.w	r3, r3, ip
 8017136:	435b      	muls	r3, r3
 8017138:	fb00 3300 	mla	r3, r0, r0, r3
 801713c:	42ab      	cmp	r3, r5
 801713e:	d208      	bcs.n	8017152 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017142:	461d      	mov	r5, r3
 8017144:	9803      	ldr	r0, [sp, #12]
 8017146:	6001      	str	r1, [r0, #0]
 8017148:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801714a:	9805      	ldr	r0, [sp, #20]
 801714c:	8008      	strh	r0, [r1, #0]
 801714e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017150:	800f      	strh	r7, [r1, #0]
 8017152:	4692      	mov	sl, r2
 8017154:	f10b 0b01 	add.w	fp, fp, #1
 8017158:	3408      	adds	r4, #8
 801715a:	f1bb 0f04 	cmp.w	fp, #4
 801715e:	d19d      	bne.n	801709c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017160:	9b00      	ldr	r3, [sp, #0]
 8017162:	9c08      	ldr	r4, [sp, #32]
 8017164:	444b      	add	r3, r9
 8017166:	4544      	cmp	r4, r8
 8017168:	9300      	str	r3, [sp, #0]
 801716a:	d188      	bne.n	801707e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801716c:	b021      	add	sp, #132	; 0x84
 801716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017172:	f04f 35ff 	mov.w	r5, #4294967295
 8017176:	e767      	b.n	8017048 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017178:	2402ae6c 	.word	0x2402ae6c
 801717c:	0802e8ac 	.word	0x0802e8ac

08017180 <_ZN8touchgfx4RectaNERKS0_>:
 8017180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017184:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017188:	888c      	ldrh	r4, [r1, #4]
 801718a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801718e:	443c      	add	r4, r7
 8017190:	b2a4      	uxth	r4, r4
 8017192:	fa0f f884 	sxth.w	r8, r4
 8017196:	45c1      	cmp	r9, r8
 8017198:	da2f      	bge.n	80171fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801719a:	8882      	ldrh	r2, [r0, #4]
 801719c:	444a      	add	r2, r9
 801719e:	b292      	uxth	r2, r2
 80171a0:	fa0f fe82 	sxth.w	lr, r2
 80171a4:	4577      	cmp	r7, lr
 80171a6:	da28      	bge.n	80171fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171a8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80171ac:	88cb      	ldrh	r3, [r1, #6]
 80171ae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80171b2:	442b      	add	r3, r5
 80171b4:	b21b      	sxth	r3, r3
 80171b6:	429e      	cmp	r6, r3
 80171b8:	da1f      	bge.n	80171fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171ba:	88c3      	ldrh	r3, [r0, #6]
 80171bc:	4433      	add	r3, r6
 80171be:	b29b      	uxth	r3, r3
 80171c0:	fa0f fc83 	sxth.w	ip, r3
 80171c4:	4565      	cmp	r5, ip
 80171c6:	da18      	bge.n	80171fa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80171c8:	454f      	cmp	r7, r9
 80171ca:	bfb8      	it	lt
 80171cc:	464f      	movlt	r7, r9
 80171ce:	42b5      	cmp	r5, r6
 80171d0:	bfb8      	it	lt
 80171d2:	4635      	movlt	r5, r6
 80171d4:	45f0      	cmp	r8, lr
 80171d6:	bfd8      	it	le
 80171d8:	4622      	movle	r2, r4
 80171da:	1bd2      	subs	r2, r2, r7
 80171dc:	8082      	strh	r2, [r0, #4]
 80171de:	884a      	ldrh	r2, [r1, #2]
 80171e0:	88c9      	ldrh	r1, [r1, #6]
 80171e2:	8007      	strh	r7, [r0, #0]
 80171e4:	440a      	add	r2, r1
 80171e6:	8045      	strh	r5, [r0, #2]
 80171e8:	b292      	uxth	r2, r2
 80171ea:	b211      	sxth	r1, r2
 80171ec:	458c      	cmp	ip, r1
 80171ee:	bfa8      	it	ge
 80171f0:	4613      	movge	r3, r2
 80171f2:	1b5b      	subs	r3, r3, r5
 80171f4:	80c3      	strh	r3, [r0, #6]
 80171f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171fa:	2300      	movs	r3, #0
 80171fc:	8003      	strh	r3, [r0, #0]
 80171fe:	8043      	strh	r3, [r0, #2]
 8017200:	8083      	strh	r3, [r0, #4]
 8017202:	80c3      	strh	r3, [r0, #6]
 8017204:	e7f7      	b.n	80171f6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08017206 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017206:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801720a:	2b00      	cmp	r3, #0
 801720c:	dd06      	ble.n	801721c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801720e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017212:	2800      	cmp	r0, #0
 8017214:	bfcc      	ite	gt
 8017216:	2000      	movgt	r0, #0
 8017218:	2001      	movle	r0, #1
 801721a:	4770      	bx	lr
 801721c:	2001      	movs	r0, #1
 801721e:	4770      	bx	lr

08017220 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017224:	2300      	movs	r3, #0
 8017226:	4604      	mov	r4, r0
 8017228:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801722a:	8003      	strh	r3, [r0, #0]
 801722c:	8043      	strh	r3, [r0, #2]
 801722e:	8083      	strh	r3, [r0, #4]
 8017230:	80c3      	strh	r3, [r0, #6]
 8017232:	2d00      	cmp	r5, #0
 8017234:	d040      	beq.n	80172b8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017236:	1d28      	adds	r0, r5, #4
 8017238:	f7ff ffe5 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801723c:	b988      	cbnz	r0, 8017262 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801723e:	4620      	mov	r0, r4
 8017240:	f7ff ffe1 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017244:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017248:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801724c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017250:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017254:	b138      	cbz	r0, 8017266 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017256:	8022      	strh	r2, [r4, #0]
 8017258:	8063      	strh	r3, [r4, #2]
 801725a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801725e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017262:	69ad      	ldr	r5, [r5, #24]
 8017264:	e7e5      	b.n	8017232 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017266:	f9b4 0000 	ldrsh.w	r0, [r4]
 801726a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801726e:	4290      	cmp	r0, r2
 8017270:	4607      	mov	r7, r0
 8017272:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017276:	460e      	mov	r6, r1
 8017278:	bfa8      	it	ge
 801727a:	4617      	movge	r7, r2
 801727c:	4299      	cmp	r1, r3
 801727e:	4472      	add	r2, lr
 8017280:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017284:	bfa8      	it	ge
 8017286:	461e      	movge	r6, r3
 8017288:	4440      	add	r0, r8
 801728a:	4471      	add	r1, lr
 801728c:	4463      	add	r3, ip
 801728e:	b200      	sxth	r0, r0
 8017290:	8027      	strh	r7, [r4, #0]
 8017292:	b212      	sxth	r2, r2
 8017294:	8066      	strh	r6, [r4, #2]
 8017296:	b209      	sxth	r1, r1
 8017298:	b21b      	sxth	r3, r3
 801729a:	4290      	cmp	r0, r2
 801729c:	bfac      	ite	ge
 801729e:	ebc7 0200 	rsbge	r2, r7, r0
 80172a2:	ebc7 0202 	rsblt	r2, r7, r2
 80172a6:	4299      	cmp	r1, r3
 80172a8:	bfac      	ite	ge
 80172aa:	ebc6 0301 	rsbge	r3, r6, r1
 80172ae:	ebc6 0303 	rsblt	r3, r6, r3
 80172b2:	80a2      	strh	r2, [r4, #4]
 80172b4:	80e3      	strh	r3, [r4, #6]
 80172b6:	e7d4      	b.n	8017262 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80172b8:	4620      	mov	r0, r4
 80172ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172be <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80172be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80172c2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80172c6:	b383      	cbz	r3, 801732a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80172c8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172ca:	b374      	cbz	r4, 801732a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80172cc:	f9b1 5000 	ldrsh.w	r5, [r1]
 80172d0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80172d4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80172d8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80172dc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80172e0:	b303      	cbz	r3, 8017324 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80172e2:	4668      	mov	r0, sp
 80172e4:	1d21      	adds	r1, r4, #4
 80172e6:	f8ad 5000 	strh.w	r5, [sp]
 80172ea:	f8ad 6002 	strh.w	r6, [sp, #2]
 80172ee:	f8ad 7004 	strh.w	r7, [sp, #4]
 80172f2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80172f6:	f7ff ff43 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 80172fa:	4668      	mov	r0, sp
 80172fc:	f7ff ff83 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017300:	b980      	cbnz	r0, 8017324 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017302:	f8bd 3000 	ldrh.w	r3, [sp]
 8017306:	4669      	mov	r1, sp
 8017308:	88a2      	ldrh	r2, [r4, #4]
 801730a:	4620      	mov	r0, r4
 801730c:	1a9b      	subs	r3, r3, r2
 801730e:	88e2      	ldrh	r2, [r4, #6]
 8017310:	f8ad 3000 	strh.w	r3, [sp]
 8017314:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017318:	1a9b      	subs	r3, r3, r2
 801731a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801731e:	6823      	ldr	r3, [r4, #0]
 8017320:	689b      	ldr	r3, [r3, #8]
 8017322:	4798      	blx	r3
 8017324:	69a4      	ldr	r4, [r4, #24]
 8017326:	2c00      	cmp	r4, #0
 8017328:	d1d8      	bne.n	80172dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801732a:	b002      	add	sp, #8
 801732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017330 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017330:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017332:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017336:	460d      	mov	r5, r1
 8017338:	4616      	mov	r6, r2
 801733a:	b323      	cbz	r3, 8017386 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801733c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801733e:	b314      	cbz	r4, 8017386 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017340:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017344:	b1eb      	cbz	r3, 8017382 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017346:	6828      	ldr	r0, [r5, #0]
 8017348:	466b      	mov	r3, sp
 801734a:	6869      	ldr	r1, [r5, #4]
 801734c:	c303      	stmia	r3!, {r0, r1}
 801734e:	4668      	mov	r0, sp
 8017350:	1d21      	adds	r1, r4, #4
 8017352:	f7ff ff15 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8017356:	4668      	mov	r0, sp
 8017358:	f7ff ff55 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801735c:	b988      	cbnz	r0, 8017382 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801735e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017362:	4669      	mov	r1, sp
 8017364:	88a2      	ldrh	r2, [r4, #4]
 8017366:	4620      	mov	r0, r4
 8017368:	1a9b      	subs	r3, r3, r2
 801736a:	88e2      	ldrh	r2, [r4, #6]
 801736c:	f8ad 3000 	strh.w	r3, [sp]
 8017370:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017374:	1a9b      	subs	r3, r3, r2
 8017376:	4632      	mov	r2, r6
 8017378:	f8ad 3002 	strh.w	r3, [sp, #2]
 801737c:	6823      	ldr	r3, [r4, #0]
 801737e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017380:	4798      	blx	r3
 8017382:	69a4      	ldr	r4, [r4, #24]
 8017384:	e7db      	b.n	801733e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017386:	b002      	add	sp, #8
 8017388:	bd70      	pop	{r4, r5, r6, pc}

0801738a <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801738a:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	; 0xe4
 801738e:	4770      	bx	lr

08017390 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8017390:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	; 0xe6
 8017394:	4770      	bx	lr

08017396 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8017396:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 801739a:	4770      	bx	lr

0801739c <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801739c:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	; 0x32
 80173a0:	4770      	bx	lr

080173a2 <_ZN8touchgfx6Slider8setValueEs>:
 80173a2:	b570      	push	{r4, r5, r6, lr}
 80173a4:	6803      	ldr	r3, [r0, #0]
 80173a6:	4604      	mov	r4, r0
 80173a8:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80173ac:	4798      	blx	r3
 80173ae:	4601      	mov	r1, r0
 80173b0:	462b      	mov	r3, r5
 80173b2:	4620      	mov	r0, r4
 80173b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173b8:	4718      	bx	r3

080173ba <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 80173ba:	b570      	push	{r4, r5, r6, lr}
 80173bc:	6803      	ldr	r3, [r0, #0]
 80173be:	4604      	mov	r4, r0
 80173c0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80173c4:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 80173c8:	b95a      	cbnz	r2, 80173e2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 80173ca:	894d      	ldrh	r5, [r1, #10]
 80173cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80173d0:	4620      	mov	r0, r4
 80173d2:	4798      	blx	r3
 80173d4:	1a29      	subs	r1, r5, r0
 80173d6:	4633      	mov	r3, r6
 80173d8:	4620      	mov	r0, r4
 80173da:	b209      	sxth	r1, r1
 80173dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173e0:	4718      	bx	r3
 80173e2:	898d      	ldrh	r5, [r1, #12]
 80173e4:	e7f2      	b.n	80173cc <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

080173e6 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 80173e6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80173ea:	2302      	movs	r3, #2
 80173ec:	b922      	cbnz	r2, 80173f8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 80173ee:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	; 0x94
 80173f2:	fb90 f0f3 	sdiv	r0, r0, r3
 80173f6:	4770      	bx	lr
 80173f8:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	; 0x96
 80173fc:	e7f9      	b.n	80173f2 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

080173fe <_ZN8touchgfx6Slider13setValueRangeEsss>:
 80173fe:	8642      	strh	r2, [r0, #50]	; 0x32
 8017400:	6802      	ldr	r2, [r0, #0]
 8017402:	8601      	strh	r1, [r0, #48]	; 0x30
 8017404:	4619      	mov	r1, r3
 8017406:	b410      	push	{r4}
 8017408:	f85d 4b04 	ldr.w	r4, [sp], #4
 801740c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8017410:	4710      	bx	r2

08017412 <_ZN8touchgfx6Slider13setValueRangeEss>:
 8017412:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8017416:	428b      	cmp	r3, r1
 8017418:	b410      	push	{r4}
 801741a:	db09      	blt.n	8017430 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 801741c:	4293      	cmp	r3, r2
 801741e:	bfa8      	it	ge
 8017420:	4613      	movge	r3, r2
 8017422:	6804      	ldr	r4, [r0, #0]
 8017424:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 8017428:	46a4      	mov	ip, r4
 801742a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801742e:	4760      	bx	ip
 8017430:	460b      	mov	r3, r1
 8017432:	e7f6      	b.n	8017422 <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

08017434 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8017434:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	; 0xe6
 8017438:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	; 0xe4
 801743c:	1a10      	subs	r0, r2, r0
 801743e:	4770      	bx	lr

08017440 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8017440:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8017444:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 8017448:	1a10      	subs	r0, r2, r0
 801744a:	4770      	bx	lr

0801744c <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801744c:	b570      	push	{r4, r5, r6, lr}
 801744e:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
 8017452:	4604      	mov	r4, r0
 8017454:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8017458:	428d      	cmp	r5, r1
 801745a:	bfa8      	it	ge
 801745c:	460d      	movge	r5, r1
 801745e:	429d      	cmp	r5, r3
 8017460:	bfac      	ite	ge
 8017462:	ebc3 0505 	rsbge	r5, r3, r5
 8017466:	ebc3 0503 	rsblt	r5, r3, r3
 801746a:	6803      	ldr	r3, [r0, #0]
 801746c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017470:	4798      	blx	r3
 8017472:	6823      	ldr	r3, [r4, #0]
 8017474:	4606      	mov	r6, r0
 8017476:	4620      	mov	r0, r4
 8017478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801747c:	4798      	blx	r3
 801747e:	4631      	mov	r1, r6
 8017480:	4602      	mov	r2, r0
 8017482:	4628      	mov	r0, r5
 8017484:	f004 fd05 	bl	801be92 <_ZN8touchgfx6muldivElll>
 8017488:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801748c:	2b01      	cmp	r3, #1
 801748e:	bf0b      	itete	eq
 8017490:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	; 0xe6
 8017494:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	; 0xe4
 8017498:	1a18      	subeq	r0, r3, r0
 801749a:	18c0      	addne	r0, r0, r3
 801749c:	b200      	sxth	r0, r0
 801749e:	bd70      	pop	{r4, r5, r6, pc}

080174a0 <_ZNK8touchgfx6Slider15positionToValueEs>:
 80174a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a2:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	; 0xe6
 80174a6:	4605      	mov	r5, r0
 80174a8:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	; 0xe4
 80174ac:	4299      	cmp	r1, r3
 80174ae:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80174b2:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	; 0x30
 80174b6:	bfa8      	it	ge
 80174b8:	4619      	movge	r1, r3
 80174ba:	42a1      	cmp	r1, r4
 80174bc:	bfb8      	it	lt
 80174be:	4621      	movlt	r1, r4
 80174c0:	2a01      	cmp	r2, #1
 80174c2:	b289      	uxth	r1, r1
 80174c4:	bf08      	it	eq
 80174c6:	1a5c      	subeq	r4, r3, r1
 80174c8:	6803      	ldr	r3, [r0, #0]
 80174ca:	bf18      	it	ne
 80174cc:	1b0c      	subne	r4, r1, r4
 80174ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80174d2:	4798      	blx	r3
 80174d4:	682b      	ldr	r3, [r5, #0]
 80174d6:	4607      	mov	r7, r0
 80174d8:	b224      	sxth	r4, r4
 80174da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80174de:	4628      	mov	r0, r5
 80174e0:	4798      	blx	r3
 80174e2:	4639      	mov	r1, r7
 80174e4:	4602      	mov	r2, r0
 80174e6:	4620      	mov	r0, r4
 80174e8:	f004 fcd3 	bl	801be92 <_ZN8touchgfx6muldivElll>
 80174ec:	4430      	add	r0, r6
 80174ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080174f0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 80174f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f4:	790b      	ldrb	r3, [r1, #4]
 80174f6:	4604      	mov	r4, r0
 80174f8:	460d      	mov	r5, r1
 80174fa:	b32b      	cbz	r3, 8017548 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	d137      	bne.n	8017570 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8017500:	6823      	ldr	r3, [r4, #0]
 8017502:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8017506:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 801750a:	2a00      	cmp	r2, #0
 801750c:	d12e      	bne.n	801756c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801750e:	88ee      	ldrh	r6, [r5, #6]
 8017510:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017514:	4620      	mov	r0, r4
 8017516:	4798      	blx	r3
 8017518:	1a31      	subs	r1, r6, r0
 801751a:	4620      	mov	r0, r4
 801751c:	b209      	sxth	r1, r1
 801751e:	47b8      	blx	r7
 8017520:	792b      	ldrb	r3, [r5, #4]
 8017522:	2b01      	cmp	r3, #1
 8017524:	d124      	bne.n	8017570 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8017526:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801752a:	b308      	cbz	r0, 8017570 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 801752c:	6803      	ldr	r3, [r0, #0]
 801752e:	68db      	ldr	r3, [r3, #12]
 8017530:	4798      	blx	r3
 8017532:	b1e8      	cbz	r0, 8017570 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8017534:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8017538:	4621      	mov	r1, r4
 801753a:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 801753e:	6803      	ldr	r3, [r0, #0]
 8017540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017544:	689b      	ldr	r3, [r3, #8]
 8017546:	4718      	bx	r3
 8017548:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 801754c:	2800      	cmp	r0, #0
 801754e:	d0d7      	beq.n	8017500 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017550:	6803      	ldr	r3, [r0, #0]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	4798      	blx	r3
 8017556:	2800      	cmp	r0, #0
 8017558:	d0d2      	beq.n	8017500 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801755a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 801755e:	4621      	mov	r1, r4
 8017560:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8017564:	6803      	ldr	r3, [r0, #0]
 8017566:	689b      	ldr	r3, [r3, #8]
 8017568:	4798      	blx	r3
 801756a:	e7c9      	b.n	8017500 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801756c:	892e      	ldrh	r6, [r5, #8]
 801756e:	e7cf      	b.n	8017510 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 8017570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017574 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8017574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017578:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	; 0xe4
 801757c:	4604      	mov	r4, r0
 801757e:	308c      	adds	r0, #140	; 0x8c
 8017580:	4588      	cmp	r8, r1
 8017582:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017586:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 801758a:	bfb8      	it	lt
 801758c:	4688      	movlt	r8, r1
 801758e:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 8017592:	4588      	cmp	r8, r1
 8017594:	bfa8      	it	ge
 8017596:	4688      	movge	r8, r1
 8017598:	fa1f f788 	uxth.w	r7, r8
 801759c:	2b00      	cmp	r3, #0
 801759e:	d130      	bne.n	8017602 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 80175a0:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
 80175a4:	4641      	mov	r1, r8
 80175a6:	f7ef f83e 	bl	8006626 <_ZN8touchgfx8Drawable6moveToEss>
 80175aa:	4630      	mov	r0, r6
 80175ac:	f004 faa7 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 80175b0:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 80175b4:	6823      	ldr	r3, [r4, #0]
 80175b6:	4620      	mov	r0, r4
 80175b8:	1abf      	subs	r7, r7, r2
 80175ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80175be:	b2bf      	uxth	r7, r7
 80175c0:	4798      	blx	r3
 80175c2:	4407      	add	r7, r0
 80175c4:	f8a4 70c0 	strh.w	r7, [r4, #192]	; 0xc0
 80175c8:	4630      	mov	r0, r6
 80175ca:	f004 fa98 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 80175ce:	6823      	ldr	r3, [r4, #0]
 80175d0:	4641      	mov	r1, r8
 80175d2:	4620      	mov	r0, r4
 80175d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80175d8:	4798      	blx	r3
 80175da:	85e0      	strh	r0, [r4, #46]	; 0x2e
 80175dc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80175e0:	2800      	cmp	r0, #0
 80175e2:	d03c      	beq.n	801765e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 80175e4:	6803      	ldr	r3, [r0, #0]
 80175e6:	68db      	ldr	r3, [r3, #12]
 80175e8:	4798      	blx	r3
 80175ea:	2800      	cmp	r0, #0
 80175ec:	d037      	beq.n	801765e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 80175ee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80175f2:	4621      	mov	r1, r4
 80175f4:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80175f8:	6803      	ldr	r3, [r0, #0]
 80175fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175fe:	689b      	ldr	r3, [r3, #8]
 8017600:	4718      	bx	r3
 8017602:	4642      	mov	r2, r8
 8017604:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	; 0x90
 8017608:	f7ef f80d 	bl	8006626 <_ZN8touchgfx8Drawable6moveToEss>
 801760c:	4630      	mov	r0, r6
 801760e:	f004 fa76 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 8017612:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 8017614:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 8017616:	6823      	ldr	r3, [r4, #0]
 8017618:	4405      	add	r5, r0
 801761a:	4620      	mov	r0, r4
 801761c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017620:	b2ad      	uxth	r5, r5
 8017622:	4798      	blx	r3
 8017624:	6823      	ldr	r3, [r4, #0]
 8017626:	1bed      	subs	r5, r5, r7
 8017628:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	; 0xbc
 801762c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017630:	1a2d      	subs	r5, r5, r0
 8017632:	4620      	mov	r0, r4
 8017634:	4798      	blx	r3
 8017636:	4438      	add	r0, r7
 8017638:	b2ad      	uxth	r5, r5
 801763a:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	; 0xc0
 801763e:	b202      	sxth	r2, r0
 8017640:	4651      	mov	r1, sl
 8017642:	4630      	mov	r0, r6
 8017644:	f7f1 f807 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 8017648:	4630      	mov	r0, r6
 801764a:	b22a      	sxth	r2, r5
 801764c:	4649      	mov	r1, r9
 801764e:	f7f1 f820 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017652:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 8017656:	1a2d      	subs	r5, r5, r0
 8017658:	f8a4 5066 	strh.w	r5, [r4, #102]	; 0x66
 801765c:	e7b4      	b.n	80175c8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 801765e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017662 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 8017662:	b570      	push	{r4, r5, r6, lr}
 8017664:	4604      	mov	r4, r0
 8017666:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 801766a:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 801766e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8017672:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8017676:	f7f0 ffee 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 801767a:	4632      	mov	r2, r6
 801767c:	4629      	mov	r1, r5
 801767e:	4620      	mov	r0, r4
 8017680:	f7f1 f807 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017684:	bd70      	pop	{r4, r5, r6, pc}

08017686 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 8017686:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801768a:	f04f 0a00 	mov.w	sl, #0
 801768e:	f100 0b34 	add.w	fp, r0, #52	; 0x34
 8017692:	4604      	mov	r4, r0
 8017694:	461d      	mov	r5, r3
 8017696:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 801769a:	4658      	mov	r0, fp
 801769c:	4690      	mov	r8, r2
 801769e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80176a2:	4689      	mov	r9, r1
 80176a4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80176a8:	f7f0 ffd5 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 80176ac:	4659      	mov	r1, fp
 80176ae:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80176b2:	f7ff ffd6 	bl	8017662 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 80176b6:	4652      	mov	r2, sl
 80176b8:	4651      	mov	r1, sl
 80176ba:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80176be:	f7f0 ffca 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 80176c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80176c4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80176c6:	4620      	mov	r0, r4
 80176c8:	4490      	add	r8, r2
 80176ca:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 80176ce:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
 80176d2:	4489      	add	r9, r1
 80176d4:	4415      	add	r5, r2
 80176d6:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80176da:	fa0f f288 	sxth.w	r2, r8
 80176de:	f8a4 70e4 	strh.w	r7, [r4, #228]	; 0xe4
 80176e2:	1873      	adds	r3, r6, r1
 80176e4:	b22d      	sxth	r5, r5
 80176e6:	fa0f f989 	sxth.w	r9, r9
 80176ea:	f8a4 60e6 	strh.w	r6, [r4, #230]	; 0xe6
 80176ee:	b219      	sxth	r1, r3
 80176f0:	42aa      	cmp	r2, r5
 80176f2:	bfb8      	it	lt
 80176f4:	462a      	movlt	r2, r5
 80176f6:	4549      	cmp	r1, r9
 80176f8:	bfb8      	it	lt
 80176fa:	4649      	movlt	r1, r9
 80176fc:	f7f0 ffc9 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017700:	6823      	ldr	r3, [r4, #0]
 8017702:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 8017706:	4620      	mov	r0, r4
 8017708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801770c:	b001      	add	sp, #4
 801770e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017712:	4718      	bx	r3

08017714 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 8017714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017718:	461d      	mov	r5, r3
 801771a:	f100 0a34 	add.w	sl, r0, #52	; 0x34
 801771e:	2301      	movs	r3, #1
 8017720:	4604      	mov	r4, r0
 8017722:	4617      	mov	r7, r2
 8017724:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8017728:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801772c:	4650      	mov	r0, sl
 801772e:	460e      	mov	r6, r1
 8017730:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8017734:	f7f0 ff8f 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 8017738:	4651      	mov	r1, sl
 801773a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801773e:	f7ff ff90 	bl	8017662 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8017742:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8017744:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8017746:	4620      	mov	r0, r4
 8017748:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 801774c:	440e      	add	r6, r1
 801774e:	443a      	add	r2, r7
 8017750:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8017754:	4443      	add	r3, r8
 8017756:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 801775a:	b212      	sxth	r2, r2
 801775c:	440d      	add	r5, r1
 801775e:	b21b      	sxth	r3, r3
 8017760:	f8a4 90e4 	strh.w	r9, [r4, #228]	; 0xe4
 8017764:	b231      	sxth	r1, r6
 8017766:	f8a4 80e6 	strh.w	r8, [r4, #230]	; 0xe6
 801776a:	429a      	cmp	r2, r3
 801776c:	b22d      	sxth	r5, r5
 801776e:	bfb8      	it	lt
 8017770:	461a      	movlt	r2, r3
 8017772:	42a9      	cmp	r1, r5
 8017774:	bfb8      	it	lt
 8017776:	4629      	movlt	r1, r5
 8017778:	f7f0 ff8b 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801777c:	6823      	ldr	r3, [r4, #0]
 801777e:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 8017782:	4620      	mov	r0, r4
 8017784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017788:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801778c:	4718      	bx	r3
	...

08017790 <_ZN8touchgfx6SliderC1Ev>:
 8017790:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017794:	4604      	mov	r4, r0
 8017796:	f7f0 ff0d 	bl	80085b4 <_ZN8touchgfx8DrawableC1Ev>
 801779a:	4b28      	ldr	r3, [pc, #160]	; (801783c <_ZN8touchgfx6SliderC1Ev+0xac>)
 801779c:	2500      	movs	r5, #0
 801779e:	ae02      	add	r6, sp, #8
 80177a0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80177a4:	6023      	str	r3, [r4, #0]
 80177a6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80177aa:	2364      	movs	r3, #100	; 0x64
 80177ac:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 80177b0:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80177b4:	4648      	mov	r0, r9
 80177b6:	8663      	strh	r3, [r4, #50]	; 0x32
 80177b8:	4631      	mov	r1, r6
 80177ba:	62a5      	str	r5, [r4, #40]	; 0x28
 80177bc:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80177c0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80177c4:	85e5      	strh	r5, [r4, #46]	; 0x2e
 80177c6:	8625      	strh	r5, [r4, #48]	; 0x30
 80177c8:	f7f1 fa14 	bl	8008bf4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80177cc:	4631      	mov	r1, r6
 80177ce:	4650      	mov	r0, sl
 80177d0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80177d4:	f7f1 fa0e 	bl	8008bf4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80177d8:	4631      	mov	r1, r6
 80177da:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 80177de:	4640      	mov	r0, r8
 80177e0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80177e4:	f7f1 fa06 	bl	8008bf4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80177e8:	4630      	mov	r0, r6
 80177ea:	f7f0 fee3 	bl	80085b4 <_ZN8touchgfx8DrawableC1Ev>
 80177ee:	4b14      	ldr	r3, [pc, #80]	; (8017840 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 80177f0:	4651      	mov	r1, sl
 80177f2:	4630      	mov	r0, r6
 80177f4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80177f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80177fc:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 8017800:	e9c4 3539 	strd	r3, r5, [r4, #228]	; 0xe4
 8017804:	2301      	movs	r3, #1
 8017806:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
 801780a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 801780e:	f7ff fb3b 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017812:	4649      	mov	r1, r9
 8017814:	4620      	mov	r0, r4
 8017816:	f7ff fb37 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801781a:	4631      	mov	r1, r6
 801781c:	4620      	mov	r0, r4
 801781e:	f7ff fb33 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017822:	4641      	mov	r1, r8
 8017824:	4620      	mov	r0, r4
 8017826:	f7ff fb2f 	bl	8016e88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801782a:	4620      	mov	r0, r4
 801782c:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	; 0xe4
 8017830:	f7ff fea0 	bl	8017574 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 8017834:	4620      	mov	r0, r4
 8017836:	b002      	add	sp, #8
 8017838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801783c:	0802fb58 	.word	0x0802fb58
 8017840:	0802fac8 	.word	0x0802fac8

08017844 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8017844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017848:	4604      	mov	r4, r0
 801784a:	f100 0634 	add.w	r6, r0, #52	; 0x34
 801784e:	4689      	mov	r9, r1
 8017850:	461f      	mov	r7, r3
 8017852:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8017856:	4630      	mov	r0, r6
 8017858:	4690      	mov	r8, r2
 801785a:	f004 f950 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 801785e:	4628      	mov	r0, r5
 8017860:	f004 f94d 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 8017864:	4649      	mov	r1, r9
 8017866:	4630      	mov	r0, r6
 8017868:	f001 fb4a 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801786c:	4641      	mov	r1, r8
 801786e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8017872:	f001 fb45 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017876:	4639      	mov	r1, r7
 8017878:	4628      	mov	r0, r5
 801787a:	f001 fb41 	bl	8018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801787e:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 8017882:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	; 0x68
 8017886:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801788a:	f7f0 ff02 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801788e:	6823      	ldr	r3, [r4, #0]
 8017890:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 8017894:	4620      	mov	r0, r4
 8017896:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801789a:	4798      	blx	r3
 801789c:	4630      	mov	r0, r6
 801789e:	f004 f92e 	bl	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>
 80178a2:	4628      	mov	r0, r5
 80178a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178a8:	f004 b929 	b.w	801bafe <_ZNK8touchgfx8Drawable10invalidateEv>

080178ac <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80178ac:	4770      	bx	lr

080178ae <_ZN8touchgfx3HAL10FlushCacheEv>:
 80178ae:	4770      	bx	lr

080178b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80178b0:	6803      	ldr	r3, [r0, #0]
 80178b2:	b513      	push	{r0, r1, r4, lr}
 80178b4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80178b8:	2300      	movs	r3, #0
 80178ba:	e9cd 3300 	strd	r3, r3, [sp]
 80178be:	466b      	mov	r3, sp
 80178c0:	47a0      	blx	r4
 80178c2:	b002      	add	sp, #8
 80178c4:	bd10      	pop	{r4, pc}

080178c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80178c6:	2301      	movs	r3, #1
 80178c8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80178cc:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80178d0:	4770      	bx	lr

080178d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80178d2:	2301      	movs	r3, #1
 80178d4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80178d8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80178dc:	4770      	bx	lr

080178de <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80178de:	6843      	ldr	r3, [r0, #4]
 80178e0:	2201      	movs	r2, #1
 80178e2:	725a      	strb	r2, [r3, #9]
 80178e4:	6840      	ldr	r0, [r0, #4]
 80178e6:	6803      	ldr	r3, [r0, #0]
 80178e8:	691b      	ldr	r3, [r3, #16]
 80178ea:	4718      	bx	r3

080178ec <_ZN8touchgfx3HAL8flushDMAEv>:
 80178ec:	6840      	ldr	r0, [r0, #4]
 80178ee:	6803      	ldr	r3, [r0, #0]
 80178f0:	689b      	ldr	r3, [r3, #8]
 80178f2:	4718      	bx	r3

080178f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80178f4:	b530      	push	{r4, r5, lr}
 80178f6:	b08b      	sub	sp, #44	; 0x2c
 80178f8:	6804      	ldr	r4, [r0, #0]
 80178fa:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80178fe:	9509      	str	r5, [sp, #36]	; 0x24
 8017900:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017904:	9508      	str	r5, [sp, #32]
 8017906:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801790a:	9507      	str	r5, [sp, #28]
 801790c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017910:	9506      	str	r5, [sp, #24]
 8017912:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017916:	9505      	str	r5, [sp, #20]
 8017918:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801791c:	9504      	str	r5, [sp, #16]
 801791e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017922:	9503      	str	r5, [sp, #12]
 8017924:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017928:	9502      	str	r5, [sp, #8]
 801792a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801792e:	e9cd 3500 	strd	r3, r5, [sp]
 8017932:	4613      	mov	r3, r2
 8017934:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017936:	2200      	movs	r2, #0
 8017938:	47a0      	blx	r4
 801793a:	b00b      	add	sp, #44	; 0x2c
 801793c:	bd30      	pop	{r4, r5, pc}
	...

08017940 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017940:	4b04      	ldr	r3, [pc, #16]	; (8017954 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	b123      	cbz	r3, 8017950 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017946:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 801794a:	f080 0001 	eor.w	r0, r0, #1
 801794e:	4770      	bx	lr
 8017950:	2001      	movs	r0, #1
 8017952:	4770      	bx	lr
 8017954:	2402ae6a 	.word	0x2402ae6a

08017958 <_ZN8touchgfx3HAL8endFrameEv>:
 8017958:	b510      	push	{r4, lr}
 801795a:	4604      	mov	r4, r0
 801795c:	6840      	ldr	r0, [r0, #4]
 801795e:	6803      	ldr	r3, [r0, #0]
 8017960:	689b      	ldr	r3, [r3, #8]
 8017962:	4798      	blx	r3
 8017964:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8017968:	b113      	cbz	r3, 8017970 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801796a:	2301      	movs	r3, #1
 801796c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8017970:	bd10      	pop	{r4, pc}

08017972 <_ZN8touchgfx3HAL10initializeEv>:
 8017972:	b510      	push	{r4, lr}
 8017974:	4604      	mov	r4, r0
 8017976:	f7ed f86d 	bl	8004a54 <_ZN8touchgfx10OSWrappers10initializeEv>
 801797a:	f7eb fcf1 	bl	8003360 <_ZN8touchgfx4GPIO4initEv>
 801797e:	6860      	ldr	r0, [r4, #4]
 8017980:	6803      	ldr	r3, [r0, #0]
 8017982:	68db      	ldr	r3, [r3, #12]
 8017984:	4798      	blx	r3
 8017986:	68e0      	ldr	r0, [r4, #12]
 8017988:	6803      	ldr	r3, [r0, #0]
 801798a:	689b      	ldr	r3, [r3, #8]
 801798c:	4798      	blx	r3
 801798e:	6823      	ldr	r3, [r4, #0]
 8017990:	4620      	mov	r0, r4
 8017992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017998:	4718      	bx	r3

0801799a <_ZN8touchgfx3HAL9taskEntryEv>:
 801799a:	b508      	push	{r3, lr}
 801799c:	6803      	ldr	r3, [r0, #0]
 801799e:	4604      	mov	r4, r0
 80179a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80179a4:	4798      	blx	r3
 80179a6:	6823      	ldr	r3, [r4, #0]
 80179a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80179aa:	4620      	mov	r0, r4
 80179ac:	4798      	blx	r3
 80179ae:	f7ed f8c7 	bl	8004b40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80179b2:	6823      	ldr	r3, [r4, #0]
 80179b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179b6:	e7f8      	b.n	80179aa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080179b8 <_ZN8touchgfx3HAL4tickEv>:
 80179b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80179ba:	6803      	ldr	r3, [r0, #0]
 80179bc:	4604      	mov	r4, r0
 80179be:	4d5b      	ldr	r5, [pc, #364]	; (8017b2c <_ZN8touchgfx3HAL4tickEv+0x174>)
 80179c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80179c4:	4798      	blx	r3
 80179c6:	2800      	cmp	r0, #0
 80179c8:	f000 8095 	beq.w	8017af6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80179cc:	2001      	movs	r0, #1
 80179ce:	2600      	movs	r6, #0
 80179d0:	f7eb fcce 	bl	8003370 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80179d4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80179d8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80179dc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80179e0:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80179e4:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 80179e8:	b133      	cbz	r3, 80179f8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80179ea:	6823      	ldr	r3, [r4, #0]
 80179ec:	4620      	mov	r0, r4
 80179ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80179f2:	4798      	blx	r3
 80179f4:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 80179f8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80179fc:	2601      	movs	r6, #1
 80179fe:	6862      	ldr	r2, [r4, #4]
 8017a00:	f083 0301 	eor.w	r3, r3, #1
 8017a04:	702e      	strb	r6, [r5, #0]
 8017a06:	7253      	strb	r3, [r2, #9]
 8017a08:	f002 ffb6 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 8017a0c:	6803      	ldr	r3, [r0, #0]
 8017a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a10:	4798      	blx	r3
 8017a12:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8017a16:	b90b      	cbnz	r3, 8017a1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8017a18:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8017a1c:	f002 ffac 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 8017a20:	6803      	ldr	r3, [r0, #0]
 8017a22:	695b      	ldr	r3, [r3, #20]
 8017a24:	4798      	blx	r3
 8017a26:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8017a28:	6803      	ldr	r3, [r0, #0]
 8017a2a:	691b      	ldr	r3, [r3, #16]
 8017a2c:	4798      	blx	r3
 8017a2e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8017a32:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8017a36:	3b01      	subs	r3, #1
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017a3e:	b10a      	cbz	r2, 8017a44 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d1eb      	bne.n	8017a1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8017a44:	4a3a      	ldr	r2, [pc, #232]	; (8017b30 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017a46:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8017a4a:	7813      	ldrb	r3, [r2, #0]
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	b25b      	sxtb	r3, r3
 8017a50:	4299      	cmp	r1, r3
 8017a52:	7013      	strb	r3, [r2, #0]
 8017a54:	dc10      	bgt.n	8017a78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017a56:	2300      	movs	r3, #0
 8017a58:	68e0      	ldr	r0, [r4, #12]
 8017a5a:	a902      	add	r1, sp, #8
 8017a5c:	7013      	strb	r3, [r2, #0]
 8017a5e:	aa03      	add	r2, sp, #12
 8017a60:	6803      	ldr	r3, [r0, #0]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	4798      	blx	r3
 8017a66:	6823      	ldr	r3, [r4, #0]
 8017a68:	2800      	cmp	r0, #0
 8017a6a:	d050      	beq.n	8017b0e <_ZN8touchgfx3HAL4tickEv+0x156>
 8017a6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017a70:	4620      	mov	r0, r4
 8017a72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017a76:	4798      	blx	r3
 8017a78:	2300      	movs	r3, #0
 8017a7a:	6960      	ldr	r0, [r4, #20]
 8017a7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8017a80:	b158      	cbz	r0, 8017a9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017a82:	6803      	ldr	r3, [r0, #0]
 8017a84:	f10d 0107 	add.w	r1, sp, #7
 8017a88:	68db      	ldr	r3, [r3, #12]
 8017a8a:	4798      	blx	r3
 8017a8c:	b128      	cbz	r0, 8017a9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017a8e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8017a90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017a94:	6803      	ldr	r3, [r0, #0]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	4798      	blx	r3
 8017a9a:	f104 001c 	add.w	r0, r4, #28
 8017a9e:	f013 fc99 	bl	802b3d4 <_ZN8touchgfx8Gestures4tickEv>
 8017aa2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8017aa6:	b30b      	cbz	r3, 8017aec <_ZN8touchgfx3HAL4tickEv+0x134>
 8017aa8:	6920      	ldr	r0, [r4, #16]
 8017aaa:	6803      	ldr	r3, [r0, #0]
 8017aac:	691b      	ldr	r3, [r3, #16]
 8017aae:	4798      	blx	r3
 8017ab0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	b903      	cbnz	r3, 8017ab8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8017ab6:	6760      	str	r0, [r4, #116]	; 0x74
 8017ab8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017aba:	4a1e      	ldr	r2, [pc, #120]	; (8017b34 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017abc:	1af3      	subs	r3, r6, r3
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	d914      	bls.n	8017aec <_ZN8touchgfx3HAL4tickEv+0x134>
 8017ac2:	6920      	ldr	r0, [r4, #16]
 8017ac4:	6803      	ldr	r3, [r0, #0]
 8017ac6:	699b      	ldr	r3, [r3, #24]
 8017ac8:	4798      	blx	r3
 8017aca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017acc:	2264      	movs	r2, #100	; 0x64
 8017ace:	1af3      	subs	r3, r6, r3
 8017ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ad4:	fbb0 f0f3 	udiv	r0, r0, r3
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	dc1d      	bgt.n	8017b18 <_ZN8touchgfx3HAL4tickEv+0x160>
 8017adc:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8017ae0:	6920      	ldr	r0, [r4, #16]
 8017ae2:	2100      	movs	r1, #0
 8017ae4:	6803      	ldr	r3, [r0, #0]
 8017ae6:	69db      	ldr	r3, [r3, #28]
 8017ae8:	4798      	blx	r3
 8017aea:	6766      	str	r6, [r4, #116]	; 0x74
 8017aec:	f002 ff44 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 8017af0:	6803      	ldr	r3, [r0, #0]
 8017af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017af4:	4798      	blx	r3
 8017af6:	6823      	ldr	r3, [r4, #0]
 8017af8:	4620      	mov	r0, r4
 8017afa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017afe:	4798      	blx	r3
 8017b00:	2001      	movs	r0, #1
 8017b02:	f7eb fc51 	bl	80033a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017b06:	2300      	movs	r3, #0
 8017b08:	702b      	strb	r3, [r5, #0]
 8017b0a:	b004      	add	sp, #16
 8017b0c:	bd70      	pop	{r4, r5, r6, pc}
 8017b0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017b12:	4620      	mov	r0, r4
 8017b14:	4798      	blx	r3
 8017b16:	e7af      	b.n	8017a78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017b18:	2863      	cmp	r0, #99	; 0x63
 8017b1a:	bfcb      	itete	gt
 8017b1c:	2300      	movgt	r3, #0
 8017b1e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017b22:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8017b26:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8017b2a:	e7d9      	b.n	8017ae0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017b2c:	2402ae70 	.word	0x2402ae70
 8017b30:	2402ae71 	.word	0x2402ae71
 8017b34:	05f5e100 	.word	0x05f5e100

08017b38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017b38:	b510      	push	{r4, lr}
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	f7ec ffcc 	bl	8004ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8017b40:	2200      	movs	r2, #0
 8017b42:	6863      	ldr	r3, [r4, #4]
 8017b44:	729a      	strb	r2, [r3, #10]
 8017b46:	bd10      	pop	{r4, pc}

08017b48 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017b48:	65c1      	str	r1, [r0, #92]	; 0x5c
 8017b4a:	301c      	adds	r0, #28
 8017b4c:	f013 bc40 	b.w	802b3d0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017b50 <_ZN8touchgfx3HAL5touchEll>:
 8017b50:	b530      	push	{r4, r5, lr}
 8017b52:	b087      	sub	sp, #28
 8017b54:	4604      	mov	r4, r0
 8017b56:	a804      	add	r0, sp, #16
 8017b58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017b5c:	f002 fcfe 	bl	801a55c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017b60:	9b04      	ldr	r3, [sp, #16]
 8017b62:	a906      	add	r1, sp, #24
 8017b64:	a803      	add	r0, sp, #12
 8017b66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b6a:	9b05      	ldr	r3, [sp, #20]
 8017b6c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017b70:	f002 fd46 	bl	801a600 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017b74:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8017b78:	f104 001c 	add.w	r0, r4, #28
 8017b7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017b80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017b84:	b189      	cbz	r1, 8017baa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017b86:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8017b8a:	9300      	str	r3, [sp, #0]
 8017b8c:	4613      	mov	r3, r2
 8017b8e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8017b92:	462a      	mov	r2, r5
 8017b94:	f013 fc2c 	bl	802b3f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017b98:	b128      	cbz	r0, 8017ba6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017b9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017b9e:	6623      	str	r3, [r4, #96]	; 0x60
 8017ba0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017ba4:	6663      	str	r3, [r4, #100]	; 0x64
 8017ba6:	b007      	add	sp, #28
 8017ba8:	bd30      	pop	{r4, r5, pc}
 8017baa:	f013 fc61 	bl	802b470 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017bae:	2301      	movs	r3, #1
 8017bb0:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8017bb4:	e7f1      	b.n	8017b9a <_ZN8touchgfx3HAL5touchEll+0x4a>

08017bb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017bb6:	b510      	push	{r4, lr}
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d046      	beq.n	8017c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017bbc:	ea81 0002 	eor.w	r0, r1, r2
 8017bc0:	07c4      	lsls	r4, r0, #31
 8017bc2:	d508      	bpl.n	8017bd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017bc4:	440b      	add	r3, r1
 8017bc6:	3a01      	subs	r2, #1
 8017bc8:	428b      	cmp	r3, r1
 8017bca:	d93e      	bls.n	8017c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017bcc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017bd0:	f801 0b01 	strb.w	r0, [r1], #1
 8017bd4:	e7f8      	b.n	8017bc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017bd6:	07d0      	lsls	r0, r2, #31
 8017bd8:	bf42      	ittt	mi
 8017bda:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017bde:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017be2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017be6:	2b01      	cmp	r3, #1
 8017be8:	d911      	bls.n	8017c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017bea:	ea81 0402 	eor.w	r4, r1, r2
 8017bee:	4610      	mov	r0, r2
 8017bf0:	07a4      	lsls	r4, r4, #30
 8017bf2:	d022      	beq.n	8017c3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017bf4:	f023 0401 	bic.w	r4, r3, #1
 8017bf8:	440c      	add	r4, r1
 8017bfa:	428c      	cmp	r4, r1
 8017bfc:	4602      	mov	r2, r0
 8017bfe:	d904      	bls.n	8017c0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017c00:	8812      	ldrh	r2, [r2, #0]
 8017c02:	3002      	adds	r0, #2
 8017c04:	f821 2b02 	strh.w	r2, [r1], #2
 8017c08:	e7f7      	b.n	8017bfa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017c0a:	f003 0301 	and.w	r3, r3, #1
 8017c0e:	f023 0003 	bic.w	r0, r3, #3
 8017c12:	4408      	add	r0, r1
 8017c14:	4288      	cmp	r0, r1
 8017c16:	4614      	mov	r4, r2
 8017c18:	d904      	bls.n	8017c24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017c1a:	6824      	ldr	r4, [r4, #0]
 8017c1c:	3204      	adds	r2, #4
 8017c1e:	f841 4b04 	str.w	r4, [r1], #4
 8017c22:	e7f7      	b.n	8017c14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017c24:	f003 0303 	and.w	r3, r3, #3
 8017c28:	3a01      	subs	r2, #1
 8017c2a:	440b      	add	r3, r1
 8017c2c:	428b      	cmp	r3, r1
 8017c2e:	d90c      	bls.n	8017c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017c30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017c34:	f801 0b01 	strb.w	r0, [r1], #1
 8017c38:	e7f8      	b.n	8017c2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017c3a:	0790      	lsls	r0, r2, #30
 8017c3c:	d0e7      	beq.n	8017c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017c3e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017c42:	3b02      	subs	r3, #2
 8017c44:	f821 0b02 	strh.w	r0, [r1], #2
 8017c48:	e7e1      	b.n	8017c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017c4a:	2001      	movs	r0, #1
 8017c4c:	bd10      	pop	{r4, pc}

08017c4e <_ZN8touchgfx3HAL7noTouchEv>:
 8017c4e:	b510      	push	{r4, lr}
 8017c50:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8017c54:	4604      	mov	r4, r0
 8017c56:	b153      	cbz	r3, 8017c6e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017c58:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8017c5c:	2101      	movs	r1, #1
 8017c5e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8017c62:	301c      	adds	r0, #28
 8017c64:	f013 fc04 	bl	802b470 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017c68:	2300      	movs	r3, #0
 8017c6a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8017c6e:	bd10      	pop	{r4, pc}

08017c70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c74:	b085      	sub	sp, #20
 8017c76:	4604      	mov	r4, r0
 8017c78:	2000      	movs	r0, #0
 8017c7a:	4699      	mov	r9, r3
 8017c7c:	ad04      	add	r5, sp, #16
 8017c7e:	460f      	mov	r7, r1
 8017c80:	4690      	mov	r8, r2
 8017c82:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017c86:	69a0      	ldr	r0, [r4, #24]
 8017c88:	6806      	ldr	r6, [r0, #0]
 8017c8a:	9501      	str	r5, [sp, #4]
 8017c8c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017c90:	9500      	str	r5, [sp, #0]
 8017c92:	6835      	ldr	r5, [r6, #0]
 8017c94:	47a8      	blx	r5
 8017c96:	4d10      	ldr	r5, [pc, #64]	; (8017cd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8017c98:	4606      	mov	r6, r0
 8017c9a:	f8a5 9000 	strh.w	r9, [r5]
 8017c9e:	f7ee fd1d 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8017ca2:	6803      	ldr	r3, [r0, #0]
 8017ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ca6:	4798      	blx	r3
 8017ca8:	b128      	cbz	r0, 8017cb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8017caa:	2801      	cmp	r0, #1
 8017cac:	d00b      	beq.n	8017cc6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8017cae:	4630      	mov	r0, r6
 8017cb0:	b005      	add	sp, #20
 8017cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cb6:	882b      	ldrh	r3, [r5, #0]
 8017cb8:	fb08 7203 	mla	r2, r8, r3, r7
 8017cbc:	9b03      	ldr	r3, [sp, #12]
 8017cbe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017cc2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017cc4:	e7f3      	b.n	8017cae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017cc6:	882a      	ldrh	r2, [r5, #0]
 8017cc8:	9b03      	ldr	r3, [sp, #12]
 8017cca:	fb08 7202 	mla	r2, r8, r2, r7
 8017cce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017cd2:	1a9a      	subs	r2, r3, r2
 8017cd4:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017cd6:	e7ea      	b.n	8017cae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017cd8:	2402ae66 	.word	0x2402ae66

08017cdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cde:	b08b      	sub	sp, #44	; 0x2c
 8017ce0:	4617      	mov	r7, r2
 8017ce2:	4604      	mov	r4, r0
 8017ce4:	460e      	mov	r6, r1
 8017ce6:	461d      	mov	r5, r3
 8017ce8:	f7ee fcf8 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8017cec:	6803      	ldr	r3, [r0, #0]
 8017cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cf0:	4798      	blx	r3
 8017cf2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017cf6:	9007      	str	r0, [sp, #28]
 8017cf8:	4631      	mov	r1, r6
 8017cfa:	6822      	ldr	r2, [r4, #0]
 8017cfc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017d00:	4b0c      	ldr	r3, [pc, #48]	; (8017d34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017d02:	4620      	mov	r0, r4
 8017d04:	881b      	ldrh	r3, [r3, #0]
 8017d06:	9306      	str	r3, [sp, #24]
 8017d08:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017d0c:	9305      	str	r3, [sp, #20]
 8017d0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017d12:	9304      	str	r3, [sp, #16]
 8017d14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017d18:	9303      	str	r3, [sp, #12]
 8017d1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017d1e:	9302      	str	r3, [sp, #8]
 8017d20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017d24:	e9cd 5300 	strd	r5, r3, [sp]
 8017d28:	463b      	mov	r3, r7
 8017d2a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	47a8      	blx	r5
 8017d30:	b00b      	add	sp, #44	; 0x2c
 8017d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d34:	2402ae66 	.word	0x2402ae66

08017d38 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d3c:	4698      	mov	r8, r3
 8017d3e:	6803      	ldr	r3, [r0, #0]
 8017d40:	b08b      	sub	sp, #44	; 0x2c
 8017d42:	4617      	mov	r7, r2
 8017d44:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017d46:	460e      	mov	r6, r1
 8017d48:	4b13      	ldr	r3, [pc, #76]	; (8017d98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	f8b3 9000 	ldrh.w	r9, [r3]
 8017d50:	f7ee fcc4 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8017d54:	6803      	ldr	r3, [r0, #0]
 8017d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d58:	4798      	blx	r3
 8017d5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017d5e:	2200      	movs	r2, #0
 8017d60:	4631      	mov	r1, r6
 8017d62:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017d66:	2302      	movs	r3, #2
 8017d68:	4620      	mov	r0, r4
 8017d6a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017d6e:	2301      	movs	r3, #1
 8017d70:	9305      	str	r3, [sp, #20]
 8017d72:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017d76:	9304      	str	r3, [sp, #16]
 8017d78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017d7c:	9303      	str	r3, [sp, #12]
 8017d7e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017d82:	9302      	str	r3, [sp, #8]
 8017d84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017d88:	e9cd 8300 	strd	r8, r3, [sp]
 8017d8c:	463b      	mov	r3, r7
 8017d8e:	47a8      	blx	r5
 8017d90:	b00b      	add	sp, #44	; 0x2c
 8017d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d96:	bf00      	nop
 8017d98:	2402ae66 	.word	0x2402ae66

08017d9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017da0:	4698      	mov	r8, r3
 8017da2:	6803      	ldr	r3, [r0, #0]
 8017da4:	b087      	sub	sp, #28
 8017da6:	460e      	mov	r6, r1
 8017da8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017daa:	4617      	mov	r7, r2
 8017dac:	4b0f      	ldr	r3, [pc, #60]	; (8017dec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017dae:	4604      	mov	r4, r0
 8017db0:	f8b3 9000 	ldrh.w	r9, [r3]
 8017db4:	f7ee fc92 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8017db8:	6803      	ldr	r3, [r0, #0]
 8017dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dbc:	4798      	blx	r3
 8017dbe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	4631      	mov	r1, r6
 8017dc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8017dca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017dce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	9302      	str	r3, [sp, #8]
 8017dd6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017dda:	9301      	str	r3, [sp, #4]
 8017ddc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017de0:	9300      	str	r3, [sp, #0]
 8017de2:	4643      	mov	r3, r8
 8017de4:	47a8      	blx	r5
 8017de6:	b007      	add	sp, #28
 8017de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dec:	2402ae66 	.word	0x2402ae66

08017df0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017df4:	4604      	mov	r4, r0
 8017df6:	b08f      	sub	sp, #60	; 0x3c
 8017df8:	4610      	mov	r0, r2
 8017dfa:	460d      	mov	r5, r1
 8017dfc:	4691      	mov	r9, r2
 8017dfe:	461e      	mov	r6, r3
 8017e00:	f005 fec2 	bl	801db88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017e04:	2800      	cmp	r0, #0
 8017e06:	f000 809d 	beq.w	8017f44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8017e0a:	6823      	ldr	r3, [r4, #0]
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	f8df b198 	ldr.w	fp, [pc, #408]	; 8017fa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017e12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e18:	4798      	blx	r3
 8017e1a:	6823      	ldr	r3, [r4, #0]
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8017fac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e24:	4798      	blx	r3
 8017e26:	f8bb 3000 	ldrh.w	r3, [fp]
 8017e2a:	4f5c      	ldr	r7, [pc, #368]	; (8017f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017e2c:	9301      	str	r3, [sp, #4]
 8017e2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017e32:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017e36:	4640      	mov	r0, r8
 8017e38:	9302      	str	r3, [sp, #8]
 8017e3a:	883b      	ldrh	r3, [r7, #0]
 8017e3c:	9303      	str	r3, [sp, #12]
 8017e3e:	4b58      	ldr	r3, [pc, #352]	; (8017fa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017e40:	881a      	ldrh	r2, [r3, #0]
 8017e42:	9305      	str	r3, [sp, #20]
 8017e44:	9204      	str	r2, [sp, #16]
 8017e46:	f005 ff33 	bl	801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e4a:	8038      	strh	r0, [r7, #0]
 8017e4c:	4640      	mov	r0, r8
 8017e4e:	f005 ff63 	bl	801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017e52:	9b05      	ldr	r3, [sp, #20]
 8017e54:	b280      	uxth	r0, r0
 8017e56:	8018      	strh	r0, [r3, #0]
 8017e58:	4b52      	ldr	r3, [pc, #328]	; (8017fa4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d174      	bne.n	8017f4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017e60:	883b      	ldrh	r3, [r7, #0]
 8017e62:	f8aa 0000 	strh.w	r0, [sl]
 8017e66:	f8ab 3000 	strh.w	r3, [fp]
 8017e6a:	4648      	mov	r0, r9
 8017e6c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017e70:	f005 fe8a 	bl	801db88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017e74:	2200      	movs	r2, #0
 8017e76:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017e7a:	4611      	mov	r1, r2
 8017e7c:	4628      	mov	r0, r5
 8017e7e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017e82:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017e86:	f7f0 fbe6 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017e90:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017e94:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	dd5c      	ble.n	8017f56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017e9c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	dd58      	ble.n	8017f56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017ea4:	462a      	mov	r2, r5
 8017ea6:	ab0a      	add	r3, sp, #40	; 0x28
 8017ea8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017eac:	6851      	ldr	r1, [r2, #4]
 8017eae:	c303      	stmia	r3!, {r0, r1}
 8017eb0:	4631      	mov	r1, r6
 8017eb2:	a80a      	add	r0, sp, #40	; 0x28
 8017eb4:	f7ff f964 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8017eb8:	4b38      	ldr	r3, [pc, #224]	; (8017f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017eba:	2100      	movs	r1, #0
 8017ebc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ec0:	4b37      	ldr	r3, [pc, #220]	; (8017fa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017ec2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017ec6:	aa0a      	add	r2, sp, #40	; 0x28
 8017ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ecc:	910c      	str	r1, [sp, #48]	; 0x30
 8017ece:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017ed2:	ab08      	add	r3, sp, #32
 8017ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8017edc:	4618      	mov	r0, r3
 8017ede:	a90c      	add	r1, sp, #48	; 0x30
 8017ee0:	f7ff f94e 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8017ee4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d13c      	bne.n	8017f64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8017eea:	2000      	movs	r0, #0
 8017eec:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8017ef0:	2600      	movs	r6, #0
 8017ef2:	696b      	ldr	r3, [r5, #20]
 8017ef4:	a908      	add	r1, sp, #32
 8017ef6:	682a      	ldr	r2, [r5, #0]
 8017ef8:	4628      	mov	r0, r5
 8017efa:	9305      	str	r3, [sp, #20]
 8017efc:	616e      	str	r6, [r5, #20]
 8017efe:	6892      	ldr	r2, [r2, #8]
 8017f00:	4790      	blx	r2
 8017f02:	9b05      	ldr	r3, [sp, #20]
 8017f04:	4652      	mov	r2, sl
 8017f06:	4649      	mov	r1, r9
 8017f08:	616b      	str	r3, [r5, #20]
 8017f0a:	4628      	mov	r0, r5
 8017f0c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8017f10:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017f14:	f7f0 fb9f 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 8017f18:	9a01      	ldr	r2, [sp, #4]
 8017f1a:	4b23      	ldr	r3, [pc, #140]	; (8017fa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	801a      	strh	r2, [r3, #0]
 8017f20:	9a02      	ldr	r2, [sp, #8]
 8017f22:	4b22      	ldr	r3, [pc, #136]	; (8017fac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017f24:	801a      	strh	r2, [r3, #0]
 8017f26:	9a03      	ldr	r2, [sp, #12]
 8017f28:	4b1c      	ldr	r3, [pc, #112]	; (8017f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017f2a:	801a      	strh	r2, [r3, #0]
 8017f2c:	4b1c      	ldr	r3, [pc, #112]	; (8017fa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017f2e:	9a04      	ldr	r2, [sp, #16]
 8017f30:	801a      	strh	r2, [r3, #0]
 8017f32:	6823      	ldr	r3, [r4, #0]
 8017f34:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f3a:	4798      	blx	r3
 8017f3c:	6823      	ldr	r3, [r4, #0]
 8017f3e:	4620      	mov	r0, r4
 8017f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f42:	4798      	blx	r3
 8017f44:	b00f      	add	sp, #60	; 0x3c
 8017f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4a:	883b      	ldrh	r3, [r7, #0]
 8017f4c:	f8ab 0000 	strh.w	r0, [fp]
 8017f50:	f8aa 3000 	strh.w	r3, [sl]
 8017f54:	e789      	b.n	8017e6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017f56:	462a      	mov	r2, r5
 8017f58:	ab0a      	add	r3, sp, #40	; 0x28
 8017f5a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017f5e:	6851      	ldr	r1, [r2, #4]
 8017f60:	c303      	stmia	r3!, {r0, r1}
 8017f62:	e7a9      	b.n	8017eb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017f64:	a807      	add	r0, sp, #28
 8017f66:	f006 f813 	bl	801df90 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017f6a:	4606      	mov	r6, r0
 8017f6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017f6e:	6803      	ldr	r3, [r0, #0]
 8017f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f72:	4798      	blx	r3
 8017f74:	4286      	cmp	r6, r0
 8017f76:	d1b8      	bne.n	8017eea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017f78:	f7ee fbb0 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8017f7c:	6803      	ldr	r3, [r0, #0]
 8017f7e:	4606      	mov	r6, r0
 8017f80:	a807      	add	r0, sp, #28
 8017f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f84:	9305      	str	r3, [sp, #20]
 8017f86:	f006 f803 	bl	801df90 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017f8a:	9b05      	ldr	r3, [sp, #20]
 8017f8c:	4601      	mov	r1, r0
 8017f8e:	4630      	mov	r0, r6
 8017f90:	4798      	blx	r3
 8017f92:	f080 0001 	eor.w	r0, r0, #1
 8017f96:	b2c0      	uxtb	r0, r0
 8017f98:	e7a8      	b.n	8017eec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8017f9a:	bf00      	nop
 8017f9c:	2402ae60 	.word	0x2402ae60
 8017fa0:	2402ae62 	.word	0x2402ae62
 8017fa4:	2402ae64 	.word	0x2402ae64
 8017fa8:	2402ae66 	.word	0x2402ae66
 8017fac:	2402ae68 	.word	0x2402ae68

08017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017fb0:	4b07      	ldr	r3, [pc, #28]	; (8017fd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017fb2:	b510      	push	{r4, lr}
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	b13b      	cbz	r3, 8017fca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017fba:	6803      	ldr	r3, [r0, #0]
 8017fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fbe:	4798      	blx	r3
 8017fc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017fc2:	4283      	cmp	r3, r0
 8017fc4:	d101      	bne.n	8017fca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017fc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017fc8:	bd10      	pop	{r4, pc}
 8017fca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017fcc:	e7fc      	b.n	8017fc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017fce:	bf00      	nop
 8017fd0:	2402ae6a 	.word	0x2402ae6a

08017fd4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd8:	461d      	mov	r5, r3
 8017fda:	b08a      	sub	sp, #40	; 0x28
 8017fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017fe0:	4690      	mov	r8, r2
 8017fe2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017fe6:	2400      	movs	r4, #0
 8017fe8:	4607      	mov	r7, r0
 8017fea:	fb06 8505 	mla	r5, r6, r5, r8
 8017fee:	9404      	str	r4, [sp, #16]
 8017ff0:	f88d 4020 	strb.w	r4, [sp, #32]
 8017ff4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017ff8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017ffc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018000:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018004:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018008:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801800c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018010:	f7ff ffce 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018014:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018018:	6878      	ldr	r0, [r7, #4]
 801801a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801801e:	a901      	add	r1, sp, #4
 8018020:	9505      	str	r5, [sp, #20]
 8018022:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018026:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801802a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801802e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018032:	6803      	ldr	r3, [r0, #0]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	4798      	blx	r3
 8018038:	b00a      	add	sp, #40	; 0x28
 801803a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801803e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801803e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018042:	b08b      	sub	sp, #44	; 0x2c
 8018044:	2400      	movs	r4, #0
 8018046:	4691      	mov	r9, r2
 8018048:	461d      	mov	r5, r3
 801804a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801804e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018052:	4688      	mov	r8, r1
 8018054:	4607      	mov	r7, r0
 8018056:	9404      	str	r4, [sp, #16]
 8018058:	fb06 9505 	mla	r5, r6, r5, r9
 801805c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018060:	f7ff ffa6 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018064:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018068:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018072:	a901      	add	r1, sp, #4
 8018074:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018078:	9505      	str	r5, [sp, #20]
 801807a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801807e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018082:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018086:	f8cd 8010 	str.w	r8, [sp, #16]
 801808a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801808e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018092:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018096:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	4798      	blx	r3
 80180a0:	b00b      	add	sp, #44	; 0x2c
 80180a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080180a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80180a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180ac:	b08a      	sub	sp, #40	; 0x28
 80180ae:	4698      	mov	r8, r3
 80180b0:	2300      	movs	r3, #0
 80180b2:	4606      	mov	r6, r0
 80180b4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80180b8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80180bc:	2d0b      	cmp	r5, #11
 80180be:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80180c2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80180c6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80180ca:	9304      	str	r3, [sp, #16]
 80180cc:	d137      	bne.n	801813e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80180ce:	2380      	movs	r3, #128	; 0x80
 80180d0:	f88d 0020 	strb.w	r0, [sp, #32]
 80180d4:	4630      	mov	r0, r6
 80180d6:	9203      	str	r2, [sp, #12]
 80180d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80180dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80180e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80180e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80180e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80180ec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80180f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80180f4:	f7ff ff5c 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80180f8:	2c0b      	cmp	r4, #11
 80180fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80180fe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018102:	bf94      	ite	ls
 8018104:	4b19      	ldrls	r3, [pc, #100]	; (801816c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8018106:	2100      	movhi	r1, #0
 8018108:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801810c:	bf98      	it	ls
 801810e:	5d19      	ldrbls	r1, [r3, r4]
 8018110:	fb02 8307 	mla	r3, r2, r7, r8
 8018114:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018118:	10c9      	asrs	r1, r1, #3
 801811a:	fb01 0003 	mla	r0, r1, r3, r0
 801811e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018122:	a901      	add	r1, sp, #4
 8018124:	9005      	str	r0, [sp, #20]
 8018126:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801812a:	2300      	movs	r3, #0
 801812c:	6870      	ldr	r0, [r6, #4]
 801812e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018132:	6803      	ldr	r3, [r0, #0]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	4798      	blx	r3
 8018138:	b00a      	add	sp, #40	; 0x28
 801813a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801813e:	2d02      	cmp	r5, #2
 8018140:	d109      	bne.n	8018156 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018142:	28ff      	cmp	r0, #255	; 0xff
 8018144:	d105      	bne.n	8018152 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8018146:	f1bc 0f00 	cmp.w	ip, #0
 801814a:	bf14      	ite	ne
 801814c:	2340      	movne	r3, #64	; 0x40
 801814e:	2320      	moveq	r3, #32
 8018150:	e7be      	b.n	80180d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018152:	2340      	movs	r3, #64	; 0x40
 8018154:	e7bc      	b.n	80180d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018156:	28ff      	cmp	r0, #255	; 0xff
 8018158:	d105      	bne.n	8018166 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801815a:	f1bc 0f00 	cmp.w	ip, #0
 801815e:	bf14      	ite	ne
 8018160:	2304      	movne	r3, #4
 8018162:	2301      	moveq	r3, #1
 8018164:	e7b4      	b.n	80180d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018166:	2304      	movs	r3, #4
 8018168:	e7b2      	b.n	80180d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801816a:	bf00      	nop
 801816c:	0802fc1c 	.word	0x0802fc1c

08018170 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	b08b      	sub	sp, #44	; 0x2c
 8018176:	461d      	mov	r5, r3
 8018178:	2400      	movs	r4, #0
 801817a:	4688      	mov	r8, r1
 801817c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018180:	4693      	mov	fp, r2
 8018182:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8018186:	4607      	mov	r7, r0
 8018188:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801818c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018190:	9404      	str	r4, [sp, #16]
 8018192:	bf14      	ite	ne
 8018194:	2308      	movne	r3, #8
 8018196:	2302      	moveq	r3, #2
 8018198:	fb05 b50a 	mla	r5, r5, sl, fp
 801819c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80181a0:	f7ff ff06 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181a4:	2e0b      	cmp	r6, #11
 80181a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80181aa:	a901      	add	r1, sp, #4
 80181ac:	bf98      	it	ls
 80181ae:	4b13      	ldrls	r3, [pc, #76]	; (80181fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80181b0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80181b4:	bf98      	it	ls
 80181b6:	5d9c      	ldrbls	r4, [r3, r6]
 80181b8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80181bc:	10e4      	asrs	r4, r4, #3
 80181be:	f8cd 8010 	str.w	r8, [sp, #16]
 80181c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80181c6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80181ca:	fb04 0405 	mla	r4, r4, r5, r0
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80181d4:	2300      	movs	r3, #0
 80181d6:	9405      	str	r4, [sp, #20]
 80181d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80181dc:	f88d 9020 	strb.w	r9, [sp, #32]
 80181e0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80181e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80181e8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80181ec:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80181f0:	6803      	ldr	r3, [r0, #0]
 80181f2:	685b      	ldr	r3, [r3, #4]
 80181f4:	4798      	blx	r3
 80181f6:	b00b      	add	sp, #44	; 0x2c
 80181f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181fc:	0802fc1c 	.word	0x0802fc1c

08018200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018204:	461e      	mov	r6, r3
 8018206:	4b0a      	ldr	r3, [pc, #40]	; (8018230 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8018208:	460f      	mov	r7, r1
 801820a:	4690      	mov	r8, r2
 801820c:	881d      	ldrh	r5, [r3, #0]
 801820e:	f7ee fa65 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8018212:	6803      	ldr	r3, [r0, #0]
 8018214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018216:	4798      	blx	r3
 8018218:	280b      	cmp	r0, #11
 801821a:	bf96      	itet	ls
 801821c:	4b05      	ldrls	r3, [pc, #20]	; (8018234 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801821e:	2400      	movhi	r4, #0
 8018220:	5c1c      	ldrbls	r4, [r3, r0]
 8018222:	fb08 7005 	mla	r0, r8, r5, r7
 8018226:	10e4      	asrs	r4, r4, #3
 8018228:	fb04 6000 	mla	r0, r4, r0, r6
 801822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018230:	2402ae66 	.word	0x2402ae66
 8018234:	0802fc1c 	.word	0x0802fc1c

08018238 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801823a:	b08b      	sub	sp, #44	; 0x2c
 801823c:	461f      	mov	r7, r3
 801823e:	4604      	mov	r4, r0
 8018240:	4616      	mov	r6, r2
 8018242:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018246:	2500      	movs	r5, #0
 8018248:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801824c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018250:	9504      	str	r5, [sp, #16]
 8018252:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018256:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801825a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801825e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018262:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018266:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801826a:	f88d 3020 	strb.w	r3, [sp, #32]
 801826e:	f7ff fe9f 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018272:	463a      	mov	r2, r7
 8018274:	4631      	mov	r1, r6
 8018276:	4603      	mov	r3, r0
 8018278:	4620      	mov	r0, r4
 801827a:	f7ff ffc1 	bl	8018200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801827e:	4b0e      	ldr	r3, [pc, #56]	; (80182b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018280:	9005      	str	r0, [sp, #20]
 8018282:	881b      	ldrh	r3, [r3, #0]
 8018284:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018288:	f7ee fa28 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 801828c:	6803      	ldr	r3, [r0, #0]
 801828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018290:	4798      	blx	r3
 8018292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018294:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018298:	a901      	add	r1, sp, #4
 801829a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801829e:	9304      	str	r3, [sp, #16]
 80182a0:	6860      	ldr	r0, [r4, #4]
 80182a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80182a6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80182aa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80182ae:	6803      	ldr	r3, [r0, #0]
 80182b0:	685b      	ldr	r3, [r3, #4]
 80182b2:	4798      	blx	r3
 80182b4:	b00b      	add	sp, #44	; 0x2c
 80182b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182b8:	2402ae66 	.word	0x2402ae66

080182bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80182bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182be:	b08d      	sub	sp, #52	; 0x34
 80182c0:	2501      	movs	r5, #1
 80182c2:	4604      	mov	r4, r0
 80182c4:	466b      	mov	r3, sp
 80182c6:	9503      	str	r5, [sp, #12]
 80182c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80182cc:	2300      	movs	r3, #0
 80182ce:	f8bd 6000 	ldrh.w	r6, [sp]
 80182d2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80182d6:	9306      	str	r3, [sp, #24]
 80182d8:	6803      	ldr	r3, [r0, #0]
 80182da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182dc:	4798      	blx	r3
 80182de:	463a      	mov	r2, r7
 80182e0:	4631      	mov	r1, r6
 80182e2:	4603      	mov	r3, r0
 80182e4:	4620      	mov	r0, r4
 80182e6:	f7ff ff8b 	bl	8018200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80182ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80182ec:	9004      	str	r0, [sp, #16]
 80182ee:	9307      	str	r3, [sp, #28]
 80182f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80182f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80182f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80182fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018300:	4b0e      	ldr	r3, [pc, #56]	; (801833c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8018302:	881b      	ldrh	r3, [r3, #0]
 8018304:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018308:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801830c:	f7ee f9e6 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8018310:	6803      	ldr	r3, [r0, #0]
 8018312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018314:	4798      	blx	r3
 8018316:	23ff      	movs	r3, #255	; 0xff
 8018318:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801831c:	a903      	add	r1, sp, #12
 801831e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8018322:	6860      	ldr	r0, [r4, #4]
 8018324:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8018328:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801832c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8018330:	6803      	ldr	r3, [r0, #0]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	4798      	blx	r3
 8018336:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018338:	b00d      	add	sp, #52	; 0x34
 801833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801833c:	2402ae66 	.word	0x2402ae66

08018340 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018344:	b08c      	sub	sp, #48	; 0x30
 8018346:	461e      	mov	r6, r3
 8018348:	2300      	movs	r3, #0
 801834a:	4604      	mov	r4, r0
 801834c:	466d      	mov	r5, sp
 801834e:	9306      	str	r3, [sp, #24]
 8018350:	6803      	ldr	r3, [r0, #0]
 8018352:	e885 0006 	stmia.w	r5, {r1, r2}
 8018356:	2501      	movs	r5, #1
 8018358:	f8bd 7000 	ldrh.w	r7, [sp]
 801835c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018360:	9503      	str	r5, [sp, #12]
 8018362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018364:	4798      	blx	r3
 8018366:	4642      	mov	r2, r8
 8018368:	4639      	mov	r1, r7
 801836a:	4603      	mov	r3, r0
 801836c:	4620      	mov	r0, r4
 801836e:	f7ff ff47 	bl	8018200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018372:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018376:	9004      	str	r0, [sp, #16]
 8018378:	f8ad 3020 	strh.w	r3, [sp, #32]
 801837c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018380:	9607      	str	r6, [sp, #28]
 8018382:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018386:	4b10      	ldr	r3, [pc, #64]	; (80183c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801838e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018390:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018394:	f7ee f9a2 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 8018398:	6803      	ldr	r3, [r0, #0]
 801839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801839c:	4798      	blx	r3
 801839e:	23ff      	movs	r3, #255	; 0xff
 80183a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80183a4:	a903      	add	r1, sp, #12
 80183a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80183aa:	6860      	ldr	r0, [r4, #4]
 80183ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80183b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80183b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80183b8:	6803      	ldr	r3, [r0, #0]
 80183ba:	685b      	ldr	r3, [r3, #4]
 80183bc:	4798      	blx	r3
 80183be:	4630      	mov	r0, r6
 80183c0:	b00c      	add	sp, #48	; 0x30
 80183c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183c6:	bf00      	nop
 80183c8:	2402ae66 	.word	0x2402ae66

080183cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80183cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ce:	b085      	sub	sp, #20
 80183d0:	4605      	mov	r5, r0
 80183d2:	ac02      	add	r4, sp, #8
 80183d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80183d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80183dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80183e0:	f7ff fde6 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183e4:	4631      	mov	r1, r6
 80183e6:	4603      	mov	r3, r0
 80183e8:	463a      	mov	r2, r7
 80183ea:	4628      	mov	r0, r5
 80183ec:	f7ff ff08 	bl	8018200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80183f0:	4a05      	ldr	r2, [pc, #20]	; (8018408 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80183f2:	682b      	ldr	r3, [r5, #0]
 80183f4:	8812      	ldrh	r2, [r2, #0]
 80183f6:	9200      	str	r2, [sp, #0]
 80183f8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80183fa:	4603      	mov	r3, r0
 80183fc:	4628      	mov	r0, r5
 80183fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018402:	47b0      	blx	r6
 8018404:	b005      	add	sp, #20
 8018406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018408:	2402ae66 	.word	0x2402ae66

0801840c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801840c:	b570      	push	{r4, r5, r6, lr}
 801840e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8018412:	4604      	mov	r4, r0
 8018414:	b19b      	cbz	r3, 801843e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018416:	2002      	movs	r0, #2
 8018418:	f7ea ffe2 	bl	80033e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801841c:	2300      	movs	r3, #0
 801841e:	4620      	mov	r0, r4
 8018420:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8018424:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8018428:	6823      	ldr	r3, [r4, #0]
 801842a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801842e:	f7ff fdbf 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018432:	4601      	mov	r1, r0
 8018434:	4620      	mov	r0, r4
 8018436:	462b      	mov	r3, r5
 8018438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801843c:	4718      	bx	r3
 801843e:	bd70      	pop	{r4, r5, r6, pc}

08018440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018440:	b538      	push	{r3, r4, r5, lr}
 8018442:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8018446:	4604      	mov	r4, r0
 8018448:	460d      	mov	r5, r1
 801844a:	428b      	cmp	r3, r1
 801844c:	d006      	beq.n	801845c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801844e:	6803      	ldr	r3, [r0, #0]
 8018450:	b929      	cbnz	r1, 801845e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018452:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8018456:	4798      	blx	r3
 8018458:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 801845c:	bd38      	pop	{r3, r4, r5, pc}
 801845e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018462:	e7f8      	b.n	8018456 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018464 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018464:	4b0d      	ldr	r3, [pc, #52]	; (801849c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018466:	b510      	push	{r4, lr}
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	4604      	mov	r4, r0
 801846c:	b95b      	cbnz	r3, 8018486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801846e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018472:	2b02      	cmp	r3, #2
 8018474:	d007      	beq.n	8018486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018476:	6840      	ldr	r0, [r0, #4]
 8018478:	f000 f90e 	bl	8018698 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801847c:	b118      	cbz	r0, 8018486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801847e:	6862      	ldr	r2, [r4, #4]
 8018480:	7a53      	ldrb	r3, [r2, #9]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d0fc      	beq.n	8018480 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018486:	f7ec fb19 	bl	8004abc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801848a:	4620      	mov	r0, r4
 801848c:	2100      	movs	r1, #0
 801848e:	f7ff ffd7 	bl	8018440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018492:	4620      	mov	r0, r4
 8018494:	f7ff fd8c 	bl	8017fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018498:	bd10      	pop	{r4, pc}
 801849a:	bf00      	nop
 801849c:	2402ae6a 	.word	0x2402ae6a

080184a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80184a0:	4770      	bx	lr

080184a2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80184a2:	2000      	movs	r0, #0
 80184a4:	4770      	bx	lr

080184a6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80184a6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80184aa:	1a13      	subs	r3, r2, r0
 80184ac:	4258      	negs	r0, r3
 80184ae:	4158      	adcs	r0, r3
 80184b0:	4770      	bx	lr

080184b2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80184b2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80184b6:	1a9b      	subs	r3, r3, r2
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	bfdc      	itt	le
 80184bc:	6882      	ldrle	r2, [r0, #8]
 80184be:	189b      	addle	r3, r3, r2
 80184c0:	2b01      	cmp	r3, #1
 80184c2:	bfcc      	ite	gt
 80184c4:	2000      	movgt	r0, #0
 80184c6:	2001      	movle	r0, #1
 80184c8:	4770      	bx	lr

080184ca <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80184ca:	6902      	ldr	r2, [r0, #16]
 80184cc:	6843      	ldr	r3, [r0, #4]
 80184ce:	2024      	movs	r0, #36	; 0x24
 80184d0:	fb00 3002 	mla	r0, r0, r2, r3
 80184d4:	4770      	bx	lr

080184d6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80184d6:	6803      	ldr	r3, [r0, #0]
 80184d8:	691b      	ldr	r3, [r3, #16]
 80184da:	4718      	bx	r3

080184dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80184dc:	2301      	movs	r3, #1
 80184de:	b570      	push	{r4, r5, r6, lr}
 80184e0:	7203      	strb	r3, [r0, #8]
 80184e2:	4604      	mov	r4, r0
 80184e4:	6840      	ldr	r0, [r0, #4]
 80184e6:	6803      	ldr	r3, [r0, #0]
 80184e8:	699b      	ldr	r3, [r3, #24]
 80184ea:	4798      	blx	r3
 80184ec:	6803      	ldr	r3, [r0, #0]
 80184ee:	4605      	mov	r5, r0
 80184f0:	2b40      	cmp	r3, #64	; 0x40
 80184f2:	d00c      	beq.n	801850e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80184f4:	d810      	bhi.n	8018518 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80184f6:	2b04      	cmp	r3, #4
 80184f8:	d01d      	beq.n	8018536 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80184fa:	d804      	bhi.n	8018506 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	d006      	beq.n	801850e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018500:	2b02      	cmp	r3, #2
 8018502:	d02c      	beq.n	801855e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018504:	bd70      	pop	{r4, r5, r6, pc}
 8018506:	2b08      	cmp	r3, #8
 8018508:	d01d      	beq.n	8018546 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801850a:	2b20      	cmp	r3, #32
 801850c:	d1fa      	bne.n	8018504 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801850e:	6823      	ldr	r3, [r4, #0]
 8018510:	4620      	mov	r0, r4
 8018512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018514:	4798      	blx	r3
 8018516:	e013      	b.n	8018540 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801851c:	d0f7      	beq.n	801850e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801851e:	d804      	bhi.n	801852a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8018520:	2b80      	cmp	r3, #128	; 0x80
 8018522:	d0f4      	beq.n	801850e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018528:	e7f0      	b.n	801850c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801852a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801852e:	d0ee      	beq.n	801850e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018534:	e7e5      	b.n	8018502 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018536:	6823      	ldr	r3, [r4, #0]
 8018538:	7f01      	ldrb	r1, [r0, #28]
 801853a:	4620      	mov	r0, r4
 801853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801853e:	4798      	blx	r3
 8018540:	6823      	ldr	r3, [r4, #0]
 8018542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018544:	e006      	b.n	8018554 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	7f01      	ldrb	r1, [r0, #28]
 801854a:	4620      	mov	r0, r4
 801854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801854e:	4798      	blx	r3
 8018550:	6823      	ldr	r3, [r4, #0]
 8018552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018554:	4629      	mov	r1, r5
 8018556:	4620      	mov	r0, r4
 8018558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801855c:	4718      	bx	r3
 801855e:	6823      	ldr	r3, [r4, #0]
 8018560:	4620      	mov	r0, r4
 8018562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018564:	4798      	blx	r3
 8018566:	e7f3      	b.n	8018550 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08018568 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018568:	4770      	bx	lr

0801856a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801856a:	4770      	bx	lr

0801856c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801856c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8018570:	b510      	push	{r4, lr}
 8018572:	1ad2      	subs	r2, r2, r3
 8018574:	2a00      	cmp	r2, #0
 8018576:	bfdc      	itt	le
 8018578:	6884      	ldrle	r4, [r0, #8]
 801857a:	1912      	addle	r2, r2, r4
 801857c:	2a01      	cmp	r2, #1
 801857e:	dd16      	ble.n	80185ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8018580:	6842      	ldr	r2, [r0, #4]
 8018582:	2424      	movs	r4, #36	; 0x24
 8018584:	fb04 2303 	mla	r3, r4, r3, r2
 8018588:	f101 0220 	add.w	r2, r1, #32
 801858c:	f851 4b04 	ldr.w	r4, [r1], #4
 8018590:	4291      	cmp	r1, r2
 8018592:	f843 4b04 	str.w	r4, [r3], #4
 8018596:	d1f9      	bne.n	801858c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8018598:	780a      	ldrb	r2, [r1, #0]
 801859a:	701a      	strb	r2, [r3, #0]
 801859c:	68c3      	ldr	r3, [r0, #12]
 801859e:	6882      	ldr	r2, [r0, #8]
 80185a0:	f3bf 8f5b 	dmb	ish
 80185a4:	3301      	adds	r3, #1
 80185a6:	429a      	cmp	r2, r3
 80185a8:	bfd8      	it	le
 80185aa:	1a9b      	suble	r3, r3, r2
 80185ac:	60c3      	str	r3, [r0, #12]
 80185ae:	bd10      	pop	{r4, pc}

080185b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80185b0:	6903      	ldr	r3, [r0, #16]
 80185b2:	6882      	ldr	r2, [r0, #8]
 80185b4:	f3bf 8f5b 	dmb	ish
 80185b8:	3301      	adds	r3, #1
 80185ba:	429a      	cmp	r2, r3
 80185bc:	bfd8      	it	le
 80185be:	1a9b      	suble	r3, r3, r2
 80185c0:	6103      	str	r3, [r0, #16]
 80185c2:	4770      	bx	lr

080185c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80185c4:	b570      	push	{r4, r5, r6, lr}
 80185c6:	4604      	mov	r4, r0
 80185c8:	460e      	mov	r6, r1
 80185ca:	6860      	ldr	r0, [r4, #4]
 80185cc:	6803      	ldr	r3, [r0, #0]
 80185ce:	685b      	ldr	r3, [r3, #4]
 80185d0:	4798      	blx	r3
 80185d2:	2800      	cmp	r0, #0
 80185d4:	d1f9      	bne.n	80185ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80185d6:	4d0d      	ldr	r5, [pc, #52]	; (801860c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80185d8:	6828      	ldr	r0, [r5, #0]
 80185da:	6803      	ldr	r3, [r0, #0]
 80185dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80185de:	4798      	blx	r3
 80185e0:	f7ec fa86 	bl	8004af0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80185e4:	6828      	ldr	r0, [r5, #0]
 80185e6:	2101      	movs	r1, #1
 80185e8:	f7ff ff2a 	bl	8018440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80185ec:	6860      	ldr	r0, [r4, #4]
 80185ee:	4631      	mov	r1, r6
 80185f0:	6803      	ldr	r3, [r0, #0]
 80185f2:	689b      	ldr	r3, [r3, #8]
 80185f4:	4798      	blx	r3
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	4620      	mov	r0, r4
 80185fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185fc:	4798      	blx	r3
 80185fe:	6828      	ldr	r0, [r5, #0]
 8018600:	6803      	ldr	r3, [r0, #0]
 8018602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018608:	4718      	bx	r3
 801860a:	bf00      	nop
 801860c:	2402ae6c 	.word	0x2402ae6c

08018610 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018610:	b508      	push	{r3, lr}
 8018612:	f7ec fa53 	bl	8004abc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801861a:	f7ec ba5d 	b.w	8004ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801861e <_ZN8touchgfx13DMA_Interface5startEv>:
 801861e:	b510      	push	{r4, lr}
 8018620:	4604      	mov	r4, r0
 8018622:	6840      	ldr	r0, [r0, #4]
 8018624:	6803      	ldr	r3, [r0, #0]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	4798      	blx	r3
 801862a:	b948      	cbnz	r0, 8018640 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801862c:	7a63      	ldrb	r3, [r4, #9]
 801862e:	b13b      	cbz	r3, 8018640 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018630:	7a23      	ldrb	r3, [r4, #8]
 8018632:	b92b      	cbnz	r3, 8018640 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018634:	6823      	ldr	r3, [r4, #0]
 8018636:	4620      	mov	r0, r4
 8018638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801863a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801863e:	4718      	bx	r3
 8018640:	bd10      	pop	{r4, pc}

08018642 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018642:	b570      	push	{r4, r5, r6, lr}
 8018644:	4604      	mov	r4, r0
 8018646:	6840      	ldr	r0, [r0, #4]
 8018648:	6803      	ldr	r3, [r0, #0]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	4798      	blx	r3
 801864e:	4605      	mov	r5, r0
 8018650:	b930      	cbnz	r0, 8018660 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018652:	7a23      	ldrb	r3, [r4, #8]
 8018654:	b123      	cbz	r3, 8018660 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018656:	6860      	ldr	r0, [r4, #4]
 8018658:	6803      	ldr	r3, [r0, #0]
 801865a:	695b      	ldr	r3, [r3, #20]
 801865c:	4798      	blx	r3
 801865e:	7225      	strb	r5, [r4, #8]
 8018660:	6860      	ldr	r0, [r4, #4]
 8018662:	6803      	ldr	r3, [r0, #0]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	4798      	blx	r3
 8018668:	b928      	cbnz	r0, 8018676 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801866a:	6823      	ldr	r3, [r4, #0]
 801866c:	4620      	mov	r0, r4
 801866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018674:	4718      	bx	r3
 8018676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801867a:	f7ec ba45 	b.w	8004b08 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08018680 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018680:	b510      	push	{r4, lr}
 8018682:	6082      	str	r2, [r0, #8]
 8018684:	2200      	movs	r2, #0
 8018686:	4c03      	ldr	r4, [pc, #12]	; (8018694 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018688:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801868c:	e9c0 4100 	strd	r4, r1, [r0]
 8018690:	bd10      	pop	{r4, pc}
 8018692:	bf00      	nop
 8018694:	0802fd58 	.word	0x0802fd58

08018698 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018698:	6840      	ldr	r0, [r0, #4]
 801869a:	6803      	ldr	r3, [r0, #0]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	4718      	bx	r3

080186a0 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80186a0:	2000      	movs	r0, #0
 80186a2:	4770      	bx	lr

080186a4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80186a4:	4b07      	ldr	r3, [pc, #28]	; (80186c4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80186a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80186a8:	881b      	ldrh	r3, [r3, #0]
 80186aa:	4293      	cmp	r3, r2
 80186ac:	bf81      	itttt	hi
 80186ae:	4b06      	ldrhi	r3, [pc, #24]	; (80186c8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80186b0:	681b      	ldrhi	r3, [r3, #0]
 80186b2:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80186b6:	7858      	ldrbhi	r0, [r3, #1]
 80186b8:	bf8c      	ite	hi
 80186ba:	f000 0003 	andhi.w	r0, r0, #3
 80186be:	2000      	movls	r0, #0
 80186c0:	4770      	bx	lr
 80186c2:	bf00      	nop
 80186c4:	2402aec0 	.word	0x2402aec0
 80186c8:	2402aebc 	.word	0x2402aebc

080186cc <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80186cc:	4b11      	ldr	r3, [pc, #68]	; (8018714 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80186ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80186d4:	4604      	mov	r4, r0
 80186d6:	881b      	ldrh	r3, [r3, #0]
 80186d8:	428b      	cmp	r3, r1
 80186da:	d918      	bls.n	801870e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80186dc:	6803      	ldr	r3, [r0, #0]
 80186de:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80186e0:	4b0d      	ldr	r3, [pc, #52]	; (8018718 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80186e2:	6818      	ldr	r0, [r3, #0]
 80186e4:	f7f1 f942 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 80186e8:	6823      	ldr	r3, [r4, #0]
 80186ea:	4606      	mov	r6, r0
 80186ec:	4620      	mov	r0, r4
 80186ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80186f0:	4798      	blx	r3
 80186f2:	6823      	ldr	r3, [r4, #0]
 80186f4:	4607      	mov	r7, r0
 80186f6:	4620      	mov	r0, r4
 80186f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186fc:	4798      	blx	r3
 80186fe:	463a      	mov	r2, r7
 8018700:	4603      	mov	r3, r0
 8018702:	4631      	mov	r1, r6
 8018704:	4620      	mov	r0, r4
 8018706:	46ac      	mov	ip, r5
 8018708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801870c:	4760      	bx	ip
 801870e:	2000      	movs	r0, #0
 8018710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018714:	2402aec0 	.word	0x2402aec0
 8018718:	2402aec8 	.word	0x2402aec8

0801871c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801871c:	4b18      	ldr	r3, [pc, #96]	; (8018780 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801871e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018722:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018724:	4604      	mov	r4, r0
 8018726:	881b      	ldrh	r3, [r3, #0]
 8018728:	428b      	cmp	r3, r1
 801872a:	d926      	bls.n	801877a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801872c:	4b15      	ldr	r3, [pc, #84]	; (8018784 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018734:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018738:	4b13      	ldr	r3, [pc, #76]	; (8018788 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801873a:	7855      	ldrb	r5, [r2, #1]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8018742:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018746:	6833      	ldr	r3, [r6, #0]
 8018748:	69df      	ldr	r7, [r3, #28]
 801874a:	4b10      	ldr	r3, [pc, #64]	; (801878c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801874c:	6818      	ldr	r0, [r3, #0]
 801874e:	f7f1 f90d 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	4680      	mov	r8, r0
 8018756:	4620      	mov	r0, r4
 8018758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801875a:	4798      	blx	r3
 801875c:	6823      	ldr	r3, [r4, #0]
 801875e:	4681      	mov	r9, r0
 8018760:	4620      	mov	r0, r4
 8018762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018766:	4798      	blx	r3
 8018768:	464b      	mov	r3, r9
 801876a:	9000      	str	r0, [sp, #0]
 801876c:	4642      	mov	r2, r8
 801876e:	4629      	mov	r1, r5
 8018770:	4630      	mov	r0, r6
 8018772:	47b8      	blx	r7
 8018774:	b003      	add	sp, #12
 8018776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801877a:	2000      	movs	r0, #0
 801877c:	e7fa      	b.n	8018774 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801877e:	bf00      	nop
 8018780:	2402aec0 	.word	0x2402aec0
 8018784:	2402aebc 	.word	0x2402aebc
 8018788:	2402aec4 	.word	0x2402aec4
 801878c:	2402aec8 	.word	0x2402aec8

08018790 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018790:	b40e      	push	{r1, r2, r3}
 8018792:	4b30      	ldr	r3, [pc, #192]	; (8018854 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8018794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018798:	881a      	ldrh	r2, [r3, #0]
 801879a:	b09d      	sub	sp, #116	; 0x74
 801879c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801879e:	4604      	mov	r4, r0
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d954      	bls.n	801884e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80187a4:	aa26      	add	r2, sp, #152	; 0x98
 80187a6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8018858 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80187aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801885c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80187ae:	9202      	str	r2, [sp, #8]
 80187b0:	f8d9 2000 	ldr.w	r2, [r9]
 80187b4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80187b8:	f8d8 3000 	ldr.w	r3, [r8]
 80187bc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80187c0:	682b      	ldr	r3, [r5, #0]
 80187c2:	4628      	mov	r0, r5
 80187c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187c6:	4798      	blx	r3
 80187c8:	4606      	mov	r6, r0
 80187ca:	b207      	sxth	r7, r0
 80187cc:	a803      	add	r0, sp, #12
 80187ce:	f003 fee2 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 80187d2:	682b      	ldr	r3, [r5, #0]
 80187d4:	4628      	mov	r0, r5
 80187d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80187d8:	4798      	blx	r3
 80187da:	682b      	ldr	r3, [r5, #0]
 80187dc:	4682      	mov	sl, r0
 80187de:	4628      	mov	r0, r5
 80187e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187e2:	4798      	blx	r3
 80187e4:	4653      	mov	r3, sl
 80187e6:	9000      	str	r0, [sp, #0]
 80187e8:	a803      	add	r0, sp, #12
 80187ea:	9a02      	ldr	r2, [sp, #8]
 80187ec:	9925      	ldr	r1, [sp, #148]	; 0x94
 80187ee:	f003 ff2d 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80187f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80187f4:	f8d9 3000 	ldr.w	r3, [r9]
 80187f8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80187fc:	8925      	ldrh	r5, [r4, #8]
 80187fe:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8018802:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018806:	eba5 050c 	sub.w	r5, r5, ip
 801880a:	784a      	ldrb	r2, [r1, #1]
 801880c:	f8d8 3000 	ldr.w	r3, [r8]
 8018810:	b22d      	sxth	r5, r5
 8018812:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018816:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801881a:	9500      	str	r5, [sp, #0]
 801881c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018820:	a803      	add	r0, sp, #12
 8018822:	f001 fc21 	bl	801a068 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018826:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801882a:	b203      	sxth	r3, r0
 801882c:	18b9      	adds	r1, r7, r2
 801882e:	2900      	cmp	r1, #0
 8018830:	dd0b      	ble.n	801884a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8018832:	3b01      	subs	r3, #1
 8018834:	fb13 f302 	smulbb	r3, r3, r2
 8018838:	fb16 3300 	smlabb	r3, r6, r0, r3
 801883c:	b21f      	sxth	r7, r3
 801883e:	4638      	mov	r0, r7
 8018840:	b01d      	add	sp, #116	; 0x74
 8018842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018846:	b003      	add	sp, #12
 8018848:	4770      	bx	lr
 801884a:	2b00      	cmp	r3, #0
 801884c:	dcf7      	bgt.n	801883e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801884e:	2700      	movs	r7, #0
 8018850:	e7f5      	b.n	801883e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018852:	bf00      	nop
 8018854:	2402aec0 	.word	0x2402aec0
 8018858:	2402aebc 	.word	0x2402aebc
 801885c:	2402aec4 	.word	0x2402aec4

08018860 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8018860:	4bbd      	ldr	r3, [pc, #756]	; (8018b58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8018862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018866:	460c      	mov	r4, r1
 8018868:	881b      	ldrh	r3, [r3, #0]
 801886a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801886c:	b0a9      	sub	sp, #164	; 0xa4
 801886e:	4680      	mov	r8, r0
 8018870:	428b      	cmp	r3, r1
 8018872:	d809      	bhi.n	8018888 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8018874:	2300      	movs	r3, #0
 8018876:	f04f 32ff 	mov.w	r2, #4294967295
 801887a:	6083      	str	r3, [r0, #8]
 801887c:	e9c0 3200 	strd	r3, r2, [r0]
 8018880:	4640      	mov	r0, r8
 8018882:	b029      	add	sp, #164	; 0xa4
 8018884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018888:	4eb4      	ldr	r6, [pc, #720]	; (8018b5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801888a:	6833      	ldr	r3, [r6, #0]
 801888c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018890:	4bb3      	ldr	r3, [pc, #716]	; (8018b60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018898:	4bb2      	ldr	r3, [pc, #712]	; (8018b64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801889a:	6818      	ldr	r0, [r3, #0]
 801889c:	f7f1 f866 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 80188a0:	682b      	ldr	r3, [r5, #0]
 80188a2:	4681      	mov	r9, r0
 80188a4:	4628      	mov	r0, r5
 80188a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188a8:	4798      	blx	r3
 80188aa:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 80188ac:	b203      	sxth	r3, r0
 80188ae:	4682      	mov	sl, r0
 80188b0:	4407      	add	r7, r0
 80188b2:	a80f      	add	r0, sp, #60	; 0x3c
 80188b4:	9304      	str	r3, [sp, #16]
 80188b6:	b2bb      	uxth	r3, r7
 80188b8:	9303      	str	r3, [sp, #12]
 80188ba:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f040 80a5 	bne.w	8018a0e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80188c4:	f003 fe67 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 80188c8:	682b      	ldr	r3, [r5, #0]
 80188ca:	4628      	mov	r0, r5
 80188cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80188ce:	4798      	blx	r3
 80188d0:	682b      	ldr	r3, [r5, #0]
 80188d2:	4606      	mov	r6, r0
 80188d4:	4628      	mov	r0, r5
 80188d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188d8:	4798      	blx	r3
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	4607      	mov	r7, r0
 80188de:	4620      	mov	r0, r4
 80188e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80188e2:	4798      	blx	r3
 80188e4:	6823      	ldr	r3, [r4, #0]
 80188e6:	4683      	mov	fp, r0
 80188e8:	4620      	mov	r0, r4
 80188ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80188ee:	4798      	blx	r3
 80188f0:	463b      	mov	r3, r7
 80188f2:	4649      	mov	r1, r9
 80188f4:	4632      	mov	r2, r6
 80188f6:	2600      	movs	r6, #0
 80188f8:	e9cd b000 	strd	fp, r0, [sp]
 80188fc:	a80f      	add	r0, sp, #60	; 0x3c
 80188fe:	4637      	mov	r7, r6
 8018900:	f003 feb9 	bl	801c676 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018904:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018908:	f8df b250 	ldr.w	fp, [pc, #592]	; 8018b5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801890c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018910:	bf0c      	ite	eq
 8018912:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8018916:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801891a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801891c:	4629      	mov	r1, r5
 801891e:	f8db 3000 	ldr.w	r3, [fp]
 8018922:	a80f      	add	r0, sp, #60	; 0x3c
 8018924:	3701      	adds	r7, #1
 8018926:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801892a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801892e:	b2bf      	uxth	r7, r7
 8018930:	785b      	ldrb	r3, [r3, #1]
 8018932:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018936:	f001 f8b2 	bl	8019a9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801893a:	9b03      	ldr	r3, [sp, #12]
 801893c:	4286      	cmp	r6, r0
 801893e:	eba9 0903 	sub.w	r9, r9, r3
 8018942:	bfb8      	it	lt
 8018944:	4606      	movlt	r6, r0
 8018946:	a80f      	add	r0, sp, #60	; 0x3c
 8018948:	fa0f f989 	sxth.w	r9, r9
 801894c:	b236      	sxth	r6, r6
 801894e:	f003 fe49 	bl	801c5e4 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8018952:	b918      	cbnz	r0, 801895c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018954:	7a2b      	ldrb	r3, [r5, #8]
 8018956:	444b      	add	r3, r9
 8018958:	2b00      	cmp	r3, #0
 801895a:	dcde      	bgt.n	801891a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 801895c:	9b03      	ldr	r3, [sp, #12]
 801895e:	4620      	mov	r0, r4
 8018960:	9a04      	ldr	r2, [sp, #16]
 8018962:	fb13 f707 	smulbb	r7, r3, r7
 8018966:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018968:	f895 9009 	ldrb.w	r9, [r5, #9]
 801896c:	1aff      	subs	r7, r7, r3
 801896e:	b2bf      	uxth	r7, r7
 8018970:	b23b      	sxth	r3, r7
 8018972:	429a      	cmp	r2, r3
 8018974:	bfa8      	it	ge
 8018976:	4657      	movge	r7, sl
 8018978:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801897c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018980:	6823      	ldr	r3, [r4, #0]
 8018982:	444f      	add	r7, r9
 8018984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018986:	bf08      	it	eq
 8018988:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801898c:	fa1f f987 	uxth.w	r9, r7
 8018990:	bf18      	it	ne
 8018992:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8018996:	4798      	blx	r3
 8018998:	2801      	cmp	r0, #1
 801899a:	fa0f f789 	sxth.w	r7, r9
 801899e:	b2b3      	uxth	r3, r6
 80189a0:	f000 80e2 	beq.w	8018b68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80189a4:	2802      	cmp	r0, #2
 80189a6:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80189aa:	f000 80e3 	beq.w	8018b74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80189ae:	7aea      	ldrb	r2, [r5, #11]
 80189b0:	b236      	sxth	r6, r6
 80189b2:	7b2d      	ldrb	r5, [r5, #12]
 80189b4:	1ab6      	subs	r6, r6, r2
 80189b6:	442a      	add	r2, r5
 80189b8:	fa1f fa86 	uxth.w	sl, r6
 80189bc:	4413      	add	r3, r2
 80189be:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80189c2:	fa0f fb8a 	sxth.w	fp, sl
 80189c6:	b29b      	uxth	r3, r3
 80189c8:	2a02      	cmp	r2, #2
 80189ca:	b21e      	sxth	r6, r3
 80189cc:	f000 80d6 	beq.w	8018b7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80189d0:	2a03      	cmp	r2, #3
 80189d2:	f000 80de 	beq.w	8018b92 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80189d6:	2a01      	cmp	r2, #1
 80189d8:	f040 80e6 	bne.w	8018ba8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80189dc:	8925      	ldrh	r5, [r4, #8]
 80189de:	4633      	mov	r3, r6
 80189e0:	463e      	mov	r6, r7
 80189e2:	eba5 0909 	sub.w	r9, r5, r9
 80189e6:	461f      	mov	r7, r3
 80189e8:	465d      	mov	r5, fp
 80189ea:	fa0f fb89 	sxth.w	fp, r9
 80189ee:	4b5d      	ldr	r3, [pc, #372]	; (8018b64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80189f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80189f2:	6818      	ldr	r0, [r3, #0]
 80189f4:	f7f0 ffba 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 80189f8:	f8a8 b000 	strh.w	fp, [r8]
 80189fc:	f8a8 5002 	strh.w	r5, [r8, #2]
 8018a00:	f8a8 6004 	strh.w	r6, [r8, #4]
 8018a04:	f8a8 7006 	strh.w	r7, [r8, #6]
 8018a08:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a0c:	e738      	b.n	8018880 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8018a0e:	f003 fdc2 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 8018a12:	682b      	ldr	r3, [r5, #0]
 8018a14:	4628      	mov	r0, r5
 8018a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a18:	4798      	blx	r3
 8018a1a:	682b      	ldr	r3, [r5, #0]
 8018a1c:	4607      	mov	r7, r0
 8018a1e:	4628      	mov	r0, r5
 8018a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a22:	4798      	blx	r3
 8018a24:	6823      	ldr	r3, [r4, #0]
 8018a26:	4683      	mov	fp, r0
 8018a28:	4620      	mov	r0, r4
 8018a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018a2c:	4798      	blx	r3
 8018a2e:	6822      	ldr	r2, [r4, #0]
 8018a30:	9005      	str	r0, [sp, #20]
 8018a32:	4620      	mov	r0, r4
 8018a34:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8018a38:	4790      	blx	r2
 8018a3a:	9b05      	ldr	r3, [sp, #20]
 8018a3c:	463a      	mov	r2, r7
 8018a3e:	4649      	mov	r1, r9
 8018a40:	9001      	str	r0, [sp, #4]
 8018a42:	a80f      	add	r0, sp, #60	; 0x3c
 8018a44:	9300      	str	r3, [sp, #0]
 8018a46:	465b      	mov	r3, fp
 8018a48:	f003 fe15 	bl	801c676 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018a4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018a50:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8018a54:	af0f      	add	r7, sp, #60	; 0x3c
 8018a56:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018a5a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018a5e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018a60:	bf0a      	itet	eq
 8018a62:	464a      	moveq	r2, r9
 8018a64:	461a      	movne	r2, r3
 8018a66:	4699      	moveq	r9, r3
 8018a68:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8018a6c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8018a70:	1ad2      	subs	r2, r2, r3
 8018a72:	6833      	ldr	r3, [r6, #0]
 8018a74:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8018a78:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018a7c:	7859      	ldrb	r1, [r3, #1]
 8018a7e:	2300      	movs	r3, #0
 8018a80:	9707      	str	r7, [sp, #28]
 8018a82:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8018a86:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a8a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018a8e:	f88d 1020 	strb.w	r1, [sp, #32]
 8018a92:	9509      	str	r5, [sp, #36]	; 0x24
 8018a94:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018a98:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8018a9c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8018aa0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018aa4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8018aa8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018aac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8018ab0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018ab4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018ab8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8018abc:	b350      	cbz	r0, 8018b14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018abe:	682b      	ldr	r3, [r5, #0]
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	695b      	ldr	r3, [r3, #20]
 8018ac4:	4798      	blx	r3
 8018ac6:	4607      	mov	r7, r0
 8018ac8:	b320      	cbz	r0, 8018b14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018acc:	4639      	mov	r1, r7
 8018ace:	6803      	ldr	r3, [r0, #0]
 8018ad0:	68db      	ldr	r3, [r3, #12]
 8018ad2:	4798      	blx	r3
 8018ad4:	4606      	mov	r6, r0
 8018ad6:	b1e8      	cbz	r0, 8018b14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018ad8:	7b43      	ldrb	r3, [r0, #13]
 8018ada:	7a82      	ldrb	r2, [r0, #10]
 8018adc:	005b      	lsls	r3, r3, #1
 8018ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ae2:	4313      	orrs	r3, r2
 8018ae4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018ae8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8018aec:	2b06      	cmp	r3, #6
 8018aee:	d111      	bne.n	8018b14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018af2:	4632      	mov	r2, r6
 8018af4:	4639      	mov	r1, r7
 8018af6:	6803      	ldr	r3, [r0, #0]
 8018af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018afa:	4798      	blx	r3
 8018afc:	7b73      	ldrb	r3, [r6, #13]
 8018afe:	005b      	lsls	r3, r3, #1
 8018b00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018b04:	7ab3      	ldrb	r3, [r6, #10]
 8018b06:	4313      	orrs	r3, r2
 8018b08:	4418      	add	r0, r3
 8018b0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018b0e:	4418      	add	r0, r3
 8018b10:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8018b14:	2600      	movs	r6, #0
 8018b16:	4637      	mov	r7, r6
 8018b18:	a806      	add	r0, sp, #24
 8018b1a:	3701      	adds	r7, #1
 8018b1c:	f001 f9a1 	bl	8019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018b20:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8018b24:	9b03      	ldr	r3, [sp, #12]
 8018b26:	b2bf      	uxth	r7, r7
 8018b28:	4286      	cmp	r6, r0
 8018b2a:	eba9 0903 	sub.w	r9, r9, r3
 8018b2e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018b32:	bfb8      	it	lt
 8018b34:	4606      	movlt	r6, r0
 8018b36:	fa0f f989 	sxth.w	r9, r9
 8018b3a:	b236      	sxth	r6, r6
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	f43f af0d 	beq.w	801895c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018b42:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	f47f af08 	bne.w	801895c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018b4c:	7a2b      	ldrb	r3, [r5, #8]
 8018b4e:	444b      	add	r3, r9
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	dce1      	bgt.n	8018b18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8018b54:	e702      	b.n	801895c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018b56:	bf00      	nop
 8018b58:	2402aec0 	.word	0x2402aec0
 8018b5c:	2402aebc 	.word	0x2402aebc
 8018b60:	2402aec4 	.word	0x2402aec4
 8018b64:	2402aec8 	.word	0x2402aec8
 8018b68:	ebaa 0606 	sub.w	r6, sl, r6
 8018b6c:	2002      	movs	r0, #2
 8018b6e:	fb96 f6f0 	sdiv	r6, r6, r0
 8018b72:	e71c      	b.n	80189ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018b74:	441e      	add	r6, r3
 8018b76:	ebaa 0606 	sub.w	r6, sl, r6
 8018b7a:	e718      	b.n	80189ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018b7c:	8925      	ldrh	r5, [r4, #8]
 8018b7e:	1aed      	subs	r5, r5, r3
 8018b80:	eba5 050a 	sub.w	r5, r5, sl
 8018b84:	fa0f fb85 	sxth.w	fp, r5
 8018b88:	8965      	ldrh	r5, [r4, #10]
 8018b8a:	eba5 0509 	sub.w	r5, r5, r9
 8018b8e:	b22d      	sxth	r5, r5
 8018b90:	e72d      	b.n	80189ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018b92:	8965      	ldrh	r5, [r4, #10]
 8018b94:	f04f 0b00 	mov.w	fp, #0
 8018b98:	1aed      	subs	r5, r5, r3
 8018b9a:	4633      	mov	r3, r6
 8018b9c:	463e      	mov	r6, r7
 8018b9e:	eba5 050a 	sub.w	r5, r5, sl
 8018ba2:	461f      	mov	r7, r3
 8018ba4:	b22d      	sxth	r5, r5
 8018ba6:	e722      	b.n	80189ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018ba8:	2500      	movs	r5, #0
 8018baa:	e720      	b.n	80189ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08018bac <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8018bac:	b513      	push	{r0, r1, r4, lr}
 8018bae:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8018bb2:	4604      	mov	r4, r0
 8018bb4:	b1fb      	cbz	r3, 8018bf6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018bb6:	4b16      	ldr	r3, [pc, #88]	; (8018c10 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8018bb8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018bba:	881b      	ldrh	r3, [r3, #0]
 8018bbc:	428b      	cmp	r3, r1
 8018bbe:	d91a      	bls.n	8018bf6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018bc0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	dd16      	ble.n	8018bf6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018bc8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	dd12      	ble.n	8018bf6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018bd0:	4b10      	ldr	r3, [pc, #64]	; (8018c14 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8018bd2:	6818      	ldr	r0, [r3, #0]
 8018bd4:	f7f0 feca 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 8018bd8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8018bdc:	6822      	ldr	r2, [r4, #0]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	db06      	blt.n	8018bf0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8018be2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	db02      	blt.n	8018bf0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8018bea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018bec:	4298      	cmp	r0, r3
 8018bee:	d004      	beq.n	8018bfa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8018bf0:	6953      	ldr	r3, [r2, #20]
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	4798      	blx	r3
 8018bf6:	b002      	add	sp, #8
 8018bf8:	bd10      	pop	{r4, pc}
 8018bfa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8018bfe:	466b      	mov	r3, sp
 8018c00:	6912      	ldr	r2, [r2, #16]
 8018c02:	c903      	ldmia	r1, {r0, r1}
 8018c04:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c08:	4619      	mov	r1, r3
 8018c0a:	4620      	mov	r0, r4
 8018c0c:	4790      	blx	r2
 8018c0e:	e7f2      	b.n	8018bf6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018c10:	2402aec0 	.word	0x2402aec0
 8018c14:	2402aec8 	.word	0x2402aec8

08018c18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018c18:	4b45      	ldr	r3, [pc, #276]	; (8018d30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8018c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c1e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018c20:	b08e      	sub	sp, #56	; 0x38
 8018c22:	881b      	ldrh	r3, [r3, #0]
 8018c24:	4604      	mov	r4, r0
 8018c26:	4293      	cmp	r3, r2
 8018c28:	d97e      	bls.n	8018d28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018c2a:	6808      	ldr	r0, [r1, #0]
 8018c2c:	ab05      	add	r3, sp, #20
 8018c2e:	6849      	ldr	r1, [r1, #4]
 8018c30:	4d40      	ldr	r5, [pc, #256]	; (8018d34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8018c32:	c303      	stmia	r3!, {r0, r1}
 8018c34:	4611      	mov	r1, r2
 8018c36:	6828      	ldr	r0, [r5, #0]
 8018c38:	f7f0 fe98 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 8018c3c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	db11      	blt.n	8018c68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018c44:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	db0d      	blt.n	8018c68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018c4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c4e:	4298      	cmp	r0, r3
 8018c50:	d10a      	bne.n	8018c68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018c52:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8018c56:	ab09      	add	r3, sp, #36	; 0x24
 8018c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c60:	4619      	mov	r1, r3
 8018c62:	a805      	add	r0, sp, #20
 8018c64:	f7fe fa8c 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8018c68:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	dd5b      	ble.n	8018d28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018c70:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	dd57      	ble.n	8018d28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018c78:	4f2f      	ldr	r7, [pc, #188]	; (8018d38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8018c7a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018c82:	4b2e      	ldr	r3, [pc, #184]	; (8018d3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018c8a:	2e00      	cmp	r6, #0
 8018c8c:	d04c      	beq.n	8018d28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018c8e:	6823      	ldr	r3, [r4, #0]
 8018c90:	4620      	mov	r0, r4
 8018c92:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8018c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c98:	4798      	blx	r3
 8018c9a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8018ca2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018ca6:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8018caa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8018cae:	785b      	ldrb	r3, [r3, #1]
 8018cb0:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8018cb4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018cb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018cba:	9609      	str	r6, [sp, #36]	; 0x24
 8018cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cc0:	4b1f      	ldr	r3, [pc, #124]	; (8018d40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8018cc2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8018ccc:	910b      	str	r1, [sp, #44]	; 0x2c
 8018cce:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8018cd2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8018cd6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8018cda:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8018cde:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8018ce2:	b10a      	cbz	r2, 8018ce8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8018ce4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8018ce6:	b906      	cbnz	r6, 8018cea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8018ce8:	689e      	ldr	r6, [r3, #8]
 8018cea:	af07      	add	r7, sp, #28
 8018cec:	4621      	mov	r1, r4
 8018cee:	4638      	mov	r0, r7
 8018cf0:	f002 ffa0 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018cf4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018cf6:	6828      	ldr	r0, [r5, #0]
 8018cf8:	f7f0 fe38 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 8018cfc:	6823      	ldr	r3, [r4, #0]
 8018cfe:	4605      	mov	r5, r0
 8018d00:	4620      	mov	r0, r4
 8018d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d04:	4798      	blx	r3
 8018d06:	6823      	ldr	r3, [r4, #0]
 8018d08:	4680      	mov	r8, r0
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018d10:	4798      	blx	r3
 8018d12:	ab09      	add	r3, sp, #36	; 0x24
 8018d14:	9501      	str	r5, [sp, #4]
 8018d16:	9300      	str	r3, [sp, #0]
 8018d18:	ab05      	add	r3, sp, #20
 8018d1a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8018d1e:	4630      	mov	r0, r6
 8018d20:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018d24:	f7f0 fdb3 	bl	800988e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018d28:	b00e      	add	sp, #56	; 0x38
 8018d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2e:	bf00      	nop
 8018d30:	2402aec0 	.word	0x2402aec0
 8018d34:	2402aec8 	.word	0x2402aec8
 8018d38:	2402aebc 	.word	0x2402aebc
 8018d3c:	2402aec4 	.word	0x2402aec4
 8018d40:	2402ae6c 	.word	0x2402ae6c

08018d44 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018d44:	b538      	push	{r3, r4, r5, lr}
 8018d46:	4b0e      	ldr	r3, [pc, #56]	; (8018d80 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8018d48:	4604      	mov	r4, r0
 8018d4a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018d4c:	881b      	ldrh	r3, [r3, #0]
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d214      	bcs.n	8018d7c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018d52:	6803      	ldr	r3, [r0, #0]
 8018d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d56:	4798      	blx	r3
 8018d58:	6823      	ldr	r3, [r4, #0]
 8018d5a:	4605      	mov	r5, r0
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d60:	4798      	blx	r3
 8018d62:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018d66:	b22d      	sxth	r5, r5
 8018d68:	4601      	mov	r1, r0
 8018d6a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018d6e:	bf06      	itte	eq
 8018d70:	4602      	moveq	r2, r0
 8018d72:	4629      	moveq	r1, r5
 8018d74:	462a      	movne	r2, r5
 8018d76:	4620      	mov	r0, r4
 8018d78:	f7ef fc8b 	bl	8008692 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018d7c:	bd38      	pop	{r3, r4, r5, pc}
 8018d7e:	bf00      	nop
 8018d80:	2402aec0 	.word	0x2402aec0

08018d84 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018d84:	b530      	push	{r4, r5, lr}
 8018d86:	888b      	ldrh	r3, [r1, #4]
 8018d88:	b085      	sub	sp, #20
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018d8e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018d92:	b923      	cbnz	r3, 8018d9e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018d94:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018d98:	b90b      	cbnz	r3, 8018d9e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018d9a:	f7ff ffd3 	bl	8018d44 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018d9e:	6823      	ldr	r3, [r4, #0]
 8018da0:	466d      	mov	r5, sp
 8018da2:	4621      	mov	r1, r4
 8018da4:	343c      	adds	r4, #60	; 0x3c
 8018da6:	4628      	mov	r0, r5
 8018da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018dac:	4798      	blx	r3
 8018dae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018db6:	b005      	add	sp, #20
 8018db8:	bd30      	pop	{r4, r5, pc}

08018dba <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018dba:	2300      	movs	r3, #0
 8018dbc:	8083      	strh	r3, [r0, #4]
 8018dbe:	80c3      	strh	r3, [r0, #6]
 8018dc0:	8003      	strh	r3, [r0, #0]
 8018dc2:	8043      	strh	r3, [r0, #2]
 8018dc4:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018dc8:	2bff      	cmp	r3, #255	; 0xff
 8018dca:	bf01      	itttt	eq
 8018dcc:	890b      	ldrheq	r3, [r1, #8]
 8018dce:	8083      	strheq	r3, [r0, #4]
 8018dd0:	894b      	ldrheq	r3, [r1, #10]
 8018dd2:	80c3      	strheq	r3, [r0, #6]
 8018dd4:	4770      	bx	lr
	...

08018dd8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018dda:	4604      	mov	r4, r0
 8018ddc:	466b      	mov	r3, sp
 8018dde:	6808      	ldr	r0, [r1, #0]
 8018de0:	6849      	ldr	r1, [r1, #4]
 8018de2:	c303      	stmia	r3!, {r0, r1}
 8018de4:	6823      	ldr	r3, [r4, #0]
 8018de6:	4669      	mov	r1, sp
 8018de8:	4620      	mov	r0, r4
 8018dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dec:	4798      	blx	r3
 8018dee:	4b08      	ldr	r3, [pc, #32]	; (8018e10 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8018df6:	b10a      	cbz	r2, 8018dfc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018df8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018dfa:	b900      	cbnz	r0, 8018dfe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018dfc:	6898      	ldr	r0, [r3, #8]
 8018dfe:	6803      	ldr	r3, [r0, #0]
 8018e00:	4669      	mov	r1, sp
 8018e02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018e04:	6a1d      	ldr	r5, [r3, #32]
 8018e06:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018e0a:	47a8      	blx	r5
 8018e0c:	b003      	add	sp, #12
 8018e0e:	bd30      	pop	{r4, r5, pc}
 8018e10:	2402ae6c 	.word	0x2402ae6c

08018e14 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8018e14:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8018e18:	b12a      	cbz	r2, 8018e26 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018e1a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018e1e:	b112      	cbz	r2, 8018e26 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018e20:	6803      	ldr	r3, [r0, #0]
 8018e22:	695b      	ldr	r3, [r3, #20]
 8018e24:	4718      	bx	r3
 8018e26:	4770      	bx	lr

08018e28 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8018e28:	4b30      	ldr	r3, [pc, #192]	; (8018eec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8018e2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018e30:	b08d      	sub	sp, #52	; 0x34
 8018e32:	881b      	ldrh	r3, [r3, #0]
 8018e34:	4604      	mov	r4, r0
 8018e36:	460f      	mov	r7, r1
 8018e38:	4293      	cmp	r3, r2
 8018e3a:	d954      	bls.n	8018ee6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018e3c:	4b2c      	ldr	r3, [pc, #176]	; (8018ef0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8018e3e:	6819      	ldr	r1, [r3, #0]
 8018e40:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8018e44:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8018e48:	4a2a      	ldr	r2, [pc, #168]	; (8018ef4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8018e4a:	6812      	ldr	r2, [r2, #0]
 8018e4c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8018e50:	2900      	cmp	r1, #0
 8018e52:	d048      	beq.n	8018ee6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018e54:	785a      	ldrb	r2, [r3, #1]
 8018e56:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8018e5a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8018e5e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018e62:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018e66:	4b24      	ldr	r3, [pc, #144]	; (8018ef8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8018e68:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8018e6c:	681a      	ldr	r2, [r3, #0]
 8018e6e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8018e72:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018e76:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018e7a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8018e7c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8018e80:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8018e84:	9107      	str	r1, [sp, #28]
 8018e86:	f88d 8020 	strb.w	r8, [sp, #32]
 8018e8a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018e8e:	9609      	str	r6, [sp, #36]	; 0x24
 8018e90:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018e94:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8018e98:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8018e9c:	b10b      	cbz	r3, 8018ea2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8018e9e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8018ea0:	b905      	cbnz	r5, 8018ea4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8018ea2:	6895      	ldr	r5, [r2, #8]
 8018ea4:	ae05      	add	r6, sp, #20
 8018ea6:	4621      	mov	r1, r4
 8018ea8:	4630      	mov	r0, r6
 8018eaa:	f002 fec3 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018eae:	4b13      	ldr	r3, [pc, #76]	; (8018efc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8018eb0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018eb2:	6818      	ldr	r0, [r3, #0]
 8018eb4:	f7f0 fd5a 	bl	800996c <_ZNK8touchgfx5Texts7getTextEt>
 8018eb8:	6823      	ldr	r3, [r4, #0]
 8018eba:	4680      	mov	r8, r0
 8018ebc:	4620      	mov	r0, r4
 8018ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018ec0:	4798      	blx	r3
 8018ec2:	6823      	ldr	r3, [r4, #0]
 8018ec4:	4681      	mov	r9, r0
 8018ec6:	4620      	mov	r0, r4
 8018ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018ecc:	4798      	blx	r3
 8018ece:	ab07      	add	r3, sp, #28
 8018ed0:	f8cd 8004 	str.w	r8, [sp, #4]
 8018ed4:	9300      	str	r3, [sp, #0]
 8018ed6:	463b      	mov	r3, r7
 8018ed8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8018edc:	4628      	mov	r0, r5
 8018ede:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018ee2:	f7f0 fcd4 	bl	800988e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018ee6:	b00d      	add	sp, #52	; 0x34
 8018ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eec:	2402aec0 	.word	0x2402aec0
 8018ef0:	2402aebc 	.word	0x2402aebc
 8018ef4:	2402aec4 	.word	0x2402aec4
 8018ef8:	2402ae6c 	.word	0x2402ae6c
 8018efc:	2402aec8 	.word	0x2402aec8

08018f00 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8018f00:	b570      	push	{r4, r5, r6, lr}
 8018f02:	880b      	ldrh	r3, [r1, #0]
 8018f04:	460d      	mov	r5, r1
 8018f06:	4604      	mov	r4, r0
 8018f08:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018f0a:	4608      	mov	r0, r1
 8018f0c:	f004 fed0 	bl	801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018f10:	4606      	mov	r6, r0
 8018f12:	4628      	mov	r0, r5
 8018f14:	f004 ff00 	bl	801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018f18:	6823      	ldr	r3, [r4, #0]
 8018f1a:	4605      	mov	r5, r0
 8018f1c:	4631      	mov	r1, r6
 8018f1e:	4620      	mov	r0, r4
 8018f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f22:	4798      	blx	r3
 8018f24:	6823      	ldr	r3, [r4, #0]
 8018f26:	4629      	mov	r1, r5
 8018f28:	4620      	mov	r0, r4
 8018f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f30:	4718      	bx	r3

08018f32 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018f32:	b510      	push	{r4, lr}
 8018f34:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018f38:	4604      	mov	r4, r0
 8018f3a:	2bff      	cmp	r3, #255	; 0xff
 8018f3c:	d006      	beq.n	8018f4c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018f3e:	2300      	movs	r3, #0
 8018f40:	8003      	strh	r3, [r0, #0]
 8018f42:	8043      	strh	r3, [r0, #2]
 8018f44:	8083      	strh	r3, [r0, #4]
 8018f46:	80c3      	strh	r3, [r0, #6]
 8018f48:	4620      	mov	r0, r4
 8018f4a:	bd10      	pop	{r4, pc}
 8018f4c:	3126      	adds	r1, #38	; 0x26
 8018f4e:	f004 ff17 	bl	801dd80 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018f52:	e7f9      	b.n	8018f48 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018f54 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8018f54:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8018f58:	b12a      	cbz	r2, 8018f66 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8018f5a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018f5e:	b112      	cbz	r2, 8018f66 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8018f60:	6803      	ldr	r3, [r0, #0]
 8018f62:	695b      	ldr	r3, [r3, #20]
 8018f64:	4718      	bx	r3
 8018f66:	4770      	bx	lr

08018f68 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	b088      	sub	sp, #32
 8018f70:	2500      	movs	r5, #0
 8018f72:	460f      	mov	r7, r1
 8018f74:	f854 3b26 	ldr.w	r3, [r4], #38
 8018f78:	a904      	add	r1, sp, #16
 8018f7a:	4606      	mov	r6, r0
 8018f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018f82:	4798      	blx	r3
 8018f84:	4620      	mov	r0, r4
 8018f86:	f004 fe93 	bl	801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018f8a:	4680      	mov	r8, r0
 8018f8c:	4620      	mov	r0, r4
 8018f8e:	f004 fec3 	bl	801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018f92:	9506      	str	r5, [sp, #24]
 8018f94:	ad06      	add	r5, sp, #24
 8018f96:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018f9a:	4639      	mov	r1, r7
 8018f9c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018fa0:	4628      	mov	r0, r5
 8018fa2:	f7fe f8ed 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8018fa6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	dd19      	ble.n	8018fe2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018fae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	dd15      	ble.n	8018fe2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018fb6:	4b0c      	ldr	r3, [pc, #48]	; (8018fe8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8018fbe:	b10a      	cbz	r2, 8018fc4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018fc0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018fc2:	b900      	cbnz	r0, 8018fc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018fc4:	6898      	ldr	r0, [r3, #8]
 8018fc6:	2701      	movs	r7, #1
 8018fc8:	6801      	ldr	r1, [r0, #0]
 8018fca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018fce:	9702      	str	r7, [sp, #8]
 8018fd0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8018fd4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018fd8:	e9cd 5600 	strd	r5, r6, [sp]
 8018fdc:	688d      	ldr	r5, [r1, #8]
 8018fde:	4621      	mov	r1, r4
 8018fe0:	47a8      	blx	r5
 8018fe2:	b008      	add	sp, #32
 8018fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fe8:	2402ae6c 	.word	0x2402ae6c

08018fec <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018fec:	b510      	push	{r4, lr}
 8018fee:	6803      	ldr	r3, [r0, #0]
 8018ff0:	460c      	mov	r4, r1
 8018ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ff4:	4798      	blx	r3
 8018ff6:	1b03      	subs	r3, r0, r4
 8018ff8:	4258      	negs	r0, r3
 8018ffa:	4158      	adcs	r0, r3
 8018ffc:	bd10      	pop	{r4, pc}
	...

08019000 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019000:	4b01      	ldr	r3, [pc, #4]	; (8019008 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019002:	6019      	str	r1, [r3, #0]
 8019004:	4770      	bx	lr
 8019006:	bf00      	nop
 8019008:	2402ae74 	.word	0x2402ae74

0801900c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019010:	4696      	mov	lr, r2
 8019012:	b097      	sub	sp, #92	; 0x5c
 8019014:	4605      	mov	r5, r0
 8019016:	4614      	mov	r4, r2
 8019018:	460e      	mov	r6, r1
 801901a:	461f      	mov	r7, r3
 801901c:	f10d 0c1c 	add.w	ip, sp, #28
 8019020:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019024:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019028:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801902c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019030:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019034:	f8de 3000 	ldr.w	r3, [lr]
 8019038:	f104 0e14 	add.w	lr, r4, #20
 801903c:	f8cc 3000 	str.w	r3, [ip]
 8019040:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019044:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019048:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801904c:	f8de 3000 	ldr.w	r3, [lr]
 8019050:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019054:	f8cc 3000 	str.w	r3, [ip]
 8019058:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801905c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019064:	f8de 3000 	ldr.w	r3, [lr]
 8019068:	4631      	mov	r1, r6
 801906a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801906c:	4628      	mov	r0, r5
 801906e:	f8cc 3000 	str.w	r3, [ip]
 8019072:	682b      	ldr	r3, [r5, #0]
 8019074:	9201      	str	r2, [sp, #4]
 8019076:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019078:	f8cd 8008 	str.w	r8, [sp, #8]
 801907c:	9200      	str	r2, [sp, #0]
 801907e:	aa07      	add	r2, sp, #28
 8019080:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019084:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8019088:	463b      	mov	r3, r7
 801908a:	47d8      	blx	fp
 801908c:	46a6      	mov	lr, r4
 801908e:	f10d 0c1c 	add.w	ip, sp, #28
 8019092:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801909a:	f8de 3000 	ldr.w	r3, [lr]
 801909e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80190a2:	343c      	adds	r4, #60	; 0x3c
 80190a4:	f8cc 3000 	str.w	r3, [ip]
 80190a8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80190ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80190b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190b4:	f8de 3000 	ldr.w	r3, [lr]
 80190b8:	f8cc 3000 	str.w	r3, [ip]
 80190bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80190c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190c6:	6823      	ldr	r3, [r4, #0]
 80190c8:	4631      	mov	r1, r6
 80190ca:	4628      	mov	r0, r5
 80190cc:	f8cc 3000 	str.w	r3, [ip]
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80190d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80190d8:	f8cd 8008 	str.w	r8, [sp, #8]
 80190dc:	9201      	str	r2, [sp, #4]
 80190de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80190e0:	9200      	str	r2, [sp, #0]
 80190e2:	aa07      	add	r2, sp, #28
 80190e4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80190e6:	463b      	mov	r3, r7
 80190e8:	47a0      	blx	r4
 80190ea:	b017      	add	sp, #92	; 0x5c
 80190ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190f0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80190f0:	2000      	movs	r0, #0
 80190f2:	4770      	bx	lr

080190f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80190f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190f8:	b08d      	sub	sp, #52	; 0x34
 80190fa:	4688      	mov	r8, r1
 80190fc:	f8d3 c000 	ldr.w	ip, [r3]
 8019100:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019102:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019106:	680f      	ldr	r7, [r1, #0]
 8019108:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801910c:	eba7 070c 	sub.w	r7, r7, ip
 8019110:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019114:	edd3 6a07 	vldr	s13, [r3, #28]
 8019118:	42bc      	cmp	r4, r7
 801911a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801911c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019120:	bfa8      	it	ge
 8019122:	463c      	movge	r4, r7
 8019124:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019128:	f9ba 1000 	ldrsh.w	r1, [sl]
 801912c:	ee07 4a90 	vmov	s15, r4
 8019130:	eb09 0e0c 	add.w	lr, r9, ip
 8019134:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019138:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801913c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019140:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019144:	4571      	cmp	r1, lr
 8019146:	ee25 4a04 	vmul.f32	s8, s10, s8
 801914a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801914e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019152:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019156:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801915a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801915e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019162:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019166:	ee61 1a87 	vmul.f32	s3, s3, s14
 801916a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801916e:	f340 808c 	ble.w	801928a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019172:	eba1 060e 	sub.w	r6, r1, lr
 8019176:	fb96 f5f4 	sdiv	r5, r6, r4
 801917a:	ee07 5a10 	vmov	s14, r5
 801917e:	2d00      	cmp	r5, #0
 8019180:	fb04 6615 	mls	r6, r4, r5, r6
 8019184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019188:	eea7 0a04 	vfma.f32	s0, s14, s8
 801918c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019190:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019194:	dd12      	ble.n	80191bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019196:	ee70 6a44 	vsub.f32	s13, s0, s8
 801919a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801919e:	ee31 2a45 	vsub.f32	s4, s2, s10
 80191a2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80191a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191aa:	bf14      	ite	ne
 80191ac:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80191b0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80191b4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80191b8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80191bc:	fb05 f204 	mul.w	r2, r5, r4
 80191c0:	1abf      	subs	r7, r7, r2
 80191c2:	4494      	add	ip, r2
 80191c4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80191c8:	4411      	add	r1, r2
 80191ca:	eb09 020c 	add.w	r2, r9, ip
 80191ce:	b209      	sxth	r1, r1
 80191d0:	443a      	add	r2, r7
 80191d2:	428a      	cmp	r2, r1
 80191d4:	bfc4      	itt	gt
 80191d6:	eba1 0209 	subgt.w	r2, r1, r9
 80191da:	eba2 070c 	subgt.w	r7, r2, ip
 80191de:	2f00      	cmp	r7, #0
 80191e0:	dd50      	ble.n	8019284 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80191e2:	fb97 f1f4 	sdiv	r1, r7, r4
 80191e6:	fb04 7211 	mls	r2, r4, r1, r7
 80191ea:	b90a      	cbnz	r2, 80191f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80191ec:	3901      	subs	r1, #1
 80191ee:	4622      	mov	r2, r4
 80191f0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80191f4:	6840      	ldr	r0, [r0, #4]
 80191f6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80191fa:	44b6      	add	lr, r6
 80191fc:	f8d0 a000 	ldr.w	sl, [r0]
 8019200:	2900      	cmp	r1, #0
 8019202:	bfcc      	ite	gt
 8019204:	46a1      	movgt	r9, r4
 8019206:	4691      	movle	r9, r2
 8019208:	900b      	str	r0, [sp, #44]	; 0x2c
 801920a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801920c:	fb04 e505 	mla	r5, r4, r5, lr
 8019210:	eef0 6a42 	vmov.f32	s13, s4
 8019214:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019218:	9008      	str	r0, [sp, #32]
 801921a:	eeb0 7a61 	vmov.f32	s14, s3
 801921e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019220:	695b      	ldr	r3, [r3, #20]
 8019222:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019226:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801922a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801922e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019230:	445b      	add	r3, fp
 8019232:	9307      	str	r3, [sp, #28]
 8019234:	ee16 3a90 	vmov	r3, s13
 8019238:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801923c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019240:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019244:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019248:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801924c:	ee17 7a90 	vmov	r7, s15
 8019250:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019254:	fb97 f7f4 	sdiv	r7, r7, r4
 8019258:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801925c:	ee17 ca90 	vmov	ip, s15
 8019260:	fb9c fcf4 	sdiv	ip, ip, r4
 8019264:	fb0c 3306 	mla	r3, ip, r6, r3
 8019268:	9302      	str	r3, [sp, #8]
 801926a:	ee17 3a10 	vmov	r3, s14
 801926e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019272:	fb07 3706 	mla	r7, r7, r6, r3
 8019276:	eba9 0306 	sub.w	r3, r9, r6
 801927a:	e9cd 4700 	strd	r4, r7, [sp]
 801927e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019282:	47a0      	blx	r4
 8019284:	b00d      	add	sp, #52	; 0x34
 8019286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801928a:	2500      	movs	r5, #0
 801928c:	462e      	mov	r6, r5
 801928e:	e799      	b.n	80191c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019294:	b0db      	sub	sp, #364	; 0x16c
 8019296:	461d      	mov	r5, r3
 8019298:	4614      	mov	r4, r2
 801929a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801929e:	910f      	str	r1, [sp, #60]	; 0x3c
 80192a0:	4629      	mov	r1, r5
 80192a2:	930a      	str	r3, [sp, #40]	; 0x28
 80192a4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80192a8:	9009      	str	r0, [sp, #36]	; 0x24
 80192aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80192ac:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80192b0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80192b4:	9310      	str	r3, [sp, #64]	; 0x40
 80192b6:	6803      	ldr	r3, [r0, #0]
 80192b8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80192ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80192be:	47b8      	blx	r7
 80192c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192c2:	6058      	str	r0, [r3, #4]
 80192c4:	2800      	cmp	r0, #0
 80192c6:	f000 83a1 	beq.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192ca:	682b      	ldr	r3, [r5, #0]
 80192cc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80192d0:	ed94 7a02 	vldr	s14, [r4, #8]
 80192d4:	9314      	str	r3, [sp, #80]	; 0x50
 80192d6:	686b      	ldr	r3, [r5, #4]
 80192d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80192dc:	9315      	str	r3, [sp, #84]	; 0x54
 80192de:	4bc1      	ldr	r3, [pc, #772]	; (80195e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80192e0:	7819      	ldrb	r1, [r3, #0]
 80192e2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80192e6:	2900      	cmp	r1, #0
 80192e8:	bf16      	itet	ne
 80192ea:	4619      	movne	r1, r3
 80192ec:	4611      	moveq	r1, r2
 80192ee:	4613      	movne	r3, r2
 80192f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192f4:	9116      	str	r1, [sp, #88]	; 0x58
 80192f6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80192fa:	f240 8387 	bls.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192fe:	ed94 7a07 	vldr	s14, [r4, #28]
 8019302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801930a:	f240 837f 	bls.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801930e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931a:	f240 8377 	bls.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801931e:	6822      	ldr	r2, [r4, #0]
 8019320:	4bb1      	ldr	r3, [pc, #708]	; (80195e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019322:	429a      	cmp	r2, r3
 8019324:	f2c0 8372 	blt.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019328:	49b0      	ldr	r1, [pc, #704]	; (80195ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801932a:	6963      	ldr	r3, [r4, #20]
 801932c:	428a      	cmp	r2, r1
 801932e:	f300 836d 	bgt.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019332:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019336:	48ae      	ldr	r0, [pc, #696]	; (80195f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019338:	33ff      	adds	r3, #255	; 0xff
 801933a:	4283      	cmp	r3, r0
 801933c:	f200 8366 	bhi.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019342:	4dac      	ldr	r5, [pc, #688]	; (80195f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019344:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019348:	33ff      	adds	r3, #255	; 0xff
 801934a:	42ab      	cmp	r3, r5
 801934c:	f200 835e 	bhi.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019350:	6862      	ldr	r2, [r4, #4]
 8019352:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8019356:	33ff      	adds	r3, #255	; 0xff
 8019358:	4283      	cmp	r3, r0
 801935a:	f200 8357 	bhi.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801935e:	69a1      	ldr	r1, [r4, #24]
 8019360:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019364:	33ff      	adds	r3, #255	; 0xff
 8019366:	4283      	cmp	r3, r0
 8019368:	f200 8350 	bhi.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801936c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801936e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019372:	30ff      	adds	r0, #255	; 0xff
 8019374:	42a8      	cmp	r0, r5
 8019376:	f200 8349 	bhi.w	8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801937a:	428a      	cmp	r2, r1
 801937c:	f280 8110 	bge.w	80195a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019380:	429a      	cmp	r2, r3
 8019382:	f300 8119 	bgt.w	80195b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019386:	4299      	cmp	r1, r3
 8019388:	f280 811d 	bge.w	80195c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801938c:	2502      	movs	r5, #2
 801938e:	2701      	movs	r7, #1
 8019390:	46a9      	mov	r9, r5
 8019392:	46b8      	mov	r8, r7
 8019394:	f04f 0a00 	mov.w	sl, #0
 8019398:	4621      	mov	r1, r4
 801939a:	a849      	add	r0, sp, #292	; 0x124
 801939c:	f003 fe46 	bl	801d02c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80193a0:	4622      	mov	r2, r4
 80193a2:	4653      	mov	r3, sl
 80193a4:	a949      	add	r1, sp, #292	; 0x124
 80193a6:	f8cd 9000 	str.w	r9, [sp]
 80193aa:	a819      	add	r0, sp, #100	; 0x64
 80193ac:	f003 ff6e 	bl	801d28c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80193b0:	4622      	mov	r2, r4
 80193b2:	4653      	mov	r3, sl
 80193b4:	a949      	add	r1, sp, #292	; 0x124
 80193b6:	f8cd 8000 	str.w	r8, [sp]
 80193ba:	a829      	add	r0, sp, #164	; 0xa4
 80193bc:	f003 ff66 	bl	801d28c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80193c0:	4643      	mov	r3, r8
 80193c2:	4622      	mov	r2, r4
 80193c4:	a949      	add	r1, sp, #292	; 0x124
 80193c6:	f8cd 9000 	str.w	r9, [sp]
 80193ca:	a839      	add	r0, sp, #228	; 0xe4
 80193cc:	f003 ff5e 	bl	801d28c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80193d0:	42af      	cmp	r7, r5
 80193d2:	af12      	add	r7, sp, #72	; 0x48
 80193d4:	bfb7      	itett	lt
 80193d6:	2300      	movlt	r3, #0
 80193d8:	2301      	movge	r3, #1
 80193da:	ad29      	addlt	r5, sp, #164	; 0xa4
 80193dc:	ac19      	addlt	r4, sp, #100	; 0x64
 80193de:	bfb1      	iteee	lt
 80193e0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80193e2:	ad19      	addge	r5, sp, #100	; 0x64
 80193e4:	930e      	strge	r3, [sp, #56]	; 0x38
 80193e6:	ac29      	addge	r4, sp, #164	; 0xa4
 80193e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80193ee:	e887 0003 	stmia.w	r7, {r0, r1}
 80193f2:	b928      	cbnz	r0, 8019400 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80193f4:	4b80      	ldr	r3, [pc, #512]	; (80195f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80193f6:	6818      	ldr	r0, [r3, #0]
 80193f8:	6803      	ldr	r3, [r0, #0]
 80193fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193fc:	4798      	blx	r3
 80193fe:	6038      	str	r0, [r7, #0]
 8019400:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019402:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801940a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801940c:	930c      	str	r3, [sp, #48]	; 0x30
 801940e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019410:	6963      	ldr	r3, [r4, #20]
 8019412:	440b      	add	r3, r1
 8019414:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019418:	4408      	add	r0, r1
 801941a:	b200      	sxth	r0, r0
 801941c:	4283      	cmp	r3, r0
 801941e:	900d      	str	r0, [sp, #52]	; 0x34
 8019420:	f280 80dd 	bge.w	80195de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019424:	428b      	cmp	r3, r1
 8019426:	da08      	bge.n	801943a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019428:	2a00      	cmp	r2, #0
 801942a:	dd06      	ble.n	801943a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801942c:	1acb      	subs	r3, r1, r3
 801942e:	429a      	cmp	r2, r3
 8019430:	f2c0 80e4 	blt.w	80195fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019434:	2b00      	cmp	r3, #0
 8019436:	f300 80e2 	bgt.w	80195fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801943a:	6967      	ldr	r7, [r4, #20]
 801943c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019442:	443b      	add	r3, r7
 8019444:	461f      	mov	r7, r3
 8019446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019448:	1bdf      	subs	r7, r3, r7
 801944a:	4297      	cmp	r7, r2
 801944c:	bfa8      	it	ge
 801944e:	4617      	movge	r7, r2
 8019450:	2f00      	cmp	r7, #0
 8019452:	f340 8166 	ble.w	8019722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019456:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019458:	6829      	ldr	r1, [r5, #0]
 801945a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801945e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019462:	4411      	add	r1, r2
 8019464:	6820      	ldr	r0, [r4, #0]
 8019466:	4299      	cmp	r1, r3
 8019468:	dd1a      	ble.n	80194a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801946a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801946e:	4402      	add	r2, r0
 8019470:	440b      	add	r3, r1
 8019472:	b21b      	sxth	r3, r3
 8019474:	429a      	cmp	r2, r3
 8019476:	dc13      	bgt.n	80194a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019478:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801947a:	a912      	add	r1, sp, #72	; 0x48
 801947c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801947e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	9206      	str	r2, [sp, #24]
 8019484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019486:	9500      	str	r5, [sp, #0]
 8019488:	9205      	str	r2, [sp, #20]
 801948a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801948c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019490:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019492:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019496:	aa49      	add	r2, sp, #292	; 0x124
 8019498:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801949c:	4623      	mov	r3, r4
 801949e:	47c8      	blx	r9
 80194a0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80194a4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80194a8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80194ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80194b0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80194b4:	68a1      	ldr	r1, [r4, #8]
 80194b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80194ba:	ed94 6a08 	vldr	s12, [r4, #32]
 80194be:	edd4 6a07 	vldr	s13, [r4, #28]
 80194c2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80194c6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80194ca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80194ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80194d2:	edc4 6a07 	vstr	s13, [r4, #28]
 80194d6:	441a      	add	r2, r3
 80194d8:	6963      	ldr	r3, [r4, #20]
 80194da:	3301      	adds	r3, #1
 80194dc:	6022      	str	r2, [r4, #0]
 80194de:	6163      	str	r3, [r4, #20]
 80194e0:	69a3      	ldr	r3, [r4, #24]
 80194e2:	3b01      	subs	r3, #1
 80194e4:	61a3      	str	r3, [r4, #24]
 80194e6:	6923      	ldr	r3, [r4, #16]
 80194e8:	440b      	add	r3, r1
 80194ea:	68e1      	ldr	r1, [r4, #12]
 80194ec:	428b      	cmp	r3, r1
 80194ee:	6123      	str	r3, [r4, #16]
 80194f0:	db15      	blt.n	801951e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80194f2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80194f6:	3201      	adds	r2, #1
 80194f8:	1a5b      	subs	r3, r3, r1
 80194fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80194fe:	6022      	str	r2, [r4, #0]
 8019500:	6123      	str	r3, [r4, #16]
 8019502:	edc4 6a07 	vstr	s13, [r4, #28]
 8019506:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801950a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801950e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019512:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801951a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801951e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019522:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019526:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801952a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801952e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019532:	68a9      	ldr	r1, [r5, #8]
 8019534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019538:	ed95 6a08 	vldr	s12, [r5, #32]
 801953c:	edd5 6a07 	vldr	s13, [r5, #28]
 8019540:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019544:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019548:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801954c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019550:	edc5 6a07 	vstr	s13, [r5, #28]
 8019554:	441a      	add	r2, r3
 8019556:	696b      	ldr	r3, [r5, #20]
 8019558:	3301      	adds	r3, #1
 801955a:	602a      	str	r2, [r5, #0]
 801955c:	616b      	str	r3, [r5, #20]
 801955e:	69ab      	ldr	r3, [r5, #24]
 8019560:	3b01      	subs	r3, #1
 8019562:	61ab      	str	r3, [r5, #24]
 8019564:	692b      	ldr	r3, [r5, #16]
 8019566:	440b      	add	r3, r1
 8019568:	68e9      	ldr	r1, [r5, #12]
 801956a:	428b      	cmp	r3, r1
 801956c:	612b      	str	r3, [r5, #16]
 801956e:	db15      	blt.n	801959c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019570:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019574:	3201      	adds	r2, #1
 8019576:	1a5b      	subs	r3, r3, r1
 8019578:	ee76 6a26 	vadd.f32	s13, s12, s13
 801957c:	602a      	str	r2, [r5, #0]
 801957e:	612b      	str	r3, [r5, #16]
 8019580:	edc5 6a07 	vstr	s13, [r5, #28]
 8019584:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019588:	ee36 7a87 	vadd.f32	s14, s13, s14
 801958c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019590:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019598:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801959c:	3f01      	subs	r7, #1
 801959e:	e757      	b.n	8019450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80195a0:	4299      	cmp	r1, r3
 80195a2:	dc13      	bgt.n	80195cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80195a4:	429a      	cmp	r2, r3
 80195a6:	da14      	bge.n	80195d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80195a8:	2502      	movs	r5, #2
 80195aa:	2703      	movs	r7, #3
 80195ac:	f04f 0800 	mov.w	r8, #0
 80195b0:	46a9      	mov	r9, r5
 80195b2:	f04f 0a01 	mov.w	sl, #1
 80195b6:	e6ef      	b.n	8019398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80195b8:	2501      	movs	r5, #1
 80195ba:	2700      	movs	r7, #0
 80195bc:	46a9      	mov	r9, r5
 80195be:	46b8      	mov	r8, r7
 80195c0:	f04f 0a02 	mov.w	sl, #2
 80195c4:	e6e8      	b.n	8019398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80195c6:	2501      	movs	r5, #1
 80195c8:	2702      	movs	r7, #2
 80195ca:	e6e1      	b.n	8019390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80195cc:	2500      	movs	r5, #0
 80195ce:	2701      	movs	r7, #1
 80195d0:	e7f4      	b.n	80195bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80195d2:	2702      	movs	r7, #2
 80195d4:	2503      	movs	r5, #3
 80195d6:	f04f 0900 	mov.w	r9, #0
 80195da:	46b8      	mov	r8, r7
 80195dc:	e7e9      	b.n	80195b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80195de:	4613      	mov	r3, r2
 80195e0:	e728      	b.n	8019434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80195e2:	bf00      	nop
 80195e4:	2402ae64 	.word	0x2402ae64
 80195e8:	fffd8f01 	.word	0xfffd8f01
 80195ec:	00027100 	.word	0x00027100
 80195f0:	0004e1ff 	.word	0x0004e1ff
 80195f4:	0004e1fe 	.word	0x0004e1fe
 80195f8:	2402ae6c 	.word	0x2402ae6c
 80195fc:	4613      	mov	r3, r2
 80195fe:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019600:	469e      	mov	lr, r3
 8019602:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019604:	469c      	mov	ip, r3
 8019606:	9111      	str	r1, [sp, #68]	; 0x44
 8019608:	f04f 0900 	mov.w	r9, #0
 801960c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019610:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019614:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019618:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801961c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019620:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019624:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019628:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801962c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019630:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019634:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019638:	f1bc 0f00 	cmp.w	ip, #0
 801963c:	d147      	bne.n	80196ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801963e:	eb03 0c07 	add.w	ip, r3, r7
 8019642:	1ad7      	subs	r7, r2, r3
 8019644:	f1b9 0f00 	cmp.w	r9, #0
 8019648:	d009      	beq.n	801965e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801964a:	9029      	str	r0, [sp, #164]	; 0xa4
 801964c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019650:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019654:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019658:	912d      	str	r1, [sp, #180]	; 0xb4
 801965a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801965e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019660:	f04f 0800 	mov.w	r8, #0
 8019664:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019668:	9111      	str	r1, [sp, #68]	; 0x44
 801966a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801966e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019672:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019676:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801967a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801967e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019682:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019686:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801968a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801968e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019692:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019696:	f1be 0f00 	cmp.w	lr, #0
 801969a:	d031      	beq.n	8019700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801969c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801969e:	4450      	add	r0, sl
 80196a0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80196a4:	4431      	add	r1, r6
 80196a6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80196aa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80196ae:	4549      	cmp	r1, r9
 80196b0:	db08      	blt.n	80196c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80196b2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80196b6:	3001      	adds	r0, #1
 80196b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80196bc:	eba1 0109 	sub.w	r1, r1, r9
 80196c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80196c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80196c8:	f04f 0801 	mov.w	r8, #1
 80196cc:	e7e3      	b.n	8019696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80196ce:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80196d0:	4450      	add	r0, sl
 80196d2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80196d6:	4431      	add	r1, r6
 80196d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80196dc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80196e0:	4541      	cmp	r1, r8
 80196e2:	db08      	blt.n	80196f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80196e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80196e8:	3001      	adds	r0, #1
 80196ea:	ee37 7a25 	vadd.f32	s14, s14, s11
 80196ee:	eba1 0108 	sub.w	r1, r1, r8
 80196f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80196f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80196fa:	f04f 0901 	mov.w	r9, #1
 80196fe:	e79b      	b.n	8019638 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019700:	449c      	add	ip, r3
 8019702:	1aff      	subs	r7, r7, r3
 8019704:	f1b8 0f00 	cmp.w	r8, #0
 8019708:	d009      	beq.n	801971e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801970a:	9019      	str	r0, [sp, #100]	; 0x64
 801970c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019710:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019714:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019718:	911d      	str	r1, [sp, #116]	; 0x74
 801971a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801971e:	1ad2      	subs	r2, r2, r3
 8019720:	e68b      	b.n	801943a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019724:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019726:	2b00      	cmp	r3, #0
 8019728:	f000 80d1 	beq.w	80198ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801972c:	ad19      	add	r5, sp, #100	; 0x64
 801972e:	ac39      	add	r4, sp, #228	; 0xe4
 8019730:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019732:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019736:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801973a:	930c      	str	r3, [sp, #48]	; 0x30
 801973c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801973e:	6963      	ldr	r3, [r4, #20]
 8019740:	440b      	add	r3, r1
 8019742:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019746:	4408      	add	r0, r1
 8019748:	b200      	sxth	r0, r0
 801974a:	4283      	cmp	r3, r0
 801974c:	900d      	str	r0, [sp, #52]	; 0x34
 801974e:	f280 80c1 	bge.w	80198d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019752:	428b      	cmp	r3, r1
 8019754:	da08      	bge.n	8019768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019756:	2a00      	cmp	r2, #0
 8019758:	dd06      	ble.n	8019768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801975a:	1acb      	subs	r3, r1, r3
 801975c:	429a      	cmp	r2, r3
 801975e:	f2c0 80bb 	blt.w	80198d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019762:	2b00      	cmp	r3, #0
 8019764:	f300 80b9 	bgt.w	80198da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019768:	6967      	ldr	r7, [r4, #20]
 801976a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801976e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019770:	443b      	add	r3, r7
 8019772:	461f      	mov	r7, r3
 8019774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019776:	1bdf      	subs	r7, r3, r7
 8019778:	4297      	cmp	r7, r2
 801977a:	bfa8      	it	ge
 801977c:	4617      	movge	r7, r2
 801977e:	2f00      	cmp	r7, #0
 8019780:	f340 813c 	ble.w	80199fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019784:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019786:	6829      	ldr	r1, [r5, #0]
 8019788:	f9b3 2000 	ldrsh.w	r2, [r3]
 801978c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019790:	4411      	add	r1, r2
 8019792:	6820      	ldr	r0, [r4, #0]
 8019794:	4299      	cmp	r1, r3
 8019796:	dd1a      	ble.n	80197ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019798:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801979c:	4402      	add	r2, r0
 801979e:	440b      	add	r3, r1
 80197a0:	b21b      	sxth	r3, r3
 80197a2:	429a      	cmp	r2, r3
 80197a4:	dc13      	bgt.n	80197ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80197a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80197a8:	a912      	add	r1, sp, #72	; 0x48
 80197aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	9206      	str	r2, [sp, #24]
 80197b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80197b4:	9500      	str	r5, [sp, #0]
 80197b6:	9205      	str	r2, [sp, #20]
 80197b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197ba:	e9cd b203 	strd	fp, r2, [sp, #12]
 80197be:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80197c0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80197c4:	aa49      	add	r2, sp, #292	; 0x124
 80197c6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80197ca:	4623      	mov	r3, r4
 80197cc:	47c8      	blx	r9
 80197ce:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80197d2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80197d6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80197da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80197de:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80197e2:	68a1      	ldr	r1, [r4, #8]
 80197e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80197e8:	ed94 6a08 	vldr	s12, [r4, #32]
 80197ec:	edd4 6a07 	vldr	s13, [r4, #28]
 80197f0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80197f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80197f8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80197fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019800:	edc4 6a07 	vstr	s13, [r4, #28]
 8019804:	441a      	add	r2, r3
 8019806:	6963      	ldr	r3, [r4, #20]
 8019808:	3301      	adds	r3, #1
 801980a:	6022      	str	r2, [r4, #0]
 801980c:	6163      	str	r3, [r4, #20]
 801980e:	69a3      	ldr	r3, [r4, #24]
 8019810:	3b01      	subs	r3, #1
 8019812:	61a3      	str	r3, [r4, #24]
 8019814:	6923      	ldr	r3, [r4, #16]
 8019816:	440b      	add	r3, r1
 8019818:	68e1      	ldr	r1, [r4, #12]
 801981a:	428b      	cmp	r3, r1
 801981c:	6123      	str	r3, [r4, #16]
 801981e:	db15      	blt.n	801984c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019820:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019824:	3201      	adds	r2, #1
 8019826:	1a5b      	subs	r3, r3, r1
 8019828:	ee76 6a26 	vadd.f32	s13, s12, s13
 801982c:	6022      	str	r2, [r4, #0]
 801982e:	6123      	str	r3, [r4, #16]
 8019830:	edc4 6a07 	vstr	s13, [r4, #28]
 8019834:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019838:	ee36 7a87 	vadd.f32	s14, s13, s14
 801983c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019840:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019848:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801984c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019850:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019854:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019858:	ee37 7a27 	vadd.f32	s14, s14, s15
 801985c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019860:	68a9      	ldr	r1, [r5, #8]
 8019862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019866:	ed95 6a08 	vldr	s12, [r5, #32]
 801986a:	edd5 6a07 	vldr	s13, [r5, #28]
 801986e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019872:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019876:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801987a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801987e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019882:	441a      	add	r2, r3
 8019884:	696b      	ldr	r3, [r5, #20]
 8019886:	3301      	adds	r3, #1
 8019888:	602a      	str	r2, [r5, #0]
 801988a:	616b      	str	r3, [r5, #20]
 801988c:	69ab      	ldr	r3, [r5, #24]
 801988e:	3b01      	subs	r3, #1
 8019890:	61ab      	str	r3, [r5, #24]
 8019892:	692b      	ldr	r3, [r5, #16]
 8019894:	440b      	add	r3, r1
 8019896:	68e9      	ldr	r1, [r5, #12]
 8019898:	428b      	cmp	r3, r1
 801989a:	612b      	str	r3, [r5, #16]
 801989c:	db15      	blt.n	80198ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801989e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80198a2:	3201      	adds	r2, #1
 80198a4:	1a5b      	subs	r3, r3, r1
 80198a6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80198aa:	602a      	str	r2, [r5, #0]
 80198ac:	612b      	str	r3, [r5, #16]
 80198ae:	edc5 6a07 	vstr	s13, [r5, #28]
 80198b2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80198b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80198ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80198be:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80198c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198c6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80198ca:	3f01      	subs	r7, #1
 80198cc:	e757      	b.n	801977e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80198ce:	ad39      	add	r5, sp, #228	; 0xe4
 80198d0:	ac19      	add	r4, sp, #100	; 0x64
 80198d2:	e72d      	b.n	8019730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80198d4:	4613      	mov	r3, r2
 80198d6:	e744      	b.n	8019762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80198d8:	4613      	mov	r3, r2
 80198da:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80198dc:	469e      	mov	lr, r3
 80198de:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80198e2:	461f      	mov	r7, r3
 80198e4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80198e8:	f04f 0900 	mov.w	r9, #0
 80198ec:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80198f0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80198f4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80198f8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80198fc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019900:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019902:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019906:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801990a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801990e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019912:	960e      	str	r6, [sp, #56]	; 0x38
 8019914:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019918:	2f00      	cmp	r7, #0
 801991a:	d146      	bne.n	80199aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801991c:	449c      	add	ip, r3
 801991e:	1ad7      	subs	r7, r2, r3
 8019920:	f1b9 0f00 	cmp.w	r9, #0
 8019924:	d009      	beq.n	801993a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019926:	9039      	str	r0, [sp, #228]	; 0xe4
 8019928:	913d      	str	r1, [sp, #244]	; 0xf4
 801992a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801992e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019932:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019936:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801993a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801993c:	f04f 0800 	mov.w	r8, #0
 8019940:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019944:	910e      	str	r1, [sp, #56]	; 0x38
 8019946:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801994a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801994e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019952:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019956:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801995a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801995e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019962:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019966:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801996a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801996e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019972:	f1be 0f00 	cmp.w	lr, #0
 8019976:	d030      	beq.n	80199da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019978:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801997a:	4450      	add	r0, sl
 801997c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019980:	4431      	add	r1, r6
 8019982:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019986:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801998a:	4549      	cmp	r1, r9
 801998c:	db08      	blt.n	80199a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801998e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019992:	3001      	adds	r0, #1
 8019994:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019998:	eba1 0109 	sub.w	r1, r1, r9
 801999c:	ee37 7a06 	vadd.f32	s14, s14, s12
 80199a0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80199a4:	f04f 0801 	mov.w	r8, #1
 80199a8:	e7e3      	b.n	8019972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80199aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80199ac:	4450      	add	r0, sl
 80199ae:	ee37 7a24 	vadd.f32	s14, s14, s9
 80199b2:	4431      	add	r1, r6
 80199b4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80199b8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80199bc:	4541      	cmp	r1, r8
 80199be:	db08      	blt.n	80199d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80199c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80199c4:	3001      	adds	r0, #1
 80199c6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80199ca:	eba1 0108 	sub.w	r1, r1, r8
 80199ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80199d2:	3f01      	subs	r7, #1
 80199d4:	f04f 0901 	mov.w	r9, #1
 80199d8:	e79e      	b.n	8019918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80199da:	449c      	add	ip, r3
 80199dc:	1aff      	subs	r7, r7, r3
 80199de:	f1b8 0f00 	cmp.w	r8, #0
 80199e2:	d009      	beq.n	80199f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80199e4:	9019      	str	r0, [sp, #100]	; 0x64
 80199e6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80199ea:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80199ee:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80199f2:	911d      	str	r1, [sp, #116]	; 0x74
 80199f4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80199f8:	1ad2      	subs	r2, r2, r3
 80199fa:	e6b5      	b.n	8019768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80199fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	b923      	cbnz	r3, 8019a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a02:	4b04      	ldr	r3, [pc, #16]	; (8019a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019a04:	6818      	ldr	r0, [r3, #0]
 8019a06:	6803      	ldr	r3, [r0, #0]
 8019a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a0a:	4798      	blx	r3
 8019a0c:	b05b      	add	sp, #364	; 0x16c
 8019a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a12:	bf00      	nop
 8019a14:	2402ae6c 	.word	0x2402ae6c

08019a18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8019a18:	b570      	push	{r4, r5, r6, lr}
 8019a1a:	4604      	mov	r4, r0
 8019a1c:	2500      	movs	r5, #0
 8019a1e:	9805      	ldr	r0, [sp, #20]
 8019a20:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8019a24:	6061      	str	r1, [r4, #4]
 8019a26:	8263      	strh	r3, [r4, #18]
 8019a28:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8019a2c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019a30:	8025      	strh	r5, [r4, #0]
 8019a32:	7221      	strb	r1, [r4, #8]
 8019a34:	7266      	strb	r6, [r4, #9]
 8019a36:	60e0      	str	r0, [r4, #12]
 8019a38:	8222      	strh	r2, [r4, #16]
 8019a3a:	82a3      	strh	r3, [r4, #20]
 8019a3c:	82e5      	strh	r5, [r4, #22]
 8019a3e:	8325      	strh	r5, [r4, #24]
 8019a40:	8365      	strh	r5, [r4, #26]
 8019a42:	83a5      	strh	r5, [r4, #28]
 8019a44:	83e5      	strh	r5, [r4, #30]
 8019a46:	8425      	strh	r5, [r4, #32]
 8019a48:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8019a4c:	b32e      	cbz	r6, 8019a9a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019a4e:	6803      	ldr	r3, [r0, #0]
 8019a50:	695b      	ldr	r3, [r3, #20]
 8019a52:	4798      	blx	r3
 8019a54:	4606      	mov	r6, r0
 8019a56:	b300      	cbz	r0, 8019a9a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019a58:	68e0      	ldr	r0, [r4, #12]
 8019a5a:	4631      	mov	r1, r6
 8019a5c:	6803      	ldr	r3, [r0, #0]
 8019a5e:	68db      	ldr	r3, [r3, #12]
 8019a60:	4798      	blx	r3
 8019a62:	4605      	mov	r5, r0
 8019a64:	b1c8      	cbz	r0, 8019a9a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019a66:	7b43      	ldrb	r3, [r0, #13]
 8019a68:	7a82      	ldrb	r2, [r0, #10]
 8019a6a:	005b      	lsls	r3, r3, #1
 8019a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a70:	4313      	orrs	r3, r2
 8019a72:	8423      	strh	r3, [r4, #32]
 8019a74:	7a63      	ldrb	r3, [r4, #9]
 8019a76:	2b06      	cmp	r3, #6
 8019a78:	d10f      	bne.n	8019a9a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019a7a:	68e0      	ldr	r0, [r4, #12]
 8019a7c:	462a      	mov	r2, r5
 8019a7e:	4631      	mov	r1, r6
 8019a80:	6803      	ldr	r3, [r0, #0]
 8019a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a84:	4798      	blx	r3
 8019a86:	7b6b      	ldrb	r3, [r5, #13]
 8019a88:	005b      	lsls	r3, r3, #1
 8019a8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019a8e:	7aab      	ldrb	r3, [r5, #10]
 8019a90:	4313      	orrs	r3, r2
 8019a92:	4418      	add	r0, r3
 8019a94:	8c23      	ldrh	r3, [r4, #32]
 8019a96:	4418      	add	r0, r3
 8019a98:	8420      	strh	r0, [r4, #32]
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	bd70      	pop	{r4, r5, r6, pc}

08019a9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa2:	2400      	movs	r4, #0
 8019aa4:	b085      	sub	sp, #20
 8019aa6:	4681      	mov	r9, r0
 8019aa8:	4688      	mov	r8, r1
 8019aaa:	4692      	mov	sl, r2
 8019aac:	469b      	mov	fp, r3
 8019aae:	4627      	mov	r7, r4
 8019ab0:	4625      	mov	r5, r4
 8019ab2:	4626      	mov	r6, r4
 8019ab4:	4554      	cmp	r4, sl
 8019ab6:	da2a      	bge.n	8019b0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ab8:	2300      	movs	r3, #0
 8019aba:	9303      	str	r3, [sp, #12]
 8019abc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ac0:	429d      	cmp	r5, r3
 8019ac2:	d004      	beq.n	8019ace <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019ac4:	f242 030b 	movw	r3, #8203	; 0x200b
 8019ac8:	429d      	cmp	r5, r3
 8019aca:	bf18      	it	ne
 8019acc:	462f      	movne	r7, r5
 8019ace:	ab03      	add	r3, sp, #12
 8019ad0:	4642      	mov	r2, r8
 8019ad2:	4659      	mov	r1, fp
 8019ad4:	4648      	mov	r0, r9
 8019ad6:	f003 f8bf 	bl	801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ada:	4605      	mov	r5, r0
 8019adc:	b1b8      	cbz	r0, 8019b0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ade:	280a      	cmp	r0, #10
 8019ae0:	d015      	beq.n	8019b0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ae2:	9a03      	ldr	r2, [sp, #12]
 8019ae4:	b18a      	cbz	r2, 8019b0a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019ae6:	7b50      	ldrb	r0, [r2, #13]
 8019ae8:	4639      	mov	r1, r7
 8019aea:	7a93      	ldrb	r3, [r2, #10]
 8019aec:	0040      	lsls	r0, r0, #1
 8019aee:	8895      	ldrh	r5, [r2, #4]
 8019af0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019af4:	4303      	orrs	r3, r0
 8019af6:	4640      	mov	r0, r8
 8019af8:	9301      	str	r3, [sp, #4]
 8019afa:	f8d8 3000 	ldr.w	r3, [r8]
 8019afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b00:	4798      	blx	r3
 8019b02:	9b01      	ldr	r3, [sp, #4]
 8019b04:	4418      	add	r0, r3
 8019b06:	4406      	add	r6, r0
 8019b08:	b2b6      	uxth	r6, r6
 8019b0a:	3401      	adds	r4, #1
 8019b0c:	e7d2      	b.n	8019ab4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019b0e:	4630      	mov	r0, r6
 8019b10:	b005      	add	sp, #20
 8019b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019b16:	2a02      	cmp	r2, #2
 8019b18:	b530      	push	{r4, r5, lr}
 8019b1a:	d011      	beq.n	8019b40 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019b1c:	2a03      	cmp	r2, #3
 8019b1e:	d01c      	beq.n	8019b5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019b20:	2a01      	cmp	r2, #1
 8019b22:	d10c      	bne.n	8019b3e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019b24:	888b      	ldrh	r3, [r1, #4]
 8019b26:	8801      	ldrh	r1, [r0, #0]
 8019b28:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019b2c:	1a5b      	subs	r3, r3, r1
 8019b2e:	8844      	ldrh	r4, [r0, #2]
 8019b30:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019b34:	1a9b      	subs	r3, r3, r2
 8019b36:	8004      	strh	r4, [r0, #0]
 8019b38:	8081      	strh	r1, [r0, #4]
 8019b3a:	8043      	strh	r3, [r0, #2]
 8019b3c:	80c2      	strh	r2, [r0, #6]
 8019b3e:	bd30      	pop	{r4, r5, pc}
 8019b40:	88cb      	ldrh	r3, [r1, #6]
 8019b42:	8842      	ldrh	r2, [r0, #2]
 8019b44:	1a9b      	subs	r3, r3, r2
 8019b46:	88c2      	ldrh	r2, [r0, #6]
 8019b48:	1a9b      	subs	r3, r3, r2
 8019b4a:	888a      	ldrh	r2, [r1, #4]
 8019b4c:	8801      	ldrh	r1, [r0, #0]
 8019b4e:	8043      	strh	r3, [r0, #2]
 8019b50:	1a52      	subs	r2, r2, r1
 8019b52:	8881      	ldrh	r1, [r0, #4]
 8019b54:	1a52      	subs	r2, r2, r1
 8019b56:	8002      	strh	r2, [r0, #0]
 8019b58:	e7f1      	b.n	8019b3e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019b5a:	88cb      	ldrh	r3, [r1, #6]
 8019b5c:	8841      	ldrh	r1, [r0, #2]
 8019b5e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019b62:	1a5b      	subs	r3, r3, r1
 8019b64:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019b68:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019b6c:	1a9b      	subs	r3, r3, r2
 8019b6e:	8045      	strh	r5, [r0, #2]
 8019b70:	8082      	strh	r2, [r0, #4]
 8019b72:	8003      	strh	r3, [r0, #0]
 8019b74:	80c4      	strh	r4, [r0, #6]
 8019b76:	e7e2      	b.n	8019b3e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b7c:	b09f      	sub	sp, #124	; 0x7c
 8019b7e:	9116      	str	r1, [sp, #88]	; 0x58
 8019b80:	9317      	str	r3, [sp, #92]	; 0x5c
 8019b82:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019b84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019b86:	8809      	ldrh	r1, [r1, #0]
 8019b88:	889b      	ldrh	r3, [r3, #4]
 8019b8a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019b8e:	440b      	add	r3, r1
 8019b90:	9212      	str	r2, [sp, #72]	; 0x48
 8019b92:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019b96:	b21b      	sxth	r3, r3
 8019b98:	9011      	str	r0, [sp, #68]	; 0x44
 8019b9a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8019ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8019ba4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8019ba8:	7b19      	ldrb	r1, [r3, #12]
 8019baa:	7adb      	ldrb	r3, [r3, #11]
 8019bac:	9114      	str	r1, [sp, #80]	; 0x50
 8019bae:	9315      	str	r3, [sp, #84]	; 0x54
 8019bb0:	2a00      	cmp	r2, #0
 8019bb2:	d06a      	beq.n	8019c8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019bb4:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019bb8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019bba:	2b06      	cmp	r3, #6
 8019bbc:	bf14      	ite	ne
 8019bbe:	2301      	movne	r3, #1
 8019bc0:	2302      	moveq	r3, #2
 8019bc2:	4413      	add	r3, r2
 8019bc4:	f04f 0900 	mov.w	r9, #0
 8019bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019bca:	464c      	mov	r4, r9
 8019bcc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019bd0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019bd4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019bd8:	4293      	cmp	r3, r2
 8019bda:	f280 808f 	bge.w	8019cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019bde:	2300      	movs	r3, #0
 8019be0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8019be4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8019be8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019bec:	429c      	cmp	r4, r3
 8019bee:	d006      	beq.n	8019bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8019bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bf2:	f242 020b 	movw	r2, #8203	; 0x200b
 8019bf6:	4294      	cmp	r4, r2
 8019bf8:	bf18      	it	ne
 8019bfa:	4623      	movne	r3, r4
 8019bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8019bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c00:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019c02:	f8d8 2000 	ldr.w	r2, [r8]
 8019c06:	428b      	cmp	r3, r1
 8019c08:	db41      	blt.n	8019c8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8019c0a:	6813      	ldr	r3, [r2, #0]
 8019c0c:	4610      	mov	r0, r2
 8019c0e:	695b      	ldr	r3, [r3, #20]
 8019c10:	4798      	blx	r3
 8019c12:	4604      	mov	r4, r0
 8019c14:	f8d8 0000 	ldr.w	r0, [r8]
 8019c18:	aa1d      	add	r2, sp, #116	; 0x74
 8019c1a:	4621      	mov	r1, r4
 8019c1c:	6803      	ldr	r3, [r0, #0]
 8019c1e:	689d      	ldr	r5, [r3, #8]
 8019c20:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019c24:	47a8      	blx	r5
 8019c26:	901c      	str	r0, [sp, #112]	; 0x70
 8019c28:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019c2c:	429c      	cmp	r4, r3
 8019c2e:	f000 80ec 	beq.w	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019c32:	f242 030b 	movw	r3, #8203	; 0x200b
 8019c36:	429c      	cmp	r4, r3
 8019c38:	f000 80e7 	beq.w	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019c3c:	2c00      	cmp	r4, #0
 8019c3e:	f000 80f9 	beq.w	8019e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019c42:	2c0a      	cmp	r4, #10
 8019c44:	d060      	beq.n	8019d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019c46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019c48:	b36a      	cbz	r2, 8019ca6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019c4a:	8894      	ldrh	r4, [r2, #4]
 8019c4c:	f1bb 0f00 	cmp.w	fp, #0
 8019c50:	d03b      	beq.n	8019cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019c52:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019c56:	f1bb 0f01 	cmp.w	fp, #1
 8019c5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019c5e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019c62:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019c66:	ea49 0903 	orr.w	r9, r9, r3
 8019c6a:	d134      	bne.n	8019cd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8019c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c6e:	eba6 0609 	sub.w	r6, r6, r9
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d14f      	bne.n	8019d16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019c76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c78:	eb09 0306 	add.w	r3, r9, r6
 8019c7c:	4413      	add	r3, r2
 8019c7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019c80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c84:	4293      	cmp	r3, r2
 8019c86:	da51      	bge.n	8019d2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019c88:	e038      	b.n	8019cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019c8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019c8c:	e79a      	b.n	8019bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8019c8e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019c92:	4659      	mov	r1, fp
 8019c94:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019c96:	9301      	str	r3, [sp, #4]
 8019c98:	ab1d      	add	r3, sp, #116	; 0x74
 8019c9a:	9300      	str	r3, [sp, #0]
 8019c9c:	ab1c      	add	r3, sp, #112	; 0x70
 8019c9e:	f003 f824 	bl	801ccea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	e7c0      	b.n	8019c28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019ca6:	f8d8 0000 	ldr.w	r0, [r8]
 8019caa:	6803      	ldr	r3, [r0, #0]
 8019cac:	691b      	ldr	r3, [r3, #16]
 8019cae:	4798      	blx	r3
 8019cb0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019cb4:	4298      	cmp	r0, r3
 8019cb6:	f000 80a8 	beq.w	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019cba:	f242 030b 	movw	r3, #8203	; 0x200b
 8019cbe:	4298      	cmp	r0, r3
 8019cc0:	f000 80a3 	beq.w	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019cc4:	f1bb 0f00 	cmp.w	fp, #0
 8019cc8:	d100      	bne.n	8019ccc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019cca:	444e      	add	r6, r9
 8019ccc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019cce:	2a00      	cmp	r2, #0
 8019cd0:	d1bf      	bne.n	8019c52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019cd2:	4691      	mov	r9, r2
 8019cd4:	e099      	b.n	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	f000 80ad 	beq.w	8019e38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8019cde:	f1bb 0f00 	cmp.w	fp, #0
 8019ce2:	d118      	bne.n	8019d16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019ce4:	f8d8 0000 	ldr.w	r0, [r8]
 8019ce8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019cea:	6803      	ldr	r3, [r0, #0]
 8019cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cee:	4798      	blx	r3
 8019cf0:	4406      	add	r6, r0
 8019cf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019cf6:	1af3      	subs	r3, r6, r3
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	dd17      	ble.n	8019d2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019cfc:	2c00      	cmp	r4, #0
 8019cfe:	f000 8099 	beq.w	8019e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019d02:	2c0a      	cmp	r4, #10
 8019d04:	f040 8087 	bne.w	8019e16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8019d08:	240a      	movs	r4, #10
 8019d0a:	fab4 f084 	clz	r0, r4
 8019d0e:	0940      	lsrs	r0, r0, #5
 8019d10:	b01f      	add	sp, #124	; 0x7c
 8019d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d16:	f8d8 0000 	ldr.w	r0, [r8]
 8019d1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019d1c:	6803      	ldr	r3, [r0, #0]
 8019d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d20:	4798      	blx	r3
 8019d22:	f1bb 0f01 	cmp.w	fp, #1
 8019d26:	eba6 0600 	sub.w	r6, r6, r0
 8019d2a:	d0a4      	beq.n	8019c76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019d2c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019d2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d30:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019d34:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019d38:	7b43      	ldrb	r3, [r0, #13]
 8019d3a:	4431      	add	r1, r6
 8019d3c:	015b      	lsls	r3, r3, #5
 8019d3e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019d42:	7983      	ldrb	r3, [r0, #6]
 8019d44:	4313      	orrs	r3, r2
 8019d46:	440b      	add	r3, r1
 8019d48:	42bb      	cmp	r3, r7
 8019d4a:	db5e      	blt.n	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d4e:	4299      	cmp	r1, r3
 8019d50:	da5b      	bge.n	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019d52:	f8d8 0000 	ldr.w	r0, [r8]
 8019d56:	42b7      	cmp	r7, r6
 8019d58:	6803      	ldr	r3, [r0, #0]
 8019d5a:	bfcc      	ite	gt
 8019d5c:	1bbf      	subgt	r7, r7, r6
 8019d5e:	2700      	movle	r7, #0
 8019d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d62:	bfc8      	it	gt
 8019d64:	b2bf      	uxthgt	r7, r7
 8019d66:	4798      	blx	r3
 8019d68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019d6a:	7b5a      	ldrb	r2, [r3, #13]
 8019d6c:	00d1      	lsls	r1, r2, #3
 8019d6e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8019d72:	7a19      	ldrb	r1, [r3, #8]
 8019d74:	4329      	orrs	r1, r5
 8019d76:	0655      	lsls	r5, r2, #25
 8019d78:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019d7a:	bf48      	it	mi
 8019d7c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019d80:	4405      	add	r5, r0
 8019d82:	bf48      	it	mi
 8019d84:	b209      	sxthmi	r1, r1
 8019d86:	1a6d      	subs	r5, r5, r1
 8019d88:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019d8a:	b2ad      	uxth	r5, r5
 8019d8c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019d90:	fa0f fa85 	sxth.w	sl, r5
 8019d94:	4551      	cmp	r1, sl
 8019d96:	dd3c      	ble.n	8019e12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019d98:	0112      	lsls	r2, r2, #4
 8019d9a:	79d8      	ldrb	r0, [r3, #7]
 8019d9c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019da0:	4302      	orrs	r2, r0
 8019da2:	4492      	add	sl, r2
 8019da4:	4551      	cmp	r1, sl
 8019da6:	dc30      	bgt.n	8019e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019da8:	1b4d      	subs	r5, r1, r5
 8019daa:	468a      	mov	sl, r1
 8019dac:	b22d      	sxth	r5, r5
 8019dae:	9319      	str	r3, [sp, #100]	; 0x64
 8019db0:	b2ad      	uxth	r5, r5
 8019db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019db4:	f8d8 0000 	ldr.w	r0, [r8]
 8019db8:	681a      	ldr	r2, [r3, #0]
 8019dba:	6801      	ldr	r1, [r0, #0]
 8019dbc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8019dbe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019dc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8019dc2:	9218      	str	r2, [sp, #96]	; 0x60
 8019dc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019dc6:	4788      	blx	r1
 8019dc8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019dce:	910b      	str	r1, [sp, #44]	; 0x2c
 8019dd0:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019dd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019dd6:	910a      	str	r1, [sp, #40]	; 0x28
 8019dd8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8019dde:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019de2:	9305      	str	r3, [sp, #20]
 8019de4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019de6:	9206      	str	r2, [sp, #24]
 8019de8:	9304      	str	r3, [sp, #16]
 8019dea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019dec:	f8cd a004 	str.w	sl, [sp, #4]
 8019df0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8019df4:	4437      	add	r7, r6
 8019df6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019df8:	b23f      	sxth	r7, r7
 8019dfa:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019dfe:	9700      	str	r7, [sp, #0]
 8019e00:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019e02:	681a      	ldr	r2, [r3, #0]
 8019e04:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	47a8      	blx	r5
 8019e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e0c:	3301      	adds	r3, #1
 8019e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8019e10:	e6e0      	b.n	8019bd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8019e12:	2500      	movs	r5, #0
 8019e14:	e7cb      	b.n	8019dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8019e16:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019e18:	3501      	adds	r5, #1
 8019e1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019e1c:	429d      	cmp	r5, r3
 8019e1e:	f6bf af74 	bge.w	8019d0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019e22:	4659      	mov	r1, fp
 8019e24:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019e26:	f7ef fc81 	bl	800972c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019e2a:	4604      	mov	r4, r0
 8019e2c:	b110      	cbz	r0, 8019e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019e2e:	280a      	cmp	r0, #10
 8019e30:	d1f2      	bne.n	8019e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8019e32:	e769      	b.n	8019d08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019e34:	2400      	movs	r4, #0
 8019e36:	e768      	b.n	8019d0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019e38:	f1bb 0f00 	cmp.w	fp, #0
 8019e3c:	f43f af59 	beq.w	8019cf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8019e40:	e774      	b.n	8019d2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08019e42 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019e42:	b530      	push	{r4, r5, lr}
 8019e44:	8ac4      	ldrh	r4, [r0, #22]
 8019e46:	8b45      	ldrh	r5, [r0, #26]
 8019e48:	8343      	strh	r3, [r0, #26]
 8019e4a:	442c      	add	r4, r5
 8019e4c:	1ae4      	subs	r4, r4, r3
 8019e4e:	8b83      	ldrh	r3, [r0, #28]
 8019e50:	82c4      	strh	r4, [r0, #22]
 8019e52:	8b04      	ldrh	r4, [r0, #24]
 8019e54:	4422      	add	r2, r4
 8019e56:	440c      	add	r4, r1
 8019e58:	1a59      	subs	r1, r3, r1
 8019e5a:	83c2      	strh	r2, [r0, #30]
 8019e5c:	8304      	strh	r4, [r0, #24]
 8019e5e:	8381      	strh	r1, [r0, #28]
 8019e60:	bd30      	pop	{r4, r5, pc}

08019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8019e62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e66:	4604      	mov	r4, r0
 8019e68:	8a47      	ldrh	r7, [r0, #18]
 8019e6a:	68c0      	ldr	r0, [r0, #12]
 8019e6c:	b085      	sub	sp, #20
 8019e6e:	6803      	ldr	r3, [r0, #0]
 8019e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e72:	4798      	blx	r3
 8019e74:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8019e78:	7a63      	ldrb	r3, [r4, #9]
 8019e7a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8019e7e:	3b01      	subs	r3, #1
 8019e80:	42b7      	cmp	r7, r6
 8019e82:	bfac      	ite	ge
 8019e84:	f04f 0900 	movge.w	r9, #0
 8019e88:	f04f 0901 	movlt.w	r9, #1
 8019e8c:	2b05      	cmp	r3, #5
 8019e8e:	d804      	bhi.n	8019e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8019e90:	e8df f003 	tbb	[pc, r3]
 8019e94:	470f0854 	.word	0x470f0854
 8019e98:	4c4c      	.short	0x4c4c
 8019e9a:	2500      	movs	r5, #0
 8019e9c:	46a9      	mov	r9, r5
 8019e9e:	462e      	mov	r6, r5
 8019ea0:	462f      	mov	r7, r5
 8019ea2:	e00e      	b.n	8019ec2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019ea4:	42b7      	cmp	r7, r6
 8019ea6:	f04f 0500 	mov.w	r5, #0
 8019eaa:	bfb4      	ite	lt
 8019eac:	2600      	movlt	r6, #0
 8019eae:	2601      	movge	r6, #1
 8019eb0:	e7f6      	b.n	8019ea0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8019eb2:	42b7      	cmp	r7, r6
 8019eb4:	464d      	mov	r5, r9
 8019eb6:	f04f 0900 	mov.w	r9, #0
 8019eba:	bfb4      	ite	lt
 8019ebc:	2600      	movlt	r6, #0
 8019ebe:	2601      	movge	r6, #1
 8019ec0:	464f      	mov	r7, r9
 8019ec2:	f04f 0800 	mov.w	r8, #0
 8019ec6:	f8a4 8016 	strh.w	r8, [r4, #22]
 8019eca:	f8a4 8018 	strh.w	r8, [r4, #24]
 8019ece:	f8cd 8004 	str.w	r8, [sp, #4]
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	9303      	str	r3, [sp, #12]
 8019ed6:	8823      	ldrh	r3, [r4, #0]
 8019ed8:	2b20      	cmp	r3, #32
 8019eda:	d033      	beq.n	8019f44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8019edc:	f242 010b 	movw	r1, #8203	; 0x200b
 8019ee0:	1a5a      	subs	r2, r3, r1
 8019ee2:	f1d2 0a00 	rsbs	sl, r2, #0
 8019ee6:	eb4a 0a02 	adc.w	sl, sl, r2
 8019eea:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019eee:	4293      	cmp	r3, r2
 8019ef0:	d008      	beq.n	8019f04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019ef2:	428b      	cmp	r3, r1
 8019ef4:	9a01      	ldr	r2, [sp, #4]
 8019ef6:	bf0e      	itee	eq
 8019ef8:	f04f 0a01 	moveq.w	sl, #1
 8019efc:	461a      	movne	r2, r3
 8019efe:	f04f 0a00 	movne.w	sl, #0
 8019f02:	9201      	str	r2, [sp, #4]
 8019f04:	ab03      	add	r3, sp, #12
 8019f06:	68e2      	ldr	r2, [r4, #12]
 8019f08:	7a21      	ldrb	r1, [r4, #8]
 8019f0a:	6860      	ldr	r0, [r4, #4]
 8019f0c:	f002 fea4 	bl	801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019f10:	8020      	strh	r0, [r4, #0]
 8019f12:	b9d8      	cbnz	r0, 8019f4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8019f14:	8ba2      	ldrh	r2, [r4, #28]
 8019f16:	2300      	movs	r3, #0
 8019f18:	4611      	mov	r1, r2
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	f7ff ff91 	bl	8019e42 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019f20:	e06e      	b.n	801a000 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8019f22:	2500      	movs	r5, #0
 8019f24:	2701      	movs	r7, #1
 8019f26:	46a9      	mov	r9, r5
 8019f28:	462e      	mov	r6, r5
 8019f2a:	e7ca      	b.n	8019ec2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019f2c:	42b7      	cmp	r7, r6
 8019f2e:	f04f 0500 	mov.w	r5, #0
 8019f32:	bfb4      	ite	lt
 8019f34:	2700      	movlt	r7, #0
 8019f36:	2701      	movge	r7, #1
 8019f38:	462e      	mov	r6, r5
 8019f3a:	e7c2      	b.n	8019ec2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019f3c:	2500      	movs	r5, #0
 8019f3e:	2601      	movs	r6, #1
 8019f40:	46a9      	mov	r9, r5
 8019f42:	e7ad      	b.n	8019ea0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8019f44:	9301      	str	r3, [sp, #4]
 8019f46:	f04f 0a01 	mov.w	sl, #1
 8019f4a:	e7db      	b.n	8019f04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019f4c:	8b63      	ldrh	r3, [r4, #26]
 8019f4e:	280a      	cmp	r0, #10
 8019f50:	f103 0301 	add.w	r3, r3, #1
 8019f54:	8363      	strh	r3, [r4, #26]
 8019f56:	d0dd      	beq.n	8019f14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8019f58:	9a03      	ldr	r2, [sp, #12]
 8019f5a:	bb62      	cbnz	r2, 8019fb6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8019f5c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019f60:	4298      	cmp	r0, r3
 8019f62:	d003      	beq.n	8019f6c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8019f64:	f242 030b 	movw	r3, #8203	; 0x200b
 8019f68:	4298      	cmp	r0, r3
 8019f6a:	d1b2      	bne.n	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f6c:	8823      	ldrh	r3, [r4, #0]
 8019f6e:	8ba1      	ldrh	r1, [r4, #28]
 8019f70:	2b20      	cmp	r3, #32
 8019f72:	d003      	beq.n	8019f7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8019f74:	f242 000b 	movw	r0, #8203	; 0x200b
 8019f78:	4283      	cmp	r3, r0
 8019f7a:	d131      	bne.n	8019fe0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8019f7c:	f1ba 0f00 	cmp.w	sl, #0
 8019f80:	bf0a      	itet	eq
 8019f82:	4688      	moveq	r8, r1
 8019f84:	4650      	movne	r0, sl
 8019f86:	2001      	moveq	r0, #1
 8019f88:	440a      	add	r2, r1
 8019f8a:	8b23      	ldrh	r3, [r4, #24]
 8019f8c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019f90:	b292      	uxth	r2, r2
 8019f92:	83a2      	strh	r2, [r4, #28]
 8019f94:	4413      	add	r3, r2
 8019f96:	f1b9 0f00 	cmp.w	r9, #0
 8019f9a:	d102      	bne.n	8019fa2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8019f9c:	2d00      	cmp	r5, #0
 8019f9e:	d042      	beq.n	801a026 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8019fa0:	b300      	cbz	r0, 8019fe4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8019fa2:	8c21      	ldrh	r1, [r4, #32]
 8019fa4:	4419      	add	r1, r3
 8019fa6:	458c      	cmp	ip, r1
 8019fa8:	da37      	bge.n	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8019faa:	8ae1      	ldrh	r1, [r4, #22]
 8019fac:	2900      	cmp	r1, #0
 8019fae:	d034      	beq.n	801a01a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8019fb0:	4563      	cmp	r3, ip
 8019fb2:	dd8e      	ble.n	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019fb4:	e01d      	b.n	8019ff2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8019fb6:	8893      	ldrh	r3, [r2, #4]
 8019fb8:	9901      	ldr	r1, [sp, #4]
 8019fba:	8023      	strh	r3, [r4, #0]
 8019fbc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8019fc0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019fc4:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8019fc8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8019fcc:	ea4b 0b00 	orr.w	fp, fp, r0
 8019fd0:	68e0      	ldr	r0, [r4, #12]
 8019fd2:	6803      	ldr	r3, [r0, #0]
 8019fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fd6:	4798      	blx	r3
 8019fd8:	eb0b 0200 	add.w	r2, fp, r0
 8019fdc:	b292      	uxth	r2, r2
 8019fde:	e7c5      	b.n	8019f6c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8019fe0:	2000      	movs	r0, #0
 8019fe2:	e7d1      	b.n	8019f88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8019fe4:	4563      	cmp	r3, ip
 8019fe6:	f77f af74 	ble.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019fea:	8ae3      	ldrh	r3, [r4, #22]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	f43f af70 	beq.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019ff2:	2301      	movs	r3, #1
 8019ff4:	8c22      	ldrh	r2, [r4, #32]
 8019ff6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8019ffa:	8be3      	ldrh	r3, [r4, #30]
 8019ffc:	4413      	add	r3, r2
 8019ffe:	83e3      	strh	r3, [r4, #30]
 801a000:	68e0      	ldr	r0, [r4, #12]
 801a002:	6803      	ldr	r3, [r0, #0]
 801a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a006:	4798      	blx	r3
 801a008:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a00c:	4418      	add	r0, r3
 801a00e:	8a63      	ldrh	r3, [r4, #18]
 801a010:	1a18      	subs	r0, r3, r0
 801a012:	8260      	strh	r0, [r4, #18]
 801a014:	b005      	add	sp, #20
 801a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01a:	2300      	movs	r3, #0
 801a01c:	4611      	mov	r1, r2
 801a01e:	4620      	mov	r0, r4
 801a020:	f7ff ff0f 	bl	8019e42 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a024:	e755      	b.n	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a026:	4563      	cmp	r3, ip
 801a028:	dd14      	ble.n	801a054 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a02a:	b117      	cbz	r7, 801a032 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a02c:	2301      	movs	r3, #1
 801a02e:	460a      	mov	r2, r1
 801a030:	e772      	b.n	8019f18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a032:	2e00      	cmp	r6, #0
 801a034:	f43f af4d 	beq.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a038:	2800      	cmp	r0, #0
 801a03a:	f47f af4a 	bne.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a03e:	f1ba 0f00 	cmp.w	sl, #0
 801a042:	d002      	beq.n	801a04a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a044:	2301      	movs	r3, #1
 801a046:	4642      	mov	r2, r8
 801a048:	e767      	b.n	8019f1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a04a:	8ae3      	ldrh	r3, [r4, #22]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	f43f af40 	beq.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a052:	e7d5      	b.n	801a000 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a054:	2800      	cmp	r0, #0
 801a056:	f47f af3c 	bne.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a05a:	f1ba 0f00 	cmp.w	sl, #0
 801a05e:	f43f af38 	beq.w	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a062:	2301      	movs	r3, #1
 801a064:	4642      	mov	r2, r8
 801a066:	e7da      	b.n	801a01e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a068 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a06a:	4605      	mov	r5, r0
 801a06c:	b08f      	sub	sp, #60	; 0x3c
 801a06e:	4617      	mov	r7, r2
 801a070:	461c      	mov	r4, r3
 801a072:	460e      	mov	r6, r1
 801a074:	b1d1      	cbz	r1, 801a0ac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4620      	mov	r0, r4
 801a07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a07c:	4798      	blx	r3
 801a07e:	4240      	negs	r0, r0
 801a080:	9603      	str	r6, [sp, #12]
 801a082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a086:	b200      	sxth	r0, r0
 801a088:	9700      	str	r7, [sp, #0]
 801a08a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a08e:	4629      	mov	r1, r5
 801a090:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a094:	2401      	movs	r4, #1
 801a096:	a805      	add	r0, sp, #20
 801a098:	f7ff fcbe 	bl	8019a18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a09c:	a805      	add	r0, sp, #20
 801a09e:	f7ff fee0 	bl	8019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a0a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a0a6:	b163      	cbz	r3, 801a0c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a0a8:	3401      	adds	r4, #1
 801a0aa:	e7f7      	b.n	801a09c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a0ac:	2401      	movs	r4, #1
 801a0ae:	f002 fe9f 	bl	801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0b2:	280a      	cmp	r0, #10
 801a0b4:	4628      	mov	r0, r5
 801a0b6:	bf08      	it	eq
 801a0b8:	3401      	addeq	r4, #1
 801a0ba:	f002 fe99 	bl	801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a0be:	2800      	cmp	r0, #0
 801a0c0:	d1f7      	bne.n	801a0b2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a0c2:	b2a0      	uxth	r0, r4
 801a0c4:	b00f      	add	sp, #60	; 0x3c
 801a0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a0c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0cc:	b0e3      	sub	sp, #396	; 0x18c
 801a0ce:	461c      	mov	r4, r3
 801a0d0:	4683      	mov	fp, r0
 801a0d2:	4688      	mov	r8, r1
 801a0d4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	f000 8112 	beq.w	801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a0dc:	6823      	ldr	r3, [r4, #0]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f000 810e 	beq.w	801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a0e4:	7ba3      	ldrb	r3, [r4, #14]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f000 810a 	beq.w	801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a0ec:	ad0a      	add	r5, sp, #40	; 0x28
 801a0ee:	6810      	ldr	r0, [r2, #0]
 801a0f0:	6851      	ldr	r1, [r2, #4]
 801a0f2:	462b      	mov	r3, r5
 801a0f4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a0f8:	c303      	stmia	r3!, {r0, r1}
 801a0fa:	2100      	movs	r1, #0
 801a0fc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a100:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a104:	4628      	mov	r0, r5
 801a106:	910c      	str	r1, [sp, #48]	; 0x30
 801a108:	a90c      	add	r1, sp, #48	; 0x30
 801a10a:	79a2      	ldrb	r2, [r4, #6]
 801a10c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a110:	f7ff fd01 	bl	8019b16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a114:	a90c      	add	r1, sp, #48	; 0x30
 801a116:	79a2      	ldrb	r2, [r4, #6]
 801a118:	4608      	mov	r0, r1
 801a11a:	f7ff fcfc 	bl	8019b16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a11e:	a817      	add	r0, sp, #92	; 0x5c
 801a120:	f002 fa39 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 801a124:	6820      	ldr	r0, [r4, #0]
 801a126:	6803      	ldr	r3, [r0, #0]
 801a128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a12a:	4798      	blx	r3
 801a12c:	4606      	mov	r6, r0
 801a12e:	6820      	ldr	r0, [r4, #0]
 801a130:	6803      	ldr	r3, [r0, #0]
 801a132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a134:	4798      	blx	r3
 801a136:	4633      	mov	r3, r6
 801a138:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801a13a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801a13c:	9000      	str	r0, [sp, #0]
 801a13e:	a817      	add	r0, sp, #92	; 0x5c
 801a140:	f002 fa84 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a144:	6820      	ldr	r0, [r4, #0]
 801a146:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a14a:	6803      	ldr	r3, [r0, #0]
 801a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a14e:	4798      	blx	r3
 801a150:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a154:	6823      	ldr	r3, [r4, #0]
 801a156:	4607      	mov	r7, r0
 801a158:	4406      	add	r6, r0
 801a15a:	a830      	add	r0, sp, #192	; 0xc0
 801a15c:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a160:	f002 fa19 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 801a164:	7c23      	ldrb	r3, [r4, #16]
 801a166:	b17b      	cbz	r3, 801a188 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a168:	6820      	ldr	r0, [r4, #0]
 801a16a:	6803      	ldr	r3, [r0, #0]
 801a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a16e:	4798      	blx	r3
 801a170:	9009      	str	r0, [sp, #36]	; 0x24
 801a172:	6820      	ldr	r0, [r4, #0]
 801a174:	6802      	ldr	r2, [r0, #0]
 801a176:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a178:	4790      	blx	r2
 801a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a17c:	9000      	str	r0, [sp, #0]
 801a17e:	a830      	add	r0, sp, #192	; 0xc0
 801a180:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801a182:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801a184:	f002 fa62 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a188:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a18c:	a80e      	add	r0, sp, #56	; 0x38
 801a18e:	7be2      	ldrb	r2, [r4, #15]
 801a190:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a194:	1a8a      	subs	r2, r1, r2
 801a196:	7c21      	ldrb	r1, [r4, #16]
 801a198:	9103      	str	r1, [sp, #12]
 801a19a:	b292      	uxth	r2, r2
 801a19c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a1a0:	9102      	str	r1, [sp, #8]
 801a1a2:	6821      	ldr	r1, [r4, #0]
 801a1a4:	9101      	str	r1, [sp, #4]
 801a1a6:	7961      	ldrb	r1, [r4, #5]
 801a1a8:	9100      	str	r1, [sp, #0]
 801a1aa:	a930      	add	r1, sp, #192	; 0xc0
 801a1ac:	f7ff fc34 	bl	8019a18 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a1b0:	2e00      	cmp	r6, #0
 801a1b2:	dc5b      	bgt.n	801a26c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a1b4:	af17      	add	r7, sp, #92	; 0x5c
 801a1b6:	f04f 0900 	mov.w	r9, #0
 801a1ba:	7c23      	ldrb	r3, [r4, #16]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	f000 80b1 	beq.w	801a324 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a1c2:	a80e      	add	r0, sp, #56	; 0x38
 801a1c4:	f7ff fe4d 	bl	8019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a1c8:	f1ba 0f00 	cmp.w	sl, #0
 801a1cc:	f000 80a5 	beq.w	801a31a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a1d0:	7c23      	ldrb	r3, [r4, #16]
 801a1d2:	2264      	movs	r2, #100	; 0x64
 801a1d4:	4639      	mov	r1, r7
 801a1d6:	a849      	add	r0, sp, #292	; 0x124
 801a1d8:	9309      	str	r3, [sp, #36]	; 0x24
 801a1da:	f011 fd09 	bl	802bbf0 <memcpy>
 801a1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f000 80a7 	beq.w	801a334 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a1e6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801a1ea:	7922      	ldrb	r2, [r4, #4]
 801a1ec:	2a01      	cmp	r2, #1
 801a1ee:	f040 808a 	bne.w	801a306 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a1f2:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801a1f6:	1ac0      	subs	r0, r0, r3
 801a1f8:	2302      	movs	r3, #2
 801a1fa:	fb90 f0f3 	sdiv	r0, r0, r3
 801a1fe:	b200      	sxth	r0, r0
 801a200:	7c23      	ldrb	r3, [r4, #16]
 801a202:	2b00      	cmp	r3, #0
 801a204:	f000 808b 	beq.w	801a31e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a208:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801a20c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801a210:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a214:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a218:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801a21c:	2100      	movs	r1, #0
 801a21e:	4410      	add	r0, r2
 801a220:	4642      	mov	r2, r8
 801a222:	b200      	sxth	r0, r0
 801a224:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a228:	9000      	str	r0, [sp, #0]
 801a22a:	4658      	mov	r0, fp
 801a22c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a230:	f7ff fca2 	bl	8019b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a234:	2800      	cmp	r0, #0
 801a236:	d163      	bne.n	801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a238:	b2b2      	uxth	r2, r6
 801a23a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a23e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801a242:	4413      	add	r3, r2
 801a244:	1a8a      	subs	r2, r1, r2
 801a246:	b21b      	sxth	r3, r3
 801a248:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801a24c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801a250:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a254:	2a00      	cmp	r2, #0
 801a256:	d153      	bne.n	801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a258:	6822      	ldr	r2, [r4, #0]
 801a25a:	8869      	ldrh	r1, [r5, #2]
 801a25c:	7a12      	ldrb	r2, [r2, #8]
 801a25e:	1a9b      	subs	r3, r3, r2
 801a260:	88ea      	ldrh	r2, [r5, #6]
 801a262:	440a      	add	r2, r1
 801a264:	b212      	sxth	r2, r2
 801a266:	4293      	cmp	r3, r2
 801a268:	dda7      	ble.n	801a1ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a26a:	e049      	b.n	801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a26c:	7c23      	ldrb	r3, [r4, #16]
 801a26e:	444f      	add	r7, r9
 801a270:	b1c3      	cbz	r3, 801a2a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801a272:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801a276:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a27a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a27e:	443b      	add	r3, r7
 801a280:	4293      	cmp	r3, r2
 801a282:	da97      	bge.n	801a1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a284:	a80e      	add	r0, sp, #56	; 0x38
 801a286:	f7ff fdec 	bl	8019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a28a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801a28e:	3b01      	subs	r3, #1
 801a290:	b29b      	uxth	r3, r3
 801a292:	454b      	cmp	r3, r9
 801a294:	9309      	str	r3, [sp, #36]	; 0x24
 801a296:	d021      	beq.n	801a2dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801a298:	7961      	ldrb	r1, [r4, #5]
 801a29a:	a817      	add	r0, sp, #92	; 0x5c
 801a29c:	f7ef fa46 	bl	800972c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2a2:	e7f4      	b.n	801a28e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801a2a4:	fa1f f986 	uxth.w	r9, r6
 801a2a8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a2ac:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a2b0:	443b      	add	r3, r7
 801a2b2:	4293      	cmp	r3, r2
 801a2b4:	f6bf af7e 	bge.w	801a1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a2b8:	a817      	add	r0, sp, #92	; 0x5c
 801a2ba:	f002 fd99 	bl	801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a2be:	b1f8      	cbz	r0, 801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a2c0:	280a      	cmp	r0, #10
 801a2c2:	d1f1      	bne.n	801a2a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a2c4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a2c8:	444b      	add	r3, r9
 801a2ca:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a2ce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a2d2:	eba3 0309 	sub.w	r3, r3, r9
 801a2d6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a2da:	e7e5      	b.n	801a2a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a2dc:	b2b3      	uxth	r3, r6
 801a2de:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a2e2:	441a      	add	r2, r3
 801a2e4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a2e8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801a2ec:	1ad3      	subs	r3, r2, r3
 801a2ee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a2f2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a2f6:	b11b      	cbz	r3, 801a300 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a2f8:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d0ba      	beq.n	801a276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a300:	b063      	add	sp, #396	; 0x18c
 801a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a306:	2a02      	cmp	r2, #2
 801a308:	d105      	bne.n	801a316 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a30a:	7be2      	ldrb	r2, [r4, #15]
 801a30c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a310:	1a80      	subs	r0, r0, r2
 801a312:	1ac0      	subs	r0, r0, r3
 801a314:	e773      	b.n	801a1fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801a316:	2000      	movs	r0, #0
 801a318:	e772      	b.n	801a200 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a31a:	7be0      	ldrb	r0, [r4, #15]
 801a31c:	e770      	b.n	801a200 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a31e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a322:	e773      	b.n	801a20c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a324:	f1ba 0f00 	cmp.w	sl, #0
 801a328:	d0f7      	beq.n	801a31a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a32a:	2264      	movs	r2, #100	; 0x64
 801a32c:	4639      	mov	r1, r7
 801a32e:	a849      	add	r0, sp, #292	; 0x124
 801a330:	f011 fc5e 	bl	802bbf0 <memcpy>
 801a334:	2300      	movs	r3, #0
 801a336:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a33a:	6821      	ldr	r1, [r4, #0]
 801a33c:	a849      	add	r0, sp, #292	; 0x124
 801a33e:	f7ff fbae 	bl	8019a9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a342:	b203      	sxth	r3, r0
 801a344:	e751      	b.n	801a1ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801a346 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a346:	2b03      	cmp	r3, #3
 801a348:	d818      	bhi.n	801a37c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a34a:	e8df f003 	tbb	[pc, r3]
 801a34e:	0602      	.short	0x0602
 801a350:	130d      	.short	0x130d
 801a352:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a356:	1850      	adds	r0, r2, r1
 801a358:	4770      	bx	lr
 801a35a:	8803      	ldrh	r3, [r0, #0]
 801a35c:	8880      	ldrh	r0, [r0, #4]
 801a35e:	4418      	add	r0, r3
 801a360:	b200      	sxth	r0, r0
 801a362:	1a80      	subs	r0, r0, r2
 801a364:	3801      	subs	r0, #1
 801a366:	4770      	bx	lr
 801a368:	8803      	ldrh	r3, [r0, #0]
 801a36a:	8880      	ldrh	r0, [r0, #4]
 801a36c:	4418      	add	r0, r3
 801a36e:	b200      	sxth	r0, r0
 801a370:	1a40      	subs	r0, r0, r1
 801a372:	e7f7      	b.n	801a364 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a374:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a378:	4410      	add	r0, r2
 801a37a:	4770      	bx	lr
 801a37c:	2000      	movs	r0, #0
 801a37e:	4770      	bx	lr

0801a380 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a380:	2b03      	cmp	r3, #3
 801a382:	d817      	bhi.n	801a3b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a384:	e8df f003 	tbb	[pc, r3]
 801a388:	10090602 	.word	0x10090602
 801a38c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a390:	1850      	adds	r0, r2, r1
 801a392:	4770      	bx	lr
 801a394:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a398:	e7fa      	b.n	801a390 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a39a:	8843      	ldrh	r3, [r0, #2]
 801a39c:	88c0      	ldrh	r0, [r0, #6]
 801a39e:	4418      	add	r0, r3
 801a3a0:	b200      	sxth	r0, r0
 801a3a2:	1a80      	subs	r0, r0, r2
 801a3a4:	3801      	subs	r0, #1
 801a3a6:	4770      	bx	lr
 801a3a8:	8843      	ldrh	r3, [r0, #2]
 801a3aa:	88c0      	ldrh	r0, [r0, #6]
 801a3ac:	4418      	add	r0, r3
 801a3ae:	b200      	sxth	r0, r0
 801a3b0:	1a40      	subs	r0, r0, r1
 801a3b2:	e7f7      	b.n	801a3a4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a3b4:	2000      	movs	r0, #0
 801a3b6:	4770      	bx	lr

0801a3b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a3b8:	4b01      	ldr	r3, [pc, #4]	; (801a3c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	601a      	str	r2, [r3, #0]
 801a3be:	4770      	bx	lr
 801a3c0:	2402ae74 	.word	0x2402ae74

0801a3c4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	b1c8      	cbz	r0, 801a3fc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a3c8:	0c02      	lsrs	r2, r0, #16
 801a3ca:	0412      	lsls	r2, r2, #16
 801a3cc:	b9a2      	cbnz	r2, 801a3f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a3ce:	0403      	lsls	r3, r0, #16
 801a3d0:	2010      	movs	r0, #16
 801a3d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a3d6:	bf04      	itt	eq
 801a3d8:	021b      	lsleq	r3, r3, #8
 801a3da:	3008      	addeq	r0, #8
 801a3dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a3e0:	bf04      	itt	eq
 801a3e2:	011b      	lsleq	r3, r3, #4
 801a3e4:	3004      	addeq	r0, #4
 801a3e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a3ea:	bf04      	itt	eq
 801a3ec:	009b      	lsleq	r3, r3, #2
 801a3ee:	3002      	addeq	r0, #2
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	db04      	blt.n	801a3fe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a3f4:	3001      	adds	r0, #1
 801a3f6:	4770      	bx	lr
 801a3f8:	2000      	movs	r0, #0
 801a3fa:	e7ea      	b.n	801a3d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a3fc:	2020      	movs	r0, #32
 801a3fe:	4770      	bx	lr

0801a400 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a404:	b087      	sub	sp, #28
 801a406:	460d      	mov	r5, r1
 801a408:	4616      	mov	r6, r2
 801a40a:	4698      	mov	r8, r3
 801a40c:	4601      	mov	r1, r0
 801a40e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a412:	b120      	cbz	r0, 801a41e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a414:	b11a      	cbz	r2, 801a41e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a416:	2d1f      	cmp	r5, #31
 801a418:	d801      	bhi.n	801a41e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a41a:	2b1f      	cmp	r3, #31
 801a41c:	d904      	bls.n	801a428 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801a41e:	2000      	movs	r0, #0
 801a420:	6038      	str	r0, [r7, #0]
 801a422:	b007      	add	sp, #28
 801a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a428:	b97d      	cbnz	r5, 801a44a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801a42a:	b143      	cbz	r3, 801a43e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801a42c:	4602      	mov	r2, r0
 801a42e:	462b      	mov	r3, r5
 801a430:	4641      	mov	r1, r8
 801a432:	4630      	mov	r0, r6
 801a434:	e9cd 4700 	strd	r4, r7, [sp]
 801a438:	f7ff ffe2 	bl	801a400 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a43c:	e7f1      	b.n	801a422 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a43e:	f04f 33ff 	mov.w	r3, #4294967295
 801a442:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a446:	603b      	str	r3, [r7, #0]
 801a448:	e7eb      	b.n	801a422 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a44a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801a44e:	d106      	bne.n	801a45e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801a450:	4346      	muls	r6, r0
 801a452:	fbb6 f0f4 	udiv	r0, r6, r4
 801a456:	fb04 6610 	mls	r6, r4, r0, r6
 801a45a:	603e      	str	r6, [r7, #0]
 801a45c:	e7e1      	b.n	801a422 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a45e:	2201      	movs	r2, #1
 801a460:	fa00 fb05 	lsl.w	fp, r0, r5
 801a464:	40aa      	lsls	r2, r5
 801a466:	fbbb f9f4 	udiv	r9, fp, r4
 801a46a:	3a01      	subs	r2, #1
 801a46c:	fb0a f309 	mul.w	r3, sl, r9
 801a470:	fb04 b919 	mls	r9, r4, r9, fp
 801a474:	4016      	ands	r6, r2
 801a476:	9303      	str	r3, [sp, #12]
 801a478:	4630      	mov	r0, r6
 801a47a:	f7ff ffa3 	bl	801a3c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a47e:	462b      	mov	r3, r5
 801a480:	460a      	mov	r2, r1
 801a482:	4601      	mov	r1, r0
 801a484:	4630      	mov	r0, r6
 801a486:	e9cd 4700 	strd	r4, r7, [sp]
 801a48a:	f7ff ffb9 	bl	801a400 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a48e:	4606      	mov	r6, r0
 801a490:	4648      	mov	r0, r9
 801a492:	eb05 0108 	add.w	r1, r5, r8
 801a496:	f7ff ff95 	bl	801a3c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a49a:	ab05      	add	r3, sp, #20
 801a49c:	464a      	mov	r2, r9
 801a49e:	e9cd 4300 	strd	r4, r3, [sp]
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	4650      	mov	r0, sl
 801a4a6:	f7ff ffab 	bl	801a400 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a4aa:	6839      	ldr	r1, [r7, #0]
 801a4ac:	9a05      	ldr	r2, [sp, #20]
 801a4ae:	9b03      	ldr	r3, [sp, #12]
 801a4b0:	4411      	add	r1, r2
 801a4b2:	fbb1 f2f4 	udiv	r2, r1, r4
 801a4b6:	18d3      	adds	r3, r2, r3
 801a4b8:	fb04 1412 	mls	r4, r4, r2, r1
 801a4bc:	441e      	add	r6, r3
 801a4be:	603c      	str	r4, [r7, #0]
 801a4c0:	4430      	add	r0, r6
 801a4c2:	e7ae      	b.n	801a422 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801a4c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4c8:	b085      	sub	sp, #20
 801a4ca:	f1b0 0900 	subs.w	r9, r0, #0
 801a4ce:	461d      	mov	r5, r3
 801a4d0:	4617      	mov	r7, r2
 801a4d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a4d4:	bfbb      	ittet	lt
 801a4d6:	f1c9 0900 	rsblt	r9, r9, #0
 801a4da:	f04f 36ff 	movlt.w	r6, #4294967295
 801a4de:	2601      	movge	r6, #1
 801a4e0:	6823      	ldrlt	r3, [r4, #0]
 801a4e2:	bfbc      	itt	lt
 801a4e4:	425b      	neglt	r3, r3
 801a4e6:	6023      	strlt	r3, [r4, #0]
 801a4e8:	2a00      	cmp	r2, #0
 801a4ea:	da04      	bge.n	801a4f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a4ec:	6823      	ldr	r3, [r4, #0]
 801a4ee:	4257      	negs	r7, r2
 801a4f0:	4276      	negs	r6, r6
 801a4f2:	425b      	negs	r3, r3
 801a4f4:	6023      	str	r3, [r4, #0]
 801a4f6:	2d00      	cmp	r5, #0
 801a4f8:	4638      	mov	r0, r7
 801a4fa:	bfba      	itte	lt
 801a4fc:	426d      	neglt	r5, r5
 801a4fe:	f04f 38ff 	movlt.w	r8, #4294967295
 801a502:	f04f 0801 	movge.w	r8, #1
 801a506:	f7ff ff5d 	bl	801a3c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a50a:	ab03      	add	r3, sp, #12
 801a50c:	463a      	mov	r2, r7
 801a50e:	e9cd 5300 	strd	r5, r3, [sp]
 801a512:	4603      	mov	r3, r0
 801a514:	4648      	mov	r0, r9
 801a516:	f7ff ff73 	bl	801a400 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	9a03      	ldr	r2, [sp, #12]
 801a51e:	4546      	cmp	r6, r8
 801a520:	441a      	add	r2, r3
 801a522:	fb92 f3f5 	sdiv	r3, r2, r5
 801a526:	4418      	add	r0, r3
 801a528:	fb05 2313 	mls	r3, r5, r3, r2
 801a52c:	bf18      	it	ne
 801a52e:	4240      	negne	r0, r0
 801a530:	1c72      	adds	r2, r6, #1
 801a532:	6023      	str	r3, [r4, #0]
 801a534:	d105      	bne.n	801a542 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a536:	2b00      	cmp	r3, #0
 801a538:	f1c3 0200 	rsb	r2, r3, #0
 801a53c:	db0b      	blt.n	801a556 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a53e:	6022      	str	r2, [r4, #0]
 801a540:	e006      	b.n	801a550 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a542:	2e01      	cmp	r6, #1
 801a544:	d104      	bne.n	801a550 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a546:	2b00      	cmp	r3, #0
 801a548:	da02      	bge.n	801a550 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a54a:	442b      	add	r3, r5
 801a54c:	3801      	subs	r0, #1
 801a54e:	6023      	str	r3, [r4, #0]
 801a550:	b005      	add	sp, #20
 801a552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a556:	3801      	subs	r0, #1
 801a558:	1b52      	subs	r2, r2, r5
 801a55a:	e7f0      	b.n	801a53e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801a55c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a55c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a560:	4c1c      	ldr	r4, [pc, #112]	; (801a5d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a562:	4605      	mov	r5, r0
 801a564:	6807      	ldr	r7, [r0, #0]
 801a566:	69a3      	ldr	r3, [r4, #24]
 801a568:	b92b      	cbnz	r3, 801a576 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a56a:	6840      	ldr	r0, [r0, #4]
 801a56c:	e9c5 7000 	strd	r7, r0, [r5]
 801a570:	b004      	add	sp, #16
 801a572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a576:	f04f 0802 	mov.w	r8, #2
 801a57a:	68a2      	ldr	r2, [r4, #8]
 801a57c:	ae04      	add	r6, sp, #16
 801a57e:	6820      	ldr	r0, [r4, #0]
 801a580:	fb93 f1f8 	sdiv	r1, r3, r8
 801a584:	440a      	add	r2, r1
 801a586:	69e1      	ldr	r1, [r4, #28]
 801a588:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a58c:	463a      	mov	r2, r7
 801a58e:	9600      	str	r6, [sp, #0]
 801a590:	f7ff ff98 	bl	801a4c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a594:	69a3      	ldr	r3, [r4, #24]
 801a596:	4607      	mov	r7, r0
 801a598:	686a      	ldr	r2, [r5, #4]
 801a59a:	6a21      	ldr	r1, [r4, #32]
 801a59c:	9600      	str	r6, [sp, #0]
 801a59e:	6860      	ldr	r0, [r4, #4]
 801a5a0:	f7ff ff90 	bl	801a4c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5a4:	69a3      	ldr	r3, [r4, #24]
 801a5a6:	6962      	ldr	r2, [r4, #20]
 801a5a8:	4407      	add	r7, r0
 801a5aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a5ac:	9600      	str	r6, [sp, #0]
 801a5ae:	68e0      	ldr	r0, [r4, #12]
 801a5b0:	fb93 f8f8 	sdiv	r8, r3, r8
 801a5b4:	4442      	add	r2, r8
 801a5b6:	9203      	str	r2, [sp, #12]
 801a5b8:	682a      	ldr	r2, [r5, #0]
 801a5ba:	f7ff ff83 	bl	801a4c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5be:	4680      	mov	r8, r0
 801a5c0:	9600      	str	r6, [sp, #0]
 801a5c2:	69a3      	ldr	r3, [r4, #24]
 801a5c4:	686a      	ldr	r2, [r5, #4]
 801a5c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a5c8:	6920      	ldr	r0, [r4, #16]
 801a5ca:	f7ff ff7b 	bl	801a4c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a5ce:	4440      	add	r0, r8
 801a5d0:	e7cc      	b.n	801a56c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a5d2:	bf00      	nop
 801a5d4:	2402ae78 	.word	0x2402ae78

0801a5d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a5d8:	4b07      	ldr	r3, [pc, #28]	; (801a5f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a5da:	781b      	ldrb	r3, [r3, #0]
 801a5dc:	2b01      	cmp	r3, #1
 801a5de:	d109      	bne.n	801a5f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a5e0:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a5e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a5e8:	8003      	strh	r3, [r0, #0]
 801a5ea:	4b04      	ldr	r3, [pc, #16]	; (801a5fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a5ec:	881b      	ldrh	r3, [r3, #0]
 801a5ee:	3b01      	subs	r3, #1
 801a5f0:	1a9b      	subs	r3, r3, r2
 801a5f2:	800b      	strh	r3, [r1, #0]
 801a5f4:	4770      	bx	lr
 801a5f6:	bf00      	nop
 801a5f8:	2402ae64 	.word	0x2402ae64
 801a5fc:	2402ae60 	.word	0x2402ae60

0801a600 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a600:	4b07      	ldr	r3, [pc, #28]	; (801a620 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a602:	b510      	push	{r4, lr}
 801a604:	781b      	ldrb	r3, [r3, #0]
 801a606:	2b01      	cmp	r3, #1
 801a608:	d108      	bne.n	801a61c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a60a:	4b06      	ldr	r3, [pc, #24]	; (801a624 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a60c:	880c      	ldrh	r4, [r1, #0]
 801a60e:	881b      	ldrh	r3, [r3, #0]
 801a610:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a614:	3b01      	subs	r3, #1
 801a616:	1b1b      	subs	r3, r3, r4
 801a618:	8003      	strh	r3, [r0, #0]
 801a61a:	800a      	strh	r2, [r1, #0]
 801a61c:	bd10      	pop	{r4, pc}
 801a61e:	bf00      	nop
 801a620:	2402ae64 	.word	0x2402ae64
 801a624:	2402ae60 	.word	0x2402ae60

0801a628 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a628:	4b0a      	ldr	r3, [pc, #40]	; (801a654 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a62a:	b510      	push	{r4, lr}
 801a62c:	781b      	ldrb	r3, [r3, #0]
 801a62e:	2b01      	cmp	r3, #1
 801a630:	d10e      	bne.n	801a650 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a632:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a636:	8843      	ldrh	r3, [r0, #2]
 801a638:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a63c:	18ca      	adds	r2, r1, r3
 801a63e:	4b06      	ldr	r3, [pc, #24]	; (801a658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a640:	8044      	strh	r4, [r0, #2]
 801a642:	881b      	ldrh	r3, [r3, #0]
 801a644:	1a9b      	subs	r3, r3, r2
 801a646:	8003      	strh	r3, [r0, #0]
 801a648:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a64c:	8081      	strh	r1, [r0, #4]
 801a64e:	80c3      	strh	r3, [r0, #6]
 801a650:	bd10      	pop	{r4, pc}
 801a652:	bf00      	nop
 801a654:	2402ae64 	.word	0x2402ae64
 801a658:	2402ae60 	.word	0x2402ae60

0801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a65c:	4b08      	ldr	r3, [pc, #32]	; (801a680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a65e:	781b      	ldrb	r3, [r3, #0]
 801a660:	2b01      	cmp	r3, #1
 801a662:	d10c      	bne.n	801a67e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a664:	8803      	ldrh	r3, [r0, #0]
 801a666:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a66a:	8842      	ldrh	r2, [r0, #2]
 801a66c:	8002      	strh	r2, [r0, #0]
 801a66e:	185a      	adds	r2, r3, r1
 801a670:	4b04      	ldr	r3, [pc, #16]	; (801a684 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a672:	881b      	ldrh	r3, [r3, #0]
 801a674:	1a9b      	subs	r3, r3, r2
 801a676:	8043      	strh	r3, [r0, #2]
 801a678:	88c3      	ldrh	r3, [r0, #6]
 801a67a:	80c1      	strh	r1, [r0, #6]
 801a67c:	8083      	strh	r3, [r0, #4]
 801a67e:	4770      	bx	lr
 801a680:	2402ae64 	.word	0x2402ae64
 801a684:	2402ae60 	.word	0x2402ae60

0801a688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a688:	4b07      	ldr	r3, [pc, #28]	; (801a6a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a68a:	b510      	push	{r4, lr}
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	2b01      	cmp	r3, #1
 801a690:	d108      	bne.n	801a6a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a692:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a696:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a69a:	8003      	strh	r3, [r0, #0]
 801a69c:	8893      	ldrh	r3, [r2, #4]
 801a69e:	3b01      	subs	r3, #1
 801a6a0:	1b1b      	subs	r3, r3, r4
 801a6a2:	800b      	strh	r3, [r1, #0]
 801a6a4:	bd10      	pop	{r4, pc}
 801a6a6:	bf00      	nop
 801a6a8:	2402ae64 	.word	0x2402ae64

0801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a6ac:	4b0a      	ldr	r3, [pc, #40]	; (801a6d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a6ae:	460a      	mov	r2, r1
 801a6b0:	b510      	push	{r4, lr}
 801a6b2:	781b      	ldrb	r3, [r3, #0]
 801a6b4:	2b01      	cmp	r3, #1
 801a6b6:	d10d      	bne.n	801a6d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a6b8:	8881      	ldrh	r1, [r0, #4]
 801a6ba:	8803      	ldrh	r3, [r0, #0]
 801a6bc:	440b      	add	r3, r1
 801a6be:	4601      	mov	r1, r0
 801a6c0:	3b01      	subs	r3, #1
 801a6c2:	f821 3b02 	strh.w	r3, [r1], #2
 801a6c6:	f7ff ffdf 	bl	801a688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a6ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a6ce:	88c2      	ldrh	r2, [r0, #6]
 801a6d0:	80c3      	strh	r3, [r0, #6]
 801a6d2:	8082      	strh	r2, [r0, #4]
 801a6d4:	bd10      	pop	{r4, pc}
 801a6d6:	bf00      	nop
 801a6d8:	2402ae64 	.word	0x2402ae64

0801a6dc <_ZN8touchgfx11Application13requestRedrawEv>:
 801a6dc:	4b06      	ldr	r3, [pc, #24]	; (801a6f8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a6de:	2100      	movs	r1, #0
 801a6e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a6e4:	4b05      	ldr	r3, [pc, #20]	; (801a6fc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a6e6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801a6ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6ee:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801a6f2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801a6f6:	4770      	bx	lr
 801a6f8:	2402ae60 	.word	0x2402ae60
 801a6fc:	2402ae62 	.word	0x2402ae62

0801a700 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a700:	4b03      	ldr	r3, [pc, #12]	; (801a710 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a702:	6818      	ldr	r0, [r3, #0]
 801a704:	b110      	cbz	r0, 801a70c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a706:	6803      	ldr	r3, [r0, #0]
 801a708:	699b      	ldr	r3, [r3, #24]
 801a70a:	4718      	bx	r3
 801a70c:	4770      	bx	lr
 801a70e:	bf00      	nop
 801a710:	2402aea8 	.word	0x2402aea8

0801a714 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a714:	4770      	bx	lr
	...

0801a718 <_ZN8touchgfx11Application4drawEv>:
 801a718:	4b09      	ldr	r3, [pc, #36]	; (801a740 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a71a:	b507      	push	{r0, r1, r2, lr}
 801a71c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a720:	2100      	movs	r1, #0
 801a722:	4b08      	ldr	r3, [pc, #32]	; (801a744 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a724:	9100      	str	r1, [sp, #0]
 801a726:	4669      	mov	r1, sp
 801a728:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a72c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a730:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a734:	6803      	ldr	r3, [r0, #0]
 801a736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a738:	4798      	blx	r3
 801a73a:	b003      	add	sp, #12
 801a73c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a740:	2402ae60 	.word	0x2402ae60
 801a744:	2402ae62 	.word	0x2402ae62

0801a748 <_ZN8touchgfx11Application10invalidateEv>:
 801a748:	4b09      	ldr	r3, [pc, #36]	; (801a770 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a74a:	b082      	sub	sp, #8
 801a74c:	2100      	movs	r1, #0
 801a74e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a752:	4b08      	ldr	r3, [pc, #32]	; (801a774 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a754:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a758:	aa02      	add	r2, sp, #8
 801a75a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a75e:	9100      	str	r1, [sp, #0]
 801a760:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a764:	6803      	ldr	r3, [r0, #0]
 801a766:	e912 0006 	ldmdb	r2, {r1, r2}
 801a76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a76c:	b002      	add	sp, #8
 801a76e:	4718      	bx	r3
 801a770:	2402ae60 	.word	0x2402ae60
 801a774:	2402ae62 	.word	0x2402ae62

0801a778 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a778:	4b03      	ldr	r3, [pc, #12]	; (801a788 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a77a:	6818      	ldr	r0, [r3, #0]
 801a77c:	b110      	cbz	r0, 801a784 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a77e:	6803      	ldr	r3, [r0, #0]
 801a780:	69db      	ldr	r3, [r3, #28]
 801a782:	4718      	bx	r3
 801a784:	4770      	bx	lr
 801a786:	bf00      	nop
 801a788:	2402aea8 	.word	0x2402aea8

0801a78c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a78c:	4b03      	ldr	r3, [pc, #12]	; (801a79c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a78e:	6818      	ldr	r0, [r3, #0]
 801a790:	b110      	cbz	r0, 801a798 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a792:	6803      	ldr	r3, [r0, #0]
 801a794:	6a1b      	ldr	r3, [r3, #32]
 801a796:	4718      	bx	r3
 801a798:	4770      	bx	lr
 801a79a:	bf00      	nop
 801a79c:	2402aea8 	.word	0x2402aea8

0801a7a0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801a7a6:	4770      	bx	lr

0801a7a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a7a8:	4b03      	ldr	r3, [pc, #12]	; (801a7b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a7aa:	6818      	ldr	r0, [r3, #0]
 801a7ac:	b110      	cbz	r0, 801a7b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7b2:	4718      	bx	r3
 801a7b4:	4770      	bx	lr
 801a7b6:	bf00      	nop
 801a7b8:	2402aea8 	.word	0x2402aea8

0801a7bc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a7bc:	b510      	push	{r4, lr}
 801a7be:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a7c2:	888a      	ldrh	r2, [r1, #4]
 801a7c4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a7c8:	4422      	add	r2, r4
 801a7ca:	b212      	sxth	r2, r2
 801a7cc:	4293      	cmp	r3, r2
 801a7ce:	da15      	bge.n	801a7fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7d0:	8882      	ldrh	r2, [r0, #4]
 801a7d2:	4413      	add	r3, r2
 801a7d4:	b21b      	sxth	r3, r3
 801a7d6:	429c      	cmp	r4, r3
 801a7d8:	da10      	bge.n	801a7fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7da:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a7de:	88c9      	ldrh	r1, [r1, #6]
 801a7e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a7e4:	4419      	add	r1, r3
 801a7e6:	b209      	sxth	r1, r1
 801a7e8:	428a      	cmp	r2, r1
 801a7ea:	da07      	bge.n	801a7fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7ec:	88c0      	ldrh	r0, [r0, #6]
 801a7ee:	4410      	add	r0, r2
 801a7f0:	b200      	sxth	r0, r0
 801a7f2:	4283      	cmp	r3, r0
 801a7f4:	bfac      	ite	ge
 801a7f6:	2000      	movge	r0, #0
 801a7f8:	2001      	movlt	r0, #1
 801a7fa:	bd10      	pop	{r4, pc}
 801a7fc:	2000      	movs	r0, #0
 801a7fe:	e7fc      	b.n	801a7fa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a800 <_ZN8touchgfx4Rect10restrictToEss>:
 801a800:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a804:	2b00      	cmp	r3, #0
 801a806:	b510      	push	{r4, lr}
 801a808:	da04      	bge.n	801a814 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a80a:	8884      	ldrh	r4, [r0, #4]
 801a80c:	4423      	add	r3, r4
 801a80e:	8083      	strh	r3, [r0, #4]
 801a810:	2300      	movs	r3, #0
 801a812:	8003      	strh	r3, [r0, #0]
 801a814:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a818:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a81c:	1b09      	subs	r1, r1, r4
 801a81e:	428b      	cmp	r3, r1
 801a820:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a824:	bfc8      	it	gt
 801a826:	8081      	strhgt	r1, [r0, #4]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	da04      	bge.n	801a836 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801a82c:	88c1      	ldrh	r1, [r0, #6]
 801a82e:	440b      	add	r3, r1
 801a830:	80c3      	strh	r3, [r0, #6]
 801a832:	2300      	movs	r3, #0
 801a834:	8043      	strh	r3, [r0, #2]
 801a836:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a83a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a83e:	1a52      	subs	r2, r2, r1
 801a840:	4293      	cmp	r3, r2
 801a842:	bfc8      	it	gt
 801a844:	80c2      	strhgt	r2, [r0, #6]
 801a846:	bd10      	pop	{r4, pc}

0801a848 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a848:	4b10      	ldr	r3, [pc, #64]	; (801a88c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801a84a:	b510      	push	{r4, lr}
 801a84c:	460c      	mov	r4, r1
 801a84e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a852:	4b0f      	ldr	r3, [pc, #60]	; (801a890 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801a854:	4620      	mov	r0, r4
 801a856:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a85a:	f7ff ffd1 	bl	801a800 <_ZN8touchgfx4Rect10restrictToEss>
 801a85e:	4b0d      	ldr	r3, [pc, #52]	; (801a894 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801a860:	6818      	ldr	r0, [r3, #0]
 801a862:	b190      	cbz	r0, 801a88a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801a864:	6803      	ldr	r3, [r0, #0]
 801a866:	4621      	mov	r1, r4
 801a868:	689b      	ldr	r3, [r3, #8]
 801a86a:	4798      	blx	r3
 801a86c:	4b0a      	ldr	r3, [pc, #40]	; (801a898 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801a86e:	6818      	ldr	r0, [r3, #0]
 801a870:	b118      	cbz	r0, 801a87a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801a872:	6803      	ldr	r3, [r0, #0]
 801a874:	4621      	mov	r1, r4
 801a876:	689b      	ldr	r3, [r3, #8]
 801a878:	4798      	blx	r3
 801a87a:	4b08      	ldr	r3, [pc, #32]	; (801a89c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801a87c:	4621      	mov	r1, r4
 801a87e:	6818      	ldr	r0, [r3, #0]
 801a880:	6803      	ldr	r3, [r0, #0]
 801a882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a886:	69db      	ldr	r3, [r3, #28]
 801a888:	4718      	bx	r3
 801a88a:	bd10      	pop	{r4, pc}
 801a88c:	2402ae62 	.word	0x2402ae62
 801a890:	2402ae60 	.word	0x2402ae60
 801a894:	2402aea8 	.word	0x2402aea8
 801a898:	2402aea4 	.word	0x2402aea4
 801a89c:	2402ae6c 	.word	0x2402ae6c

0801a8a0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8a2:	4606      	mov	r6, r0
 801a8a4:	4608      	mov	r0, r1
 801a8a6:	460f      	mov	r7, r1
 801a8a8:	f7fc fcad 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8ac:	b9e8      	cbnz	r0, 801a8ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a8ae:	f9b7 5000 	ldrsh.w	r5, [r7]
 801a8b2:	f9b6 4000 	ldrsh.w	r4, [r6]
 801a8b6:	42a5      	cmp	r5, r4
 801a8b8:	db17      	blt.n	801a8ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a8ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a8be:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a8c2:	429a      	cmp	r2, r3
 801a8c4:	db11      	blt.n	801a8ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a8c6:	88b9      	ldrh	r1, [r7, #4]
 801a8c8:	440d      	add	r5, r1
 801a8ca:	88b1      	ldrh	r1, [r6, #4]
 801a8cc:	440c      	add	r4, r1
 801a8ce:	b22d      	sxth	r5, r5
 801a8d0:	b224      	sxth	r4, r4
 801a8d2:	42a5      	cmp	r5, r4
 801a8d4:	dc09      	bgt.n	801a8ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a8d6:	88f8      	ldrh	r0, [r7, #6]
 801a8d8:	4410      	add	r0, r2
 801a8da:	88f2      	ldrh	r2, [r6, #6]
 801a8dc:	4413      	add	r3, r2
 801a8de:	b200      	sxth	r0, r0
 801a8e0:	b21b      	sxth	r3, r3
 801a8e2:	4298      	cmp	r0, r3
 801a8e4:	bfcc      	ite	gt
 801a8e6:	2000      	movgt	r0, #0
 801a8e8:	2001      	movle	r0, #1
 801a8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a8ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ee:	4604      	mov	r4, r0
 801a8f0:	4608      	mov	r0, r1
 801a8f2:	460d      	mov	r5, r1
 801a8f4:	f7fc fc87 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8f8:	b978      	cbnz	r0, 801a91a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a8fa:	4620      	mov	r0, r4
 801a8fc:	f7fc fc83 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a900:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a904:	b150      	cbz	r0, 801a91c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a906:	8026      	strh	r6, [r4, #0]
 801a908:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a90c:	8063      	strh	r3, [r4, #2]
 801a90e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a912:	80a3      	strh	r3, [r4, #4]
 801a914:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a918:	80e3      	strh	r3, [r4, #6]
 801a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a91c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a920:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a924:	42b1      	cmp	r1, r6
 801a926:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a92a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a92e:	460f      	mov	r7, r1
 801a930:	88ed      	ldrh	r5, [r5, #6]
 801a932:	bfa8      	it	ge
 801a934:	4637      	movge	r7, r6
 801a936:	4293      	cmp	r3, r2
 801a938:	4618      	mov	r0, r3
 801a93a:	4466      	add	r6, ip
 801a93c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a940:	bfa8      	it	ge
 801a942:	4610      	movge	r0, r2
 801a944:	442a      	add	r2, r5
 801a946:	88e5      	ldrh	r5, [r4, #6]
 801a948:	4461      	add	r1, ip
 801a94a:	b236      	sxth	r6, r6
 801a94c:	8027      	strh	r7, [r4, #0]
 801a94e:	442b      	add	r3, r5
 801a950:	b209      	sxth	r1, r1
 801a952:	b212      	sxth	r2, r2
 801a954:	8060      	strh	r0, [r4, #2]
 801a956:	b21b      	sxth	r3, r3
 801a958:	428e      	cmp	r6, r1
 801a95a:	bfac      	ite	ge
 801a95c:	ebc7 0106 	rsbge	r1, r7, r6
 801a960:	ebc7 0101 	rsblt	r1, r7, r1
 801a964:	429a      	cmp	r2, r3
 801a966:	bfac      	ite	ge
 801a968:	ebc0 0202 	rsbge	r2, r0, r2
 801a96c:	ebc0 0203 	rsblt	r2, r0, r3
 801a970:	80a1      	strh	r1, [r4, #4]
 801a972:	80e2      	strh	r2, [r4, #6]
 801a974:	e7d1      	b.n	801a91a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a978 <_ZN8touchgfx11Application11getInstanceEv>:
 801a978:	4b01      	ldr	r3, [pc, #4]	; (801a980 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a97a:	6818      	ldr	r0, [r3, #0]
 801a97c:	4770      	bx	lr
 801a97e:	bf00      	nop
 801a980:	2402aeb8 	.word	0x2402aeb8

0801a984 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801a984:	2300      	movs	r3, #0
 801a986:	b510      	push	{r4, lr}
 801a988:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801a98c:	4604      	mov	r4, r0
 801a98e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801a992:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801a996:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801a99a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801a99e:	429a      	cmp	r2, r3
 801a9a0:	d90e      	bls.n	801a9c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801a9a2:	18e2      	adds	r2, r4, r3
 801a9a4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801a9a8:	b122      	cbz	r2, 801a9b4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801a9aa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801a9ae:	6803      	ldr	r3, [r0, #0]
 801a9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9b2:	4798      	blx	r3
 801a9b4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801a9b8:	3301      	adds	r3, #1
 801a9ba:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801a9be:	e7ea      	b.n	801a996 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801a9c0:	bd10      	pop	{r4, pc}

0801a9c2 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801a9c2:	b530      	push	{r4, r5, lr}
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801a9ca:	b293      	uxth	r3, r2
 801a9cc:	429d      	cmp	r5, r3
 801a9ce:	d90e      	bls.n	801a9ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801a9d0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801a9d4:	428b      	cmp	r3, r1
 801a9d6:	d10b      	bne.n	801a9f0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801a9d8:	1884      	adds	r4, r0, r2
 801a9da:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801a9de:	b13b      	cbz	r3, 801a9f0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801a9e0:	3b01      	subs	r3, #1
 801a9e2:	b2db      	uxtb	r3, r3
 801a9e4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801a9e8:	b90b      	cbnz	r3, 801a9ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801a9ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a9ee:	bd30      	pop	{r4, r5, pc}
 801a9f0:	3201      	adds	r2, #1
 801a9f2:	e7ea      	b.n	801a9ca <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801a9f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801a9fa:	30a4      	adds	r0, #164	; 0xa4
 801a9fc:	f820 3c24 	strh.w	r3, [r0, #-36]
 801aa00:	f802 3b01 	strb.w	r3, [r2], #1
 801aa04:	4282      	cmp	r2, r0
 801aa06:	d1fb      	bne.n	801aa00 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801aa08:	4770      	bx	lr
	...

0801aa0c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801aa0c:	b570      	push	{r4, r5, r6, lr}
 801aa0e:	4c0b      	ldr	r4, [pc, #44]	; (801aa3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801aa10:	4605      	mov	r5, r0
 801aa12:	460e      	mov	r6, r1
 801aa14:	6820      	ldr	r0, [r4, #0]
 801aa16:	b110      	cbz	r0, 801aa1e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801aa18:	6803      	ldr	r3, [r0, #0]
 801aa1a:	695b      	ldr	r3, [r3, #20]
 801aa1c:	4798      	blx	r3
 801aa1e:	1d28      	adds	r0, r5, #4
 801aa20:	f7ff ffe8 	bl	801a9f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801aa24:	6026      	str	r6, [r4, #0]
 801aa26:	6833      	ldr	r3, [r6, #0]
 801aa28:	4630      	mov	r0, r6
 801aa2a:	68db      	ldr	r3, [r3, #12]
 801aa2c:	4798      	blx	r3
 801aa2e:	682b      	ldr	r3, [r5, #0]
 801aa30:	4628      	mov	r0, r5
 801aa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa38:	4718      	bx	r3
 801aa3a:	bf00      	nop
 801aa3c:	2402aea8 	.word	0x2402aea8

0801aa40 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801aa40:	2300      	movs	r3, #0
 801aa42:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801aa46:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801aa4a:	461a      	mov	r2, r3
 801aa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa4e:	461c      	mov	r4, r3
 801aa50:	461d      	mov	r5, r3
 801aa52:	459c      	cmp	ip, r3
 801aa54:	dd1a      	ble.n	801aa8c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801aa56:	18c6      	adds	r6, r0, r3
 801aa58:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801aa5c:	b16e      	cbz	r6, 801aa7a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801aa5e:	429a      	cmp	r2, r3
 801aa60:	d008      	beq.n	801aa74 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801aa62:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801aa66:	fa1f fe82 	uxth.w	lr, r2
 801aa6a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801aa6e:	1887      	adds	r7, r0, r2
 801aa70:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801aa74:	3201      	adds	r2, #1
 801aa76:	3301      	adds	r3, #1
 801aa78:	e7eb      	b.n	801aa52 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801aa7a:	4299      	cmp	r1, r3
 801aa7c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801aa80:	bfa8      	it	ge
 801aa82:	3501      	addge	r5, #1
 801aa84:	429e      	cmp	r6, r3
 801aa86:	bfc8      	it	gt
 801aa88:	3401      	addgt	r4, #1
 801aa8a:	e7f4      	b.n	801aa76 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801aa8c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801aa90:	1b49      	subs	r1, r1, r5
 801aa92:	1b1b      	subs	r3, r3, r4
 801aa94:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801aa98:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801aa9c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801aaa0:	4293      	cmp	r3, r2
 801aaa2:	dd03      	ble.n	801aaac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801aaa4:	3b01      	subs	r3, #1
 801aaa6:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801aaaa:	e7f7      	b.n	801aa9c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801aaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801aab0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801aab0:	b570      	push	{r4, r5, r6, lr}
 801aab2:	4d16      	ldr	r5, [pc, #88]	; (801ab0c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801aab4:	4604      	mov	r4, r0
 801aab6:	6828      	ldr	r0, [r5, #0]
 801aab8:	b140      	cbz	r0, 801aacc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801aaba:	7a03      	ldrb	r3, [r0, #8]
 801aabc:	b933      	cbnz	r3, 801aacc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801aabe:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801aac2:	6803      	ldr	r3, [r0, #0]
 801aac4:	689b      	ldr	r3, [r3, #8]
 801aac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aaca:	4718      	bx	r3
 801aacc:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801aad0:	4e0f      	ldr	r6, [pc, #60]	; (801ab10 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801aad2:	b973      	cbnz	r3, 801aaf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801aad4:	b168      	cbz	r0, 801aaf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801aad6:	7a03      	ldrb	r3, [r0, #8]
 801aad8:	b15b      	cbz	r3, 801aaf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801aada:	6830      	ldr	r0, [r6, #0]
 801aadc:	b110      	cbz	r0, 801aae4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801aade:	6803      	ldr	r3, [r0, #0]
 801aae0:	691b      	ldr	r3, [r3, #16]
 801aae2:	4798      	blx	r3
 801aae4:	6828      	ldr	r0, [r5, #0]
 801aae6:	6803      	ldr	r3, [r0, #0]
 801aae8:	68db      	ldr	r3, [r3, #12]
 801aaea:	4798      	blx	r3
 801aaec:	2301      	movs	r3, #1
 801aaee:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801aaf2:	3404      	adds	r4, #4
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	f7ff ff45 	bl	801a984 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801aafa:	4620      	mov	r0, r4
 801aafc:	f7ff ffa0 	bl	801aa40 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801ab00:	6830      	ldr	r0, [r6, #0]
 801ab02:	b110      	cbz	r0, 801ab0a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801ab04:	6803      	ldr	r3, [r0, #0]
 801ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab08:	e7dd      	b.n	801aac6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801ab0a:	bd70      	pop	{r4, r5, r6, pc}
 801ab0c:	2402aeac 	.word	0x2402aeac
 801ab10:	2402aea8 	.word	0x2402aea8

0801ab14 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab16:	2300      	movs	r3, #0
 801ab18:	4604      	mov	r4, r0
 801ab1a:	460d      	mov	r5, r1
 801ab1c:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 801ab20:	4618      	mov	r0, r3
 801ab22:	b29a      	uxth	r2, r3
 801ab24:	4291      	cmp	r1, r2
 801ab26:	d912      	bls.n	801ab4e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801ab28:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801ab2c:	18e6      	adds	r6, r4, r3
 801ab2e:	42af      	cmp	r7, r5
 801ab30:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 801ab34:	d105      	bne.n	801ab42 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801ab36:	2aff      	cmp	r2, #255	; 0xff
 801ab38:	d002      	beq.n	801ab40 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801ab3a:	3201      	adds	r2, #1
 801ab3c:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 801ab40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab42:	2a00      	cmp	r2, #0
 801ab44:	f103 0301 	add.w	r3, r3, #1
 801ab48:	bf08      	it	eq
 801ab4a:	2001      	moveq	r0, #1
 801ab4c:	e7e9      	b.n	801ab22 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801ab4e:	b120      	cbz	r0, 801ab5a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801ab50:	2920      	cmp	r1, #32
 801ab52:	d102      	bne.n	801ab5a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801ab54:	4620      	mov	r0, r4
 801ab56:	f7ff ff73 	bl	801aa40 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801ab5a:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801ab5e:	2b1f      	cmp	r3, #31
 801ab60:	d8ee      	bhi.n	801ab40 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801ab62:	18e2      	adds	r2, r4, r3
 801ab64:	2101      	movs	r1, #1
 801ab66:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801ab6a:	185a      	adds	r2, r3, r1
 801ab6c:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 801ab70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ab74:	e7e4      	b.n	801ab40 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801ab76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ab76:	4603      	mov	r3, r0
 801ab78:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	801a      	strh	r2, [r3, #0]
 801ab80:	3308      	adds	r3, #8
 801ab82:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ab86:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ab8a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ab8e:	428b      	cmp	r3, r1
 801ab90:	d1f5      	bne.n	801ab7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ab92:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ab96:	4770      	bx	lr

0801ab98 <_ZN8touchgfx11ApplicationC1Ev>:
 801ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab9a:	4b1d      	ldr	r3, [pc, #116]	; (801ac10 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ab9c:	4606      	mov	r6, r0
 801ab9e:	4604      	mov	r4, r0
 801aba0:	2500      	movs	r5, #0
 801aba2:	f846 3b04 	str.w	r3, [r6], #4
 801aba6:	22a8      	movs	r2, #168	; 0xa8
 801aba8:	2100      	movs	r1, #0
 801abaa:	4630      	mov	r0, r6
 801abac:	f010 fee9 	bl	802b982 <memset>
 801abb0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801abb4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801abb8:	4f16      	ldr	r7, [pc, #88]	; (801ac14 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801abba:	f7ff ffdc 	bl	801ab76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801abbe:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801abc2:	f7ff ffd8 	bl	801ab76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801abc6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801abca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801abce:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801abd2:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801abd6:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801abda:	490f      	ldr	r1, [pc, #60]	; (801ac18 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801abdc:	480f      	ldr	r0, [pc, #60]	; (801ac1c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801abde:	f010 fba5 	bl	802b32c <CRC_Lock>
 801abe2:	4b0f      	ldr	r3, [pc, #60]	; (801ac20 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801abe4:	b158      	cbz	r0, 801abfe <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801abe6:	801d      	strh	r5, [r3, #0]
 801abe8:	2300      	movs	r3, #0
 801abea:	4a0e      	ldr	r2, [pc, #56]	; (801ac24 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801abec:	4630      	mov	r0, r6
 801abee:	6013      	str	r3, [r2, #0]
 801abf0:	4a0d      	ldr	r2, [pc, #52]	; (801ac28 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801abf2:	603b      	str	r3, [r7, #0]
 801abf4:	6013      	str	r3, [r2, #0]
 801abf6:	f7ff fefd 	bl	801a9f4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801abfa:	4620      	mov	r0, r4
 801abfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ac02:	2002      	movs	r0, #2
 801ac04:	801a      	strh	r2, [r3, #0]
 801ac06:	6038      	str	r0, [r7, #0]
 801ac08:	f001 fb1e 	bl	801c248 <_ZN8touchgfx6Screen4drawEv>
 801ac0c:	e7ec      	b.n	801abe8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801ac0e:	bf00      	nop
 801ac10:	0802ffc8 	.word	0x0802ffc8
 801ac14:	2402aea8 	.word	0x2402aea8
 801ac18:	b5e8b5cd 	.word	0xb5e8b5cd
 801ac1c:	f407a5c2 	.word	0xf407a5c2
 801ac20:	24000064 	.word	0x24000064
 801ac24:	2402aeb8 	.word	0x2402aeb8
 801ac28:	2402aeac 	.word	0x2402aeac

0801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ac2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ac30:	3b01      	subs	r3, #1
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	428b      	cmp	r3, r1
 801ac36:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ac3a:	b510      	push	{r4, lr}
 801ac3c:	d908      	bls.n	801ac50 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801ac3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ac42:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ac46:	681a      	ldr	r2, [r3, #0]
 801ac48:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ac4c:	685a      	ldr	r2, [r3, #4]
 801ac4e:	6062      	str	r2, [r4, #4]
 801ac50:	bd10      	pop	{r4, pc}
	...

0801ac54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac58:	b08f      	sub	sp, #60	; 0x3c
 801ac5a:	4b8f      	ldr	r3, [pc, #572]	; (801ae98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801ac5c:	4683      	mov	fp, r0
 801ac5e:	ac0a      	add	r4, sp, #40	; 0x28
 801ac60:	e884 0006 	stmia.w	r4, {r1, r2}
 801ac64:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac68:	4620      	mov	r0, r4
 801ac6a:	4b8c      	ldr	r3, [pc, #560]	; (801ae9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801ac6c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ac70:	f7ff fdc6 	bl	801a800 <_ZN8touchgfx4Rect10restrictToEss>
 801ac74:	4620      	mov	r0, r4
 801ac76:	f7fc fac6 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac7a:	2800      	cmp	r0, #0
 801ac7c:	d16a      	bne.n	801ad54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ac7e:	9403      	str	r4, [sp, #12]
 801ac80:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801ac84:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801ac88:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801ac8c:	9301      	str	r3, [sp, #4]
 801ac8e:	35a4      	adds	r5, #164	; 0xa4
 801ac90:	b15c      	cbz	r4, 801acaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ac92:	4629      	mov	r1, r5
 801ac94:	9803      	ldr	r0, [sp, #12]
 801ac96:	f7ff fe03 	bl	801a8a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ac9a:	3c01      	subs	r4, #1
 801ac9c:	b118      	cbz	r0, 801aca6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801ac9e:	b2a1      	uxth	r1, r4
 801aca0:	9801      	ldr	r0, [sp, #4]
 801aca2:	f7ff ffc3 	bl	801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aca6:	3d08      	subs	r5, #8
 801aca8:	e7f2      	b.n	801ac90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801acaa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801acae:	f10a 33ff 	add.w	r3, sl, #4294967295
 801acb2:	f8cd a010 	str.w	sl, [sp, #16]
 801acb6:	9302      	str	r3, [sp, #8]
 801acb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801acbc:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801acc0:	9306      	str	r3, [sp, #24]
 801acc2:	445c      	add	r4, fp
 801acc4:	2500      	movs	r5, #0
 801acc6:	4626      	mov	r6, r4
 801acc8:	f8cd a014 	str.w	sl, [sp, #20]
 801accc:	462f      	mov	r7, r5
 801acce:	9b05      	ldr	r3, [sp, #20]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d073      	beq.n	801adbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801acd4:	9903      	ldr	r1, [sp, #12]
 801acd6:	4630      	mov	r0, r6
 801acd8:	f7ff fd70 	bl	801a7bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801acdc:	b350      	cbz	r0, 801ad34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801acde:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801ace2:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ace6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801acea:	45e6      	cmp	lr, ip
 801acec:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801acf0:	db33      	blt.n	801ad5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801acf2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801acf6:	88b3      	ldrh	r3, [r6, #4]
 801acf8:	4472      	add	r2, lr
 801acfa:	4463      	add	r3, ip
 801acfc:	b212      	sxth	r2, r2
 801acfe:	b21b      	sxth	r3, r3
 801ad00:	429a      	cmp	r2, r3
 801ad02:	dc2a      	bgt.n	801ad5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ad04:	fa1f f289 	uxth.w	r2, r9
 801ad08:	88f3      	ldrh	r3, [r6, #6]
 801ad0a:	45c8      	cmp	r8, r9
 801ad0c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ad10:	4413      	add	r3, r2
 801ad12:	fa1f fc88 	uxth.w	ip, r8
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	fa0f fe83 	sxth.w	lr, r3
 801ad1c:	db0f      	blt.n	801ad3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ad1e:	eba3 030c 	sub.w	r3, r3, ip
 801ad22:	1ac9      	subs	r1, r1, r3
 801ad24:	b209      	sxth	r1, r1
 801ad26:	2900      	cmp	r1, #0
 801ad28:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ad2c:	dd12      	ble.n	801ad54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ad2e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801ad32:	4605      	mov	r5, r0
 801ad34:	9b05      	ldr	r3, [sp, #20]
 801ad36:	3e08      	subs	r6, #8
 801ad38:	3b01      	subs	r3, #1
 801ad3a:	9305      	str	r3, [sp, #20]
 801ad3c:	e7c7      	b.n	801acce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ad3e:	4461      	add	r1, ip
 801ad40:	b209      	sxth	r1, r1
 801ad42:	4571      	cmp	r1, lr
 801ad44:	dc38      	bgt.n	801adb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ad46:	eba2 020c 	sub.w	r2, r2, ip
 801ad4a:	b212      	sxth	r2, r2
 801ad4c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801ad50:	2a00      	cmp	r2, #0
 801ad52:	dcee      	bgt.n	801ad32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ad54:	b00f      	add	sp, #60	; 0x3c
 801ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad5a:	45c8      	cmp	r8, r9
 801ad5c:	db2c      	blt.n	801adb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ad5e:	88f3      	ldrh	r3, [r6, #6]
 801ad60:	4499      	add	r9, r3
 801ad62:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801ad66:	4498      	add	r8, r3
 801ad68:	fa0f f989 	sxth.w	r9, r9
 801ad6c:	fa0f f888 	sxth.w	r8, r8
 801ad70:	45c1      	cmp	r9, r8
 801ad72:	db21      	blt.n	801adb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ad74:	fa1f f28c 	uxth.w	r2, ip
 801ad78:	88b3      	ldrh	r3, [r6, #4]
 801ad7a:	45e6      	cmp	lr, ip
 801ad7c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ad80:	4413      	add	r3, r2
 801ad82:	fa1f f88e 	uxth.w	r8, lr
 801ad86:	b29b      	uxth	r3, r3
 801ad88:	fa0f f983 	sxth.w	r9, r3
 801ad8c:	db0a      	blt.n	801ada4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801ad8e:	eba3 0308 	sub.w	r3, r3, r8
 801ad92:	1ac9      	subs	r1, r1, r3
 801ad94:	b209      	sxth	r1, r1
 801ad96:	2900      	cmp	r1, #0
 801ad98:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801ad9c:	ddda      	ble.n	801ad54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ad9e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801ada2:	e7c6      	b.n	801ad32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ada4:	4441      	add	r1, r8
 801ada6:	b209      	sxth	r1, r1
 801ada8:	4549      	cmp	r1, r9
 801adaa:	dc05      	bgt.n	801adb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801adac:	eba2 0208 	sub.w	r2, r2, r8
 801adb0:	b212      	sxth	r2, r2
 801adb2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801adb6:	e7cb      	b.n	801ad50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801adb8:	4607      	mov	r7, r0
 801adba:	e7bb      	b.n	801ad34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801adbc:	2d00      	cmp	r5, #0
 801adbe:	d181      	bne.n	801acc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801adc0:	2f00      	cmp	r7, #0
 801adc2:	f000 81dd 	beq.w	801b180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801adc6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801adca:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801adce:	b2b3      	uxth	r3, r6
 801add0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801add4:	9305      	str	r3, [sp, #20]
 801add6:	9a05      	ldr	r2, [sp, #20]
 801add8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801addc:	4413      	add	r3, r2
 801adde:	b2ba      	uxth	r2, r7
 801ade0:	4492      	add	sl, r2
 801ade2:	b29b      	uxth	r3, r3
 801ade4:	fa1f fa8a 	uxth.w	sl, sl
 801ade8:	fa0f f883 	sxth.w	r8, r3
 801adec:	fa0f f98a 	sxth.w	r9, sl
 801adf0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801adf4:	9b04      	ldr	r3, [sp, #16]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d052      	beq.n	801aea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801adfa:	9903      	ldr	r1, [sp, #12]
 801adfc:	4620      	mov	r0, r4
 801adfe:	f7ff fcdd 	bl	801a7bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ae02:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ae06:	b1c0      	cbz	r0, 801ae3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae08:	f9b4 e000 	ldrsh.w	lr, [r4]
 801ae0c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801ae10:	4576      	cmp	r6, lr
 801ae12:	dc22      	bgt.n	801ae5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ae14:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ae18:	44f4      	add	ip, lr
 801ae1a:	fa0f fc8c 	sxth.w	ip, ip
 801ae1e:	45e0      	cmp	r8, ip
 801ae20:	db1b      	blt.n	801ae5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ae22:	428f      	cmp	r7, r1
 801ae24:	fa1f fc81 	uxth.w	ip, r1
 801ae28:	88e1      	ldrh	r1, [r4, #6]
 801ae2a:	dc0d      	bgt.n	801ae48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801ae2c:	ebaa 0c0c 	sub.w	ip, sl, ip
 801ae30:	f8a4 9002 	strh.w	r9, [r4, #2]
 801ae34:	eba1 010c 	sub.w	r1, r1, ip
 801ae38:	80e1      	strh	r1, [r4, #6]
 801ae3a:	4628      	mov	r0, r5
 801ae3c:	9904      	ldr	r1, [sp, #16]
 801ae3e:	3c08      	subs	r4, #8
 801ae40:	4605      	mov	r5, r0
 801ae42:	3901      	subs	r1, #1
 801ae44:	9104      	str	r1, [sp, #16]
 801ae46:	e7d3      	b.n	801adf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801ae48:	4461      	add	r1, ip
 801ae4a:	b209      	sxth	r1, r1
 801ae4c:	4549      	cmp	r1, r9
 801ae4e:	dcf5      	bgt.n	801ae3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ae50:	eba2 0c0c 	sub.w	ip, r2, ip
 801ae54:	f8a4 c006 	strh.w	ip, [r4, #6]
 801ae58:	e7ef      	b.n	801ae3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae5a:	428f      	cmp	r7, r1
 801ae5c:	dcee      	bgt.n	801ae3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ae5e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801ae62:	4461      	add	r1, ip
 801ae64:	b209      	sxth	r1, r1
 801ae66:	4589      	cmp	r9, r1
 801ae68:	dbe8      	blt.n	801ae3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ae6a:	4576      	cmp	r6, lr
 801ae6c:	fa1f fc8e 	uxth.w	ip, lr
 801ae70:	88a1      	ldrh	r1, [r4, #4]
 801ae72:	dc07      	bgt.n	801ae84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801ae74:	eba3 0c0c 	sub.w	ip, r3, ip
 801ae78:	f8a4 8000 	strh.w	r8, [r4]
 801ae7c:	eba1 010c 	sub.w	r1, r1, ip
 801ae80:	80a1      	strh	r1, [r4, #4]
 801ae82:	e7da      	b.n	801ae3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae84:	4461      	add	r1, ip
 801ae86:	b209      	sxth	r1, r1
 801ae88:	4588      	cmp	r8, r1
 801ae8a:	dbd7      	blt.n	801ae3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ae8c:	9905      	ldr	r1, [sp, #20]
 801ae8e:	eba1 0c0c 	sub.w	ip, r1, ip
 801ae92:	f8a4 c004 	strh.w	ip, [r4, #4]
 801ae96:	e7d0      	b.n	801ae3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ae98:	2402ae62 	.word	0x2402ae62
 801ae9c:	2402ae60 	.word	0x2402ae60
 801aea0:	2d00      	cmp	r5, #0
 801aea2:	f000 816d 	beq.w	801b180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801aea6:	9b06      	ldr	r3, [sp, #24]
 801aea8:	445b      	add	r3, fp
 801aeaa:	461c      	mov	r4, r3
 801aeac:	9b02      	ldr	r3, [sp, #8]
 801aeae:	3301      	adds	r3, #1
 801aeb0:	f000 8166 	beq.w	801b180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801aeb4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801aeb8:	9803      	ldr	r0, [sp, #12]
 801aeba:	4629      	mov	r1, r5
 801aebc:	f7ff fcf0 	bl	801a8a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801aec0:	b120      	cbz	r0, 801aecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801aec2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801aec6:	9801      	ldr	r0, [sp, #4]
 801aec8:	f7ff feb0 	bl	801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aecc:	9903      	ldr	r1, [sp, #12]
 801aece:	4628      	mov	r0, r5
 801aed0:	f7ff fc74 	bl	801a7bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801aed4:	2800      	cmp	r0, #0
 801aed6:	f000 809c 	beq.w	801b012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801aeda:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801aede:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801aee2:	fa1f f189 	uxth.w	r1, r9
 801aee6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801aeea:	9309      	str	r3, [sp, #36]	; 0x24
 801aeec:	eb01 0c03 	add.w	ip, r1, r3
 801aef0:	b283      	uxth	r3, r0
 801aef2:	4548      	cmp	r0, r9
 801aef4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801aef8:	fa1f fa8c 	uxth.w	sl, ip
 801aefc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801af00:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801af04:	eb03 050c 	add.w	r5, r3, ip
 801af08:	b2ad      	uxth	r5, r5
 801af0a:	9505      	str	r5, [sp, #20]
 801af0c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801af10:	9504      	str	r5, [sp, #16]
 801af12:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801af16:	f340 8099 	ble.w	801b04c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801af1a:	1a5b      	subs	r3, r3, r1
 801af1c:	4596      	cmp	lr, r2
 801af1e:	fa0f f08a 	sxth.w	r0, sl
 801af22:	b29b      	uxth	r3, r3
 801af24:	b21e      	sxth	r6, r3
 801af26:	dd2e      	ble.n	801af86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801af28:	9f02      	ldr	r7, [sp, #8]
 801af2a:	fa1f fe8e 	uxth.w	lr, lr
 801af2e:	b292      	uxth	r2, r2
 801af30:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801af34:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801af38:	9f04      	ldr	r7, [sp, #16]
 801af3a:	ebae 0102 	sub.w	r1, lr, r2
 801af3e:	44a6      	add	lr, r4
 801af40:	1a3f      	subs	r7, r7, r0
 801af42:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801af46:	b289      	uxth	r1, r1
 801af48:	4402      	add	r2, r0
 801af4a:	fa0f fe8e 	sxth.w	lr, lr
 801af4e:	b20d      	sxth	r5, r1
 801af50:	b212      	sxth	r2, r2
 801af52:	436f      	muls	r7, r5
 801af54:	ebae 0202 	sub.w	r2, lr, r2
 801af58:	4372      	muls	r2, r6
 801af5a:	4297      	cmp	r7, r2
 801af5c:	db09      	blt.n	801af72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801af5e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801af62:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801af66:	449c      	add	ip, r3
 801af68:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801af6c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801af70:	e686      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af72:	4421      	add	r1, r4
 801af74:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801af78:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801af7c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801af80:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801af84:	e67c      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af86:	9f04      	ldr	r7, [sp, #16]
 801af88:	42b8      	cmp	r0, r7
 801af8a:	da27      	bge.n	801afdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801af8c:	9902      	ldr	r1, [sp, #8]
 801af8e:	1a3f      	subs	r7, r7, r0
 801af90:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801af94:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801af98:	eb05 010e 	add.w	r1, r5, lr
 801af9c:	fa1f f881 	uxth.w	r8, r1
 801afa0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801afa4:	4411      	add	r1, r2
 801afa6:	fa0f f988 	sxth.w	r9, r8
 801afaa:	eba2 020e 	sub.w	r2, r2, lr
 801afae:	eba1 0108 	sub.w	r1, r1, r8
 801afb2:	4372      	muls	r2, r6
 801afb4:	b289      	uxth	r1, r1
 801afb6:	fa0f f881 	sxth.w	r8, r1
 801afba:	fb08 f707 	mul.w	r7, r8, r7
 801afbe:	42ba      	cmp	r2, r7
 801afc0:	dc06      	bgt.n	801afd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801afc2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801afc6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801afca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801afce:	e7ca      	b.n	801af66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801afd0:	4429      	add	r1, r5
 801afd2:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801afd6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801afda:	e651      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801afdc:	9805      	ldr	r0, [sp, #20]
 801afde:	2d06      	cmp	r5, #6
 801afe0:	ebaa 0000 	sub.w	r0, sl, r0
 801afe4:	b280      	uxth	r0, r0
 801afe6:	fa0f fe80 	sxth.w	lr, r0
 801afea:	d817      	bhi.n	801b01c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801afec:	9b04      	ldr	r3, [sp, #16]
 801afee:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801aff2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801aff6:	1c6b      	adds	r3, r5, #1
 801aff8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801affc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b000:	9b01      	ldr	r3, [sp, #4]
 801b002:	9801      	ldr	r0, [sp, #4]
 801b004:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b008:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b00c:	805a      	strh	r2, [r3, #2]
 801b00e:	809e      	strh	r6, [r3, #4]
 801b010:	80d9      	strh	r1, [r3, #6]
 801b012:	9b02      	ldr	r3, [sp, #8]
 801b014:	3c08      	subs	r4, #8
 801b016:	3b01      	subs	r3, #1
 801b018:	9302      	str	r3, [sp, #8]
 801b01a:	e747      	b.n	801aeac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b01c:	9a02      	ldr	r2, [sp, #8]
 801b01e:	45b6      	cmp	lr, r6
 801b020:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b024:	db0d      	blt.n	801b042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b026:	449c      	add	ip, r3
 801b028:	445a      	add	r2, fp
 801b02a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b02e:	fa1f fc8c 	uxth.w	ip, ip
 801b032:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801b036:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b03a:	448c      	add	ip, r1
 801b03c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801b040:	e61e      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b042:	445a      	add	r2, fp
 801b044:	4484      	add	ip, r0
 801b046:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801b04a:	e78f      	b.n	801af6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b04c:	fa1f f18e 	uxth.w	r1, lr
 801b050:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b054:	b293      	uxth	r3, r2
 801b056:	4596      	cmp	lr, r2
 801b058:	eb01 0806 	add.w	r8, r1, r6
 801b05c:	9306      	str	r3, [sp, #24]
 801b05e:	fa1f f888 	uxth.w	r8, r8
 801b062:	9f06      	ldr	r7, [sp, #24]
 801b064:	fa0f f388 	sxth.w	r3, r8
 801b068:	9307      	str	r3, [sp, #28]
 801b06a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801b06e:	443b      	add	r3, r7
 801b070:	b29b      	uxth	r3, r3
 801b072:	9308      	str	r3, [sp, #32]
 801b074:	da24      	bge.n	801b0c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b076:	9905      	ldr	r1, [sp, #20]
 801b078:	eba3 0308 	sub.w	r3, r3, r8
 801b07c:	eba2 020e 	sub.w	r2, r2, lr
 801b080:	eba9 0000 	sub.w	r0, r9, r0
 801b084:	ebaa 0401 	sub.w	r4, sl, r1
 801b088:	b29b      	uxth	r3, r3
 801b08a:	b2a4      	uxth	r4, r4
 801b08c:	b219      	sxth	r1, r3
 801b08e:	b225      	sxth	r5, r4
 801b090:	4348      	muls	r0, r1
 801b092:	436a      	muls	r2, r5
 801b094:	4282      	cmp	r2, r0
 801b096:	9a02      	ldr	r2, [sp, #8]
 801b098:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b09c:	445a      	add	r2, fp
 801b09e:	dc06      	bgt.n	801b0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b0a0:	9b07      	ldr	r3, [sp, #28]
 801b0a2:	44a4      	add	ip, r4
 801b0a4:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801b0a8:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801b0ac:	e75e      	b.n	801af6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b0ae:	9904      	ldr	r1, [sp, #16]
 801b0b0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801b0b4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801b0b8:	4433      	add	r3, r6
 801b0ba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b0be:	e5df      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b0c0:	9f06      	ldr	r7, [sp, #24]
 801b0c2:	9b04      	ldr	r3, [sp, #16]
 801b0c4:	1bc9      	subs	r1, r1, r7
 801b0c6:	fa0f f78a 	sxth.w	r7, sl
 801b0ca:	b289      	uxth	r1, r1
 801b0cc:	429f      	cmp	r7, r3
 801b0ce:	fa0f fe81 	sxth.w	lr, r1
 801b0d2:	dd23      	ble.n	801b11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b0d4:	9a05      	ldr	r2, [sp, #20]
 801b0d6:	eba9 0000 	sub.w	r0, r9, r0
 801b0da:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b0de:	ebaa 0202 	sub.w	r2, sl, r2
 801b0e2:	9d07      	ldr	r5, [sp, #28]
 801b0e4:	fb0e f000 	mul.w	r0, lr, r0
 801b0e8:	b292      	uxth	r2, r2
 801b0ea:	eba5 0a03 	sub.w	sl, r5, r3
 801b0ee:	9b02      	ldr	r3, [sp, #8]
 801b0f0:	b214      	sxth	r4, r2
 801b0f2:	00db      	lsls	r3, r3, #3
 801b0f4:	fb04 fa0a 	mul.w	sl, r4, sl
 801b0f8:	445b      	add	r3, fp
 801b0fa:	4550      	cmp	r0, sl
 801b0fc:	db03      	blt.n	801b106 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b0fe:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801b102:	4494      	add	ip, r2
 801b104:	e732      	b.n	801af6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b106:	9a04      	ldr	r2, [sp, #16]
 801b108:	4431      	add	r1, r6
 801b10a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801b10e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801b112:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801b116:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b11a:	e75c      	b.n	801afd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b11c:	9b08      	ldr	r3, [sp, #32]
 801b11e:	2d06      	cmp	r5, #6
 801b120:	eba3 0308 	sub.w	r3, r3, r8
 801b124:	b29b      	uxth	r3, r3
 801b126:	b218      	sxth	r0, r3
 801b128:	d813      	bhi.n	801b152 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b12a:	9b07      	ldr	r3, [sp, #28]
 801b12c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801b130:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801b134:	1c6b      	adds	r3, r5, #1
 801b136:	9901      	ldr	r1, [sp, #4]
 801b138:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b13c:	9b01      	ldr	r3, [sp, #4]
 801b13e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b142:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b146:	805a      	strh	r2, [r3, #2]
 801b148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b14a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b14e:	809a      	strh	r2, [r3, #4]
 801b150:	e75f      	b.n	801b012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b152:	9c02      	ldr	r4, [sp, #8]
 801b154:	4570      	cmp	r0, lr
 801b156:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b15a:	db0d      	blt.n	801b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b15c:	4431      	add	r1, r6
 801b15e:	9b06      	ldr	r3, [sp, #24]
 801b160:	445c      	add	r4, fp
 801b162:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b166:	b289      	uxth	r1, r1
 801b168:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801b16c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b170:	4419      	add	r1, r3
 801b172:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801b176:	e583      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b178:	445c      	add	r4, fp
 801b17a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801b17e:	e79b      	b.n	801b0b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b180:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801b184:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b188:	1e65      	subs	r5, r4, #1
 801b18a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b18e:	b2ad      	uxth	r5, r5
 801b190:	42b5      	cmp	r5, r6
 801b192:	d044      	beq.n	801b21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b194:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b198:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801b19c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801b1a0:	4282      	cmp	r2, r0
 801b1a2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801b1a6:	d11f      	bne.n	801b1e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b1a8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801b1ac:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801b1b0:	459c      	cmp	ip, r3
 801b1b2:	d119      	bne.n	801b1e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b1b4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801b1b8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b1bc:	19d8      	adds	r0, r3, r7
 801b1be:	b200      	sxth	r0, r0
 801b1c0:	4288      	cmp	r0, r1
 801b1c2:	d109      	bne.n	801b1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b1c4:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801b1c8:	4413      	add	r3, r2
 801b1ca:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	9801      	ldr	r0, [sp, #4]
 801b1d2:	f7ff fd2b 	bl	801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b1d6:	e003      	b.n	801b1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b1d8:	4411      	add	r1, r2
 801b1da:	b209      	sxth	r1, r1
 801b1dc:	42b9      	cmp	r1, r7
 801b1de:	d0f3      	beq.n	801b1c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b1e0:	3d01      	subs	r5, #1
 801b1e2:	3c08      	subs	r4, #8
 801b1e4:	b2ad      	uxth	r5, r5
 801b1e6:	e7d3      	b.n	801b190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b1e8:	42b9      	cmp	r1, r7
 801b1ea:	d1f9      	bne.n	801b1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b1ec:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801b1f0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b1f4:	4299      	cmp	r1, r3
 801b1f6:	d1f3      	bne.n	801b1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b1f8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801b1fc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b200:	181f      	adds	r7, r3, r0
 801b202:	b23f      	sxth	r7, r7
 801b204:	42ba      	cmp	r2, r7
 801b206:	d105      	bne.n	801b214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b208:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801b20c:	440b      	add	r3, r1
 801b20e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b212:	e7dc      	b.n	801b1ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b214:	440a      	add	r2, r1
 801b216:	b212      	sxth	r2, r2
 801b218:	4290      	cmp	r0, r2
 801b21a:	d1e1      	bne.n	801b1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b21c:	e7f6      	b.n	801b20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b21e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801b222:	2e07      	cmp	r6, #7
 801b224:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b228:	d812      	bhi.n	801b250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b22a:	1c75      	adds	r5, r6, #1
 801b22c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b230:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801b234:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801b238:	9d01      	ldr	r5, [sp, #4]
 801b23a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b23e:	442c      	add	r4, r5
 801b240:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b244:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b248:	8061      	strh	r1, [r4, #2]
 801b24a:	80a2      	strh	r2, [r4, #4]
 801b24c:	80e3      	strh	r3, [r4, #6]
 801b24e:	e581      	b.n	801ad54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b250:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801b254:	3e01      	subs	r6, #1
 801b256:	445c      	add	r4, fp
 801b258:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b25c:	f04f 37ff 	mov.w	r7, #4294967295
 801b260:	2500      	movs	r5, #0
 801b262:	9305      	str	r3, [sp, #20]
 801b264:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b268:	1e72      	subs	r2, r6, #1
 801b26a:	9302      	str	r3, [sp, #8]
 801b26c:	4691      	mov	r9, r2
 801b26e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801b272:	9304      	str	r3, [sp, #16]
 801b274:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801b278:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b27c:	6818      	ldr	r0, [r3, #0]
 801b27e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b282:	9207      	str	r2, [sp, #28]
 801b284:	bf16      	itet	ne
 801b286:	9905      	ldrne	r1, [sp, #20]
 801b288:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b28c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b290:	9306      	str	r3, [sp, #24]
 801b292:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b296:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b29a:	fb18 f801 	smulbb	r8, r8, r1
 801b29e:	6859      	ldr	r1, [r3, #4]
 801b2a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b2a4:	4671      	mov	r1, lr
 801b2a6:	a80c      	add	r0, sp, #48	; 0x30
 801b2a8:	f7ff fb20 	bl	801a8ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b2ac:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b2b0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b2b4:	f04f 0c08 	mov.w	ip, #8
 801b2b8:	9b04      	ldr	r3, [sp, #16]
 801b2ba:	9a02      	ldr	r2, [sp, #8]
 801b2bc:	fb10 f001 	smulbb	r0, r0, r1
 801b2c0:	fb02 8803 	mla	r8, r2, r3, r8
 801b2c4:	eba0 0108 	sub.w	r1, r0, r8
 801b2c8:	fb90 f0fc 	sdiv	r0, r0, ip
 801b2cc:	4288      	cmp	r0, r1
 801b2ce:	dc20      	bgt.n	801b312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b2d0:	4551      	cmp	r1, sl
 801b2d2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b2d6:	da03      	bge.n	801b2e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801b2d8:	b1d9      	cbz	r1, 801b312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b2da:	468a      	mov	sl, r1
 801b2dc:	464f      	mov	r7, r9
 801b2de:	4635      	mov	r5, r6
 801b2e0:	f109 39ff 	add.w	r9, r9, #4294967295
 801b2e4:	f119 0f02 	cmn.w	r9, #2
 801b2e8:	d1c6      	bne.n	801b278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b2ea:	4616      	mov	r6, r2
 801b2ec:	3201      	adds	r2, #1
 801b2ee:	f1a4 0408 	sub.w	r4, r4, #8
 801b2f2:	d1b7      	bne.n	801b264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b2f4:	9b01      	ldr	r3, [sp, #4]
 801b2f6:	b2ac      	uxth	r4, r5
 801b2f8:	00ed      	lsls	r5, r5, #3
 801b2fa:	1958      	adds	r0, r3, r5
 801b2fc:	1c7b      	adds	r3, r7, #1
 801b2fe:	d10b      	bne.n	801b318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801b300:	4601      	mov	r1, r0
 801b302:	9803      	ldr	r0, [sp, #12]
 801b304:	f7ff faf2 	bl	801a8ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b308:	4621      	mov	r1, r4
 801b30a:	9801      	ldr	r0, [sp, #4]
 801b30c:	f7ff fc8e 	bl	801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b310:	e4b6      	b.n	801ac80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b312:	464f      	mov	r7, r9
 801b314:	4635      	mov	r5, r6
 801b316:	e7ed      	b.n	801b2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801b318:	9b01      	ldr	r3, [sp, #4]
 801b31a:	00ff      	lsls	r7, r7, #3
 801b31c:	445d      	add	r5, fp
 801b31e:	19d9      	adds	r1, r3, r7
 801b320:	445f      	add	r7, fp
 801b322:	f7ff fae3 	bl	801a8ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b326:	9b03      	ldr	r3, [sp, #12]
 801b328:	cb03      	ldmia	r3!, {r0, r1}
 801b32a:	9b03      	ldr	r3, [sp, #12]
 801b32c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801b330:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801b334:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b338:	6869      	ldr	r1, [r5, #4]
 801b33a:	c303      	stmia	r3!, {r0, r1}
 801b33c:	e7e4      	b.n	801b308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801b33e:	bf00      	nop

0801b340 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b344:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801b348:	b09b      	sub	sp, #108	; 0x6c
 801b34a:	4604      	mov	r4, r0
 801b34c:	4630      	mov	r0, r6
 801b34e:	f7fb ff5a 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b352:	4605      	mov	r5, r0
 801b354:	b948      	cbnz	r0, 801b36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b356:	6823      	ldr	r3, [r4, #0]
 801b358:	4620      	mov	r0, r4
 801b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b35c:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b360:	4798      	blx	r3
 801b362:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b366:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801b36a:	4bc5      	ldr	r3, [pc, #788]	; (801b680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d03f      	beq.n	801b3f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b372:	4dc4      	ldr	r5, [pc, #784]	; (801b684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801b374:	4628      	mov	r0, r5
 801b376:	f7fb ff46 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b37a:	4606      	mov	r6, r0
 801b37c:	2800      	cmp	r0, #0
 801b37e:	d138      	bne.n	801b3f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b380:	4628      	mov	r0, r5
 801b382:	f7ff f951 	bl	801a628 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b386:	6823      	ldr	r3, [r4, #0]
 801b388:	6829      	ldr	r1, [r5, #0]
 801b38a:	4620      	mov	r0, r4
 801b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b38e:	686a      	ldr	r2, [r5, #4]
 801b390:	4798      	blx	r3
 801b392:	802e      	strh	r6, [r5, #0]
 801b394:	806e      	strh	r6, [r5, #2]
 801b396:	80ae      	strh	r6, [r5, #4]
 801b398:	80ee      	strh	r6, [r5, #6]
 801b39a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801b39e:	4dba      	ldr	r5, [pc, #744]	; (801b688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801b3a0:	4640      	mov	r0, r8
 801b3a2:	f7ff fbe8 	bl	801ab76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b3a6:	882e      	ldrh	r6, [r5, #0]
 801b3a8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801b3ac:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801b3b0:	4633      	mov	r3, r6
 801b3b2:	42bb      	cmp	r3, r7
 801b3b4:	d224      	bcs.n	801b400 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b3b6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801b3ba:	2907      	cmp	r1, #7
 801b3bc:	d816      	bhi.n	801b3ec <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801b3be:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b3c2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801b3c6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801b3ca:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b3ce:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b3d2:	1c4a      	adds	r2, r1, #1
 801b3d4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801b3d8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801b3dc:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801b3e0:	f8a2 a002 	strh.w	sl, [r2, #2]
 801b3e4:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b3e8:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	b29b      	uxth	r3, r3
 801b3f0:	e7df      	b.n	801b3b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801b3f2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d1cf      	bne.n	801b39a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801b3fa:	b01b      	add	sp, #108	; 0x6c
 801b3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b400:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801b404:	42b3      	cmp	r3, r6
 801b406:	d90c      	bls.n	801b422 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801b408:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b40c:	6822      	ldr	r2, [r4, #0]
 801b40e:	3601      	adds	r6, #1
 801b410:	4620      	mov	r0, r4
 801b412:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801b414:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801b418:	b2b6      	uxth	r6, r6
 801b41a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801b41e:	47b8      	blx	r7
 801b420:	e7ee      	b.n	801b400 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b422:	4a9a      	ldr	r2, [pc, #616]	; (801b68c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b424:	6813      	ldr	r3, [r2, #0]
 801b426:	4691      	mov	r9, r2
 801b428:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b42c:	2b01      	cmp	r3, #1
 801b42e:	f040 80e0 	bne.w	801b5f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801b432:	8829      	ldrh	r1, [r5, #0]
 801b434:	2600      	movs	r6, #0
 801b436:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801b43a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801b43e:	33ae      	adds	r3, #174	; 0xae
 801b440:	428f      	cmp	r7, r1
 801b442:	f103 0308 	add.w	r3, r3, #8
 801b446:	dd0a      	ble.n	801b45e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801b448:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801b44c:	3101      	adds	r1, #1
 801b44e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801b452:	4402      	add	r2, r0
 801b454:	b212      	sxth	r2, r2
 801b456:	4296      	cmp	r6, r2
 801b458:	bfb8      	it	lt
 801b45a:	4616      	movlt	r6, r2
 801b45c:	e7f0      	b.n	801b440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801b45e:	4b8c      	ldr	r3, [pc, #560]	; (801b690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b460:	f8df 9228 	ldr.w	r9, [pc, #552]	; 801b68c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801b464:	881b      	ldrh	r3, [r3, #0]
 801b466:	2b0f      	cmp	r3, #15
 801b468:	bf8c      	ite	hi
 801b46a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801b46e:	f04f 0b01 	movls.w	fp, #1
 801b472:	2300      	movs	r3, #0
 801b474:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b478:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801b47c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801b480:	4b82      	ldr	r3, [pc, #520]	; (801b68c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b482:	4438      	add	r0, r7
 801b484:	b207      	sxth	r7, r0
 801b486:	6818      	ldr	r0, [r3, #0]
 801b488:	42b7      	cmp	r7, r6
 801b48a:	6803      	ldr	r3, [r0, #0]
 801b48c:	f280 8083 	bge.w	801b596 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801b490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b494:	4798      	blx	r3
 801b496:	eb07 030b 	add.w	r3, r7, fp
 801b49a:	4298      	cmp	r0, r3
 801b49c:	da07      	bge.n	801b4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b49e:	42b0      	cmp	r0, r6
 801b4a0:	da05      	bge.n	801b4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b4a2:	4287      	cmp	r7, r0
 801b4a4:	dd6c      	ble.n	801b580 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b4a6:	2f00      	cmp	r7, #0
 801b4a8:	dd6a      	ble.n	801b580 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b4aa:	4630      	mov	r0, r6
 801b4ac:	e004      	b.n	801b4b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801b4ae:	4287      	cmp	r7, r0
 801b4b0:	dcfb      	bgt.n	801b4aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801b4b2:	42b0      	cmp	r0, r6
 801b4b4:	bfa8      	it	ge
 801b4b6:	4630      	movge	r0, r6
 801b4b8:	4b76      	ldr	r3, [pc, #472]	; (801b694 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801b4ba:	1bc0      	subs	r0, r0, r7
 801b4bc:	2200      	movs	r2, #0
 801b4be:	f8ad 7016 	strh.w	r7, [sp, #22]
 801b4c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4c6:	882f      	ldrh	r7, [r5, #0]
 801b4c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b4cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b4d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b4d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801b4d8:	42bb      	cmp	r3, r7
 801b4da:	d9cd      	bls.n	801b478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801b4dc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801b4e0:	ab07      	add	r3, sp, #28
 801b4e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b4e6:	6851      	ldr	r1, [r2, #4]
 801b4e8:	c303      	stmia	r3!, {r0, r1}
 801b4ea:	a905      	add	r1, sp, #20
 801b4ec:	a807      	add	r0, sp, #28
 801b4ee:	f7ff f965 	bl	801a7bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b4f2:	2800      	cmp	r0, #0
 801b4f4:	d04c      	beq.n	801b590 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801b4f6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801b4fa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b4fe:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801b502:	4686      	mov	lr, r0
 801b504:	4290      	cmp	r0, r2
 801b506:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801b50a:	4450      	add	r0, sl
 801b50c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801b510:	bfb8      	it	lt
 801b512:	4696      	movlt	lr, r2
 801b514:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b518:	4452      	add	r2, sl
 801b51a:	b280      	uxth	r0, r0
 801b51c:	4299      	cmp	r1, r3
 801b51e:	468c      	mov	ip, r1
 801b520:	b292      	uxth	r2, r2
 801b522:	9302      	str	r3, [sp, #8]
 801b524:	bfb8      	it	lt
 801b526:	469c      	movlt	ip, r3
 801b528:	b203      	sxth	r3, r0
 801b52a:	fa0f fa82 	sxth.w	sl, r2
 801b52e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b532:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b536:	4553      	cmp	r3, sl
 801b538:	bfb8      	it	lt
 801b53a:	4602      	movlt	r2, r0
 801b53c:	9b02      	ldr	r3, [sp, #8]
 801b53e:	eba2 020e 	sub.w	r2, r2, lr
 801b542:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b546:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b54a:	4411      	add	r1, r2
 801b54c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b550:	4413      	add	r3, r2
 801b552:	b289      	uxth	r1, r1
 801b554:	b29b      	uxth	r3, r3
 801b556:	b208      	sxth	r0, r1
 801b558:	b21a      	sxth	r2, r3
 801b55a:	4290      	cmp	r0, r2
 801b55c:	bfb8      	it	lt
 801b55e:	460b      	movlt	r3, r1
 801b560:	eba3 030c 	sub.w	r3, r3, ip
 801b564:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b568:	a807      	add	r0, sp, #28
 801b56a:	f7fb fe4c 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b56e:	b920      	cbnz	r0, 801b57a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801b570:	6823      	ldr	r3, [r4, #0]
 801b572:	a907      	add	r1, sp, #28
 801b574:	4620      	mov	r0, r4
 801b576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b578:	4798      	blx	r3
 801b57a:	3701      	adds	r7, #1
 801b57c:	b2bf      	uxth	r7, r7
 801b57e:	e7a9      	b.n	801b4d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801b580:	f8d9 0000 	ldr.w	r0, [r9]
 801b584:	2101      	movs	r1, #1
 801b586:	6803      	ldr	r3, [r0, #0]
 801b588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b58c:	4798      	blx	r3
 801b58e:	e773      	b.n	801b478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801b590:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801b594:	e7e8      	b.n	801b568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b598:	4798      	blx	r3
 801b59a:	4b3f      	ldr	r3, [pc, #252]	; (801b698 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801b59c:	781b      	ldrb	r3, [r3, #0]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	f43f af2b 	beq.w	801b3fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801b5aa:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801b5ae:	882b      	ldrh	r3, [r5, #0]
 801b5b0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801b5b4:	42ab      	cmp	r3, r5
 801b5b6:	f4bf af20 	bcs.w	801b3fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b5ba:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801b5be:	2907      	cmp	r1, #7
 801b5c0:	d814      	bhi.n	801b5ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801b5c2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b5c6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801b5ca:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801b5ce:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801b5d2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801b5d6:	1c4a      	adds	r2, r1, #1
 801b5d8:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801b5dc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801b5e0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801b5e4:	f8a2 c002 	strh.w	ip, [r2, #2]
 801b5e8:	8097      	strh	r7, [r2, #4]
 801b5ea:	80d6      	strh	r6, [r2, #6]
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	e7e0      	b.n	801b5b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801b5f2:	2b02      	cmp	r3, #2
 801b5f4:	f040 8133 	bne.w	801b85e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801b5f8:	4b28      	ldr	r3, [pc, #160]	; (801b69c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801b5fa:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801b5fe:	781b      	ldrb	r3, [r3, #0]
 801b600:	2b01      	cmp	r3, #1
 801b602:	f000 8098 	beq.w	801b736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b606:	882a      	ldrh	r2, [r5, #0]
 801b608:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801b60c:	3201      	adds	r2, #1
 801b60e:	b292      	uxth	r2, r2
 801b610:	2900      	cmp	r1, #0
 801b612:	d0c2      	beq.n	801b59a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b614:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801b618:	4694      	mov	ip, r2
 801b61a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801b61e:	f04f 0900 	mov.w	r9, #0
 801b622:	441e      	add	r6, r3
 801b624:	b236      	sxth	r6, r6
 801b626:	fa1f f38c 	uxth.w	r3, ip
 801b62a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801b62e:	4299      	cmp	r1, r3
 801b630:	f240 80be 	bls.w	801b7b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801b634:	4427      	add	r7, r4
 801b636:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801b63a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801b63e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801b642:	4283      	cmp	r3, r0
 801b644:	f340 80a0 	ble.w	801b788 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801b648:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801b64c:	46e1      	mov	r9, ip
 801b64e:	4406      	add	r6, r0
 801b650:	b236      	sxth	r6, r6
 801b652:	429e      	cmp	r6, r3
 801b654:	bfa8      	it	ge
 801b656:	461e      	movge	r6, r3
 801b658:	f10c 0c01 	add.w	ip, ip, #1
 801b65c:	e7e3      	b.n	801b626 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801b65e:	d10a      	bne.n	801b676 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801b660:	4562      	cmp	r2, ip
 801b662:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801b666:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801b66a:	bfb8      	it	lt
 801b66c:	4662      	movlt	r2, ip
 801b66e:	4288      	cmp	r0, r1
 801b670:	bfb8      	it	lt
 801b672:	461f      	movlt	r7, r3
 801b674:	e086      	b.n	801b784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801b676:	428a      	cmp	r2, r1
 801b678:	bfb8      	it	lt
 801b67a:	460a      	movlt	r2, r1
 801b67c:	e082      	b.n	801b784 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801b67e:	bf00      	nop
 801b680:	2402aea4 	.word	0x2402aea4
 801b684:	2402aeb0 	.word	0x2402aeb0
 801b688:	24000064 	.word	0x24000064
 801b68c:	2402ae6c 	.word	0x2402ae6c
 801b690:	2402ae62 	.word	0x2402ae62
 801b694:	2402ae60 	.word	0x2402ae60
 801b698:	2402ae6a 	.word	0x2402ae6a
 801b69c:	2402ae64 	.word	0x2402ae64
 801b6a0:	19a1      	adds	r1, r4, r6
 801b6a2:	ab07      	add	r3, sp, #28
 801b6a4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801b6a8:	6849      	ldr	r1, [r1, #4]
 801b6aa:	c303      	stmia	r3!, {r0, r1}
 801b6ac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b6b0:	a807      	add	r0, sp, #28
 801b6b2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b6b6:	2b13      	cmp	r3, #19
 801b6b8:	440b      	add	r3, r1
 801b6ba:	bfd8      	it	le
 801b6bc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b6c0:	1a9b      	subs	r3, r3, r2
 801b6c2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b6c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b6ca:	f7fe ffc7 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6ce:	a807      	add	r0, sp, #28
 801b6d0:	f7fb fd99 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6d4:	bb78      	cbnz	r0, 801b736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b6d6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b6da:	4426      	add	r6, r4
 801b6dc:	f8d9 0000 	ldr.w	r0, [r9]
 801b6e0:	f1bc 0f14 	cmp.w	ip, #20
 801b6e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b6e8:	f8d0 e000 	ldr.w	lr, [r0]
 801b6ec:	bfa8      	it	ge
 801b6ee:	f04f 0c14 	movge.w	ip, #20
 801b6f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b6f6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b6fa:	fa1f fc8c 	uxth.w	ip, ip
 801b6fe:	f8cd c000 	str.w	ip, [sp]
 801b702:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801b706:	47d8      	blx	fp
 801b708:	4683      	mov	fp, r0
 801b70a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b70e:	a807      	add	r0, sp, #28
 801b710:	f7fe ff8a 	bl	801a628 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b714:	6823      	ldr	r3, [r4, #0]
 801b716:	4620      	mov	r0, r4
 801b718:	a907      	add	r1, sp, #28
 801b71a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b71c:	4798      	blx	r3
 801b71e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801b722:	eba0 000b 	sub.w	r0, r0, fp
 801b726:	b200      	sxth	r0, r0
 801b728:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801b72c:	b918      	cbnz	r0, 801b736 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b72e:	b2b9      	uxth	r1, r7
 801b730:	4650      	mov	r0, sl
 801b732:	f7ff fa7b 	bl	801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b736:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801b73a:	f1bb 0f00 	cmp.w	fp, #0
 801b73e:	f43f af2c 	beq.w	801b59a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b742:	882b      	ldrh	r3, [r5, #0]
 801b744:	2700      	movs	r7, #0
 801b746:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801b74a:	3301      	adds	r3, #1
 801b74c:	b29b      	uxth	r3, r3
 801b74e:	b299      	uxth	r1, r3
 801b750:	00fe      	lsls	r6, r7, #3
 801b752:	458b      	cmp	fp, r1
 801b754:	d9a4      	bls.n	801b6a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801b756:	4426      	add	r6, r4
 801b758:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801b75c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801b760:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801b764:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801b768:	4408      	add	r0, r1
 801b76a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801b76e:	4461      	add	r1, ip
 801b770:	b200      	sxth	r0, r0
 801b772:	b209      	sxth	r1, r1
 801b774:	4288      	cmp	r0, r1
 801b776:	f6bf af72 	bge.w	801b65e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801b77a:	4584      	cmp	ip, r0
 801b77c:	4662      	mov	r2, ip
 801b77e:	461f      	mov	r7, r3
 801b780:	bfb8      	it	lt
 801b782:	4602      	movlt	r2, r0
 801b784:	3301      	adds	r3, #1
 801b786:	e7e2      	b.n	801b74e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801b788:	d10e      	bne.n	801b7a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801b78a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801b78e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801b792:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801b796:	4473      	add	r3, lr
 801b798:	b21b      	sxth	r3, r3
 801b79a:	429e      	cmp	r6, r3
 801b79c:	bfa8      	it	ge
 801b79e:	461e      	movge	r6, r3
 801b7a0:	4287      	cmp	r7, r0
 801b7a2:	bfb8      	it	lt
 801b7a4:	46e1      	movlt	r9, ip
 801b7a6:	e757      	b.n	801b658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b7a8:	4286      	cmp	r6, r0
 801b7aa:	bfa8      	it	ge
 801b7ac:	4606      	movge	r6, r0
 801b7ae:	e753      	b.n	801b658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b7b0:	eb0a 0007 	add.w	r0, sl, r7
 801b7b4:	4427      	add	r7, r4
 801b7b6:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801b7ba:	f1bb 0f13 	cmp.w	fp, #19
 801b7be:	bfdc      	itt	le
 801b7c0:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801b7c4:	445e      	addle	r6, fp
 801b7c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b7ca:	bfd8      	it	le
 801b7cc:	b236      	sxthle	r6, r6
 801b7ce:	f7fb fd1a 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7d2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	f47f af1a 	bne.w	801b610 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801b7dc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801b7e0:	fa1f fb8b 	uxth.w	fp, fp
 801b7e4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b7e8:	1ab6      	subs	r6, r6, r2
 801b7ea:	4829      	ldr	r0, [pc, #164]	; (801b890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801b7ec:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801b7f0:	2e14      	cmp	r6, #20
 801b7f2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801b7f6:	6800      	ldr	r0, [r0, #0]
 801b7f8:	bfa8      	it	ge
 801b7fa:	2614      	movge	r6, #20
 801b7fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b800:	f8ad 201e 	strh.w	r2, [sp, #30]
 801b804:	b289      	uxth	r1, r1
 801b806:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b80a:	b2b6      	uxth	r6, r6
 801b80c:	f8d0 c000 	ldr.w	ip, [r0]
 801b810:	b292      	uxth	r2, r2
 801b812:	455e      	cmp	r6, fp
 801b814:	bf94      	ite	ls
 801b816:	9600      	strls	r6, [sp, #0]
 801b818:	f8cd b000 	strhi.w	fp, [sp]
 801b81c:	b29b      	uxth	r3, r3
 801b81e:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801b822:	47b0      	blx	r6
 801b824:	6823      	ldr	r3, [r4, #0]
 801b826:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b82a:	a907      	add	r1, sp, #28
 801b82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b82e:	4620      	mov	r0, r4
 801b830:	4798      	blx	r3
 801b832:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b836:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b83a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801b83e:	1a5b      	subs	r3, r3, r1
 801b840:	440a      	add	r2, r1
 801b842:	b21b      	sxth	r3, r3
 801b844:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801b848:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	f47f aeda 	bne.w	801b606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801b852:	fa1f f189 	uxth.w	r1, r9
 801b856:	4650      	mov	r0, sl
 801b858:	f7ff f9e8 	bl	801ac2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b85c:	e6d3      	b.n	801b606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801b85e:	882e      	ldrh	r6, [r5, #0]
 801b860:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801b864:	42b3      	cmp	r3, r6
 801b866:	f67f ae98 	bls.w	801b59a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b86a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801b86e:	ab07      	add	r3, sp, #28
 801b870:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b874:	6851      	ldr	r1, [r2, #4]
 801b876:	c303      	stmia	r3!, {r0, r1}
 801b878:	a807      	add	r0, sp, #28
 801b87a:	f7fb fcc4 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b87e:	b920      	cbnz	r0, 801b88a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801b880:	6823      	ldr	r3, [r4, #0]
 801b882:	a907      	add	r1, sp, #28
 801b884:	4620      	mov	r0, r4
 801b886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b888:	4798      	blx	r3
 801b88a:	3601      	adds	r6, #1
 801b88c:	b2b6      	uxth	r6, r6
 801b88e:	e7e7      	b.n	801b860 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801b890:	2402ae6c 	.word	0x2402ae6c

0801b894 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b894:	4b03      	ldr	r3, [pc, #12]	; (801b8a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b896:	2200      	movs	r2, #0
 801b898:	801a      	strh	r2, [r3, #0]
 801b89a:	805a      	strh	r2, [r3, #2]
 801b89c:	809a      	strh	r2, [r3, #4]
 801b89e:	80da      	strh	r2, [r3, #6]
 801b8a0:	4770      	bx	lr
 801b8a2:	bf00      	nop
 801b8a4:	2402aeb0 	.word	0x2402aeb0

0801b8a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ac:	b09d      	sub	sp, #116	; 0x74
 801b8ae:	4606      	mov	r6, r0
 801b8b0:	4614      	mov	r4, r2
 801b8b2:	468a      	mov	sl, r1
 801b8b4:	a803      	add	r0, sp, #12
 801b8b6:	461d      	mov	r5, r3
 801b8b8:	f000 fe6d 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 801b8bc:	6833      	ldr	r3, [r6, #0]
 801b8be:	4630      	mov	r0, r6
 801b8c0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8c6:	4798      	blx	r3
 801b8c8:	6833      	ldr	r3, [r6, #0]
 801b8ca:	4607      	mov	r7, r0
 801b8cc:	4630      	mov	r0, r6
 801b8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b8d0:	4798      	blx	r3
 801b8d2:	462a      	mov	r2, r5
 801b8d4:	2500      	movs	r5, #0
 801b8d6:	4621      	mov	r1, r4
 801b8d8:	9000      	str	r0, [sp, #0]
 801b8da:	463b      	mov	r3, r7
 801b8dc:	462c      	mov	r4, r5
 801b8de:	46a9      	mov	r9, r5
 801b8e0:	46a8      	mov	r8, r5
 801b8e2:	a803      	add	r0, sp, #12
 801b8e4:	f000 feb2 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	9302      	str	r3, [sp, #8]
 801b8ec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b8f0:	429c      	cmp	r4, r3
 801b8f2:	d002      	beq.n	801b8fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b8f4:	455c      	cmp	r4, fp
 801b8f6:	bf18      	it	ne
 801b8f8:	4625      	movne	r5, r4
 801b8fa:	ab02      	add	r3, sp, #8
 801b8fc:	4632      	mov	r2, r6
 801b8fe:	4651      	mov	r1, sl
 801b900:	a803      	add	r0, sp, #12
 801b902:	f001 f9a9 	bl	801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b906:	4604      	mov	r4, r0
 801b908:	b108      	cbz	r0, 801b90e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b90a:	280a      	cmp	r0, #10
 801b90c:	d10a      	bne.n	801b924 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b90e:	45c1      	cmp	r9, r8
 801b910:	bf38      	it	cc
 801b912:	46c1      	movcc	r9, r8
 801b914:	f04f 0800 	mov.w	r8, #0
 801b918:	2c00      	cmp	r4, #0
 801b91a:	d1e5      	bne.n	801b8e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b91c:	4648      	mov	r0, r9
 801b91e:	b01d      	add	sp, #116	; 0x74
 801b920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b924:	9a02      	ldr	r2, [sp, #8]
 801b926:	2a00      	cmp	r2, #0
 801b928:	d0de      	beq.n	801b8e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b92a:	7b57      	ldrb	r7, [r2, #13]
 801b92c:	4629      	mov	r1, r5
 801b92e:	6833      	ldr	r3, [r6, #0]
 801b930:	007f      	lsls	r7, r7, #1
 801b932:	8894      	ldrh	r4, [r2, #4]
 801b934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b936:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b93a:	7a97      	ldrb	r7, [r2, #10]
 801b93c:	4307      	orrs	r7, r0
 801b93e:	4630      	mov	r0, r6
 801b940:	4798      	blx	r3
 801b942:	4438      	add	r0, r7
 801b944:	4480      	add	r8, r0
 801b946:	fa1f f888 	uxth.w	r8, r8
 801b94a:	e7e5      	b.n	801b918 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b94c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b94c:	b508      	push	{r3, lr}
 801b94e:	6803      	ldr	r3, [r0, #0]
 801b950:	68db      	ldr	r3, [r3, #12]
 801b952:	4798      	blx	r3
 801b954:	b128      	cbz	r0, 801b962 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b956:	7b43      	ldrb	r3, [r0, #13]
 801b958:	7a80      	ldrb	r0, [r0, #10]
 801b95a:	005b      	lsls	r3, r3, #1
 801b95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b960:	4318      	orrs	r0, r3
 801b962:	bd08      	pop	{r3, pc}

0801b964 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b964:	b40e      	push	{r1, r2, r3}
 801b966:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b968:	b09e      	sub	sp, #120	; 0x78
 801b96a:	4605      	mov	r5, r0
 801b96c:	ab23      	add	r3, sp, #140	; 0x8c
 801b96e:	a805      	add	r0, sp, #20
 801b970:	f853 4b04 	ldr.w	r4, [r3], #4
 801b974:	9303      	str	r3, [sp, #12]
 801b976:	f000 fe0e 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 801b97a:	682b      	ldr	r3, [r5, #0]
 801b97c:	4628      	mov	r0, r5
 801b97e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b980:	4798      	blx	r3
 801b982:	682b      	ldr	r3, [r5, #0]
 801b984:	4606      	mov	r6, r0
 801b986:	4628      	mov	r0, r5
 801b988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b98a:	4798      	blx	r3
 801b98c:	4633      	mov	r3, r6
 801b98e:	4621      	mov	r1, r4
 801b990:	ae1e      	add	r6, sp, #120	; 0x78
 801b992:	2400      	movs	r4, #0
 801b994:	9000      	str	r0, [sp, #0]
 801b996:	9a03      	ldr	r2, [sp, #12]
 801b998:	a805      	add	r0, sp, #20
 801b99a:	f000 fe57 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b99e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801b9a2:	462a      	mov	r2, r5
 801b9a4:	4633      	mov	r3, r6
 801b9a6:	4621      	mov	r1, r4
 801b9a8:	a805      	add	r0, sp, #20
 801b9aa:	f001 f955 	bl	801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b9ae:	b300      	cbz	r0, 801b9f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801b9b0:	280a      	cmp	r0, #10
 801b9b2:	d01a      	beq.n	801b9ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b9b4:	9f04      	ldr	r7, [sp, #16]
 801b9b6:	b1c7      	cbz	r7, 801b9ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b9b8:	7b78      	ldrb	r0, [r7, #13]
 801b9ba:	7a3b      	ldrb	r3, [r7, #8]
 801b9bc:	00c1      	lsls	r1, r0, #3
 801b9be:	88ea      	ldrh	r2, [r5, #6]
 801b9c0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b9c4:	4319      	orrs	r1, r3
 801b9c6:	0643      	lsls	r3, r0, #25
 801b9c8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b9cc:	bf48      	it	mi
 801b9ce:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b9d2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b9d6:	bf48      	it	mi
 801b9d8:	b219      	sxthmi	r1, r3
 801b9da:	79fb      	ldrb	r3, [r7, #7]
 801b9dc:	4303      	orrs	r3, r0
 801b9de:	4413      	add	r3, r2
 801b9e0:	1a5b      	subs	r3, r3, r1
 801b9e2:	b21b      	sxth	r3, r3
 801b9e4:	429c      	cmp	r4, r3
 801b9e6:	bfb8      	it	lt
 801b9e8:	461c      	movlt	r4, r3
 801b9ea:	4633      	mov	r3, r6
 801b9ec:	462a      	mov	r2, r5
 801b9ee:	2100      	movs	r1, #0
 801b9f0:	e7da      	b.n	801b9a8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b9f2:	b2a0      	uxth	r0, r4
 801b9f4:	b01e      	add	sp, #120	; 0x78
 801b9f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b9fa:	b003      	add	sp, #12
 801b9fc:	4770      	bx	lr

0801b9fe <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801b9fe:	7a43      	ldrb	r3, [r0, #9]
 801ba00:	8880      	ldrh	r0, [r0, #4]
 801ba02:	4418      	add	r0, r3
 801ba04:	b280      	uxth	r0, r0
 801ba06:	4770      	bx	lr

0801ba08 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ba08:	6803      	ldr	r3, [r0, #0]
 801ba0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba0c:	4718      	bx	r3

0801ba0e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ba0e:	b40e      	push	{r1, r2, r3}
 801ba10:	b570      	push	{r4, r5, r6, lr}
 801ba12:	b09d      	sub	sp, #116	; 0x74
 801ba14:	4604      	mov	r4, r0
 801ba16:	ab21      	add	r3, sp, #132	; 0x84
 801ba18:	a803      	add	r0, sp, #12
 801ba1a:	f853 5b04 	ldr.w	r5, [r3], #4
 801ba1e:	9302      	str	r3, [sp, #8]
 801ba20:	f000 fdb9 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 801ba24:	6823      	ldr	r3, [r4, #0]
 801ba26:	4620      	mov	r0, r4
 801ba28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba2a:	4798      	blx	r3
 801ba2c:	6823      	ldr	r3, [r4, #0]
 801ba2e:	4606      	mov	r6, r0
 801ba30:	4620      	mov	r0, r4
 801ba32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba34:	2401      	movs	r4, #1
 801ba36:	4798      	blx	r3
 801ba38:	4633      	mov	r3, r6
 801ba3a:	9000      	str	r0, [sp, #0]
 801ba3c:	4629      	mov	r1, r5
 801ba3e:	9a02      	ldr	r2, [sp, #8]
 801ba40:	a803      	add	r0, sp, #12
 801ba42:	f000 fe03 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ba46:	a803      	add	r0, sp, #12
 801ba48:	f001 f9d2 	bl	801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba4c:	b2a3      	uxth	r3, r4
 801ba4e:	b138      	cbz	r0, 801ba60 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801ba50:	280a      	cmp	r0, #10
 801ba52:	a803      	add	r0, sp, #12
 801ba54:	bf04      	itt	eq
 801ba56:	3301      	addeq	r3, #1
 801ba58:	b21c      	sxtheq	r4, r3
 801ba5a:	f001 f9c9 	bl	801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba5e:	e7f5      	b.n	801ba4c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801ba60:	4618      	mov	r0, r3
 801ba62:	b01d      	add	sp, #116	; 0x74
 801ba64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba68:	b003      	add	sp, #12
 801ba6a:	4770      	bx	lr

0801ba6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ba6c:	b40e      	push	{r1, r2, r3}
 801ba6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba70:	b09e      	sub	sp, #120	; 0x78
 801ba72:	4604      	mov	r4, r0
 801ba74:	ab23      	add	r3, sp, #140	; 0x8c
 801ba76:	a805      	add	r0, sp, #20
 801ba78:	f853 5b04 	ldr.w	r5, [r3], #4
 801ba7c:	9303      	str	r3, [sp, #12]
 801ba7e:	f000 fd8a 	bl	801c596 <_ZN8touchgfx12TextProviderC1Ev>
 801ba82:	6823      	ldr	r3, [r4, #0]
 801ba84:	4620      	mov	r0, r4
 801ba86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba88:	4798      	blx	r3
 801ba8a:	6823      	ldr	r3, [r4, #0]
 801ba8c:	4606      	mov	r6, r0
 801ba8e:	4620      	mov	r0, r4
 801ba90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba92:	4798      	blx	r3
 801ba94:	4633      	mov	r3, r6
 801ba96:	4629      	mov	r1, r5
 801ba98:	9000      	str	r0, [sp, #0]
 801ba9a:	9a03      	ldr	r2, [sp, #12]
 801ba9c:	a805      	add	r0, sp, #20
 801ba9e:	f000 fdd5 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801baa2:	ad1e      	add	r5, sp, #120	; 0x78
 801baa4:	2100      	movs	r1, #0
 801baa6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801baaa:	4622      	mov	r2, r4
 801baac:	a805      	add	r0, sp, #20
 801baae:	f845 1d68 	str.w	r1, [r5, #-104]!
 801bab2:	462b      	mov	r3, r5
 801bab4:	f001 f8d0 	bl	801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bab8:	b1d8      	cbz	r0, 801baf2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801baba:	280a      	cmp	r0, #10
 801babc:	d012      	beq.n	801bae4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801babe:	9804      	ldr	r0, [sp, #16]
 801bac0:	b180      	cbz	r0, 801bae4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801bac2:	7b47      	ldrb	r7, [r0, #13]
 801bac4:	88e2      	ldrh	r2, [r4, #6]
 801bac6:	00fb      	lsls	r3, r7, #3
 801bac8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bacc:	7a03      	ldrb	r3, [r0, #8]
 801bace:	430b      	orrs	r3, r1
 801bad0:	0679      	lsls	r1, r7, #25
 801bad2:	bf44      	itt	mi
 801bad4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bad8:	b21b      	sxthmi	r3, r3
 801bada:	1ad3      	subs	r3, r2, r3
 801badc:	b21b      	sxth	r3, r3
 801bade:	429e      	cmp	r6, r3
 801bae0:	bfa8      	it	ge
 801bae2:	461e      	movge	r6, r3
 801bae4:	462b      	mov	r3, r5
 801bae6:	4622      	mov	r2, r4
 801bae8:	2100      	movs	r1, #0
 801baea:	a805      	add	r0, sp, #20
 801baec:	f001 f8b4 	bl	801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801baf0:	e7e2      	b.n	801bab8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801baf2:	4630      	mov	r0, r6
 801baf4:	b01e      	add	sp, #120	; 0x78
 801baf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bafa:	b003      	add	sp, #12
 801bafc:	4770      	bx	lr

0801bafe <_ZNK8touchgfx8Drawable10invalidateEv>:
 801bafe:	b513      	push	{r0, r1, r4, lr}
 801bb00:	6803      	ldr	r3, [r0, #0]
 801bb02:	2400      	movs	r4, #0
 801bb04:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bb08:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bb0c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bb10:	4669      	mov	r1, sp
 801bb12:	691b      	ldr	r3, [r3, #16]
 801bb14:	9400      	str	r4, [sp, #0]
 801bb16:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bb1a:	4798      	blx	r3
 801bb1c:	b002      	add	sp, #8
 801bb1e:	bd10      	pop	{r4, pc}

0801bb20 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bb20:	b538      	push	{r3, r4, r5, lr}
 801bb22:	680b      	ldr	r3, [r1, #0]
 801bb24:	460c      	mov	r4, r1
 801bb26:	4605      	mov	r5, r0
 801bb28:	68db      	ldr	r3, [r3, #12]
 801bb2a:	4798      	blx	r3
 801bb2c:	6823      	ldr	r3, [r4, #0]
 801bb2e:	4620      	mov	r0, r4
 801bb30:	4629      	mov	r1, r5
 801bb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb34:	4798      	blx	r3
 801bb36:	4628      	mov	r0, r5
 801bb38:	bd38      	pop	{r3, r4, r5, pc}

0801bb3a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bb3a:	b410      	push	{r4}
 801bb3c:	880a      	ldrh	r2, [r1, #0]
 801bb3e:	8884      	ldrh	r4, [r0, #4]
 801bb40:	4422      	add	r2, r4
 801bb42:	800a      	strh	r2, [r1, #0]
 801bb44:	884a      	ldrh	r2, [r1, #2]
 801bb46:	88c4      	ldrh	r4, [r0, #6]
 801bb48:	4422      	add	r2, r4
 801bb4a:	804a      	strh	r2, [r1, #2]
 801bb4c:	6940      	ldr	r0, [r0, #20]
 801bb4e:	b120      	cbz	r0, 801bb5a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bb50:	6803      	ldr	r3, [r0, #0]
 801bb52:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb58:	4718      	bx	r3
 801bb5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb5e:	4770      	bx	lr

0801bb60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bb60:	b570      	push	{r4, r5, r6, lr}
 801bb62:	8882      	ldrh	r2, [r0, #4]
 801bb64:	460c      	mov	r4, r1
 801bb66:	880b      	ldrh	r3, [r1, #0]
 801bb68:	4605      	mov	r5, r0
 801bb6a:	4413      	add	r3, r2
 801bb6c:	800b      	strh	r3, [r1, #0]
 801bb6e:	884b      	ldrh	r3, [r1, #2]
 801bb70:	88c2      	ldrh	r2, [r0, #6]
 801bb72:	4413      	add	r3, r2
 801bb74:	804b      	strh	r3, [r1, #2]
 801bb76:	1d01      	adds	r1, r0, #4
 801bb78:	4620      	mov	r0, r4
 801bb7a:	f7fb fb01 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 801bb7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	dd0b      	ble.n	801bb9e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bb86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	dd07      	ble.n	801bb9e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bb8e:	6968      	ldr	r0, [r5, #20]
 801bb90:	b128      	cbz	r0, 801bb9e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bb92:	6803      	ldr	r3, [r0, #0]
 801bb94:	4621      	mov	r1, r4
 801bb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb9c:	4718      	bx	r3
 801bb9e:	bd70      	pop	{r4, r5, r6, pc}

0801bba0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bba0:	b570      	push	{r4, r5, r6, lr}
 801bba2:	8882      	ldrh	r2, [r0, #4]
 801bba4:	460c      	mov	r4, r1
 801bba6:	880b      	ldrh	r3, [r1, #0]
 801bba8:	4605      	mov	r5, r0
 801bbaa:	4413      	add	r3, r2
 801bbac:	800b      	strh	r3, [r1, #0]
 801bbae:	884b      	ldrh	r3, [r1, #2]
 801bbb0:	88c2      	ldrh	r2, [r0, #6]
 801bbb2:	4413      	add	r3, r2
 801bbb4:	804b      	strh	r3, [r1, #2]
 801bbb6:	1d01      	adds	r1, r0, #4
 801bbb8:	4620      	mov	r0, r4
 801bbba:	f7fb fae1 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 801bbbe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	dd19      	ble.n	801bbfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bbc6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	dd15      	ble.n	801bbfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bbce:	6968      	ldr	r0, [r5, #20]
 801bbd0:	b128      	cbz	r0, 801bbde <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801bbd2:	6803      	ldr	r3, [r0, #0]
 801bbd4:	4621      	mov	r1, r4
 801bbd6:	691b      	ldr	r3, [r3, #16]
 801bbd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bbdc:	4718      	bx	r3
 801bbde:	4b07      	ldr	r3, [pc, #28]	; (801bbfc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	3304      	adds	r3, #4
 801bbe4:	429d      	cmp	r5, r3
 801bbe6:	d108      	bne.n	801bbfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bbe8:	f7fe fec6 	bl	801a978 <_ZN8touchgfx11Application11getInstanceEv>
 801bbec:	6803      	ldr	r3, [r0, #0]
 801bbee:	6821      	ldr	r1, [r4, #0]
 801bbf0:	6862      	ldr	r2, [r4, #4]
 801bbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bbf8:	4718      	bx	r3
 801bbfa:	bd70      	pop	{r4, r5, r6, pc}
 801bbfc:	2402aea8 	.word	0x2402aea8

0801bc00 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bc00:	b570      	push	{r4, r5, r6, lr}
 801bc02:	4604      	mov	r4, r0
 801bc04:	4616      	mov	r6, r2
 801bc06:	460d      	mov	r5, r1
 801bc08:	b901      	cbnz	r1, 801bc0c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bc0a:	b192      	cbz	r2, 801bc32 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801bc0c:	6823      	ldr	r3, [r4, #0]
 801bc0e:	4620      	mov	r0, r4
 801bc10:	699b      	ldr	r3, [r3, #24]
 801bc12:	4798      	blx	r3
 801bc14:	88e2      	ldrh	r2, [r4, #6]
 801bc16:	88a1      	ldrh	r1, [r4, #4]
 801bc18:	4620      	mov	r0, r4
 801bc1a:	4432      	add	r2, r6
 801bc1c:	4429      	add	r1, r5
 801bc1e:	b212      	sxth	r2, r2
 801bc20:	b209      	sxth	r1, r1
 801bc22:	f7ec fd18 	bl	8008656 <_ZN8touchgfx8Drawable5setXYEss>
 801bc26:	6823      	ldr	r3, [r4, #0]
 801bc28:	4620      	mov	r0, r4
 801bc2a:	699b      	ldr	r3, [r3, #24]
 801bc2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc30:	4718      	bx	r3
 801bc32:	bd70      	pop	{r4, r5, r6, pc}

0801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bc34:	b510      	push	{r4, lr}
 801bc36:	2300      	movs	r3, #0
 801bc38:	4604      	mov	r4, r0
 801bc3a:	4608      	mov	r0, r1
 801bc3c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bc40:	8023      	strh	r3, [r4, #0]
 801bc42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bc46:	8063      	strh	r3, [r4, #2]
 801bc48:	6803      	ldr	r3, [r0, #0]
 801bc4a:	80a1      	strh	r1, [r4, #4]
 801bc4c:	4621      	mov	r1, r4
 801bc4e:	80e2      	strh	r2, [r4, #6]
 801bc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc52:	4798      	blx	r3
 801bc54:	4620      	mov	r0, r4
 801bc56:	bd10      	pop	{r4, pc}

0801bc58 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801bc58:	b530      	push	{r4, r5, lr}
 801bc5a:	8083      	strh	r3, [r0, #4]
 801bc5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801bc60:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801bc64:	80c3      	strh	r3, [r0, #6]
 801bc66:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801bc6a:	6141      	str	r1, [r0, #20]
 801bc6c:	7203      	strb	r3, [r0, #8]
 801bc6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bc72:	8302      	strh	r2, [r0, #24]
 801bc74:	7243      	strb	r3, [r0, #9]
 801bc76:	7a83      	ldrb	r3, [r0, #10]
 801bc78:	f365 0306 	bfi	r3, r5, #0, #7
 801bc7c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801bc80:	f365 13c7 	bfi	r3, r5, #7, #1
 801bc84:	7283      	strb	r3, [r0, #10]
 801bc86:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801bc8a:	72c3      	strb	r3, [r0, #11]
 801bc8c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801bc90:	7303      	strb	r3, [r0, #12]
 801bc92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801bc96:	81c3      	strh	r3, [r0, #14]
 801bc98:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801bc9c:	8203      	strh	r3, [r0, #16]
 801bc9e:	4b01      	ldr	r3, [pc, #4]	; (801bca4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801bca0:	6003      	str	r3, [r0, #0]
 801bca2:	bd30      	pop	{r4, r5, pc}
 801bca4:	08030084 	.word	0x08030084

0801bca8 <_ZNK8touchgfx9ConstFont4findEt>:
 801bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcaa:	6944      	ldr	r4, [r0, #20]
 801bcac:	b3bc      	cbz	r4, 801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcae:	88a3      	ldrh	r3, [r4, #4]
 801bcb0:	8b02      	ldrh	r2, [r0, #24]
 801bcb2:	1acb      	subs	r3, r1, r3
 801bcb4:	f102 32ff 	add.w	r2, r2, #4294967295
 801bcb8:	d431      	bmi.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcba:	4293      	cmp	r3, r2
 801bcbc:	dd0c      	ble.n	801bcd8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bcbe:	230e      	movs	r3, #14
 801bcc0:	fb03 4302 	mla	r3, r3, r2, r4
 801bcc4:	889b      	ldrh	r3, [r3, #4]
 801bcc6:	1a5b      	subs	r3, r3, r1
 801bcc8:	1ad3      	subs	r3, r2, r3
 801bcca:	429a      	cmp	r2, r3
 801bccc:	db27      	blt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	bfbc      	itt	lt
 801bcd2:	2302      	movlt	r3, #2
 801bcd4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801bcd8:	2500      	movs	r5, #0
 801bcda:	260e      	movs	r6, #14
 801bcdc:	4295      	cmp	r5, r2
 801bcde:	dc1e      	bgt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bce0:	fb06 4003 	mla	r0, r6, r3, r4
 801bce4:	8887      	ldrh	r7, [r0, #4]
 801bce6:	42b9      	cmp	r1, r7
 801bce8:	d01a      	beq.n	801bd20 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801bcea:	d20d      	bcs.n	801bd08 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801bcec:	1e5a      	subs	r2, r3, #1
 801bcee:	4295      	cmp	r5, r2
 801bcf0:	dc15      	bgt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcf2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801bcf6:	1a5b      	subs	r3, r3, r1
 801bcf8:	1ad3      	subs	r3, r2, r3
 801bcfa:	429a      	cmp	r2, r3
 801bcfc:	db0f      	blt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bcfe:	429d      	cmp	r5, r3
 801bd00:	ddec      	ble.n	801bcdc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bd02:	1953      	adds	r3, r2, r5
 801bd04:	105b      	asrs	r3, r3, #1
 801bd06:	e7e9      	b.n	801bcdc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bd08:	1c5d      	adds	r5, r3, #1
 801bd0a:	42aa      	cmp	r2, r5
 801bd0c:	db07      	blt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bd0e:	8a43      	ldrh	r3, [r0, #18]
 801bd10:	1acb      	subs	r3, r1, r3
 801bd12:	442b      	add	r3, r5
 801bd14:	429d      	cmp	r5, r3
 801bd16:	dc02      	bgt.n	801bd1e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bd18:	429a      	cmp	r2, r3
 801bd1a:	dadf      	bge.n	801bcdc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bd1c:	e7f1      	b.n	801bd02 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801bd1e:	2000      	movs	r0, #0
 801bd20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd22 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd24:	4604      	mov	r4, r0
 801bd26:	4617      	mov	r7, r2
 801bd28:	461e      	mov	r6, r3
 801bd2a:	b911      	cbnz	r1, 801bd32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801bd2c:	2500      	movs	r5, #0
 801bd2e:	4628      	mov	r0, r5
 801bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd32:	290a      	cmp	r1, #10
 801bd34:	d0fa      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd36:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bd3a:	4291      	cmp	r1, r2
 801bd3c:	d0f6      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd3e:	f242 020b 	movw	r2, #8203	; 0x200b
 801bd42:	4291      	cmp	r1, r2
 801bd44:	d0f2      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd46:	f7ff ffaf 	bl	801bca8 <_ZNK8touchgfx9ConstFont4findEt>
 801bd4a:	4605      	mov	r5, r0
 801bd4c:	b950      	cbnz	r0, 801bd64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801bd4e:	6823      	ldr	r3, [r4, #0]
 801bd50:	4620      	mov	r0, r4
 801bd52:	691b      	ldr	r3, [r3, #16]
 801bd54:	4798      	blx	r3
 801bd56:	4601      	mov	r1, r0
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f7ff ffa5 	bl	801bca8 <_ZNK8touchgfx9ConstFont4findEt>
 801bd5e:	4605      	mov	r5, r0
 801bd60:	2800      	cmp	r0, #0
 801bd62:	d0e3      	beq.n	801bd2c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bd64:	6823      	ldr	r3, [r4, #0]
 801bd66:	4629      	mov	r1, r5
 801bd68:	4620      	mov	r0, r4
 801bd6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bd6c:	4798      	blx	r3
 801bd6e:	6038      	str	r0, [r7, #0]
 801bd70:	6823      	ldr	r3, [r4, #0]
 801bd72:	4620      	mov	r0, r4
 801bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd76:	4798      	blx	r3
 801bd78:	7030      	strb	r0, [r6, #0]
 801bd7a:	e7d8      	b.n	801bd2e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bd7c <_ZN8touchgfx4clzuEm>:
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	b1c8      	cbz	r0, 801bdb4 <_ZN8touchgfx4clzuEm+0x38>
 801bd80:	0c02      	lsrs	r2, r0, #16
 801bd82:	0412      	lsls	r2, r2, #16
 801bd84:	b9a2      	cbnz	r2, 801bdb0 <_ZN8touchgfx4clzuEm+0x34>
 801bd86:	0403      	lsls	r3, r0, #16
 801bd88:	2010      	movs	r0, #16
 801bd8a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bd8e:	bf04      	itt	eq
 801bd90:	021b      	lsleq	r3, r3, #8
 801bd92:	3008      	addeq	r0, #8
 801bd94:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bd98:	bf04      	itt	eq
 801bd9a:	011b      	lsleq	r3, r3, #4
 801bd9c:	3004      	addeq	r0, #4
 801bd9e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bda2:	bf04      	itt	eq
 801bda4:	009b      	lsleq	r3, r3, #2
 801bda6:	3002      	addeq	r0, #2
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	db04      	blt.n	801bdb6 <_ZN8touchgfx4clzuEm+0x3a>
 801bdac:	3001      	adds	r0, #1
 801bdae:	4770      	bx	lr
 801bdb0:	2000      	movs	r0, #0
 801bdb2:	e7ea      	b.n	801bd8a <_ZN8touchgfx4clzuEm+0xe>
 801bdb4:	2020      	movs	r0, #32
 801bdb6:	4770      	bx	lr

0801bdb8 <_ZN8touchgfx7muldivuEmmmRm>:
 801bdb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bdbc:	460f      	mov	r7, r1
 801bdbe:	4615      	mov	r5, r2
 801bdc0:	461e      	mov	r6, r3
 801bdc2:	4601      	mov	r1, r0
 801bdc4:	b100      	cbz	r0, 801bdc8 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801bdc6:	b927      	cbnz	r7, 801bdd2 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801bdc8:	2000      	movs	r0, #0
 801bdca:	6030      	str	r0, [r6, #0]
 801bdcc:	b002      	add	sp, #8
 801bdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdd2:	f7ff ffd3 	bl	801bd7c <_ZN8touchgfx4clzuEm>
 801bdd6:	b980      	cbnz	r0, 801bdfa <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801bdd8:	4638      	mov	r0, r7
 801bdda:	f7ff ffcf 	bl	801bd7c <_ZN8touchgfx4clzuEm>
 801bdde:	2800      	cmp	r0, #0
 801bde0:	dd05      	ble.n	801bdee <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801bde2:	4633      	mov	r3, r6
 801bde4:	462a      	mov	r2, r5
 801bde6:	4638      	mov	r0, r7
 801bde8:	f7ff ffe6 	bl	801bdb8 <_ZN8touchgfx7muldivuEmmmRm>
 801bdec:	e7ee      	b.n	801bdcc <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801bdee:	f04f 33ff 	mov.w	r3, #4294967295
 801bdf2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801bdf6:	6033      	str	r3, [r6, #0]
 801bdf8:	e7e8      	b.n	801bdcc <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801bdfa:	fa37 f800 	lsrs.w	r8, r7, r0
 801bdfe:	fb07 f301 	mul.w	r3, r7, r1
 801be02:	d105      	bne.n	801be10 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801be04:	fbb3 f0f5 	udiv	r0, r3, r5
 801be08:	fb05 3510 	mls	r5, r5, r0, r3
 801be0c:	6035      	str	r5, [r6, #0]
 801be0e:	e7dd      	b.n	801bdcc <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801be10:	2301      	movs	r3, #1
 801be12:	fa01 fa00 	lsl.w	sl, r1, r0
 801be16:	462a      	mov	r2, r5
 801be18:	fa03 f000 	lsl.w	r0, r3, r0
 801be1c:	4633      	mov	r3, r6
 801be1e:	fbba f9f5 	udiv	r9, sl, r5
 801be22:	3801      	subs	r0, #1
 801be24:	fb08 f409 	mul.w	r4, r8, r9
 801be28:	4038      	ands	r0, r7
 801be2a:	f7ff ffc5 	bl	801bdb8 <_ZN8touchgfx7muldivuEmmmRm>
 801be2e:	462a      	mov	r2, r5
 801be30:	4607      	mov	r7, r0
 801be32:	ab01      	add	r3, sp, #4
 801be34:	fb05 a119 	mls	r1, r5, r9, sl
 801be38:	4640      	mov	r0, r8
 801be3a:	f7ff ffbd 	bl	801bdb8 <_ZN8touchgfx7muldivuEmmmRm>
 801be3e:	9b01      	ldr	r3, [sp, #4]
 801be40:	6832      	ldr	r2, [r6, #0]
 801be42:	441a      	add	r2, r3
 801be44:	fbb2 f3f5 	udiv	r3, r2, r5
 801be48:	441c      	add	r4, r3
 801be4a:	fb05 2513 	mls	r5, r5, r3, r2
 801be4e:	443c      	add	r4, r7
 801be50:	4420      	add	r0, r4
 801be52:	e7db      	b.n	801be0c <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801be54 <_ZN8touchgfx6muldivElllRl>:
 801be54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be56:	2800      	cmp	r0, #0
 801be58:	461e      	mov	r6, r3
 801be5a:	bfba      	itte	lt
 801be5c:	4240      	neglt	r0, r0
 801be5e:	f04f 34ff 	movlt.w	r4, #4294967295
 801be62:	2401      	movge	r4, #1
 801be64:	2900      	cmp	r1, #0
 801be66:	bfbc      	itt	lt
 801be68:	4249      	neglt	r1, r1
 801be6a:	4264      	neglt	r4, r4
 801be6c:	2a00      	cmp	r2, #0
 801be6e:	bfb6      	itet	lt
 801be70:	4265      	neglt	r5, r4
 801be72:	4625      	movge	r5, r4
 801be74:	4252      	neglt	r2, r2
 801be76:	4288      	cmp	r0, r1
 801be78:	bfc2      	ittt	gt
 801be7a:	4603      	movgt	r3, r0
 801be7c:	4608      	movgt	r0, r1
 801be7e:	4619      	movgt	r1, r3
 801be80:	ab01      	add	r3, sp, #4
 801be82:	f7ff ff99 	bl	801bdb8 <_ZN8touchgfx7muldivuEmmmRm>
 801be86:	9b01      	ldr	r3, [sp, #4]
 801be88:	4368      	muls	r0, r5
 801be8a:	435c      	muls	r4, r3
 801be8c:	6034      	str	r4, [r6, #0]
 801be8e:	b002      	add	sp, #8
 801be90:	bd70      	pop	{r4, r5, r6, pc}

0801be92 <_ZN8touchgfx6muldivElll>:
 801be92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be94:	4606      	mov	r6, r0
 801be96:	ab01      	add	r3, sp, #4
 801be98:	460d      	mov	r5, r1
 801be9a:	4614      	mov	r4, r2
 801be9c:	f7ff ffda 	bl	801be54 <_ZN8touchgfx6muldivElllRl>
 801bea0:	2e00      	cmp	r6, #0
 801bea2:	db20      	blt.n	801bee6 <_ZN8touchgfx6muldivElll+0x54>
 801bea4:	bf14      	ite	ne
 801bea6:	2301      	movne	r3, #1
 801bea8:	2300      	moveq	r3, #0
 801beaa:	2d00      	cmp	r5, #0
 801beac:	db1e      	blt.n	801beec <_ZN8touchgfx6muldivElll+0x5a>
 801beae:	bf14      	ite	ne
 801beb0:	2201      	movne	r2, #1
 801beb2:	2200      	moveq	r2, #0
 801beb4:	2c00      	cmp	r4, #0
 801beb6:	fb03 f202 	mul.w	r2, r3, r2
 801beba:	db1a      	blt.n	801bef2 <_ZN8touchgfx6muldivElll+0x60>
 801bebc:	bf14      	ite	ne
 801bebe:	2301      	movne	r3, #1
 801bec0:	2300      	moveq	r3, #0
 801bec2:	4353      	muls	r3, r2
 801bec4:	2b01      	cmp	r3, #1
 801bec6:	d117      	bne.n	801bef8 <_ZN8touchgfx6muldivElll+0x66>
 801bec8:	2c00      	cmp	r4, #0
 801beca:	9b01      	ldr	r3, [sp, #4]
 801becc:	bfb8      	it	lt
 801bece:	4264      	neglt	r4, r4
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	f104 0401 	add.w	r4, r4, #1
 801bed6:	bfb8      	it	lt
 801bed8:	425b      	neglt	r3, r3
 801beda:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801bede:	db00      	blt.n	801bee2 <_ZN8touchgfx6muldivElll+0x50>
 801bee0:	3001      	adds	r0, #1
 801bee2:	b002      	add	sp, #8
 801bee4:	bd70      	pop	{r4, r5, r6, pc}
 801bee6:	f04f 33ff 	mov.w	r3, #4294967295
 801beea:	e7de      	b.n	801beaa <_ZN8touchgfx6muldivElll+0x18>
 801beec:	f04f 32ff 	mov.w	r2, #4294967295
 801bef0:	e7e0      	b.n	801beb4 <_ZN8touchgfx6muldivElll+0x22>
 801bef2:	f04f 33ff 	mov.w	r3, #4294967295
 801bef6:	e7e4      	b.n	801bec2 <_ZN8touchgfx6muldivElll+0x30>
 801bef8:	3301      	adds	r3, #1
 801befa:	d1f2      	bne.n	801bee2 <_ZN8touchgfx6muldivElll+0x50>
 801befc:	9b01      	ldr	r3, [sp, #4]
 801befe:	2c00      	cmp	r4, #0
 801bf00:	bfb8      	it	lt
 801bf02:	4264      	neglt	r4, r4
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	bfb8      	it	lt
 801bf08:	425b      	neglt	r3, r3
 801bf0a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801bf0e:	bfc8      	it	gt
 801bf10:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801bf14:	e7e5      	b.n	801bee2 <_ZN8touchgfx6muldivElll+0x50>

0801bf16 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801bf16:	2000      	movs	r0, #0
 801bf18:	4770      	bx	lr

0801bf1a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801bf1a:	2001      	movs	r0, #1
 801bf1c:	4770      	bx	lr

0801bf1e <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801bf1e:	2002      	movs	r0, #2
 801bf20:	4770      	bx	lr

0801bf22 <_ZN8touchgfx12GestureEventD1Ev>:
 801bf22:	4770      	bx	lr

0801bf24 <_ZN8touchgfx9DragEventD1Ev>:
 801bf24:	4770      	bx	lr

0801bf26 <_ZN8touchgfx10ClickEventD1Ev>:
 801bf26:	4770      	bx	lr

0801bf28 <_ZN8touchgfx10ClickEventD0Ev>:
 801bf28:	b510      	push	{r4, lr}
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	210c      	movs	r1, #12
 801bf2e:	f00f fb06 	bl	802b53e <_ZdlPvj>
 801bf32:	4620      	mov	r0, r4
 801bf34:	bd10      	pop	{r4, pc}

0801bf36 <_ZN8touchgfx9DragEventD0Ev>:
 801bf36:	b510      	push	{r4, lr}
 801bf38:	4604      	mov	r4, r0
 801bf3a:	2110      	movs	r1, #16
 801bf3c:	f00f faff 	bl	802b53e <_ZdlPvj>
 801bf40:	4620      	mov	r0, r4
 801bf42:	bd10      	pop	{r4, pc}

0801bf44 <_ZN8touchgfx12GestureEventD0Ev>:
 801bf44:	b510      	push	{r4, lr}
 801bf46:	4604      	mov	r4, r0
 801bf48:	210c      	movs	r1, #12
 801bf4a:	f00f faf8 	bl	802b53e <_ZdlPvj>
 801bf4e:	4620      	mov	r0, r4
 801bf50:	bd10      	pop	{r4, pc}
	...

0801bf54 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bf54:	b530      	push	{r4, r5, lr}
 801bf56:	460d      	mov	r5, r1
 801bf58:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bf5a:	b087      	sub	sp, #28
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	b301      	cbz	r1, 801bfa2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bf60:	a801      	add	r0, sp, #4
 801bf62:	f7ff fe67 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf66:	892a      	ldrh	r2, [r5, #8]
 801bf68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bf6c:	7928      	ldrb	r0, [r5, #4]
 801bf6e:	1ad2      	subs	r2, r2, r3
 801bf70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bf72:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bf76:	441a      	add	r2, r3
 801bf78:	896b      	ldrh	r3, [r5, #10]
 801bf7a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801bf7e:	f88d 0010 	strb.w	r0, [sp, #16]
 801bf82:	1b5b      	subs	r3, r3, r5
 801bf84:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801bf86:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bf88:	442b      	add	r3, r5
 801bf8a:	4d07      	ldr	r5, [pc, #28]	; (801bfa8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801bf8c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bf90:	a903      	add	r1, sp, #12
 801bf92:	9503      	str	r5, [sp, #12]
 801bf94:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf98:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf9c:	6803      	ldr	r3, [r0, #0]
 801bf9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bfa0:	4798      	blx	r3
 801bfa2:	b007      	add	sp, #28
 801bfa4:	bd30      	pop	{r4, r5, pc}
 801bfa6:	bf00      	nop
 801bfa8:	0803010c 	.word	0x0803010c

0801bfac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801bfb2:	b08a      	sub	sp, #40	; 0x28
 801bfb4:	4604      	mov	r4, r0
 801bfb6:	460d      	mov	r5, r1
 801bfb8:	b113      	cbz	r3, 801bfc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801bfba:	790b      	ldrb	r3, [r1, #4]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d044      	beq.n	801c04a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bfc0:	f104 0804 	add.w	r8, r4, #4
 801bfc4:	a803      	add	r0, sp, #12
 801bfc6:	4641      	mov	r1, r8
 801bfc8:	f7ff fe34 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bfcc:	792b      	ldrb	r3, [r5, #4]
 801bfce:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801bfd2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801bfd6:	b983      	cbnz	r3, 801bffa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801bfd8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801bfdc:	892a      	ldrh	r2, [r5, #8]
 801bfde:	88e9      	ldrh	r1, [r5, #6]
 801bfe0:	4640      	mov	r0, r8
 801bfe2:	1b92      	subs	r2, r2, r6
 801bfe4:	9301      	str	r3, [sp, #4]
 801bfe6:	1bc9      	subs	r1, r1, r7
 801bfe8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801bfec:	b212      	sxth	r2, r2
 801bfee:	9300      	str	r3, [sp, #0]
 801bff0:	b209      	sxth	r1, r1
 801bff2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bff6:	f7fa ffe1 	bl	8016fbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801bffa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bffc:	b329      	cbz	r1, 801c04a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bffe:	a805      	add	r0, sp, #20
 801c000:	f7ff fe18 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c004:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c008:	792b      	ldrb	r3, [r5, #4]
 801c00a:	a907      	add	r1, sp, #28
 801c00c:	1abf      	subs	r7, r7, r2
 801c00e:	88ea      	ldrh	r2, [r5, #6]
 801c010:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c012:	4417      	add	r7, r2
 801c014:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c016:	f88d 3020 	strb.w	r3, [sp, #32]
 801c01a:	4417      	add	r7, r2
 801c01c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c020:	1ab6      	subs	r6, r6, r2
 801c022:	892a      	ldrh	r2, [r5, #8]
 801c024:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c028:	4416      	add	r6, r2
 801c02a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c02c:	4416      	add	r6, r2
 801c02e:	4a08      	ldr	r2, [pc, #32]	; (801c050 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c030:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c034:	2600      	movs	r6, #0
 801c036:	9207      	str	r2, [sp, #28]
 801c038:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c03c:	6803      	ldr	r3, [r0, #0]
 801c03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c040:	4798      	blx	r3
 801c042:	792b      	ldrb	r3, [r5, #4]
 801c044:	b10b      	cbz	r3, 801c04a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c046:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c04a:	b00a      	add	sp, #40	; 0x28
 801c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c050:	080300e4 	.word	0x080300e4

0801c054 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c058:	460c      	mov	r4, r1
 801c05a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c05c:	b088      	sub	sp, #32
 801c05e:	4605      	mov	r5, r0
 801c060:	2900      	cmp	r1, #0
 801c062:	d06d      	beq.n	801c140 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c064:	4668      	mov	r0, sp
 801c066:	f7ff fde5 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c06a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c06c:	88e3      	ldrh	r3, [r4, #6]
 801c06e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c072:	440b      	add	r3, r1
 801c074:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c078:	b21b      	sxth	r3, r3
 801c07a:	4543      	cmp	r3, r8
 801c07c:	db31      	blt.n	801c0e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c07e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c082:	44c4      	add	ip, r8
 801c084:	fa0f fc8c 	sxth.w	ip, ip
 801c088:	4563      	cmp	r3, ip
 801c08a:	da2a      	bge.n	801c0e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c08c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c08e:	8926      	ldrh	r6, [r4, #8]
 801c090:	4416      	add	r6, r2
 801c092:	b236      	sxth	r6, r6
 801c094:	42be      	cmp	r6, r7
 801c096:	db24      	blt.n	801c0e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c098:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c09c:	4438      	add	r0, r7
 801c09e:	b200      	sxth	r0, r0
 801c0a0:	4286      	cmp	r6, r0
 801c0a2:	da1e      	bge.n	801c0e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c0a4:	8963      	ldrh	r3, [r4, #10]
 801c0a6:	4419      	add	r1, r3
 801c0a8:	b209      	sxth	r1, r1
 801c0aa:	4541      	cmp	r1, r8
 801c0ac:	db08      	blt.n	801c0c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c0ae:	4561      	cmp	r1, ip
 801c0b0:	da06      	bge.n	801c0c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c0b2:	89a3      	ldrh	r3, [r4, #12]
 801c0b4:	441a      	add	r2, r3
 801c0b6:	b212      	sxth	r2, r2
 801c0b8:	42ba      	cmp	r2, r7
 801c0ba:	db01      	blt.n	801c0c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c0bc:	4282      	cmp	r2, r0
 801c0be:	db10      	blt.n	801c0e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c0c0:	4b21      	ldr	r3, [pc, #132]	; (801c148 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c0c2:	a904      	add	r1, sp, #16
 801c0c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c0c6:	9304      	str	r3, [sp, #16]
 801c0c8:	2302      	movs	r3, #2
 801c0ca:	f88d 3014 	strb.w	r3, [sp, #20]
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c0d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c0d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c0dc:	6803      	ldr	r3, [r0, #0]
 801c0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0e0:	4798      	blx	r3
 801c0e2:	1d29      	adds	r1, r5, #4
 801c0e4:	a802      	add	r0, sp, #8
 801c0e6:	f7ff fda5 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c0ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c0ee:	88e0      	ldrh	r0, [r4, #6]
 801c0f0:	eba3 0808 	sub.w	r8, r3, r8
 801c0f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c0f8:	7921      	ldrb	r1, [r4, #4]
 801c0fa:	fa1f f888 	uxth.w	r8, r8
 801c0fe:	1bdf      	subs	r7, r3, r7
 801c100:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c104:	b2bb      	uxth	r3, r7
 801c106:	4440      	add	r0, r8
 801c108:	8922      	ldrh	r2, [r4, #8]
 801c10a:	8967      	ldrh	r7, [r4, #10]
 801c10c:	4460      	add	r0, ip
 801c10e:	89a4      	ldrh	r4, [r4, #12]
 801c110:	441a      	add	r2, r3
 801c112:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c114:	44b8      	add	r8, r7
 801c116:	4423      	add	r3, r4
 801c118:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c11c:	4432      	add	r2, r6
 801c11e:	44e0      	add	r8, ip
 801c120:	4433      	add	r3, r6
 801c122:	4c0a      	ldr	r4, [pc, #40]	; (801c14c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c124:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c126:	f88d 1014 	strb.w	r1, [sp, #20]
 801c12a:	a904      	add	r1, sp, #16
 801c12c:	9404      	str	r4, [sp, #16]
 801c12e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c132:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c136:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c13a:	6803      	ldr	r3, [r0, #0]
 801c13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c13e:	4798      	blx	r3
 801c140:	b008      	add	sp, #32
 801c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c146:	bf00      	nop
 801c148:	080300e4 	.word	0x080300e4
 801c14c:	080300f8 	.word	0x080300f8

0801c150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c152:	4604      	mov	r4, r0
 801c154:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c158:	3201      	adds	r2, #1
 801c15a:	d112      	bne.n	801c182 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c15c:	2500      	movs	r5, #0
 801c15e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c162:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c166:	6803      	ldr	r3, [r0, #0]
 801c168:	9500      	str	r5, [sp, #0]
 801c16a:	466d      	mov	r5, sp
 801c16c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c170:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c174:	4629      	mov	r1, r5
 801c176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c178:	4798      	blx	r3
 801c17a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c17e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c182:	4620      	mov	r0, r4
 801c184:	b003      	add	sp, #12
 801c186:	bd30      	pop	{r4, r5, pc}

0801c188 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c188:	b513      	push	{r0, r1, r4, lr}
 801c18a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c18e:	4604      	mov	r4, r0
 801c190:	3301      	adds	r3, #1
 801c192:	d109      	bne.n	801c1a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c194:	4601      	mov	r1, r0
 801c196:	4668      	mov	r0, sp
 801c198:	f7ff fd4c 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c19c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c1a0:	8423      	strh	r3, [r4, #32]
 801c1a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c1a6:	8463      	strh	r3, [r4, #34]	; 0x22
 801c1a8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c1ac:	b002      	add	sp, #8
 801c1ae:	bd10      	pop	{r4, pc}

0801c1b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c1b0:	b513      	push	{r0, r1, r4, lr}
 801c1b2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c1b6:	4604      	mov	r4, r0
 801c1b8:	3301      	adds	r3, #1
 801c1ba:	d109      	bne.n	801c1d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c1bc:	4601      	mov	r1, r0
 801c1be:	4668      	mov	r0, sp
 801c1c0:	f7ff fd38 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c1c4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c1c8:	8423      	strh	r3, [r4, #32]
 801c1ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c1ce:	8463      	strh	r3, [r4, #34]	; 0x22
 801c1d0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c1d4:	b002      	add	sp, #8
 801c1d6:	bd10      	pop	{r4, pc}

0801c1d8 <_ZN8touchgfx6ScreenC1Ev>:
 801c1d8:	b570      	push	{r4, r5, r6, lr}
 801c1da:	4b17      	ldr	r3, [pc, #92]	; (801c238 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c1dc:	4605      	mov	r5, r0
 801c1de:	4a17      	ldr	r2, [pc, #92]	; (801c23c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c1e0:	2101      	movs	r1, #1
 801c1e2:	f845 3b04 	str.w	r3, [r5], #4
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	6042      	str	r2, [r0, #4]
 801c1ea:	4604      	mov	r4, r0
 801c1ec:	8103      	strh	r3, [r0, #8]
 801c1ee:	8143      	strh	r3, [r0, #10]
 801c1f0:	8183      	strh	r3, [r0, #12]
 801c1f2:	81c3      	strh	r3, [r0, #14]
 801c1f4:	8203      	strh	r3, [r0, #16]
 801c1f6:	8243      	strh	r3, [r0, #18]
 801c1f8:	8283      	strh	r3, [r0, #20]
 801c1fa:	82c3      	strh	r3, [r0, #22]
 801c1fc:	6203      	str	r3, [r0, #32]
 801c1fe:	8483      	strh	r3, [r0, #36]	; 0x24
 801c200:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c202:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c206:	6343      	str	r3, [r0, #52]	; 0x34
 801c208:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c20c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c210:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c214:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c218:	4b09      	ldr	r3, [pc, #36]	; (801c240 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c21a:	4628      	mov	r0, r5
 801c21c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c220:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801c222:	4a08      	ldr	r2, [pc, #32]	; (801c244 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c224:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c228:	4798      	blx	r3
 801c22a:	6863      	ldr	r3, [r4, #4]
 801c22c:	4628      	mov	r0, r5
 801c22e:	4631      	mov	r1, r6
 801c230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c232:	4798      	blx	r3
 801c234:	4620      	mov	r0, r4
 801c236:	bd70      	pop	{r4, r5, r6, pc}
 801c238:	08030120 	.word	0x08030120
 801c23c:	0802fac8 	.word	0x0802fac8
 801c240:	2402ae62 	.word	0x2402ae62
 801c244:	2402ae60 	.word	0x2402ae60

0801c248 <_ZN8touchgfx6Screen4drawEv>:
 801c248:	4b09      	ldr	r3, [pc, #36]	; (801c270 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c24a:	b507      	push	{r0, r1, r2, lr}
 801c24c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c250:	2100      	movs	r1, #0
 801c252:	4b08      	ldr	r3, [pc, #32]	; (801c274 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c254:	9100      	str	r1, [sp, #0]
 801c256:	4669      	mov	r1, sp
 801c258:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c25c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c260:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c264:	6803      	ldr	r3, [r0, #0]
 801c266:	689b      	ldr	r3, [r3, #8]
 801c268:	4798      	blx	r3
 801c26a:	b003      	add	sp, #12
 801c26c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c270:	2402ae60 	.word	0x2402ae60
 801c274:	2402ae62 	.word	0x2402ae62

0801c278 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c27c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c280:	b089      	sub	sp, #36	; 0x24
 801c282:	4680      	mov	r8, r0
 801c284:	460c      	mov	r4, r1
 801c286:	2b00      	cmp	r3, #0
 801c288:	4615      	mov	r5, r2
 801c28a:	dd0e      	ble.n	801c2aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c28c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c290:	2b00      	cmp	r3, #0
 801c292:	dd0a      	ble.n	801c2aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c294:	4628      	mov	r0, r5
 801c296:	f7ff ff5b 	bl	801c150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c29a:	4621      	mov	r1, r4
 801c29c:	f7fe fa8e 	bl	801a7bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c2a0:	69eb      	ldr	r3, [r5, #28]
 801c2a2:	b928      	cbnz	r0, 801c2b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c2a4:	461d      	mov	r5, r3
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d1f4      	bne.n	801c294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c2aa:	b009      	add	sp, #36	; 0x24
 801c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b0:	ae04      	add	r6, sp, #16
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	f000 80b5 	beq.w	801c422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c2b8:	682b      	ldr	r3, [r5, #0]
 801c2ba:	4629      	mov	r1, r5
 801c2bc:	a802      	add	r0, sp, #8
 801c2be:	68db      	ldr	r3, [r3, #12]
 801c2c0:	4798      	blx	r3
 801c2c2:	4628      	mov	r0, r5
 801c2c4:	f7ff ff60 	bl	801c188 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c2c8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c2cc:	4407      	add	r7, r0
 801c2ce:	4628      	mov	r0, r5
 801c2d0:	f7ff ff6e 	bl	801c1b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c2d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c2d8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c2dc:	b23f      	sxth	r7, r7
 801c2de:	4418      	add	r0, r3
 801c2e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c2e4:	4621      	mov	r1, r4
 801c2e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c2ea:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c2ee:	4630      	mov	r0, r6
 801c2f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c2f4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c2f8:	f7fa ff42 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 801c2fc:	4628      	mov	r0, r5
 801c2fe:	f7ff ff27 	bl	801c150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c302:	ab06      	add	r3, sp, #24
 801c304:	4602      	mov	r2, r0
 801c306:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c30a:	e883 0003 	stmia.w	r3, {r0, r1}
 801c30e:	4611      	mov	r1, r2
 801c310:	4618      	mov	r0, r3
 801c312:	f7fa ff35 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 801c316:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c31a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c31e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c322:	4299      	cmp	r1, r3
 801c324:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c328:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c32c:	d10b      	bne.n	801c346 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c32e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c332:	4552      	cmp	r2, sl
 801c334:	d107      	bne.n	801c346 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c336:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c33a:	455a      	cmp	r2, fp
 801c33c:	d103      	bne.n	801c346 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c33e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c342:	454a      	cmp	r2, r9
 801c344:	d06d      	beq.n	801c422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c346:	f1bb 0f00 	cmp.w	fp, #0
 801c34a:	dd65      	ble.n	801c418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c34c:	f1b9 0f00 	cmp.w	r9, #0
 801c350:	dd62      	ble.n	801c418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c352:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c356:	fa1f f08a 	uxth.w	r0, sl
 801c35a:	4552      	cmp	r2, sl
 801c35c:	9000      	str	r0, [sp, #0]
 801c35e:	da12      	bge.n	801c386 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c360:	9301      	str	r3, [sp, #4]
 801c362:	9b00      	ldr	r3, [sp, #0]
 801c364:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c368:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c36c:	1a9a      	subs	r2, r3, r2
 801c36e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c372:	4631      	mov	r1, r6
 801c374:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c378:	4640      	mov	r0, r8
 801c37a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c37e:	69ea      	ldr	r2, [r5, #28]
 801c380:	f7ff ff7a 	bl	801c278 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c384:	9b01      	ldr	r3, [sp, #4]
 801c386:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c38a:	b29f      	uxth	r7, r3
 801c38c:	429a      	cmp	r2, r3
 801c38e:	da0d      	bge.n	801c3ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c390:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c394:	1aba      	subs	r2, r7, r2
 801c396:	f8ad a012 	strh.w	sl, [sp, #18]
 801c39a:	4631      	mov	r1, r6
 801c39c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c3a0:	4640      	mov	r0, r8
 801c3a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c3a6:	69ea      	ldr	r2, [r5, #28]
 801c3a8:	f7ff ff66 	bl	801c278 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3ac:	8822      	ldrh	r2, [r4, #0]
 801c3ae:	445f      	add	r7, fp
 801c3b0:	88a3      	ldrh	r3, [r4, #4]
 801c3b2:	b2bf      	uxth	r7, r7
 801c3b4:	4413      	add	r3, r2
 801c3b6:	b23a      	sxth	r2, r7
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	b219      	sxth	r1, r3
 801c3bc:	4291      	cmp	r1, r2
 801c3be:	dd0d      	ble.n	801c3dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c3c0:	1bdb      	subs	r3, r3, r7
 801c3c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c3c6:	f8ad a012 	strh.w	sl, [sp, #18]
 801c3ca:	4631      	mov	r1, r6
 801c3cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c3d0:	4640      	mov	r0, r8
 801c3d2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c3d6:	69ea      	ldr	r2, [r5, #28]
 801c3d8:	f7ff ff4e 	bl	801c278 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3dc:	88e2      	ldrh	r2, [r4, #6]
 801c3de:	8863      	ldrh	r3, [r4, #2]
 801c3e0:	4413      	add	r3, r2
 801c3e2:	9a00      	ldr	r2, [sp, #0]
 801c3e4:	444a      	add	r2, r9
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	fa1f f982 	uxth.w	r9, r2
 801c3ec:	b219      	sxth	r1, r3
 801c3ee:	fa0f f289 	sxth.w	r2, r9
 801c3f2:	428a      	cmp	r2, r1
 801c3f4:	da15      	bge.n	801c422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c3f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c3fa:	eba3 0309 	sub.w	r3, r3, r9
 801c3fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c402:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c406:	4631      	mov	r1, r6
 801c408:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c40c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c410:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c414:	69ea      	ldr	r2, [r5, #28]
 801c416:	e001      	b.n	801c41c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c418:	69ea      	ldr	r2, [r5, #28]
 801c41a:	4621      	mov	r1, r4
 801c41c:	4640      	mov	r0, r8
 801c41e:	f7ff ff2b 	bl	801c278 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c422:	4628      	mov	r0, r5
 801c424:	f7ff fe94 	bl	801c150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c428:	6861      	ldr	r1, [r4, #4]
 801c42a:	4602      	mov	r2, r0
 801c42c:	4633      	mov	r3, r6
 801c42e:	6820      	ldr	r0, [r4, #0]
 801c430:	c303      	stmia	r3!, {r0, r1}
 801c432:	4611      	mov	r1, r2
 801c434:	4630      	mov	r0, r6
 801c436:	f7fa fea3 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 801c43a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	f77f af33 	ble.w	801c2aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c444:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	f77f af2e 	ble.w	801c2aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c44e:	4628      	mov	r0, r5
 801c450:	f7ff fe9a 	bl	801c188 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c454:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c458:	1a18      	subs	r0, r3, r0
 801c45a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c45e:	4628      	mov	r0, r5
 801c460:	f7ff fea6 	bl	801c1b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c464:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c468:	4631      	mov	r1, r6
 801c46a:	1a18      	subs	r0, r3, r0
 801c46c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c470:	4628      	mov	r0, r5
 801c472:	682b      	ldr	r3, [r5, #0]
 801c474:	689b      	ldr	r3, [r3, #8]
 801c476:	4798      	blx	r3
 801c478:	e717      	b.n	801c2aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c47a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c47a:	b570      	push	{r4, r5, r6, lr}
 801c47c:	1d06      	adds	r6, r0, #4
 801c47e:	b086      	sub	sp, #24
 801c480:	460c      	mov	r4, r1
 801c482:	2300      	movs	r3, #0
 801c484:	4631      	mov	r1, r6
 801c486:	4605      	mov	r5, r0
 801c488:	a802      	add	r0, sp, #8
 801c48a:	9301      	str	r3, [sp, #4]
 801c48c:	f7ff fbd2 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c490:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c494:	8822      	ldrh	r2, [r4, #0]
 801c496:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c49a:	1ad2      	subs	r2, r2, r3
 801c49c:	8863      	ldrh	r3, [r4, #2]
 801c49e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c4a2:	1a5b      	subs	r3, r3, r1
 801c4a4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c4a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c4ac:	aa01      	add	r2, sp, #4
 801c4ae:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c4b2:	4630      	mov	r0, r6
 801c4b4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c4b8:	a904      	add	r1, sp, #16
 801c4ba:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c4be:	f7fa ff37 	bl	8017330 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c4c2:	9a01      	ldr	r2, [sp, #4]
 801c4c4:	b11a      	cbz	r2, 801c4ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c4c6:	4621      	mov	r1, r4
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	f7ff fed5 	bl	801c278 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4ce:	b006      	add	sp, #24
 801c4d0:	bd70      	pop	{r4, r5, r6, pc}

0801c4d2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c4d2:	4602      	mov	r2, r0
 801c4d4:	b530      	push	{r4, r5, lr}
 801c4d6:	4604      	mov	r4, r0
 801c4d8:	b085      	sub	sp, #20
 801c4da:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c4de:	460d      	mov	r5, r1
 801c4e0:	466b      	mov	r3, sp
 801c4e2:	6851      	ldr	r1, [r2, #4]
 801c4e4:	c303      	stmia	r3!, {r0, r1}
 801c4e6:	4629      	mov	r1, r5
 801c4e8:	4668      	mov	r0, sp
 801c4ea:	f7fa fe49 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 801c4ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c4f2:	b12b      	cbz	r3, 801c500 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c4f4:	4669      	mov	r1, sp
 801c4f6:	4620      	mov	r0, r4
 801c4f8:	f7ff ffbf 	bl	801c47a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c4fc:	b005      	add	sp, #20
 801c4fe:	bd30      	pop	{r4, r5, pc}
 801c500:	3404      	adds	r4, #4
 801c502:	a802      	add	r0, sp, #8
 801c504:	4621      	mov	r1, r4
 801c506:	f7ff fb95 	bl	801bc34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c50a:	f8bd 3000 	ldrh.w	r3, [sp]
 801c50e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c512:	4669      	mov	r1, sp
 801c514:	4620      	mov	r0, r4
 801c516:	1a9b      	subs	r3, r3, r2
 801c518:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c51c:	f8ad 3000 	strh.w	r3, [sp]
 801c520:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c524:	1a9b      	subs	r3, r3, r2
 801c526:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c52a:	f7fa fec8 	bl	80172be <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c52e:	e7e5      	b.n	801c4fc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c530 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c530:	460b      	mov	r3, r1
 801c532:	680a      	ldr	r2, [r1, #0]
 801c534:	1d01      	adds	r1, r0, #4
 801c536:	6992      	ldr	r2, [r2, #24]
 801c538:	4618      	mov	r0, r3
 801c53a:	4710      	bx	r2

0801c53c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801c53c:	4298      	cmp	r0, r3
 801c53e:	d200      	bcs.n	801c542 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801c540:	b913      	cbnz	r3, 801c548 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801c542:	440a      	add	r2, r1
 801c544:	b210      	sxth	r0, r2
 801c546:	4770      	bx	lr
 801c548:	ee07 2a90 	vmov	s15, r2
 801c54c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c550:	ee07 0a90 	vmov	s15, r0
 801c554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c558:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c55c:	ee07 3a10 	vmov	s14, r3
 801c560:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801c564:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c568:	ee07 1a90 	vmov	s15, r1
 801c56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c570:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c574:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c580:	bfcc      	ite	gt
 801c582:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c586:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c58a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c58e:	ee17 3a90 	vmov	r3, s15
 801c592:	b218      	sxth	r0, r3
 801c594:	4770      	bx	lr

0801c596 <_ZN8touchgfx12TextProviderC1Ev>:
 801c596:	b538      	push	{r3, r4, r5, lr}
 801c598:	2500      	movs	r5, #0
 801c59a:	2302      	movs	r3, #2
 801c59c:	4604      	mov	r4, r0
 801c59e:	220e      	movs	r2, #14
 801c5a0:	7403      	strb	r3, [r0, #16]
 801c5a2:	4629      	mov	r1, r5
 801c5a4:	6145      	str	r5, [r0, #20]
 801c5a6:	7605      	strb	r5, [r0, #24]
 801c5a8:	83c5      	strh	r5, [r0, #30]
 801c5aa:	8405      	strh	r5, [r0, #32]
 801c5ac:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c5ae:	8705      	strh	r5, [r0, #56]	; 0x38
 801c5b0:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801c5b2:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801c5b6:	e9c0 5500 	strd	r5, r5, [r0]
 801c5ba:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801c5be:	304c      	adds	r0, #76	; 0x4c
 801c5c0:	f00f f9df 	bl	802b982 <memset>
 801c5c4:	2301      	movs	r3, #1
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801c5cc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c5d0:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801c5d4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801c5d8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801c5dc:	f7ed f94c 	bl	8009878 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	bd38      	pop	{r3, r4, r5, pc}

0801c5e4 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801c5e4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c5e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c5ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801c5ec:	fab0 f080 	clz	r0, r0
 801c5f0:	0940      	lsrs	r0, r0, #5
 801c5f2:	4770      	bx	lr

0801c5f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c5f4:	b530      	push	{r4, r5, lr}
 801c5f6:	2500      	movs	r5, #0
 801c5f8:	2401      	movs	r4, #1
 801c5fa:	6843      	ldr	r3, [r0, #4]
 801c5fc:	b913      	cbnz	r3, 801c604 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c5fe:	6803      	ldr	r3, [r0, #0]
 801c600:	b313      	cbz	r3, 801c648 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c602:	6043      	str	r3, [r0, #4]
 801c604:	7e03      	ldrb	r3, [r0, #24]
 801c606:	b143      	cbz	r3, 801c61a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c608:	6943      	ldr	r3, [r0, #20]
 801c60a:	b12b      	cbz	r3, 801c618 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c60c:	881a      	ldrh	r2, [r3, #0]
 801c60e:	b11a      	cbz	r2, 801c618 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c610:	1c9a      	adds	r2, r3, #2
 801c612:	6142      	str	r2, [r0, #20]
 801c614:	8818      	ldrh	r0, [r3, #0]
 801c616:	bd30      	pop	{r4, r5, pc}
 801c618:	7605      	strb	r5, [r0, #24]
 801c61a:	6843      	ldr	r3, [r0, #4]
 801c61c:	8819      	ldrh	r1, [r3, #0]
 801c61e:	b199      	cbz	r1, 801c648 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c620:	1c9a      	adds	r2, r3, #2
 801c622:	2902      	cmp	r1, #2
 801c624:	6042      	str	r2, [r0, #4]
 801c626:	d1f5      	bne.n	801c614 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c628:	7c03      	ldrb	r3, [r0, #16]
 801c62a:	2b01      	cmp	r3, #1
 801c62c:	d8e5      	bhi.n	801c5fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c62e:	1c5a      	adds	r2, r3, #1
 801c630:	3302      	adds	r3, #2
 801c632:	7402      	strb	r2, [r0, #16]
 801c634:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c638:	6143      	str	r3, [r0, #20]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d0dd      	beq.n	801c5fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c63e:	881b      	ldrh	r3, [r3, #0]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d0da      	beq.n	801c5fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c644:	7604      	strb	r4, [r0, #24]
 801c646:	e7d8      	b.n	801c5fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c648:	2000      	movs	r0, #0
 801c64a:	e7e4      	b.n	801c616 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c64c:	6001      	str	r1, [r0, #0]
 801c64e:	2100      	movs	r1, #0
 801c650:	b430      	push	{r4, r5}
 801c652:	6041      	str	r1, [r0, #4]
 801c654:	6815      	ldr	r5, [r2, #0]
 801c656:	6085      	str	r5, [r0, #8]
 801c658:	6852      	ldr	r2, [r2, #4]
 801c65a:	6443      	str	r3, [r0, #68]	; 0x44
 801c65c:	9b02      	ldr	r3, [sp, #8]
 801c65e:	60c2      	str	r2, [r0, #12]
 801c660:	7401      	strb	r1, [r0, #16]
 801c662:	6141      	str	r1, [r0, #20]
 801c664:	7601      	strb	r1, [r0, #24]
 801c666:	8701      	strh	r1, [r0, #56]	; 0x38
 801c668:	8401      	strh	r1, [r0, #32]
 801c66a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c66e:	6483      	str	r3, [r0, #72]	; 0x48
 801c670:	bc30      	pop	{r4, r5}
 801c672:	f7ed b901 	b.w	8009878 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c676 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801c676:	b408      	push	{r3}
 801c678:	b510      	push	{r4, lr}
 801c67a:	b085      	sub	sp, #20
 801c67c:	ac07      	add	r4, sp, #28
 801c67e:	f854 3b04 	ldr.w	r3, [r4], #4
 801c682:	9300      	str	r3, [sp, #0]
 801c684:	4613      	mov	r3, r2
 801c686:	4622      	mov	r2, r4
 801c688:	9403      	str	r4, [sp, #12]
 801c68a:	f7ff ffdf 	bl	801c64c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c68e:	b005      	add	sp, #20
 801c690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c694:	b001      	add	sp, #4
 801c696:	4770      	bx	lr

0801c698 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c69a:	4605      	mov	r5, r0
 801c69c:	4608      	mov	r0, r1
 801c69e:	b1f1      	cbz	r1, 801c6de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c6a0:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801c6a4:	460b      	mov	r3, r1
 801c6a6:	f101 0708 	add.w	r7, r1, #8
 801c6aa:	4622      	mov	r2, r4
 801c6ac:	6818      	ldr	r0, [r3, #0]
 801c6ae:	3308      	adds	r3, #8
 801c6b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c6b4:	4626      	mov	r6, r4
 801c6b6:	42bb      	cmp	r3, r7
 801c6b8:	c603      	stmia	r6!, {r0, r1}
 801c6ba:	4634      	mov	r4, r6
 801c6bc:	d1f6      	bne.n	801c6ac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c6be:	6818      	ldr	r0, [r3, #0]
 801c6c0:	6030      	str	r0, [r6, #0]
 801c6c2:	4610      	mov	r0, r2
 801c6c4:	889b      	ldrh	r3, [r3, #4]
 801c6c6:	80b3      	strh	r3, [r6, #4]
 801c6c8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801c6cc:	015b      	lsls	r3, r3, #5
 801c6ce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c6d2:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801c6d6:	430b      	orrs	r3, r1
 801c6d8:	425b      	negs	r3, r3
 801c6da:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c6de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c6e0:	b538      	push	{r3, r4, r5, lr}
 801c6e2:	460c      	mov	r4, r1
 801c6e4:	6811      	ldr	r1, [r2, #0]
 801c6e6:	4610      	mov	r0, r2
 801c6e8:	68cd      	ldr	r5, [r1, #12]
 801c6ea:	4619      	mov	r1, r3
 801c6ec:	47a8      	blx	r5
 801c6ee:	2800      	cmp	r0, #0
 801c6f0:	bf08      	it	eq
 801c6f2:	4620      	moveq	r0, r4
 801c6f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c6f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6fa:	4604      	mov	r4, r0
 801c6fc:	4615      	mov	r5, r2
 801c6fe:	4608      	mov	r0, r1
 801c700:	b93a      	cbnz	r2, 801c712 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c702:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c706:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801c70a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801c70e:	4628      	mov	r0, r5
 801c710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c712:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c716:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801c71a:	8893      	ldrh	r3, [r2, #4]
 801c71c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c720:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c724:	79ee      	ldrb	r6, [r5, #7]
 801c726:	4316      	orrs	r6, r2
 801c728:	19da      	adds	r2, r3, r7
 801c72a:	b291      	uxth	r1, r2
 801c72c:	b2b7      	uxth	r7, r6
 801c72e:	291d      	cmp	r1, #29
 801c730:	d87b      	bhi.n	801c82a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801c732:	2201      	movs	r2, #1
 801c734:	10f6      	asrs	r6, r6, #3
 801c736:	408a      	lsls	r2, r1
 801c738:	4974      	ldr	r1, [pc, #464]	; (801c90c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801c73a:	420a      	tst	r2, r1
 801c73c:	d12e      	bne.n	801c79c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801c73e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c742:	d072      	beq.n	801c82a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801c744:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801c748:	462b      	mov	r3, r5
 801c74a:	f105 0e08 	add.w	lr, r5, #8
 801c74e:	4615      	mov	r5, r2
 801c750:	6818      	ldr	r0, [r3, #0]
 801c752:	3308      	adds	r3, #8
 801c754:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c758:	4694      	mov	ip, r2
 801c75a:	4573      	cmp	r3, lr
 801c75c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c760:	4662      	mov	r2, ip
 801c762:	d1f5      	bne.n	801c750 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801c764:	6818      	ldr	r0, [r3, #0]
 801c766:	f8cc 0000 	str.w	r0, [ip]
 801c76a:	889b      	ldrh	r3, [r3, #4]
 801c76c:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c770:	b2b3      	uxth	r3, r6
 801c772:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801c776:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801c77a:	1aca      	subs	r2, r1, r3
 801c77c:	1bcf      	subs	r7, r1, r7
 801c77e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c782:	b292      	uxth	r2, r2
 801c784:	1afb      	subs	r3, r7, r3
 801c786:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801c78a:	10d2      	asrs	r2, r2, #3
 801c78c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c790:	4302      	orrs	r2, r0
 801c792:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801c796:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c79a:	e7b8      	b.n	801c70e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c79c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c79e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c7a2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801c7a4:	f640 6333 	movw	r3, #3635	; 0xe33
 801c7a8:	4299      	cmp	r1, r3
 801c7aa:	d110      	bne.n	801c7ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801c7ac:	6803      	ldr	r3, [r0, #0]
 801c7ae:	68db      	ldr	r3, [r3, #12]
 801c7b0:	4798      	blx	r3
 801c7b2:	7b41      	ldrb	r1, [r0, #13]
 801c7b4:	00cb      	lsls	r3, r1, #3
 801c7b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7ba:	7a03      	ldrb	r3, [r0, #8]
 801c7bc:	0648      	lsls	r0, r1, #25
 801c7be:	ea43 0302 	orr.w	r3, r3, r2
 801c7c2:	bf44      	itt	mi
 801c7c4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7c8:	b21b      	sxthmi	r3, r3
 801c7ca:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c7ce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801c7d2:	462a      	mov	r2, r5
 801c7d4:	f105 0c08 	add.w	ip, r5, #8
 801c7d8:	443b      	add	r3, r7
 801c7da:	4433      	add	r3, r6
 801c7dc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801c7e0:	b29b      	uxth	r3, r3
 801c7e2:	4635      	mov	r5, r6
 801c7e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c7e8:	6810      	ldr	r0, [r2, #0]
 801c7ea:	3208      	adds	r2, #8
 801c7ec:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c7f0:	4637      	mov	r7, r6
 801c7f2:	4562      	cmp	r2, ip
 801c7f4:	c703      	stmia	r7!, {r0, r1}
 801c7f6:	463e      	mov	r6, r7
 801c7f8:	d1f6      	bne.n	801c7e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801c7fa:	6810      	ldr	r0, [r2, #0]
 801c7fc:	6038      	str	r0, [r7, #0]
 801c7fe:	8892      	ldrh	r2, [r2, #4]
 801c800:	80ba      	strh	r2, [r7, #4]
 801c802:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c806:	10db      	asrs	r3, r3, #3
 801c808:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c80c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c810:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c814:	4313      	orrs	r3, r2
 801c816:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801c81a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c81e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c822:	1a9b      	subs	r3, r3, r2
 801c824:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c828:	e771      	b.n	801c70e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c82a:	f023 0204 	bic.w	r2, r3, #4
 801c82e:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c832:	428a      	cmp	r2, r1
 801c834:	d003      	beq.n	801c83e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801c836:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c83a:	4293      	cmp	r3, r2
 801c83c:	d120      	bne.n	801c880 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801c83e:	3b01      	subs	r3, #1
 801c840:	4602      	mov	r2, r0
 801c842:	4629      	mov	r1, r5
 801c844:	4620      	mov	r0, r4
 801c846:	b29b      	uxth	r3, r3
 801c848:	f7ff ff4a 	bl	801c6e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c84c:	7b41      	ldrb	r1, [r0, #13]
 801c84e:	00cb      	lsls	r3, r1, #3
 801c850:	0649      	lsls	r1, r1, #25
 801c852:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c856:	7a03      	ldrb	r3, [r0, #8]
 801c858:	ea43 0302 	orr.w	r3, r3, r2
 801c85c:	bf44      	itt	mi
 801c85e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c862:	b21b      	sxthmi	r3, r3
 801c864:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c868:	7b6b      	ldrb	r3, [r5, #13]
 801c86a:	7aaa      	ldrb	r2, [r5, #10]
 801c86c:	005b      	lsls	r3, r3, #1
 801c86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c872:	4313      	orrs	r3, r2
 801c874:	115a      	asrs	r2, r3, #5
 801c876:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c87a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c87e:	e035      	b.n	801c8ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801c880:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c884:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c888:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c88c:	7a2a      	ldrb	r2, [r5, #8]
 801c88e:	ea42 0201 	orr.w	r2, r2, r1
 801c892:	f640 6109 	movw	r1, #3593	; 0xe09
 801c896:	bf1c      	itt	ne
 801c898:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c89c:	b212      	sxthne	r2, r2
 801c89e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c8a2:	f023 0210 	bic.w	r2, r3, #16
 801c8a6:	428a      	cmp	r2, r1
 801c8a8:	d003      	beq.n	801c8b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801c8aa:	f640 6213 	movw	r2, #3603	; 0xe13
 801c8ae:	4293      	cmp	r3, r2
 801c8b0:	d129      	bne.n	801c906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801c8b2:	7b6e      	ldrb	r6, [r5, #13]
 801c8b4:	4629      	mov	r1, r5
 801c8b6:	0076      	lsls	r6, r6, #1
 801c8b8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c8bc:	7aae      	ldrb	r6, [r5, #10]
 801c8be:	4316      	orrs	r6, r2
 801c8c0:	f640 6213 	movw	r2, #3603	; 0xe13
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	4602      	mov	r2, r0
 801c8c8:	4620      	mov	r0, r4
 801c8ca:	bf16      	itet	ne
 801c8cc:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c8d0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c8d4:	b29b      	uxthne	r3, r3
 801c8d6:	f7ff ff03 	bl	801c6e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c8da:	7b43      	ldrb	r3, [r0, #13]
 801c8dc:	7a82      	ldrb	r2, [r0, #10]
 801c8de:	005b      	lsls	r3, r3, #1
 801c8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c8e4:	4313      	orrs	r3, r2
 801c8e6:	1af6      	subs	r6, r6, r3
 801c8e8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801c8ec:	7b69      	ldrb	r1, [r5, #13]
 801c8ee:	00cb      	lsls	r3, r1, #3
 801c8f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c8f4:	7a2b      	ldrb	r3, [r5, #8]
 801c8f6:	4313      	orrs	r3, r2
 801c8f8:	064a      	lsls	r2, r1, #25
 801c8fa:	bf44      	itt	mi
 801c8fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c900:	b21b      	sxthmi	r3, r3
 801c902:	1bdb      	subs	r3, r3, r7
 801c904:	e747      	b.n	801c796 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801c906:	2300      	movs	r3, #0
 801c908:	e7b7      	b.n	801c87a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801c90a:	bf00      	nop
 801c90c:	3fc00079 	.word	0x3fc00079

0801c910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c914:	4604      	mov	r4, r0
 801c916:	b942      	cbnz	r2, 801c92a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c91c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801c920:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801c924:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c928:	e047      	b.n	801c9ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c92a:	7b51      	ldrb	r1, [r2, #13]
 801c92c:	8893      	ldrh	r3, [r2, #4]
 801c92e:	010d      	lsls	r5, r1, #4
 801c930:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801c934:	79d5      	ldrb	r5, [r2, #7]
 801c936:	4305      	orrs	r5, r0
 801c938:	2d04      	cmp	r5, #4
 801c93a:	bfcc      	ite	gt
 801c93c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801c940:	f04f 0e01 	movle.w	lr, #1
 801c944:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c948:	f200 80ab 	bhi.w	801caa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801c94c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c950:	4283      	cmp	r3, r0
 801c952:	d216      	bcs.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c954:	f240 605b 	movw	r0, #1627	; 0x65b
 801c958:	4283      	cmp	r3, r0
 801c95a:	d859      	bhi.n	801ca10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801c95c:	f240 6057 	movw	r0, #1623	; 0x657
 801c960:	4283      	cmp	r3, r0
 801c962:	d20e      	bcs.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c964:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c968:	d24a      	bcs.n	801ca00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801c96a:	f240 604e 	movw	r0, #1614	; 0x64e
 801c96e:	4283      	cmp	r3, r0
 801c970:	d207      	bcs.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c972:	f240 601a 	movw	r0, #1562	; 0x61a
 801c976:	4283      	cmp	r3, r0
 801c978:	d02a      	beq.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c97a:	d821      	bhi.n	801c9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801c97c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c980:	d35b      	bcc.n	801ca3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c982:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801c986:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c98a:	f040 80d0 	bne.w	801cb2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c98e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801c992:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c996:	f040 80ca 	bne.w	801cb2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c99a:	00cb      	lsls	r3, r1, #3
 801c99c:	0649      	lsls	r1, r1, #25
 801c99e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9a2:	7a13      	ldrb	r3, [r2, #8]
 801c9a4:	ea43 0300 	orr.w	r3, r3, r0
 801c9a8:	bf44      	itt	mi
 801c9aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9ae:	b21b      	sxthmi	r3, r3
 801c9b0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c9b4:	1b5d      	subs	r5, r3, r5
 801c9b6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c9ba:	4610      	mov	r0, r2
 801c9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c9c0:	f240 604b 	movw	r0, #1611	; 0x64b
 801c9c4:	4283      	cmp	r3, r0
 801c9c6:	d338      	bcc.n	801ca3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c9c8:	f240 604c 	movw	r0, #1612	; 0x64c
 801c9cc:	4283      	cmp	r3, r0
 801c9ce:	d9d8      	bls.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c9d0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801c9d4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801c9d8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c9dc:	f040 80f3 	bne.w	801cbc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c9e0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c9e4:	f040 80ef 	bne.w	801cbc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c9e8:	00cb      	lsls	r3, r1, #3
 801c9ea:	064e      	lsls	r6, r1, #25
 801c9ec:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9f0:	7a13      	ldrb	r3, [r2, #8]
 801c9f2:	ea43 0300 	orr.w	r3, r3, r0
 801c9f6:	bf44      	itt	mi
 801c9f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9fc:	b21b      	sxthmi	r3, r3
 801c9fe:	e7d9      	b.n	801c9b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801ca00:	f240 6054 	movw	r0, #1620	; 0x654
 801ca04:	4283      	cmp	r3, r0
 801ca06:	d8e3      	bhi.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca08:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ca0c:	d9e0      	bls.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca0e:	e7b8      	b.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca10:	f240 6074 	movw	r0, #1652	; 0x674
 801ca14:	4283      	cmp	r3, r0
 801ca16:	d0b4      	beq.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca18:	d82d      	bhi.n	801ca76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801ca1a:	f240 605e 	movw	r0, #1630	; 0x65e
 801ca1e:	4283      	cmp	r3, r0
 801ca20:	d804      	bhi.n	801ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801ca22:	f240 605d 	movw	r0, #1629	; 0x65d
 801ca26:	4283      	cmp	r3, r0
 801ca28:	d3d2      	bcc.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca2a:	e7aa      	b.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca2c:	f240 605f 	movw	r0, #1631	; 0x65f
 801ca30:	4283      	cmp	r3, r0
 801ca32:	d0cd      	beq.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca34:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ca38:	d0a3      	beq.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca3a:	00cb      	lsls	r3, r1, #3
 801ca3c:	0649      	lsls	r1, r1, #25
 801ca3e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ca42:	7a13      	ldrb	r3, [r2, #8]
 801ca44:	ea43 0300 	orr.w	r3, r3, r0
 801ca48:	bf44      	itt	mi
 801ca4a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ca4e:	b21b      	sxthmi	r3, r3
 801ca50:	1b5d      	subs	r5, r3, r5
 801ca52:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ca56:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ca5a:	7b53      	ldrb	r3, [r2, #13]
 801ca5c:	015b      	lsls	r3, r3, #5
 801ca5e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ca62:	7993      	ldrb	r3, [r2, #6]
 801ca64:	430b      	orrs	r3, r1
 801ca66:	2105      	movs	r1, #5
 801ca68:	005b      	lsls	r3, r3, #1
 801ca6a:	fb93 f3f1 	sdiv	r3, r3, r1
 801ca6e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ca72:	440b      	add	r3, r1
 801ca74:	e756      	b.n	801c924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ca76:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ca7a:	4283      	cmp	r3, r0
 801ca7c:	d809      	bhi.n	801ca92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801ca7e:	f240 60df 	movw	r0, #1759	; 0x6df
 801ca82:	4283      	cmp	r3, r0
 801ca84:	f4bf af7d 	bcs.w	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca88:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ca8c:	2b05      	cmp	r3, #5
 801ca8e:	d8d4      	bhi.n	801ca3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ca90:	e777      	b.n	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca92:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ca96:	4283      	cmp	r3, r0
 801ca98:	d09a      	beq.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca9a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ca9e:	4283      	cmp	r3, r0
 801caa0:	e7ca      	b.n	801ca38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801caa2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801caa6:	d22b      	bcs.n	801cb00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801caa8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801caac:	4283      	cmp	r3, r0
 801caae:	d28f      	bcs.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cab0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801cab4:	4283      	cmp	r3, r0
 801cab6:	d816      	bhi.n	801cae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801cab8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801cabc:	4283      	cmp	r3, r0
 801cabe:	f4bf af60 	bcs.w	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cac2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801cac6:	4283      	cmp	r3, r0
 801cac8:	d80a      	bhi.n	801cae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801caca:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801cace:	4283      	cmp	r3, r0
 801cad0:	f4bf af57 	bcs.w	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cad4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801cad8:	4283      	cmp	r3, r0
 801cada:	f43f af79 	beq.w	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cade:	e7ac      	b.n	801ca3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cae0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801cae4:	e7f8      	b.n	801cad8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801cae6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801caea:	4283      	cmp	r3, r0
 801caec:	d802      	bhi.n	801caf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801caee:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801caf2:	e798      	b.n	801ca26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801caf4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801caf8:	4283      	cmp	r3, r0
 801cafa:	f47f af42 	bne.w	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cafe:	e767      	b.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cb00:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801cb04:	4283      	cmp	r3, r0
 801cb06:	f43f af63 	beq.w	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cb0a:	d802      	bhi.n	801cb12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801cb0c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801cb10:	e7f2      	b.n	801caf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801cb12:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801cb16:	4283      	cmp	r3, r0
 801cb18:	d805      	bhi.n	801cb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801cb1a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801cb1e:	4283      	cmp	r3, r0
 801cb20:	f4ff af2f 	bcc.w	801c982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cb24:	e754      	b.n	801c9d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cb26:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801cb2a:	4283      	cmp	r3, r0
 801cb2c:	e7af      	b.n	801ca8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801cb2e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801cb32:	4617      	mov	r7, r2
 801cb34:	f102 0808 	add.w	r8, r2, #8
 801cb38:	4666      	mov	r6, ip
 801cb3a:	6838      	ldr	r0, [r7, #0]
 801cb3c:	3708      	adds	r7, #8
 801cb3e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801cb42:	46e6      	mov	lr, ip
 801cb44:	4547      	cmp	r7, r8
 801cb46:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cb4a:	46f4      	mov	ip, lr
 801cb4c:	d1f5      	bne.n	801cb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801cb4e:	6838      	ldr	r0, [r7, #0]
 801cb50:	f8ce 0000 	str.w	r0, [lr]
 801cb54:	88b9      	ldrh	r1, [r7, #4]
 801cb56:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cb5a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cb5e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb62:	d009      	beq.n	801cb78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801cb64:	7b51      	ldrb	r1, [r2, #13]
 801cb66:	7992      	ldrb	r2, [r2, #6]
 801cb68:	0149      	lsls	r1, r1, #5
 801cb6a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cb6e:	4311      	orrs	r1, r2
 801cb70:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cb74:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cb78:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb7c:	b2ad      	uxth	r5, r5
 801cb7e:	d00d      	beq.n	801cb9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801cb80:	442b      	add	r3, r5
 801cb82:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cb8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cb90:	10db      	asrs	r3, r3, #3
 801cb92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb96:	4313      	orrs	r3, r2
 801cb98:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cb9c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cba0:	00cb      	lsls	r3, r1, #3
 801cba2:	064f      	lsls	r7, r1, #25
 801cba4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cba8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cbac:	ea43 0302 	orr.w	r3, r3, r2
 801cbb0:	bf44      	itt	mi
 801cbb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbb6:	b21b      	sxthmi	r3, r3
 801cbb8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cbbc:	1b5b      	subs	r3, r3, r5
 801cbbe:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801cbc2:	4632      	mov	r2, r6
 801cbc4:	e6f9      	b.n	801c9ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801cbc6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801cbca:	4617      	mov	r7, r2
 801cbcc:	f102 0908 	add.w	r9, r2, #8
 801cbd0:	4666      	mov	r6, ip
 801cbd2:	6838      	ldr	r0, [r7, #0]
 801cbd4:	3708      	adds	r7, #8
 801cbd6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801cbda:	46e0      	mov	r8, ip
 801cbdc:	454f      	cmp	r7, r9
 801cbde:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cbe2:	46c4      	mov	ip, r8
 801cbe4:	d1f5      	bne.n	801cbd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801cbe6:	6838      	ldr	r0, [r7, #0]
 801cbe8:	f8c8 0000 	str.w	r0, [r8]
 801cbec:	88b9      	ldrh	r1, [r7, #4]
 801cbee:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cbf2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cbf6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cbfa:	d009      	beq.n	801cc10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801cbfc:	7b51      	ldrb	r1, [r2, #13]
 801cbfe:	7992      	ldrb	r2, [r2, #6]
 801cc00:	0149      	lsls	r1, r1, #5
 801cc02:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cc06:	4311      	orrs	r1, r2
 801cc08:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cc0c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cc10:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cc14:	d00e      	beq.n	801cc34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801cc16:	eba3 030e 	sub.w	r3, r3, lr
 801cc1a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cc1e:	b29b      	uxth	r3, r3
 801cc20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cc24:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cc28:	10db      	asrs	r3, r3, #3
 801cc2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cc2e:	4313      	orrs	r3, r2
 801cc30:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cc34:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cc38:	00cb      	lsls	r3, r1, #3
 801cc3a:	0648      	lsls	r0, r1, #25
 801cc3c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cc40:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cc44:	ea43 0302 	orr.w	r3, r3, r2
 801cc48:	bf44      	itt	mi
 801cc4a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cc4e:	b21b      	sxthmi	r3, r3
 801cc50:	1b5d      	subs	r5, r3, r5
 801cc52:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cc56:	e7b4      	b.n	801cbc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801cc58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc5c:	461e      	mov	r6, r3
 801cc5e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cc60:	4604      	mov	r4, r0
 801cc62:	4617      	mov	r7, r2
 801cc64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc68:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cc6c:	f7ec fd5e 	bl	800972c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc70:	4605      	mov	r5, r0
 801cc72:	b918      	cbnz	r0, 801cc7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801cc74:	6030      	str	r0, [r6, #0]
 801cc76:	4628      	mov	r0, r5
 801cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc7c:	683b      	ldr	r3, [r7, #0]
 801cc7e:	4601      	mov	r1, r0
 801cc80:	4638      	mov	r0, r7
 801cc82:	68db      	ldr	r3, [r3, #12]
 801cc84:	4798      	blx	r3
 801cc86:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	6030      	str	r0, [r6, #0]
 801cc8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cc92:	d213      	bcs.n	801ccbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801cc94:	4643      	mov	r3, r8
 801cc96:	4639      	mov	r1, r7
 801cc98:	4620      	mov	r0, r4
 801cc9a:	f7ff fe39 	bl	801c910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cc9e:	6030      	str	r0, [r6, #0]
 801cca0:	6833      	ldr	r3, [r6, #0]
 801cca2:	b143      	cbz	r3, 801ccb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801cca4:	7b5a      	ldrb	r2, [r3, #13]
 801cca6:	7a9b      	ldrb	r3, [r3, #10]
 801cca8:	0052      	lsls	r2, r2, #1
 801ccaa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ccae:	4313      	orrs	r3, r2
 801ccb0:	bf0c      	ite	eq
 801ccb2:	2301      	moveq	r3, #1
 801ccb4:	2300      	movne	r3, #0
 801ccb6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ccba:	e7dc      	b.n	801cc76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801ccbc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ccc0:	b29b      	uxth	r3, r3
 801ccc2:	2b7f      	cmp	r3, #127	; 0x7f
 801ccc4:	d804      	bhi.n	801ccd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801ccc6:	4639      	mov	r1, r7
 801ccc8:	4620      	mov	r0, r4
 801ccca:	f7ff fd15 	bl	801c6f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ccce:	e7e6      	b.n	801cc9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ccd0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d0e3      	beq.n	801cca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ccd8:	f640 1302 	movw	r3, #2306	; 0x902
 801ccdc:	429d      	cmp	r5, r3
 801ccde:	d1df      	bne.n	801cca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cce0:	4601      	mov	r1, r0
 801cce2:	4620      	mov	r0, r4
 801cce4:	f7ff fcd8 	bl	801c698 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cce8:	e7d9      	b.n	801cc9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ccea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ccea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ccee:	461e      	mov	r6, r3
 801ccf0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ccf2:	4604      	mov	r4, r0
 801ccf4:	4617      	mov	r7, r2
 801ccf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ccfa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ccfe:	f7ec fd15 	bl	800972c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cd02:	4605      	mov	r5, r0
 801cd04:	b918      	cbnz	r0, 801cd0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801cd06:	6030      	str	r0, [r6, #0]
 801cd08:	4628      	mov	r0, r5
 801cd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	4601      	mov	r1, r0
 801cd12:	4638      	mov	r0, r7
 801cd14:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801cd18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cd1c:	47c8      	blx	r9
 801cd1e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cd22:	4602      	mov	r2, r0
 801cd24:	6030      	str	r0, [r6, #0]
 801cd26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cd2a:	d213      	bcs.n	801cd54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801cd2c:	4643      	mov	r3, r8
 801cd2e:	4639      	mov	r1, r7
 801cd30:	4620      	mov	r0, r4
 801cd32:	f7ff fded 	bl	801c910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cd36:	6030      	str	r0, [r6, #0]
 801cd38:	6833      	ldr	r3, [r6, #0]
 801cd3a:	b143      	cbz	r3, 801cd4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801cd3c:	7b5a      	ldrb	r2, [r3, #13]
 801cd3e:	7a9b      	ldrb	r3, [r3, #10]
 801cd40:	0052      	lsls	r2, r2, #1
 801cd42:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cd46:	4313      	orrs	r3, r2
 801cd48:	bf0c      	ite	eq
 801cd4a:	2301      	moveq	r3, #1
 801cd4c:	2300      	movne	r3, #0
 801cd4e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801cd52:	e7d9      	b.n	801cd08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801cd54:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cd58:	b29b      	uxth	r3, r3
 801cd5a:	2b7f      	cmp	r3, #127	; 0x7f
 801cd5c:	d804      	bhi.n	801cd68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801cd5e:	4639      	mov	r1, r7
 801cd60:	4620      	mov	r0, r4
 801cd62:	f7ff fcc9 	bl	801c6f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cd66:	e7e6      	b.n	801cd36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801cd68:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d0e3      	beq.n	801cd38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801cd70:	f640 1302 	movw	r3, #2306	; 0x902
 801cd74:	429d      	cmp	r5, r3
 801cd76:	d1df      	bne.n	801cd38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801cd78:	4601      	mov	r1, r0
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	f7ff fc8c 	bl	801c698 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cd80:	e7d9      	b.n	801cd36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801cd82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cd82:	b510      	push	{r4, lr}
 801cd84:	4604      	mov	r4, r0
 801cd86:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801cd8a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cd8c:	b1e1      	cbz	r1, 801cdc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801cd8e:	2b0a      	cmp	r3, #10
 801cd90:	d02d      	beq.n	801cdee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801cd92:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cd94:	3901      	subs	r1, #1
 801cd96:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cd9a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801cd9c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801cda0:	1c51      	adds	r1, r2, #1
 801cda2:	b289      	uxth	r1, r1
 801cda4:	2901      	cmp	r1, #1
 801cda6:	bf8a      	itet	hi
 801cda8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cdac:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801cdae:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801cdb0:	1c5a      	adds	r2, r3, #1
 801cdb2:	8722      	strh	r2, [r4, #56]	; 0x38
 801cdb4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cdb6:	4413      	add	r3, r2
 801cdb8:	b29b      	uxth	r3, r3
 801cdba:	2b09      	cmp	r3, #9
 801cdbc:	bf88      	it	hi
 801cdbe:	3b0a      	subhi	r3, #10
 801cdc0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cdc4:	8458      	strh	r0, [r3, #34]	; 0x22
 801cdc6:	e7de      	b.n	801cd86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cdc8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cdca:	2b0a      	cmp	r3, #10
 801cdcc:	d00f      	beq.n	801cdee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801cdce:	4620      	mov	r0, r4
 801cdd0:	f7ff fc10 	bl	801c5f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cdd4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cdd6:	1c5a      	adds	r2, r3, #1
 801cdd8:	8722      	strh	r2, [r4, #56]	; 0x38
 801cdda:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cddc:	4413      	add	r3, r2
 801cdde:	b29b      	uxth	r3, r3
 801cde0:	2b09      	cmp	r3, #9
 801cde2:	bf88      	it	hi
 801cde4:	3b0a      	subhi	r3, #10
 801cde6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cdea:	8458      	strh	r0, [r3, #34]	; 0x22
 801cdec:	e7ec      	b.n	801cdc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801cdee:	bd10      	pop	{r4, pc}

0801cdf0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cdf0:	b538      	push	{r3, r4, r5, lr}
 801cdf2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cdf4:	4604      	mov	r4, r0
 801cdf6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801cdfa:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801cdfc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801cdfe:	3a01      	subs	r2, #1
 801ce00:	8702      	strh	r2, [r0, #56]	; 0x38
 801ce02:	1c5a      	adds	r2, r3, #1
 801ce04:	b292      	uxth	r2, r2
 801ce06:	2a09      	cmp	r2, #9
 801ce08:	bf8a      	itet	hi
 801ce0a:	3b09      	subhi	r3, #9
 801ce0c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ce0e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ce10:	f7ff ffb7 	bl	801cd82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ce14:	8c23      	ldrh	r3, [r4, #32]
 801ce16:	2b01      	cmp	r3, #1
 801ce18:	bf9c      	itt	ls
 801ce1a:	3301      	addls	r3, #1
 801ce1c:	8423      	strhls	r3, [r4, #32]
 801ce1e:	8be3      	ldrh	r3, [r4, #30]
 801ce20:	b90b      	cbnz	r3, 801ce26 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ce22:	2302      	movs	r3, #2
 801ce24:	83e3      	strh	r3, [r4, #30]
 801ce26:	8be3      	ldrh	r3, [r4, #30]
 801ce28:	4628      	mov	r0, r5
 801ce2a:	3b01      	subs	r3, #1
 801ce2c:	b29b      	uxth	r3, r3
 801ce2e:	83e3      	strh	r3, [r4, #30]
 801ce30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce34:	8365      	strh	r5, [r4, #26]
 801ce36:	bd38      	pop	{r3, r4, r5, pc}

0801ce38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ce38:	428a      	cmp	r2, r1
 801ce3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce3e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801ce40:	d932      	bls.n	801cea8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ce42:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801ce44:	1a54      	subs	r4, r2, r1
 801ce46:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801ce4a:	19ee      	adds	r6, r5, r7
 801ce4c:	fa1f fe84 	uxth.w	lr, r4
 801ce50:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801ce54:	3e01      	subs	r6, #1
 801ce56:	b2b4      	uxth	r4, r6
 801ce58:	eba4 090e 	sub.w	r9, r4, lr
 801ce5c:	fa1f f989 	uxth.w	r9, r9
 801ce60:	2c09      	cmp	r4, #9
 801ce62:	4626      	mov	r6, r4
 801ce64:	bf88      	it	hi
 801ce66:	f1a4 060a 	subhi.w	r6, r4, #10
 801ce6a:	f1bc 0f00 	cmp.w	ip, #0
 801ce6e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ce72:	bf08      	it	eq
 801ce74:	f04f 0c02 	moveq.w	ip, #2
 801ce78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ce7c:	b2a4      	uxth	r4, r4
 801ce7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ce82:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801ce86:	454c      	cmp	r4, r9
 801ce88:	fa1f fc8c 	uxth.w	ip, ip
 801ce8c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ce90:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801ce94:	d1e4      	bne.n	801ce60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ce96:	eba5 050e 	sub.w	r5, r5, lr
 801ce9a:	eb0e 0408 	add.w	r4, lr, r8
 801ce9e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801cea2:	8705      	strh	r5, [r0, #56]	; 0x38
 801cea4:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801cea8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ceaa:	250a      	movs	r5, #10
 801ceac:	1a64      	subs	r4, r4, r1
 801ceae:	4439      	add	r1, r7
 801ceb0:	b289      	uxth	r1, r1
 801ceb2:	8704      	strh	r4, [r0, #56]	; 0x38
 801ceb4:	2909      	cmp	r1, #9
 801ceb6:	bf88      	it	hi
 801ceb8:	390a      	subhi	r1, #10
 801ceba:	86c1      	strh	r1, [r0, #54]	; 0x36
 801cebc:	b18a      	cbz	r2, 801cee2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801cebe:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801cec0:	3a01      	subs	r2, #1
 801cec2:	3101      	adds	r1, #1
 801cec4:	b292      	uxth	r2, r2
 801cec6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ceca:	8701      	strh	r1, [r0, #56]	; 0x38
 801cecc:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801cece:	b901      	cbnz	r1, 801ced2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ced0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ced2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ced4:	3901      	subs	r1, #1
 801ced6:	b289      	uxth	r1, r1
 801ced8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ceda:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cede:	844c      	strh	r4, [r1, #34]	; 0x22
 801cee0:	e7ec      	b.n	801cebc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801cee2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cee6:	f7ff bf4c 	b.w	801cd82 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ceea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ceea:	b570      	push	{r4, r5, r6, lr}
 801ceec:	2500      	movs	r5, #0
 801ceee:	4295      	cmp	r5, r2
 801cef0:	d011      	beq.n	801cf16 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801cef2:	8bc4      	ldrh	r4, [r0, #30]
 801cef4:	f831 6b02 	ldrh.w	r6, [r1], #2
 801cef8:	4414      	add	r4, r2
 801cefa:	3c01      	subs	r4, #1
 801cefc:	1b64      	subs	r4, r4, r5
 801cefe:	b2a4      	uxth	r4, r4
 801cf00:	2c01      	cmp	r4, #1
 801cf02:	bf88      	it	hi
 801cf04:	3c02      	subhi	r4, #2
 801cf06:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cf0a:	8b64      	ldrh	r4, [r4, #26]
 801cf0c:	42b4      	cmp	r4, r6
 801cf0e:	d117      	bne.n	801cf40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801cf10:	3501      	adds	r5, #1
 801cf12:	b2ad      	uxth	r5, r5
 801cf14:	e7eb      	b.n	801ceee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801cf16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf1a:	2400      	movs	r4, #0
 801cf1c:	4413      	add	r3, r2
 801cf1e:	b2a2      	uxth	r2, r4
 801cf20:	429a      	cmp	r2, r3
 801cf22:	da0f      	bge.n	801cf44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801cf24:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801cf26:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cf2a:	3401      	adds	r4, #1
 801cf2c:	4432      	add	r2, r6
 801cf2e:	b292      	uxth	r2, r2
 801cf30:	2a09      	cmp	r2, #9
 801cf32:	bf88      	it	hi
 801cf34:	3a0a      	subhi	r2, #10
 801cf36:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cf3a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801cf3c:	42aa      	cmp	r2, r5
 801cf3e:	d0ee      	beq.n	801cf1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801cf40:	2000      	movs	r0, #0
 801cf42:	bd70      	pop	{r4, r5, r6, pc}
 801cf44:	2001      	movs	r0, #1
 801cf46:	e7fc      	b.n	801cf42 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801cf48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	4616      	mov	r6, r2
 801cf50:	1c8c      	adds	r4, r1, #2
 801cf52:	8809      	ldrh	r1, [r1, #0]
 801cf54:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cf58:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cf5c:	42b3      	cmp	r3, r6
 801cf5e:	d124      	bne.n	801cfaa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cf60:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cf64:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cf68:	f001 070f 	and.w	r7, r1, #15
 801cf6c:	4652      	mov	r2, sl
 801cf6e:	f8cd 8000 	str.w	r8, [sp]
 801cf72:	464b      	mov	r3, r9
 801cf74:	4621      	mov	r1, r4
 801cf76:	4628      	mov	r0, r5
 801cf78:	f7ff ffb7 	bl	801ceea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cf7c:	4683      	mov	fp, r0
 801cf7e:	b168      	cbz	r0, 801cf9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cf80:	eb0a 0109 	add.w	r1, sl, r9
 801cf84:	463a      	mov	r2, r7
 801cf86:	4628      	mov	r0, r5
 801cf88:	4441      	add	r1, r8
 801cf8a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cf8e:	4649      	mov	r1, r9
 801cf90:	f7ff ff52 	bl	801ce38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cf94:	4658      	mov	r0, fp
 801cf96:	b003      	add	sp, #12
 801cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf9c:	eb07 010a 	add.w	r1, r7, sl
 801cfa0:	4449      	add	r1, r9
 801cfa2:	4441      	add	r1, r8
 801cfa4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cfa8:	e7d2      	b.n	801cf50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cfaa:	f04f 0b00 	mov.w	fp, #0
 801cfae:	e7f1      	b.n	801cf94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cfb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cfb0:	b570      	push	{r4, r5, r6, lr}
 801cfb2:	8810      	ldrh	r0, [r2, #0]
 801cfb4:	4298      	cmp	r0, r3
 801cfb6:	d817      	bhi.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfb8:	1e48      	subs	r0, r1, #1
 801cfba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cfbe:	4298      	cmp	r0, r3
 801cfc0:	d312      	bcc.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfc2:	2400      	movs	r4, #0
 801cfc4:	428c      	cmp	r4, r1
 801cfc6:	d20f      	bcs.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfc8:	1860      	adds	r0, r4, r1
 801cfca:	1040      	asrs	r0, r0, #1
 801cfcc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cfd0:	0085      	lsls	r5, r0, #2
 801cfd2:	42b3      	cmp	r3, r6
 801cfd4:	d902      	bls.n	801cfdc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cfd6:	3001      	adds	r0, #1
 801cfd8:	b284      	uxth	r4, r0
 801cfda:	e7f3      	b.n	801cfc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cfdc:	d201      	bcs.n	801cfe2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801cfde:	b281      	uxth	r1, r0
 801cfe0:	e7f0      	b.n	801cfc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cfe2:	442a      	add	r2, r5
 801cfe4:	8850      	ldrh	r0, [r2, #2]
 801cfe6:	bd70      	pop	{r4, r5, r6, pc}
 801cfe8:	2000      	movs	r0, #0
 801cfea:	e7fc      	b.n	801cfe6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801cfec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801cff2:	4604      	mov	r4, r0
 801cff4:	260b      	movs	r6, #11
 801cff6:	886f      	ldrh	r7, [r5, #2]
 801cff8:	087f      	lsrs	r7, r7, #1
 801cffa:	3e01      	subs	r6, #1
 801cffc:	d013      	beq.n	801d026 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801cffe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d000:	462a      	mov	r2, r5
 801d002:	4639      	mov	r1, r7
 801d004:	4620      	mov	r0, r4
 801d006:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d00a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d00e:	4643      	mov	r3, r8
 801d010:	f7ff ffce 	bl	801cfb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d014:	b138      	cbz	r0, 801d026 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d016:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d01a:	4642      	mov	r2, r8
 801d01c:	4620      	mov	r0, r4
 801d01e:	f7ff ff93 	bl	801cf48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d022:	2800      	cmp	r0, #0
 801d024:	d1e9      	bne.n	801cffa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d02c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d02c:	b570      	push	{r4, r5, r6, lr}
 801d02e:	694a      	ldr	r2, [r1, #20]
 801d030:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d032:	684b      	ldr	r3, [r1, #4]
 801d034:	1b54      	subs	r4, r2, r5
 801d036:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d038:	f000 8106 	beq.w	801d248 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d03c:	1b9b      	subs	r3, r3, r6
 801d03e:	d003      	beq.n	801d048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d040:	4363      	muls	r3, r4
 801d042:	2210      	movs	r2, #16
 801d044:	fb93 f3f2 	sdiv	r3, r3, r2
 801d048:	680c      	ldr	r4, [r1, #0]
 801d04a:	698a      	ldr	r2, [r1, #24]
 801d04c:	1b65      	subs	r5, r4, r5
 801d04e:	f000 80fd 	beq.w	801d24c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d052:	1b92      	subs	r2, r2, r6
 801d054:	d003      	beq.n	801d05e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d056:	436a      	muls	r2, r5
 801d058:	2410      	movs	r4, #16
 801d05a:	fb92 f2f4 	sdiv	r2, r2, r4
 801d05e:	1a9b      	subs	r3, r3, r2
 801d060:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d288 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d068:	460a      	mov	r2, r1
 801d06a:	ee07 3a90 	vmov	s15, r3
 801d06e:	f100 040c 	add.w	r4, r0, #12
 801d072:	4603      	mov	r3, r0
 801d074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d078:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d07c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d080:	eeb1 6a43 	vneg.f32	s12, s6
 801d084:	edd2 7a02 	vldr	s15, [r2, #8]
 801d088:	3214      	adds	r2, #20
 801d08a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d08e:	ece3 6a01 	vstmia	r3!, {s13}
 801d092:	429c      	cmp	r4, r3
 801d094:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d098:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d09c:	edc3 7a02 	vstr	s15, [r3, #8]
 801d0a0:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d0a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d0a8:	edc3 7a05 	vstr	s15, [r3, #20]
 801d0ac:	d1ea      	bne.n	801d084 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d0ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d0b0:	698b      	ldr	r3, [r1, #24]
 801d0b2:	edd0 4a02 	vldr	s9, [r0, #8]
 801d0b6:	1a9b      	subs	r3, r3, r2
 801d0b8:	edd0 3a00 	vldr	s7, [r0]
 801d0bc:	edd0 6a01 	vldr	s13, [r0, #4]
 801d0c0:	ee07 3a90 	vmov	s15, r3
 801d0c4:	684b      	ldr	r3, [r1, #4]
 801d0c6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d0ca:	ed90 5a05 	vldr	s10, [r0, #20]
 801d0ce:	1a9b      	subs	r3, r3, r2
 801d0d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d0d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d0d8:	ed90 2a03 	vldr	s4, [r0, #12]
 801d0dc:	ee07 3a10 	vmov	s14, r3
 801d0e0:	edd0 5a04 	vldr	s11, [r0, #16]
 801d0e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d0e8:	ed90 1a07 	vldr	s2, [r0, #28]
 801d0ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0f0:	edd0 2a06 	vldr	s5, [r0, #24]
 801d0f4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d0f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d0fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d100:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d104:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d108:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d10c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d110:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d112:	694a      	ldr	r2, [r1, #20]
 801d114:	1b13      	subs	r3, r2, r4
 801d116:	ee07 3a10 	vmov	s14, r3
 801d11a:	680b      	ldr	r3, [r1, #0]
 801d11c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d120:	1b1b      	subs	r3, r3, r4
 801d122:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d126:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d12a:	ee07 3a10 	vmov	s14, r3
 801d12e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d132:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d136:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d13a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d13e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d142:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d144:	698b      	ldr	r3, [r1, #24]
 801d146:	1a9b      	subs	r3, r3, r2
 801d148:	ee06 3a90 	vmov	s13, r3
 801d14c:	684b      	ldr	r3, [r1, #4]
 801d14e:	1a9b      	subs	r3, r3, r2
 801d150:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d154:	ee07 3a10 	vmov	s14, r3
 801d158:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d15c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d160:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d164:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d168:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d16c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d170:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d174:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d176:	694a      	ldr	r2, [r1, #20]
 801d178:	1b13      	subs	r3, r2, r4
 801d17a:	ee07 3a10 	vmov	s14, r3
 801d17e:	680b      	ldr	r3, [r1, #0]
 801d180:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d184:	1b1b      	subs	r3, r3, r4
 801d186:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d18a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d18e:	ee07 3a10 	vmov	s14, r3
 801d192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d196:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d19a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d19e:	edd0 5a08 	vldr	s11, [r0, #32]
 801d1a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d1a6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d1aa:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d1ae:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d1b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d1b4:	698b      	ldr	r3, [r1, #24]
 801d1b6:	1a9b      	subs	r3, r3, r2
 801d1b8:	ee07 3a10 	vmov	s14, r3
 801d1bc:	684b      	ldr	r3, [r1, #4]
 801d1be:	1a9b      	subs	r3, r3, r2
 801d1c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1c4:	ee01 3a90 	vmov	s3, r3
 801d1c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d1cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d1d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d1d4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d1d8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d1dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d1e0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d1e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d1e6:	694a      	ldr	r2, [r1, #20]
 801d1e8:	1b13      	subs	r3, r2, r4
 801d1ea:	ee03 3a10 	vmov	s6, r3
 801d1ee:	680b      	ldr	r3, [r1, #0]
 801d1f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d1f4:	1b1b      	subs	r3, r3, r4
 801d1f6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d1fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d1fe:	ee03 3a10 	vmov	s6, r3
 801d202:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d206:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d20a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d20e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d212:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d216:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d21a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d21e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d226:	dd13      	ble.n	801d250 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d22c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d230:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d232:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d23e:	dd15      	ble.n	801d26c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d244:	6403      	str	r3, [r0, #64]	; 0x40
 801d246:	bd70      	pop	{r4, r5, r6, pc}
 801d248:	4623      	mov	r3, r4
 801d24a:	e6fd      	b.n	801d048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d24c:	462a      	mov	r2, r5
 801d24e:	e706      	b.n	801d05e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d250:	d502      	bpl.n	801d258 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d252:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d256:	e7e9      	b.n	801d22c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d258:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d25c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d260:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d268:	dade      	bge.n	801d228 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d26a:	e7f2      	b.n	801d252 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d26c:	d502      	bpl.n	801d274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d26e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d272:	e7e7      	b.n	801d244 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d274:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d278:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d27c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d284:	dadc      	bge.n	801d240 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d286:	e7f2      	b.n	801d26e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d288:	3d800000 	.word	0x3d800000

0801d28c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d290:	2714      	movs	r7, #20
 801d292:	435f      	muls	r7, r3
 801d294:	eb02 0c07 	add.w	ip, r2, r7
 801d298:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d29c:	f115 0e0f 	adds.w	lr, r5, #15
 801d2a0:	f100 80a2 	bmi.w	801d3e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d2a4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d2a8:	9c08      	ldr	r4, [sp, #32]
 801d2aa:	2614      	movs	r6, #20
 801d2ac:	f8c0 e014 	str.w	lr, [r0, #20]
 801d2b0:	4366      	muls	r6, r4
 801d2b2:	eb02 0806 	add.w	r8, r2, r6
 801d2b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d2ba:	f115 040f 	adds.w	r4, r5, #15
 801d2be:	f100 809f 	bmi.w	801d400 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d2c2:	1124      	asrs	r4, r4, #4
 801d2c4:	eba4 040e 	sub.w	r4, r4, lr
 801d2c8:	6184      	str	r4, [r0, #24]
 801d2ca:	2c00      	cmp	r4, #0
 801d2cc:	f000 808a 	beq.w	801d3e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d2d0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d2d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d2d8:	5995      	ldr	r5, [r2, r6]
 801d2da:	eba4 0809 	sub.w	r8, r4, r9
 801d2de:	59d4      	ldr	r4, [r2, r7]
 801d2e0:	eba5 0a04 	sub.w	sl, r5, r4
 801d2e4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d2e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d2ec:	fb0e fe05 	mul.w	lr, lr, r5
 801d2f0:	fb0a ee19 	mls	lr, sl, r9, lr
 801d2f4:	fb08 e404 	mla	r4, r8, r4, lr
 801d2f8:	3c01      	subs	r4, #1
 801d2fa:	19a4      	adds	r4, r4, r6
 801d2fc:	f100 808c 	bmi.w	801d418 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d300:	fb94 fef6 	sdiv	lr, r4, r6
 801d304:	fb06 441e 	mls	r4, r6, lr, r4
 801d308:	f8c0 e000 	str.w	lr, [r0]
 801d30c:	6104      	str	r4, [r0, #16]
 801d30e:	2d00      	cmp	r5, #0
 801d310:	f2c0 8095 	blt.w	801d43e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d314:	fb95 f4f6 	sdiv	r4, r5, r6
 801d318:	fb06 5514 	mls	r5, r6, r4, r5
 801d31c:	6044      	str	r4, [r0, #4]
 801d31e:	6085      	str	r5, [r0, #8]
 801d320:	60c6      	str	r6, [r0, #12]
 801d322:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d326:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d32a:	6945      	ldr	r5, [r0, #20]
 801d32c:	59d2      	ldr	r2, [r2, r7]
 801d32e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d332:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801d460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d336:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d33a:	ee07 4a10 	vmov	s14, r4
 801d33e:	6804      	ldr	r4, [r0, #0]
 801d340:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d348:	ee07 2a90 	vmov	s15, r2
 801d34c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d354:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d358:	edd3 6a00 	vldr	s13, [r3]
 801d35c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d360:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801d364:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d368:	edc0 6a07 	vstr	s13, [r0, #28]
 801d36c:	edd0 6a01 	vldr	s13, [r0, #4]
 801d370:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801d374:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d378:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d37c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d380:	ed80 6a08 	vstr	s12, [r0, #32]
 801d384:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801d386:	6242      	str	r2, [r0, #36]	; 0x24
 801d388:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801d38c:	ed93 6a03 	vldr	s12, [r3, #12]
 801d390:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d394:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d398:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d39c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801d3a0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d3a4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801d3a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d3ac:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801d3b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d3b2:	6302      	str	r2, [r0, #48]	; 0x30
 801d3b4:	ed93 6a06 	vldr	s12, [r3, #24]
 801d3b8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801d3bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d3c0:	eeb0 7a46 	vmov.f32	s14, s12
 801d3c4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801d3c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d3cc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d3d0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801d3d4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801d3d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d3dc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801d3e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801d3e2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3e8:	2410      	movs	r4, #16
 801d3ea:	f1c5 0501 	rsb	r5, r5, #1
 801d3ee:	fb9e fef4 	sdiv	lr, lr, r4
 801d3f2:	f015 050f 	ands.w	r5, r5, #15
 801d3f6:	bf18      	it	ne
 801d3f8:	2501      	movne	r5, #1
 801d3fa:	ebae 0e05 	sub.w	lr, lr, r5
 801d3fe:	e753      	b.n	801d2a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d400:	f04f 0910 	mov.w	r9, #16
 801d404:	f1c5 0501 	rsb	r5, r5, #1
 801d408:	fb94 f4f9 	sdiv	r4, r4, r9
 801d40c:	f015 050f 	ands.w	r5, r5, #15
 801d410:	bf18      	it	ne
 801d412:	2501      	movne	r5, #1
 801d414:	1b64      	subs	r4, r4, r5
 801d416:	e755      	b.n	801d2c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d418:	4264      	negs	r4, r4
 801d41a:	fb94 fef6 	sdiv	lr, r4, r6
 801d41e:	f1ce 0800 	rsb	r8, lr, #0
 801d422:	fb06 441e 	mls	r4, r6, lr, r4
 801d426:	f8c0 8000 	str.w	r8, [r0]
 801d42a:	6104      	str	r4, [r0, #16]
 801d42c:	2c00      	cmp	r4, #0
 801d42e:	f43f af6e 	beq.w	801d30e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d432:	ea6f 0e0e 	mvn.w	lr, lr
 801d436:	1b34      	subs	r4, r6, r4
 801d438:	f8c0 e000 	str.w	lr, [r0]
 801d43c:	e766      	b.n	801d30c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d43e:	426d      	negs	r5, r5
 801d440:	fb95 f4f6 	sdiv	r4, r5, r6
 801d444:	f1c4 0e00 	rsb	lr, r4, #0
 801d448:	fb06 5514 	mls	r5, r6, r4, r5
 801d44c:	f8c0 e004 	str.w	lr, [r0, #4]
 801d450:	6085      	str	r5, [r0, #8]
 801d452:	2d00      	cmp	r5, #0
 801d454:	f43f af64 	beq.w	801d320 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d458:	43e4      	mvns	r4, r4
 801d45a:	1b75      	subs	r5, r6, r5
 801d45c:	6044      	str	r4, [r0, #4]
 801d45e:	e75e      	b.n	801d31e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d460:	3d800000 	.word	0x3d800000

0801d464 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d464:	4602      	mov	r2, r0
 801d466:	b148      	cbz	r0, 801d47c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d468:	2300      	movs	r3, #0
 801d46a:	b298      	uxth	r0, r3
 801d46c:	3301      	adds	r3, #1
 801d46e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d472:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d476:	2900      	cmp	r1, #0
 801d478:	d1f7      	bne.n	801d46a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d47a:	4770      	bx	lr
 801d47c:	4770      	bx	lr

0801d47e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d47e:	b530      	push	{r4, r5, lr}
 801d480:	4604      	mov	r4, r0
 801d482:	b159      	cbz	r1, 801d49c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d484:	b148      	cbz	r0, 801d49a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d486:	2300      	movs	r3, #0
 801d488:	b298      	uxth	r0, r3
 801d48a:	4282      	cmp	r2, r0
 801d48c:	d905      	bls.n	801d49a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d48e:	5ccd      	ldrb	r5, [r1, r3]
 801d490:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d494:	3301      	adds	r3, #1
 801d496:	2d00      	cmp	r5, #0
 801d498:	d1f6      	bne.n	801d488 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d49a:	bd30      	pop	{r4, r5, pc}
 801d49c:	4608      	mov	r0, r1
 801d49e:	e7fc      	b.n	801d49a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d4a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801d4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4a2:	b08b      	sub	sp, #44	; 0x2c
 801d4a4:	468c      	mov	ip, r1
 801d4a6:	4604      	mov	r4, r0
 801d4a8:	2100      	movs	r1, #0
 801d4aa:	261f      	movs	r6, #31
 801d4ac:	af01      	add	r7, sp, #4
 801d4ae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d4b2:	1e71      	subs	r1, r6, #1
 801d4b4:	fb94 fef3 	sdiv	lr, r4, r3
 801d4b8:	fb03 441e 	mls	r4, r3, lr, r4
 801d4bc:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d4c0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d4c4:	b2ec      	uxtb	r4, r5
 801d4c6:	2d09      	cmp	r5, #9
 801d4c8:	bfd4      	ite	le
 801d4ca:	3430      	addle	r4, #48	; 0x30
 801d4cc:	3457      	addgt	r4, #87	; 0x57
 801d4ce:	b2e4      	uxtb	r4, r4
 801d4d0:	55bc      	strb	r4, [r7, r6]
 801d4d2:	4674      	mov	r4, lr
 801d4d4:	b974      	cbnz	r4, 801d4f4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801d4d6:	2800      	cmp	r0, #0
 801d4d8:	da05      	bge.n	801d4e6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801d4da:	ab0a      	add	r3, sp, #40	; 0x28
 801d4dc:	4419      	add	r1, r3
 801d4de:	232d      	movs	r3, #45	; 0x2d
 801d4e0:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d4e4:	1eb1      	subs	r1, r6, #2
 801d4e6:	3101      	adds	r1, #1
 801d4e8:	4660      	mov	r0, ip
 801d4ea:	4439      	add	r1, r7
 801d4ec:	f7ff ffc7 	bl	801d47e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d4f0:	b00b      	add	sp, #44	; 0x2c
 801d4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4f4:	460e      	mov	r6, r1
 801d4f6:	e7dc      	b.n	801d4b2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801d4f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4fa:	468c      	mov	ip, r1
 801d4fc:	b08b      	sub	sp, #44	; 0x2c
 801d4fe:	2100      	movs	r1, #0
 801d500:	ae01      	add	r6, sp, #4
 801d502:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d506:	211f      	movs	r1, #31
 801d508:	fbb0 f7f3 	udiv	r7, r0, r3
 801d50c:	fb03 0517 	mls	r5, r3, r7, r0
 801d510:	4638      	mov	r0, r7
 801d512:	b2ec      	uxtb	r4, r5
 801d514:	2d09      	cmp	r5, #9
 801d516:	bfd4      	ite	le
 801d518:	3430      	addle	r4, #48	; 0x30
 801d51a:	3457      	addgt	r4, #87	; 0x57
 801d51c:	b2e4      	uxtb	r4, r4
 801d51e:	558c      	strb	r4, [r1, r6]
 801d520:	1e4c      	subs	r4, r1, #1
 801d522:	b92f      	cbnz	r7, 801d530 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801d524:	4431      	add	r1, r6
 801d526:	4660      	mov	r0, ip
 801d528:	f7ff ffa9 	bl	801d47e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d52c:	b00b      	add	sp, #44	; 0x2c
 801d52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d530:	4621      	mov	r1, r4
 801d532:	e7e9      	b.n	801d508 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801d534 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d538:	b085      	sub	sp, #20
 801d53a:	4691      	mov	r9, r2
 801d53c:	6802      	ldr	r2, [r0, #0]
 801d53e:	4688      	mov	r8, r1
 801d540:	461c      	mov	r4, r3
 801d542:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d546:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d54a:	4683      	mov	fp, r0
 801d54c:	4610      	mov	r0, r2
 801d54e:	9103      	str	r1, [sp, #12]
 801d550:	9302      	str	r3, [sp, #8]
 801d552:	9201      	str	r2, [sp, #4]
 801d554:	f7ff ff86 	bl	801d464 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d558:	f1b8 0f00 	cmp.w	r8, #0
 801d55c:	bf0c      	ite	eq
 801d55e:	4684      	moveq	ip, r0
 801d560:	f100 0c01 	addne.w	ip, r0, #1
 801d564:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d568:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d56c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d56e:	fa1f fc8c 	uxth.w	ip, ip
 801d572:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d574:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d578:	9903      	ldr	r1, [sp, #12]
 801d57a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d57e:	d041      	beq.n	801d604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d580:	d834      	bhi.n	801d5ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d582:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d586:	d059      	beq.n	801d63c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d588:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d58c:	d03a      	beq.n	801d604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d58e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d592:	d034      	beq.n	801d5fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d594:	2400      	movs	r4, #0
 801d596:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d59a:	3a01      	subs	r2, #1
 801d59c:	b169      	cbz	r1, 801d5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d59e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d5a0:	458c      	cmp	ip, r1
 801d5a2:	da09      	bge.n	801d5b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d5a4:	eba1 010c 	sub.w	r1, r1, ip
 801d5a8:	b289      	uxth	r1, r1
 801d5aa:	b933      	cbnz	r3, 801d5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d5ac:	2e00      	cmp	r6, #0
 801d5ae:	d051      	beq.n	801d654 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d5b0:	2800      	cmp	r0, #0
 801d5b2:	d04f      	beq.n	801d654 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d5b4:	440c      	add	r4, r1
 801d5b6:	b2a4      	uxth	r4, r4
 801d5b8:	2100      	movs	r1, #0
 801d5ba:	682b      	ldr	r3, [r5, #0]
 801d5bc:	4293      	cmp	r3, r2
 801d5be:	da07      	bge.n	801d5d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d5c0:	f1b8 0f00 	cmp.w	r8, #0
 801d5c4:	d004      	beq.n	801d5d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d5c6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d5ca:	682b      	ldr	r3, [r5, #0]
 801d5cc:	3301      	adds	r3, #1
 801d5ce:	602b      	str	r3, [r5, #0]
 801d5d0:	2730      	movs	r7, #48	; 0x30
 801d5d2:	2c00      	cmp	r4, #0
 801d5d4:	d04e      	beq.n	801d674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d5d6:	682e      	ldr	r6, [r5, #0]
 801d5d8:	3c01      	subs	r4, #1
 801d5da:	42b2      	cmp	r2, r6
 801d5dc:	b2a4      	uxth	r4, r4
 801d5de:	dd49      	ble.n	801d674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d5e0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d5e4:	682b      	ldr	r3, [r5, #0]
 801d5e6:	3301      	adds	r3, #1
 801d5e8:	602b      	str	r3, [r5, #0]
 801d5ea:	e7f2      	b.n	801d5d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d5ec:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d5f0:	d01d      	beq.n	801d62e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d5f2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d5f6:	d002      	beq.n	801d5fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d5f8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d5fc:	e7c9      	b.n	801d592 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d5fe:	4684      	mov	ip, r0
 801d600:	f04f 0800 	mov.w	r8, #0
 801d604:	2c00      	cmp	r4, #0
 801d606:	d0c6      	beq.n	801d596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d608:	b947      	cbnz	r7, 801d61c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d60a:	2801      	cmp	r0, #1
 801d60c:	d106      	bne.n	801d61c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d60e:	8814      	ldrh	r4, [r2, #0]
 801d610:	2c30      	cmp	r4, #48	; 0x30
 801d612:	bf02      	ittt	eq
 801d614:	3202      	addeq	r2, #2
 801d616:	4638      	moveq	r0, r7
 801d618:	f8cb 2000 	streq.w	r2, [fp]
 801d61c:	45bc      	cmp	ip, r7
 801d61e:	da14      	bge.n	801d64a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d620:	b2bf      	uxth	r7, r7
 801d622:	eba7 040c 	sub.w	r4, r7, ip
 801d626:	46bc      	mov	ip, r7
 801d628:	b2a4      	uxth	r4, r4
 801d62a:	2600      	movs	r6, #0
 801d62c:	e7b3      	b.n	801d596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d62e:	4684      	mov	ip, r0
 801d630:	b16c      	cbz	r4, 801d64e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d632:	42b8      	cmp	r0, r7
 801d634:	dd00      	ble.n	801d638 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d636:	b2b8      	uxth	r0, r7
 801d638:	2400      	movs	r4, #0
 801d63a:	e003      	b.n	801d644 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d63c:	f04f 0c01 	mov.w	ip, #1
 801d640:	2400      	movs	r4, #0
 801d642:	4660      	mov	r0, ip
 801d644:	4626      	mov	r6, r4
 801d646:	46a0      	mov	r8, r4
 801d648:	e7a5      	b.n	801d596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d64a:	2400      	movs	r4, #0
 801d64c:	e7ed      	b.n	801d62a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d64e:	4626      	mov	r6, r4
 801d650:	46a0      	mov	r8, r4
 801d652:	e7a0      	b.n	801d596 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d654:	2900      	cmp	r1, #0
 801d656:	d0b0      	beq.n	801d5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d658:	2720      	movs	r7, #32
 801d65a:	682e      	ldr	r6, [r5, #0]
 801d65c:	2900      	cmp	r1, #0
 801d65e:	d0ac      	beq.n	801d5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d660:	3901      	subs	r1, #1
 801d662:	4296      	cmp	r6, r2
 801d664:	b289      	uxth	r1, r1
 801d666:	daa7      	bge.n	801d5b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d668:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d66c:	682b      	ldr	r3, [r5, #0]
 801d66e:	3301      	adds	r3, #1
 801d670:	602b      	str	r3, [r5, #0]
 801d672:	e7f2      	b.n	801d65a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d674:	b188      	cbz	r0, 801d69a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d676:	682b      	ldr	r3, [r5, #0]
 801d678:	3801      	subs	r0, #1
 801d67a:	429a      	cmp	r2, r3
 801d67c:	b280      	uxth	r0, r0
 801d67e:	dd0c      	ble.n	801d69a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d680:	f8db 3000 	ldr.w	r3, [fp]
 801d684:	1c9c      	adds	r4, r3, #2
 801d686:	f8cb 4000 	str.w	r4, [fp]
 801d68a:	881c      	ldrh	r4, [r3, #0]
 801d68c:	682b      	ldr	r3, [r5, #0]
 801d68e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d692:	682b      	ldr	r3, [r5, #0]
 801d694:	3301      	adds	r3, #1
 801d696:	602b      	str	r3, [r5, #0]
 801d698:	e7ec      	b.n	801d674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d69a:	2620      	movs	r6, #32
 801d69c:	b151      	cbz	r1, 801d6b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d69e:	6828      	ldr	r0, [r5, #0]
 801d6a0:	3901      	subs	r1, #1
 801d6a2:	4282      	cmp	r2, r0
 801d6a4:	b289      	uxth	r1, r1
 801d6a6:	dd05      	ble.n	801d6b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d6a8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d6ac:	682b      	ldr	r3, [r5, #0]
 801d6ae:	3301      	adds	r3, #1
 801d6b0:	602b      	str	r3, [r5, #0]
 801d6b2:	e7f3      	b.n	801d69c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d6b4:	b005      	add	sp, #20
 801d6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d6ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6be:	2400      	movs	r4, #0
 801d6c0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d6c4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d6c8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d6cc:	8014      	strh	r4, [r2, #0]
 801d6ce:	701c      	strb	r4, [r3, #0]
 801d6d0:	f888 4000 	strb.w	r4, [r8]
 801d6d4:	f88c 4000 	strb.w	r4, [ip]
 801d6d8:	f88e 4000 	strb.w	r4, [lr]
 801d6dc:	703c      	strb	r4, [r7, #0]
 801d6de:	6804      	ldr	r4, [r0, #0]
 801d6e0:	b1a4      	cbz	r4, 801d70c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d6e2:	8824      	ldrh	r4, [r4, #0]
 801d6e4:	f04f 0901 	mov.w	r9, #1
 801d6e8:	b314      	cbz	r4, 801d730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d6ea:	2c2b      	cmp	r4, #43	; 0x2b
 801d6ec:	d001      	beq.n	801d6f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d6ee:	2c20      	cmp	r4, #32
 801d6f0:	d110      	bne.n	801d714 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d6f2:	8014      	strh	r4, [r2, #0]
 801d6f4:	6804      	ldr	r4, [r0, #0]
 801d6f6:	b10c      	cbz	r4, 801d6fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d6f8:	3402      	adds	r4, #2
 801d6fa:	6004      	str	r4, [r0, #0]
 801d6fc:	680c      	ldr	r4, [r1, #0]
 801d6fe:	b10c      	cbz	r4, 801d704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d700:	3401      	adds	r4, #1
 801d702:	600c      	str	r4, [r1, #0]
 801d704:	6804      	ldr	r4, [r0, #0]
 801d706:	b17c      	cbz	r4, 801d728 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d708:	8824      	ldrh	r4, [r4, #0]
 801d70a:	e7ed      	b.n	801d6e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d70c:	680c      	ldr	r4, [r1, #0]
 801d70e:	b17c      	cbz	r4, 801d730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d710:	7824      	ldrb	r4, [r4, #0]
 801d712:	e7e7      	b.n	801d6e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d714:	2c2d      	cmp	r4, #45	; 0x2d
 801d716:	d102      	bne.n	801d71e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d718:	f883 9000 	strb.w	r9, [r3]
 801d71c:	e7ea      	b.n	801d6f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d71e:	2c23      	cmp	r4, #35	; 0x23
 801d720:	d107      	bne.n	801d732 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d722:	f888 9000 	strb.w	r9, [r8]
 801d726:	e7e5      	b.n	801d6f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d728:	680c      	ldr	r4, [r1, #0]
 801d72a:	b10c      	cbz	r4, 801d730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d72c:	7824      	ldrb	r4, [r4, #0]
 801d72e:	e7db      	b.n	801d6e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d730:	2400      	movs	r4, #0
 801d732:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d736:	2b09      	cmp	r3, #9
 801d738:	d901      	bls.n	801d73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d73a:	2c2a      	cmp	r4, #42	; 0x2a
 801d73c:	d122      	bne.n	801d784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d73e:	2301      	movs	r3, #1
 801d740:	2c30      	cmp	r4, #48	; 0x30
 801d742:	f88e 3000 	strb.w	r3, [lr]
 801d746:	d10d      	bne.n	801d764 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d748:	f88c 3000 	strb.w	r3, [ip]
 801d74c:	6803      	ldr	r3, [r0, #0]
 801d74e:	b10b      	cbz	r3, 801d754 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d750:	3302      	adds	r3, #2
 801d752:	6003      	str	r3, [r0, #0]
 801d754:	680b      	ldr	r3, [r1, #0]
 801d756:	b10b      	cbz	r3, 801d75c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d758:	3301      	adds	r3, #1
 801d75a:	600b      	str	r3, [r1, #0]
 801d75c:	6803      	ldr	r3, [r0, #0]
 801d75e:	2b00      	cmp	r3, #0
 801d760:	d02f      	beq.n	801d7c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d762:	881c      	ldrh	r4, [r3, #0]
 801d764:	2c2a      	cmp	r4, #42	; 0x2a
 801d766:	d135      	bne.n	801d7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d768:	f04f 33ff 	mov.w	r3, #4294967295
 801d76c:	6033      	str	r3, [r6, #0]
 801d76e:	6803      	ldr	r3, [r0, #0]
 801d770:	b10b      	cbz	r3, 801d776 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d772:	3302      	adds	r3, #2
 801d774:	6003      	str	r3, [r0, #0]
 801d776:	680b      	ldr	r3, [r1, #0]
 801d778:	b10b      	cbz	r3, 801d77e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d77a:	3301      	adds	r3, #1
 801d77c:	600b      	str	r3, [r1, #0]
 801d77e:	6803      	ldr	r3, [r0, #0]
 801d780:	b31b      	cbz	r3, 801d7ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d782:	881c      	ldrh	r4, [r3, #0]
 801d784:	2c2e      	cmp	r4, #46	; 0x2e
 801d786:	d11a      	bne.n	801d7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d788:	2301      	movs	r3, #1
 801d78a:	703b      	strb	r3, [r7, #0]
 801d78c:	6803      	ldr	r3, [r0, #0]
 801d78e:	b10b      	cbz	r3, 801d794 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d790:	3302      	adds	r3, #2
 801d792:	6003      	str	r3, [r0, #0]
 801d794:	680b      	ldr	r3, [r1, #0]
 801d796:	b10b      	cbz	r3, 801d79c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d798:	3301      	adds	r3, #1
 801d79a:	600b      	str	r3, [r1, #0]
 801d79c:	6803      	ldr	r3, [r0, #0]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d036      	beq.n	801d810 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d7a2:	881b      	ldrh	r3, [r3, #0]
 801d7a4:	2b2a      	cmp	r3, #42	; 0x2a
 801d7a6:	d137      	bne.n	801d818 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d7ac:	602b      	str	r3, [r5, #0]
 801d7ae:	6803      	ldr	r3, [r0, #0]
 801d7b0:	b10b      	cbz	r3, 801d7b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d7b2:	3302      	adds	r3, #2
 801d7b4:	6003      	str	r3, [r0, #0]
 801d7b6:	680b      	ldr	r3, [r1, #0]
 801d7b8:	b10b      	cbz	r3, 801d7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d7ba:	3301      	adds	r3, #1
 801d7bc:	600b      	str	r3, [r1, #0]
 801d7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7c2:	680c      	ldr	r4, [r1, #0]
 801d7c4:	b134      	cbz	r4, 801d7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d7c6:	7824      	ldrb	r4, [r4, #0]
 801d7c8:	e7cc      	b.n	801d764 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d7ca:	680b      	ldr	r3, [r1, #0]
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	d0f6      	beq.n	801d7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d7d0:	781c      	ldrb	r4, [r3, #0]
 801d7d2:	e7d7      	b.n	801d784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	220a      	movs	r2, #10
 801d7d8:	6033      	str	r3, [r6, #0]
 801d7da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d7de:	fa1f f38c 	uxth.w	r3, ip
 801d7e2:	2b09      	cmp	r3, #9
 801d7e4:	d8ce      	bhi.n	801d784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d7e6:	6833      	ldr	r3, [r6, #0]
 801d7e8:	fb02 c303 	mla	r3, r2, r3, ip
 801d7ec:	6033      	str	r3, [r6, #0]
 801d7ee:	6803      	ldr	r3, [r0, #0]
 801d7f0:	b10b      	cbz	r3, 801d7f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d7f2:	3302      	adds	r3, #2
 801d7f4:	6003      	str	r3, [r0, #0]
 801d7f6:	680b      	ldr	r3, [r1, #0]
 801d7f8:	b10b      	cbz	r3, 801d7fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d7fa:	3301      	adds	r3, #1
 801d7fc:	600b      	str	r3, [r1, #0]
 801d7fe:	6803      	ldr	r3, [r0, #0]
 801d800:	b10b      	cbz	r3, 801d806 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d802:	881c      	ldrh	r4, [r3, #0]
 801d804:	e7e9      	b.n	801d7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d806:	680c      	ldr	r4, [r1, #0]
 801d808:	2c00      	cmp	r4, #0
 801d80a:	d0e6      	beq.n	801d7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d80c:	7824      	ldrb	r4, [r4, #0]
 801d80e:	e7e4      	b.n	801d7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d810:	680b      	ldr	r3, [r1, #0]
 801d812:	b10b      	cbz	r3, 801d818 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d814:	781b      	ldrb	r3, [r3, #0]
 801d816:	e7c5      	b.n	801d7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d818:	2200      	movs	r2, #0
 801d81a:	240a      	movs	r4, #10
 801d81c:	602a      	str	r2, [r5, #0]
 801d81e:	3b30      	subs	r3, #48	; 0x30
 801d820:	682a      	ldr	r2, [r5, #0]
 801d822:	b29e      	uxth	r6, r3
 801d824:	2e09      	cmp	r6, #9
 801d826:	d813      	bhi.n	801d850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d828:	fb04 3302 	mla	r3, r4, r2, r3
 801d82c:	602b      	str	r3, [r5, #0]
 801d82e:	6803      	ldr	r3, [r0, #0]
 801d830:	b10b      	cbz	r3, 801d836 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d832:	3302      	adds	r3, #2
 801d834:	6003      	str	r3, [r0, #0]
 801d836:	680b      	ldr	r3, [r1, #0]
 801d838:	b10b      	cbz	r3, 801d83e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d83a:	3301      	adds	r3, #1
 801d83c:	600b      	str	r3, [r1, #0]
 801d83e:	6803      	ldr	r3, [r0, #0]
 801d840:	b10b      	cbz	r3, 801d846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d842:	881b      	ldrh	r3, [r3, #0]
 801d844:	e7eb      	b.n	801d81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d846:	680b      	ldr	r3, [r1, #0]
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d0e8      	beq.n	801d81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d84c:	781b      	ldrb	r3, [r3, #0]
 801d84e:	e7e6      	b.n	801d81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d850:	2a06      	cmp	r2, #6
 801d852:	bfa8      	it	ge
 801d854:	2206      	movge	r2, #6
 801d856:	602a      	str	r2, [r5, #0]
 801d858:	e7b1      	b.n	801d7be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d85a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d85e:	b0a3      	sub	sp, #140	; 0x8c
 801d860:	2600      	movs	r6, #0
 801d862:	4607      	mov	r7, r0
 801d864:	4688      	mov	r8, r1
 801d866:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d86a:	4631      	mov	r1, r6
 801d86c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d86e:	4648      	mov	r0, r9
 801d870:	960d      	str	r6, [sp, #52]	; 0x34
 801d872:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d876:	2242      	movs	r2, #66	; 0x42
 801d878:	f00e f883 	bl	802b982 <memset>
 801d87c:	b15f      	cbz	r7, 801d896 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d87e:	f108 3aff 	add.w	sl, r8, #4294967295
 801d882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d886:	b152      	cbz	r2, 801d89e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d888:	8812      	ldrh	r2, [r2, #0]
 801d88a:	b10a      	cbz	r2, 801d890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d88c:	459a      	cmp	sl, r3
 801d88e:	dc2e      	bgt.n	801d8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d890:	2200      	movs	r2, #0
 801d892:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d896:	4638      	mov	r0, r7
 801d898:	b023      	add	sp, #140	; 0x8c
 801d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d89e:	9a08      	ldr	r2, [sp, #32]
 801d8a0:	2a00      	cmp	r2, #0
 801d8a2:	d0f5      	beq.n	801d890 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d8a4:	7812      	ldrb	r2, [r2, #0]
 801d8a6:	e7f0      	b.n	801d88a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d8a8:	2d00      	cmp	r5, #0
 801d8aa:	d0ea      	beq.n	801d882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d8ac:	782a      	ldrb	r2, [r5, #0]
 801d8ae:	b142      	cbz	r2, 801d8c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d8b0:	2a25      	cmp	r2, #37	; 0x25
 801d8b2:	d001      	beq.n	801d8b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d8b4:	459a      	cmp	sl, r3
 801d8b6:	dc08      	bgt.n	801d8ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d8b8:	f1bb 0f00 	cmp.w	fp, #0
 801d8bc:	d121      	bne.n	801d902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d8be:	2d00      	cmp	r5, #0
 801d8c0:	d0df      	beq.n	801d882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d8c2:	782a      	ldrb	r2, [r5, #0]
 801d8c4:	f04f 0b00 	mov.w	fp, #0
 801d8c8:	e01d      	b.n	801d906 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d8ca:	f1bb 0f00 	cmp.w	fp, #0
 801d8ce:	d077      	beq.n	801d9c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801d8d0:	f8bb 2000 	ldrh.w	r2, [fp]
 801d8d4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d8d8:	f1bb 0f00 	cmp.w	fp, #0
 801d8dc:	d002      	beq.n	801d8e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d8de:	f10b 0202 	add.w	r2, fp, #2
 801d8e2:	9209      	str	r2, [sp, #36]	; 0x24
 801d8e4:	b10d      	cbz	r5, 801d8ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d8e6:	3501      	adds	r5, #1
 801d8e8:	9508      	str	r5, [sp, #32]
 801d8ea:	3301      	adds	r3, #1
 801d8ec:	930d      	str	r3, [sp, #52]	; 0x34
 801d8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8f0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d8f4:	f1bb 0f00 	cmp.w	fp, #0
 801d8f8:	d0d6      	beq.n	801d8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d8fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801d8fe:	2a00      	cmp	r2, #0
 801d900:	d1d6      	bne.n	801d8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d902:	f8bb 2000 	ldrh.w	r2, [fp]
 801d906:	2a00      	cmp	r2, #0
 801d908:	d0bb      	beq.n	801d882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d90a:	459a      	cmp	sl, r3
 801d90c:	ddb9      	ble.n	801d882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d90e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d912:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d916:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d91a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d91e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d922:	960e      	str	r6, [sp, #56]	; 0x38
 801d924:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d928:	960f      	str	r6, [sp, #60]	; 0x3c
 801d92a:	f1bb 0f00 	cmp.w	fp, #0
 801d92e:	d002      	beq.n	801d936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d930:	f10b 0302 	add.w	r3, fp, #2
 801d934:	9309      	str	r3, [sp, #36]	; 0x24
 801d936:	b10d      	cbz	r5, 801d93c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d938:	1c6b      	adds	r3, r5, #1
 801d93a:	9308      	str	r3, [sp, #32]
 801d93c:	ab0f      	add	r3, sp, #60	; 0x3c
 801d93e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d942:	a908      	add	r1, sp, #32
 801d944:	a809      	add	r0, sp, #36	; 0x24
 801d946:	9305      	str	r3, [sp, #20]
 801d948:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d94c:	9304      	str	r3, [sp, #16]
 801d94e:	ab0e      	add	r3, sp, #56	; 0x38
 801d950:	9303      	str	r3, [sp, #12]
 801d952:	ab0c      	add	r3, sp, #48	; 0x30
 801d954:	9302      	str	r3, [sp, #8]
 801d956:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d95a:	9301      	str	r3, [sp, #4]
 801d95c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d960:	9300      	str	r3, [sp, #0]
 801d962:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d966:	f7ff fea8 	bl	801d6ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	bfbf      	itttt	lt
 801d970:	6823      	ldrlt	r3, [r4, #0]
 801d972:	3404      	addlt	r4, #4
 801d974:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d978:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	bfbe      	ittt	lt
 801d980:	6823      	ldrlt	r3, [r4, #0]
 801d982:	3404      	addlt	r4, #4
 801d984:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d988:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d98c:	bfb8      	it	lt
 801d98e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d990:	b1d9      	cbz	r1, 801d9ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d992:	880b      	ldrh	r3, [r1, #0]
 801d994:	2b69      	cmp	r3, #105	; 0x69
 801d996:	d01f      	beq.n	801d9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d998:	d82f      	bhi.n	801d9fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d99a:	2b58      	cmp	r3, #88	; 0x58
 801d99c:	d01c      	beq.n	801d9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d99e:	d818      	bhi.n	801d9d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d9a0:	2b25      	cmp	r3, #37	; 0x25
 801d9a2:	d034      	beq.n	801da0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9a6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d9aa:	f1bb 0f00 	cmp.w	fp, #0
 801d9ae:	f000 80b7 	beq.w	801db20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d9b2:	f8bb 5000 	ldrh.w	r5, [fp]
 801d9b6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d9ba:	3301      	adds	r3, #1
 801d9bc:	930d      	str	r3, [sp, #52]	; 0x34
 801d9be:	e029      	b.n	801da14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d9c0:	b10d      	cbz	r5, 801d9c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d9c2:	782a      	ldrb	r2, [r5, #0]
 801d9c4:	e786      	b.n	801d8d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d9c6:	462a      	mov	r2, r5
 801d9c8:	e784      	b.n	801d8d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d9ca:	2a00      	cmp	r2, #0
 801d9cc:	d0ea      	beq.n	801d9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d9ce:	7813      	ldrb	r3, [r2, #0]
 801d9d0:	e7e0      	b.n	801d994 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d9d2:	3b63      	subs	r3, #99	; 0x63
 801d9d4:	2b01      	cmp	r3, #1
 801d9d6:	d8e5      	bhi.n	801d9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d9d8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d9dc:	b329      	cbz	r1, 801da2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d9de:	880b      	ldrh	r3, [r1, #0]
 801d9e0:	2b69      	cmp	r3, #105	; 0x69
 801d9e2:	d063      	beq.n	801daac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d9e4:	d825      	bhi.n	801da32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801d9e6:	2b63      	cmp	r3, #99	; 0x63
 801d9e8:	d038      	beq.n	801da5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801d9ea:	2b64      	cmp	r3, #100	; 0x64
 801d9ec:	d05e      	beq.n	801daac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801d9ee:	2b58      	cmp	r3, #88	; 0x58
 801d9f0:	d07a      	beq.n	801dae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801d9f2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801d9f6:	4625      	mov	r5, r4
 801d9f8:	e036      	b.n	801da68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801d9fa:	2b73      	cmp	r3, #115	; 0x73
 801d9fc:	d0ec      	beq.n	801d9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d9fe:	d802      	bhi.n	801da06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801da00:	2b6f      	cmp	r3, #111	; 0x6f
 801da02:	d1cf      	bne.n	801d9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801da04:	e7e8      	b.n	801d9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801da06:	2b75      	cmp	r3, #117	; 0x75
 801da08:	d0e6      	beq.n	801d9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801da0a:	2b78      	cmp	r3, #120	; 0x78
 801da0c:	e7f9      	b.n	801da02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801da0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da10:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801da14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da16:	b10b      	cbz	r3, 801da1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801da18:	3302      	adds	r3, #2
 801da1a:	9309      	str	r3, [sp, #36]	; 0x24
 801da1c:	9b08      	ldr	r3, [sp, #32]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	f43f af2f 	beq.w	801d882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801da24:	3301      	adds	r3, #1
 801da26:	9308      	str	r3, [sp, #32]
 801da28:	e72b      	b.n	801d882 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801da2a:	2a00      	cmp	r2, #0
 801da2c:	d0e1      	beq.n	801d9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801da2e:	7813      	ldrb	r3, [r2, #0]
 801da30:	e7d6      	b.n	801d9e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801da32:	2b73      	cmp	r3, #115	; 0x73
 801da34:	d036      	beq.n	801daa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801da36:	d807      	bhi.n	801da48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801da38:	2b6f      	cmp	r3, #111	; 0x6f
 801da3a:	d1da      	bne.n	801d9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801da3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da3e:	1d25      	adds	r5, r4, #4
 801da40:	2308      	movs	r3, #8
 801da42:	eba8 0202 	sub.w	r2, r8, r2
 801da46:	e049      	b.n	801dadc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801da48:	2b75      	cmp	r3, #117	; 0x75
 801da4a:	d042      	beq.n	801dad2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801da4c:	2b78      	cmp	r3, #120	; 0x78
 801da4e:	d1d0      	bne.n	801d9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801da50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da52:	1d25      	adds	r5, r4, #4
 801da54:	2310      	movs	r3, #16
 801da56:	eba8 0202 	sub.w	r2, r8, r2
 801da5a:	e03f      	b.n	801dadc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801da5c:	6823      	ldr	r3, [r4, #0]
 801da5e:	1d25      	adds	r5, r4, #4
 801da60:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801da64:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801da68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da6a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d051      	beq.n	801db16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801da72:	881a      	ldrh	r2, [r3, #0]
 801da74:	a80d      	add	r0, sp, #52	; 0x34
 801da76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801da7a:	462c      	mov	r4, r5
 801da7c:	9005      	str	r0, [sp, #20]
 801da7e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801da82:	9004      	str	r0, [sp, #16]
 801da84:	980e      	ldr	r0, [sp, #56]	; 0x38
 801da86:	9003      	str	r0, [sp, #12]
 801da88:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801da8c:	9002      	str	r0, [sp, #8]
 801da8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801da90:	9001      	str	r0, [sp, #4]
 801da92:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801da96:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801da9a:	9000      	str	r0, [sp, #0]
 801da9c:	a810      	add	r0, sp, #64	; 0x40
 801da9e:	f7ff fd49 	bl	801d534 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801daa2:	e7b7      	b.n	801da14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801daa4:	1d25      	adds	r5, r4, #4
 801daa6:	6823      	ldr	r3, [r4, #0]
 801daa8:	9310      	str	r3, [sp, #64]	; 0x40
 801daaa:	e7dd      	b.n	801da68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801daac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801daae:	230a      	movs	r3, #10
 801dab0:	4649      	mov	r1, r9
 801dab2:	6820      	ldr	r0, [r4, #0]
 801dab4:	eba8 0202 	sub.w	r2, r8, r2
 801dab8:	1d25      	adds	r5, r4, #4
 801daba:	b292      	uxth	r2, r2
 801dabc:	f7ff fcf0 	bl	801d4a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801dac0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801dac4:	2b2d      	cmp	r3, #45	; 0x2d
 801dac6:	d1cf      	bne.n	801da68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dac8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801dacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dace:	3302      	adds	r3, #2
 801dad0:	e7ea      	b.n	801daa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801dad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dad4:	1d25      	adds	r5, r4, #4
 801dad6:	230a      	movs	r3, #10
 801dad8:	eba8 0202 	sub.w	r2, r8, r2
 801dadc:	b292      	uxth	r2, r2
 801dade:	4649      	mov	r1, r9
 801dae0:	6820      	ldr	r0, [r4, #0]
 801dae2:	f7ff fd09 	bl	801d4f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801dae6:	e7bf      	b.n	801da68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801daea:	2310      	movs	r3, #16
 801daec:	4649      	mov	r1, r9
 801daee:	6820      	ldr	r0, [r4, #0]
 801daf0:	eba8 0202 	sub.w	r2, r8, r2
 801daf4:	1d25      	adds	r5, r4, #4
 801daf6:	b292      	uxth	r2, r2
 801daf8:	f7ff fcfe 	bl	801d4f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801dafc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801db00:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801db04:	2b00      	cmp	r3, #0
 801db06:	d0af      	beq.n	801da68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801db08:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801db0c:	2919      	cmp	r1, #25
 801db0e:	d8f7      	bhi.n	801db00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801db10:	3b20      	subs	r3, #32
 801db12:	8013      	strh	r3, [r2, #0]
 801db14:	e7f4      	b.n	801db00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801db16:	9a08      	ldr	r2, [sp, #32]
 801db18:	2a00      	cmp	r2, #0
 801db1a:	d0ab      	beq.n	801da74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801db1c:	7812      	ldrb	r2, [r2, #0]
 801db1e:	e7a9      	b.n	801da74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801db20:	2d00      	cmp	r5, #0
 801db22:	f43f af48 	beq.w	801d9b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801db26:	782d      	ldrb	r5, [r5, #0]
 801db28:	e745      	b.n	801d9b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801db2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801db2a:	b507      	push	{r0, r1, r2, lr}
 801db2c:	9300      	str	r3, [sp, #0]
 801db2e:	4613      	mov	r3, r2
 801db30:	2200      	movs	r2, #0
 801db32:	f7ff fe92 	bl	801d85a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801db36:	b003      	add	sp, #12
 801db38:	f85d fb04 	ldr.w	pc, [sp], #4

0801db3c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801db3c:	b40c      	push	{r2, r3}
 801db3e:	b507      	push	{r0, r1, r2, lr}
 801db40:	ab04      	add	r3, sp, #16
 801db42:	f853 2b04 	ldr.w	r2, [r3], #4
 801db46:	9301      	str	r3, [sp, #4]
 801db48:	f7ff ffef 	bl	801db2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801db4c:	b003      	add	sp, #12
 801db4e:	f85d eb04 	ldr.w	lr, [sp], #4
 801db52:	b002      	add	sp, #8
 801db54:	4770      	bx	lr
	...

0801db58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801db58:	4b01      	ldr	r3, [pc, #4]	; (801db60 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801db5a:	6018      	str	r0, [r3, #0]
 801db5c:	4770      	bx	lr
 801db5e:	bf00      	nop
 801db60:	2402aecc 	.word	0x2402aecc

0801db64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801db64:	4b06      	ldr	r3, [pc, #24]	; (801db80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801db66:	881a      	ldrh	r2, [r3, #0]
 801db68:	4282      	cmp	r2, r0
 801db6a:	d807      	bhi.n	801db7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801db6c:	4b05      	ldr	r3, [pc, #20]	; (801db84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801db6e:	881b      	ldrh	r3, [r3, #0]
 801db70:	4413      	add	r3, r2
 801db72:	4298      	cmp	r0, r3
 801db74:	bfac      	ite	ge
 801db76:	2000      	movge	r0, #0
 801db78:	2001      	movlt	r0, #1
 801db7a:	4770      	bx	lr
 801db7c:	2000      	movs	r0, #0
 801db7e:	4770      	bx	lr
 801db80:	2402aeec 	.word	0x2402aeec
 801db84:	2402aef0 	.word	0x2402aef0

0801db88 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801db88:	b508      	push	{r3, lr}
 801db8a:	4601      	mov	r1, r0
 801db8c:	f7ff ffea 	bl	801db64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801db90:	b118      	cbz	r0, 801db9a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801db92:	4b02      	ldr	r3, [pc, #8]	; (801db9c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801db9a:	bd08      	pop	{r3, pc}
 801db9c:	2402aed0 	.word	0x2402aed0

0801dba0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dba2:	4c24      	ldr	r4, [pc, #144]	; (801dc34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801dba4:	6823      	ldr	r3, [r4, #0]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d042      	beq.n	801dc30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dbaa:	4a23      	ldr	r2, [pc, #140]	; (801dc38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801dbac:	4d23      	ldr	r5, [pc, #140]	; (801dc3c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801dbae:	8811      	ldrh	r1, [r2, #0]
 801dbb0:	f8b5 c000 	ldrh.w	ip, [r5]
 801dbb4:	4822      	ldr	r0, [pc, #136]	; (801dc40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801dbb6:	4461      	add	r1, ip
 801dbb8:	1c4a      	adds	r2, r1, #1
 801dbba:	008f      	lsls	r7, r1, #2
 801dbbc:	f022 0201 	bic.w	r2, r2, #1
 801dbc0:	19de      	adds	r6, r3, r7
 801dbc2:	0412      	lsls	r2, r2, #16
 801dbc4:	6006      	str	r6, [r0, #0]
 801dbc6:	4e1f      	ldr	r6, [pc, #124]	; (801dc44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801dbc8:	0c12      	lsrs	r2, r2, #16
 801dbca:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801dbce:	19da      	adds	r2, r3, r7
 801dbd0:	6032      	str	r2, [r6, #0]
 801dbd2:	220e      	movs	r2, #14
 801dbd4:	fb02 f20c 	mul.w	r2, r2, ip
 801dbd8:	3203      	adds	r2, #3
 801dbda:	f022 0203 	bic.w	r2, r2, #3
 801dbde:	443a      	add	r2, r7
 801dbe0:	4f19      	ldr	r7, [pc, #100]	; (801dc48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801dbe2:	4413      	add	r3, r2
 801dbe4:	603b      	str	r3, [r7, #0]
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	4f18      	ldr	r7, [pc, #96]	; (801dc4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801dbea:	469c      	mov	ip, r3
 801dbec:	803b      	strh	r3, [r7, #0]
 801dbee:	4f18      	ldr	r7, [pc, #96]	; (801dc50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dbf0:	683f      	ldr	r7, [r7, #0]
 801dbf2:	1aba      	subs	r2, r7, r2
 801dbf4:	4f17      	ldr	r7, [pc, #92]	; (801dc54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dbf6:	603a      	str	r2, [r7, #0]
 801dbf8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801dbfc:	4a16      	ldr	r2, [pc, #88]	; (801dc58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dbfe:	8013      	strh	r3, [r2, #0]
 801dc00:	428b      	cmp	r3, r1
 801dc02:	d10d      	bne.n	801dc20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801dc04:	882d      	ldrh	r5, [r5, #0]
 801dc06:	2300      	movs	r3, #0
 801dc08:	6830      	ldr	r0, [r6, #0]
 801dc0a:	240e      	movs	r4, #14
 801dc0c:	429d      	cmp	r5, r3
 801dc0e:	d90f      	bls.n	801dc30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dc10:	fb04 0203 	mla	r2, r4, r3, r0
 801dc14:	3301      	adds	r3, #1
 801dc16:	7b11      	ldrb	r1, [r2, #12]
 801dc18:	f36f 1145 	bfc	r1, #5, #1
 801dc1c:	7311      	strb	r1, [r2, #12]
 801dc1e:	e7f5      	b.n	801dc0c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801dc20:	6822      	ldr	r2, [r4, #0]
 801dc22:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801dc26:	6802      	ldr	r2, [r0, #0]
 801dc28:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dc2c:	3301      	adds	r3, #1
 801dc2e:	e7e7      	b.n	801dc00 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc32:	bf00      	nop
 801dc34:	2402aed0 	.word	0x2402aed0
 801dc38:	2402aeec 	.word	0x2402aeec
 801dc3c:	2402aef0 	.word	0x2402aef0
 801dc40:	2402aee4 	.word	0x2402aee4
 801dc44:	2402aed4 	.word	0x2402aed4
 801dc48:	2402aedc 	.word	0x2402aedc
 801dc4c:	2402aeee 	.word	0x2402aeee
 801dc50:	2402aed8 	.word	0x2402aed8
 801dc54:	2402aee8 	.word	0x2402aee8
 801dc58:	2402aee0 	.word	0x2402aee0

0801dc5c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dc5c:	4b06      	ldr	r3, [pc, #24]	; (801dc78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	b943      	cbnz	r3, 801dc74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dc62:	b139      	cbz	r1, 801dc74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dc64:	4b05      	ldr	r3, [pc, #20]	; (801dc7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801dc66:	801a      	strh	r2, [r3, #0]
 801dc68:	4b05      	ldr	r3, [pc, #20]	; (801dc80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801dc6a:	6019      	str	r1, [r3, #0]
 801dc6c:	4b05      	ldr	r3, [pc, #20]	; (801dc84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801dc6e:	6018      	str	r0, [r3, #0]
 801dc70:	f7ff bf96 	b.w	801dba0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dc74:	4770      	bx	lr
 801dc76:	bf00      	nop
 801dc78:	2402aedc 	.word	0x2402aedc
 801dc7c:	2402aef0 	.word	0x2402aef0
 801dc80:	2402aed8 	.word	0x2402aed8
 801dc84:	2402aed0 	.word	0x2402aed0

0801dc88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dc88:	b470      	push	{r4, r5, r6}
 801dc8a:	4c07      	ldr	r4, [pc, #28]	; (801dca8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dc8c:	4605      	mov	r5, r0
 801dc8e:	4610      	mov	r0, r2
 801dc90:	9a03      	ldr	r2, [sp, #12]
 801dc92:	6826      	ldr	r6, [r4, #0]
 801dc94:	b936      	cbnz	r6, 801dca4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dc96:	6025      	str	r5, [r4, #0]
 801dc98:	4c04      	ldr	r4, [pc, #16]	; (801dcac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dc9a:	8021      	strh	r1, [r4, #0]
 801dc9c:	4619      	mov	r1, r3
 801dc9e:	bc70      	pop	{r4, r5, r6}
 801dca0:	f7ff bfdc 	b.w	801dc5c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dca4:	bc70      	pop	{r4, r5, r6}
 801dca6:	4770      	bx	lr
 801dca8:	2402aef4 	.word	0x2402aef4
 801dcac:	2402aeec 	.word	0x2402aeec

0801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dcb0:	4a12      	ldr	r2, [pc, #72]	; (801dcfc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801dcb2:	8803      	ldrh	r3, [r0, #0]
 801dcb4:	8812      	ldrh	r2, [r2, #0]
 801dcb6:	4293      	cmp	r3, r2
 801dcb8:	d207      	bcs.n	801dcca <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801dcba:	4a11      	ldr	r2, [pc, #68]	; (801dd00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801dcbc:	2114      	movs	r1, #20
 801dcbe:	6812      	ldr	r2, [r2, #0]
 801dcc0:	fb01 2303 	mla	r3, r1, r3, r2
 801dcc4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801dcc8:	4770      	bx	lr
 801dcca:	490e      	ldr	r1, [pc, #56]	; (801dd04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dccc:	8809      	ldrh	r1, [r1, #0]
 801dcce:	4411      	add	r1, r2
 801dcd0:	428b      	cmp	r3, r1
 801dcd2:	da04      	bge.n	801dcde <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801dcd4:	1a9b      	subs	r3, r3, r2
 801dcd6:	4a0c      	ldr	r2, [pc, #48]	; (801dd08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dcd8:	210e      	movs	r1, #14
 801dcda:	6812      	ldr	r2, [r2, #0]
 801dcdc:	e7f0      	b.n	801dcc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801dcde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dce2:	4293      	cmp	r3, r2
 801dce4:	d108      	bne.n	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801dce6:	4b09      	ldr	r3, [pc, #36]	; (801dd0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dce8:	781b      	ldrb	r3, [r3, #0]
 801dcea:	b91b      	cbnz	r3, 801dcf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801dcec:	4b08      	ldr	r3, [pc, #32]	; (801dd10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dcee:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dcf2:	4770      	bx	lr
 801dcf4:	4b07      	ldr	r3, [pc, #28]	; (801dd14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dcf6:	e7fa      	b.n	801dcee <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801dcf8:	2000      	movs	r0, #0
 801dcfa:	4770      	bx	lr
 801dcfc:	2402aeec 	.word	0x2402aeec
 801dd00:	2402aef4 	.word	0x2402aef4
 801dd04:	2402aef0 	.word	0x2402aef0
 801dd08:	2402aed4 	.word	0x2402aed4
 801dd0c:	2402ae64 	.word	0x2402ae64
 801dd10:	2402ae66 	.word	0x2402ae66
 801dd14:	2402ae68 	.word	0x2402ae68

0801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dd18:	4a12      	ldr	r2, [pc, #72]	; (801dd64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801dd1a:	8803      	ldrh	r3, [r0, #0]
 801dd1c:	8812      	ldrh	r2, [r2, #0]
 801dd1e:	4293      	cmp	r3, r2
 801dd20:	d207      	bcs.n	801dd32 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dd22:	4a11      	ldr	r2, [pc, #68]	; (801dd68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dd24:	2114      	movs	r1, #20
 801dd26:	6812      	ldr	r2, [r2, #0]
 801dd28:	fb01 2303 	mla	r3, r1, r3, r2
 801dd2c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dd30:	4770      	bx	lr
 801dd32:	490e      	ldr	r1, [pc, #56]	; (801dd6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dd34:	8809      	ldrh	r1, [r1, #0]
 801dd36:	4411      	add	r1, r2
 801dd38:	428b      	cmp	r3, r1
 801dd3a:	da04      	bge.n	801dd46 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dd3c:	1a9b      	subs	r3, r3, r2
 801dd3e:	4a0c      	ldr	r2, [pc, #48]	; (801dd70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dd40:	210e      	movs	r1, #14
 801dd42:	6812      	ldr	r2, [r2, #0]
 801dd44:	e7f0      	b.n	801dd28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dd46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd4a:	4293      	cmp	r3, r2
 801dd4c:	d108      	bne.n	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dd4e:	4b09      	ldr	r3, [pc, #36]	; (801dd74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dd50:	781b      	ldrb	r3, [r3, #0]
 801dd52:	b91b      	cbnz	r3, 801dd5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dd54:	4b08      	ldr	r3, [pc, #32]	; (801dd78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dd56:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dd5a:	4770      	bx	lr
 801dd5c:	4b07      	ldr	r3, [pc, #28]	; (801dd7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dd5e:	e7fa      	b.n	801dd56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dd60:	2000      	movs	r0, #0
 801dd62:	4770      	bx	lr
 801dd64:	2402aeec 	.word	0x2402aeec
 801dd68:	2402aef4 	.word	0x2402aef4
 801dd6c:	2402aef0 	.word	0x2402aef0
 801dd70:	2402aed4 	.word	0x2402aed4
 801dd74:	2402ae64 	.word	0x2402ae64
 801dd78:	2402ae68 	.word	0x2402ae68
 801dd7c:	2402ae66 	.word	0x2402ae66

0801dd80 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dd80:	4a1f      	ldr	r2, [pc, #124]	; (801de00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801dd82:	b510      	push	{r4, lr}
 801dd84:	880b      	ldrh	r3, [r1, #0]
 801dd86:	8812      	ldrh	r2, [r2, #0]
 801dd88:	4293      	cmp	r3, r2
 801dd8a:	d213      	bcs.n	801ddb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801dd8c:	4a1d      	ldr	r2, [pc, #116]	; (801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801dd8e:	2114      	movs	r1, #20
 801dd90:	6812      	ldr	r2, [r2, #0]
 801dd92:	fb01 2303 	mla	r3, r1, r3, r2
 801dd96:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dd9a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dd9e:	8a1a      	ldrh	r2, [r3, #16]
 801dda0:	8a5b      	ldrh	r3, [r3, #18]
 801dda2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dda6:	8004      	strh	r4, [r0, #0]
 801dda8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ddac:	8041      	strh	r1, [r0, #2]
 801ddae:	8082      	strh	r2, [r0, #4]
 801ddb0:	80c3      	strh	r3, [r0, #6]
 801ddb2:	e00e      	b.n	801ddd2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ddb4:	4914      	ldr	r1, [pc, #80]	; (801de08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801ddb6:	8809      	ldrh	r1, [r1, #0]
 801ddb8:	4411      	add	r1, r2
 801ddba:	428b      	cmp	r3, r1
 801ddbc:	da0a      	bge.n	801ddd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801ddbe:	1a9b      	subs	r3, r3, r2
 801ddc0:	4a12      	ldr	r2, [pc, #72]	; (801de0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801ddc2:	210e      	movs	r1, #14
 801ddc4:	6812      	ldr	r2, [r2, #0]
 801ddc6:	fb01 2303 	mla	r3, r1, r3, r2
 801ddca:	681a      	ldr	r2, [r3, #0]
 801ddcc:	6002      	str	r2, [r0, #0]
 801ddce:	685a      	ldr	r2, [r3, #4]
 801ddd0:	6042      	str	r2, [r0, #4]
 801ddd2:	bd10      	pop	{r4, pc}
 801ddd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ddd8:	4293      	cmp	r3, r2
 801ddda:	d10b      	bne.n	801ddf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801dddc:	4b0c      	ldr	r3, [pc, #48]	; (801de10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ddde:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dde2:	4b0c      	ldr	r3, [pc, #48]	; (801de14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dde4:	8081      	strh	r1, [r0, #4]
 801dde6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ddea:	2300      	movs	r3, #0
 801ddec:	80c2      	strh	r2, [r0, #6]
 801ddee:	8003      	strh	r3, [r0, #0]
 801ddf0:	8043      	strh	r3, [r0, #2]
 801ddf2:	e7ee      	b.n	801ddd2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	8003      	strh	r3, [r0, #0]
 801ddf8:	8043      	strh	r3, [r0, #2]
 801ddfa:	8083      	strh	r3, [r0, #4]
 801ddfc:	e7d8      	b.n	801ddb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ddfe:	bf00      	nop
 801de00:	2402aeec 	.word	0x2402aeec
 801de04:	2402aef4 	.word	0x2402aef4
 801de08:	2402aef0 	.word	0x2402aef0
 801de0c:	2402aed4 	.word	0x2402aed4
 801de10:	2402ae60 	.word	0x2402ae60
 801de14:	2402ae62 	.word	0x2402ae62

0801de18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801de18:	4a17      	ldr	r2, [pc, #92]	; (801de78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801de1a:	8803      	ldrh	r3, [r0, #0]
 801de1c:	8812      	ldrh	r2, [r2, #0]
 801de1e:	4293      	cmp	r3, r2
 801de20:	d213      	bcs.n	801de4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801de22:	4a16      	ldr	r2, [pc, #88]	; (801de7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801de24:	2114      	movs	r1, #20
 801de26:	6812      	ldr	r2, [r2, #0]
 801de28:	fb01 2303 	mla	r3, r1, r3, r2
 801de2c:	8a1a      	ldrh	r2, [r3, #16]
 801de2e:	8919      	ldrh	r1, [r3, #8]
 801de30:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801de34:	428a      	cmp	r2, r1
 801de36:	db1d      	blt.n	801de74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801de38:	8a58      	ldrh	r0, [r3, #18]
 801de3a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801de3e:	895b      	ldrh	r3, [r3, #10]
 801de40:	4298      	cmp	r0, r3
 801de42:	bfac      	ite	ge
 801de44:	2000      	movge	r0, #0
 801de46:	2001      	movlt	r0, #1
 801de48:	4770      	bx	lr
 801de4a:	490d      	ldr	r1, [pc, #52]	; (801de80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801de4c:	8809      	ldrh	r1, [r1, #0]
 801de4e:	4411      	add	r1, r2
 801de50:	428b      	cmp	r3, r1
 801de52:	da0d      	bge.n	801de70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801de54:	1a9b      	subs	r3, r3, r2
 801de56:	4a0b      	ldr	r2, [pc, #44]	; (801de84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801de58:	210e      	movs	r1, #14
 801de5a:	6812      	ldr	r2, [r2, #0]
 801de5c:	fb01 2303 	mla	r3, r1, r3, r2
 801de60:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801de64:	891a      	ldrh	r2, [r3, #8]
 801de66:	4291      	cmp	r1, r2
 801de68:	db04      	blt.n	801de74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801de6a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801de6e:	e7e6      	b.n	801de3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801de70:	2000      	movs	r0, #0
 801de72:	4770      	bx	lr
 801de74:	2001      	movs	r0, #1
 801de76:	4770      	bx	lr
 801de78:	2402aeec 	.word	0x2402aeec
 801de7c:	2402aef4 	.word	0x2402aef4
 801de80:	2402aef0 	.word	0x2402aef0
 801de84:	2402aed4 	.word	0x2402aed4

0801de88 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801de88:	4a12      	ldr	r2, [pc, #72]	; (801ded4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801de8a:	8803      	ldrh	r3, [r0, #0]
 801de8c:	8811      	ldrh	r1, [r2, #0]
 801de8e:	428b      	cmp	r3, r1
 801de90:	d20b      	bcs.n	801deaa <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801de92:	4a11      	ldr	r2, [pc, #68]	; (801ded8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801de94:	6812      	ldr	r2, [r2, #0]
 801de96:	b112      	cbz	r2, 801de9e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801de98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801de9c:	b9c0      	cbnz	r0, 801ded0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801de9e:	4a0f      	ldr	r2, [pc, #60]	; (801dedc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dea0:	6811      	ldr	r1, [r2, #0]
 801dea2:	2214      	movs	r2, #20
 801dea4:	4353      	muls	r3, r2
 801dea6:	58c8      	ldr	r0, [r1, r3]
 801dea8:	4770      	bx	lr
 801deaa:	4a0d      	ldr	r2, [pc, #52]	; (801dee0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801deac:	8812      	ldrh	r2, [r2, #0]
 801deae:	440a      	add	r2, r1
 801deb0:	4293      	cmp	r3, r2
 801deb2:	da04      	bge.n	801debe <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801deb4:	4a08      	ldr	r2, [pc, #32]	; (801ded8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801deb6:	6812      	ldr	r2, [r2, #0]
 801deb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801debc:	4770      	bx	lr
 801debe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dec2:	4293      	cmp	r3, r2
 801dec4:	d103      	bne.n	801dece <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801dec6:	4b07      	ldr	r3, [pc, #28]	; (801dee4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801decc:	4770      	bx	lr
 801dece:	2000      	movs	r0, #0
 801ded0:	4770      	bx	lr
 801ded2:	bf00      	nop
 801ded4:	2402aeec 	.word	0x2402aeec
 801ded8:	2402aed0 	.word	0x2402aed0
 801dedc:	2402aef4 	.word	0x2402aef4
 801dee0:	2402aef0 	.word	0x2402aef0
 801dee4:	2402ae6c 	.word	0x2402ae6c

0801dee8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801dee8:	4b24      	ldr	r3, [pc, #144]	; (801df7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801deea:	8802      	ldrh	r2, [r0, #0]
 801deec:	8818      	ldrh	r0, [r3, #0]
 801deee:	4282      	cmp	r2, r0
 801def0:	d221      	bcs.n	801df36 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801def2:	4b23      	ldr	r3, [pc, #140]	; (801df80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801def4:	6819      	ldr	r1, [r3, #0]
 801def6:	2314      	movs	r3, #20
 801def8:	fb03 1302 	mla	r3, r3, r2, r1
 801defc:	6858      	ldr	r0, [r3, #4]
 801defe:	2800      	cmp	r0, #0
 801df00:	d03a      	beq.n	801df78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df02:	4920      	ldr	r1, [pc, #128]	; (801df84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801df04:	6809      	ldr	r1, [r1, #0]
 801df06:	2900      	cmp	r1, #0
 801df08:	d036      	beq.n	801df78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801df0e:	2900      	cmp	r1, #0
 801df10:	d032      	beq.n	801df78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df12:	891a      	ldrh	r2, [r3, #8]
 801df14:	8958      	ldrh	r0, [r3, #10]
 801df16:	4350      	muls	r0, r2
 801df18:	7c5a      	ldrb	r2, [r3, #17]
 801df1a:	7cdb      	ldrb	r3, [r3, #19]
 801df1c:	0952      	lsrs	r2, r2, #5
 801df1e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801df22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801df26:	2b0b      	cmp	r3, #11
 801df28:	bf18      	it	ne
 801df2a:	0040      	lslne	r0, r0, #1
 801df2c:	3003      	adds	r0, #3
 801df2e:	f020 0003 	bic.w	r0, r0, #3
 801df32:	4408      	add	r0, r1
 801df34:	4770      	bx	lr
 801df36:	4b14      	ldr	r3, [pc, #80]	; (801df88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801df38:	881b      	ldrh	r3, [r3, #0]
 801df3a:	4403      	add	r3, r0
 801df3c:	429a      	cmp	r2, r3
 801df3e:	da1a      	bge.n	801df76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801df40:	4b12      	ldr	r3, [pc, #72]	; (801df8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801df42:	1a10      	subs	r0, r2, r0
 801df44:	210e      	movs	r1, #14
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	fb01 3000 	mla	r0, r1, r0, r3
 801df4c:	7b03      	ldrb	r3, [r0, #12]
 801df4e:	f003 031f 	and.w	r3, r3, #31
 801df52:	2b0b      	cmp	r3, #11
 801df54:	d10b      	bne.n	801df6e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801df56:	8903      	ldrh	r3, [r0, #8]
 801df58:	8940      	ldrh	r0, [r0, #10]
 801df5a:	4358      	muls	r0, r3
 801df5c:	4b09      	ldr	r3, [pc, #36]	; (801df84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801df5e:	3003      	adds	r0, #3
 801df60:	6819      	ldr	r1, [r3, #0]
 801df62:	f020 0303 	bic.w	r3, r0, #3
 801df66:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801df6a:	4418      	add	r0, r3
 801df6c:	4770      	bx	lr
 801df6e:	2b0d      	cmp	r3, #13
 801df70:	d101      	bne.n	801df76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801df72:	300d      	adds	r0, #13
 801df74:	4770      	bx	lr
 801df76:	2000      	movs	r0, #0
 801df78:	4770      	bx	lr
 801df7a:	bf00      	nop
 801df7c:	2402aeec 	.word	0x2402aeec
 801df80:	2402aef4 	.word	0x2402aef4
 801df84:	2402aed0 	.word	0x2402aed0
 801df88:	2402aef0 	.word	0x2402aef0
 801df8c:	2402aed4 	.word	0x2402aed4

0801df90 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801df90:	4a17      	ldr	r2, [pc, #92]	; (801dff0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801df92:	b510      	push	{r4, lr}
 801df94:	8803      	ldrh	r3, [r0, #0]
 801df96:	8812      	ldrh	r2, [r2, #0]
 801df98:	4293      	cmp	r3, r2
 801df9a:	d20c      	bcs.n	801dfb6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801df9c:	4a15      	ldr	r2, [pc, #84]	; (801dff4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801df9e:	2114      	movs	r1, #20
 801dfa0:	6812      	ldr	r2, [r2, #0]
 801dfa2:	fb01 2303 	mla	r3, r1, r3, r2
 801dfa6:	7c58      	ldrb	r0, [r3, #17]
 801dfa8:	0942      	lsrs	r2, r0, #5
 801dfaa:	7cd8      	ldrb	r0, [r3, #19]
 801dfac:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801dfb0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801dfb4:	bd10      	pop	{r4, pc}
 801dfb6:	4910      	ldr	r1, [pc, #64]	; (801dff8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801dfb8:	8809      	ldrh	r1, [r1, #0]
 801dfba:	4411      	add	r1, r2
 801dfbc:	428b      	cmp	r3, r1
 801dfbe:	da09      	bge.n	801dfd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801dfc0:	1a9b      	subs	r3, r3, r2
 801dfc2:	4a0e      	ldr	r2, [pc, #56]	; (801dffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801dfc4:	210e      	movs	r1, #14
 801dfc6:	6812      	ldr	r2, [r2, #0]
 801dfc8:	fb01 2303 	mla	r3, r1, r3, r2
 801dfcc:	7b18      	ldrb	r0, [r3, #12]
 801dfce:	f000 001f 	and.w	r0, r0, #31
 801dfd2:	e7ef      	b.n	801dfb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801dfd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	d106      	bne.n	801dfea <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801dfdc:	f7e8 fb7e 	bl	80066dc <_ZN8touchgfx3HAL3lcdEv>
 801dfe0:	6803      	ldr	r3, [r0, #0]
 801dfe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfe8:	4718      	bx	r3
 801dfea:	2000      	movs	r0, #0
 801dfec:	e7e2      	b.n	801dfb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801dfee:	bf00      	nop
 801dff0:	2402aeec 	.word	0x2402aeec
 801dff4:	2402aef4 	.word	0x2402aef4
 801dff8:	2402aef0 	.word	0x2402aef0
 801dffc:	2402aed4 	.word	0x2402aed4

0801e000 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e000:	2010      	movs	r0, #16
 801e002:	4770      	bx	lr

0801e004 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e004:	2000      	movs	r0, #0
 801e006:	4770      	bx	lr

0801e008 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801e008:	4b02      	ldr	r3, [pc, #8]	; (801e014 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801e00a:	8818      	ldrh	r0, [r3, #0]
 801e00c:	0040      	lsls	r0, r0, #1
 801e00e:	b280      	uxth	r0, r0
 801e010:	4770      	bx	lr
 801e012:	bf00      	nop
 801e014:	2402ae66 	.word	0x2402ae66

0801e018 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e018:	2bff      	cmp	r3, #255	; 0xff
 801e01a:	d050      	beq.n	801e0be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e01c:	2a0b      	cmp	r2, #11
 801e01e:	d04a      	beq.n	801e0b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e020:	d80e      	bhi.n	801e040 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e022:	2a03      	cmp	r2, #3
 801e024:	d03f      	beq.n	801e0a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e026:	d804      	bhi.n	801e032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e028:	2a01      	cmp	r2, #1
 801e02a:	d03e      	beq.n	801e0aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e02c:	d93f      	bls.n	801e0ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e02e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e030:	4770      	bx	lr
 801e032:	2a09      	cmp	r2, #9
 801e034:	d03f      	beq.n	801e0b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e036:	d83c      	bhi.n	801e0b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e038:	2a08      	cmp	r2, #8
 801e03a:	d03a      	beq.n	801e0b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e03c:	2000      	movs	r0, #0
 801e03e:	4770      	bx	lr
 801e040:	2a2f      	cmp	r2, #47	; 0x2f
 801e042:	d024      	beq.n	801e08e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e044:	d80d      	bhi.n	801e062 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e046:	2a2d      	cmp	r2, #45	; 0x2d
 801e048:	d014      	beq.n	801e074 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e04a:	d826      	bhi.n	801e09a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e04c:	2a2c      	cmp	r2, #44	; 0x2c
 801e04e:	d1f5      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e050:	684b      	ldr	r3, [r1, #4]
 801e052:	781b      	ldrb	r3, [r3, #0]
 801e054:	2b01      	cmp	r3, #1
 801e056:	d018      	beq.n	801e08a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e058:	d323      	bcc.n	801e0a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e05a:	2b02      	cmp	r3, #2
 801e05c:	d1ee      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e05e:	6880      	ldr	r0, [r0, #8]
 801e060:	4770      	bx	lr
 801e062:	2a31      	cmp	r2, #49	; 0x31
 801e064:	d004      	beq.n	801e070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e066:	d328      	bcc.n	801e0ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e068:	2a32      	cmp	r2, #50	; 0x32
 801e06a:	d026      	beq.n	801e0ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e06c:	2a33      	cmp	r2, #51	; 0x33
 801e06e:	d1e5      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e070:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e072:	4770      	bx	lr
 801e074:	684b      	ldr	r3, [r1, #4]
 801e076:	781b      	ldrb	r3, [r3, #0]
 801e078:	2b01      	cmp	r3, #1
 801e07a:	d004      	beq.n	801e086 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e07c:	d30b      	bcc.n	801e096 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e07e:	2b02      	cmp	r3, #2
 801e080:	d1dc      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e082:	6900      	ldr	r0, [r0, #16]
 801e084:	4770      	bx	lr
 801e086:	6a00      	ldr	r0, [r0, #32]
 801e088:	4770      	bx	lr
 801e08a:	6980      	ldr	r0, [r0, #24]
 801e08c:	4770      	bx	lr
 801e08e:	684b      	ldr	r3, [r1, #4]
 801e090:	781b      	ldrb	r3, [r3, #0]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d1d2      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e096:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e098:	4770      	bx	lr
 801e09a:	684b      	ldr	r3, [r1, #4]
 801e09c:	781b      	ldrb	r3, [r3, #0]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d1cc      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e0a4:	4770      	bx	lr
 801e0a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e0a8:	4770      	bx	lr
 801e0aa:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e0ac:	4770      	bx	lr
 801e0ae:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e0b0:	4770      	bx	lr
 801e0b2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e0b4:	4770      	bx	lr
 801e0b6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e0b8:	4770      	bx	lr
 801e0ba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e0bc:	4770      	bx	lr
 801e0be:	2a0b      	cmp	r2, #11
 801e0c0:	d049      	beq.n	801e156 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e0c2:	d80e      	bhi.n	801e0e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e0c4:	2a03      	cmp	r2, #3
 801e0c6:	d040      	beq.n	801e14a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e0c8:	d804      	bhi.n	801e0d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e0ca:	2a01      	cmp	r2, #1
 801e0cc:	d03f      	beq.n	801e14e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e0ce:	d940      	bls.n	801e152 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e0d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e0d2:	4770      	bx	lr
 801e0d4:	2a09      	cmp	r2, #9
 801e0d6:	d03e      	beq.n	801e156 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e0d8:	d801      	bhi.n	801e0de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e0da:	2a08      	cmp	r2, #8
 801e0dc:	d1ae      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0de:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e0e0:	4770      	bx	lr
 801e0e2:	2a2f      	cmp	r2, #47	; 0x2f
 801e0e4:	d024      	beq.n	801e130 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e0e6:	d80d      	bhi.n	801e104 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e0e8:	2a2d      	cmp	r2, #45	; 0x2d
 801e0ea:	d014      	beq.n	801e116 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e0ec:	d826      	bhi.n	801e13c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e0ee:	2a2c      	cmp	r2, #44	; 0x2c
 801e0f0:	d1a4      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0f2:	684b      	ldr	r3, [r1, #4]
 801e0f4:	781b      	ldrb	r3, [r3, #0]
 801e0f6:	2b01      	cmp	r3, #1
 801e0f8:	d018      	beq.n	801e12c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e0fa:	d324      	bcc.n	801e146 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e0fc:	2b02      	cmp	r3, #2
 801e0fe:	d19d      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e100:	68c0      	ldr	r0, [r0, #12]
 801e102:	4770      	bx	lr
 801e104:	2a31      	cmp	r2, #49	; 0x31
 801e106:	d004      	beq.n	801e112 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e108:	d327      	bcc.n	801e15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e10a:	2a32      	cmp	r2, #50	; 0x32
 801e10c:	d025      	beq.n	801e15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e10e:	2a33      	cmp	r2, #51	; 0x33
 801e110:	d194      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e112:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e114:	4770      	bx	lr
 801e116:	684b      	ldr	r3, [r1, #4]
 801e118:	781b      	ldrb	r3, [r3, #0]
 801e11a:	2b01      	cmp	r3, #1
 801e11c:	d004      	beq.n	801e128 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e11e:	d30b      	bcc.n	801e138 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e120:	2b02      	cmp	r3, #2
 801e122:	d18b      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e124:	6940      	ldr	r0, [r0, #20]
 801e126:	4770      	bx	lr
 801e128:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e12a:	4770      	bx	lr
 801e12c:	69c0      	ldr	r0, [r0, #28]
 801e12e:	4770      	bx	lr
 801e130:	684b      	ldr	r3, [r1, #4]
 801e132:	781b      	ldrb	r3, [r3, #0]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d181      	bne.n	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e138:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e13a:	4770      	bx	lr
 801e13c:	684b      	ldr	r3, [r1, #4]
 801e13e:	781b      	ldrb	r3, [r3, #0]
 801e140:	2b00      	cmp	r3, #0
 801e142:	f47f af7b 	bne.w	801e03c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e146:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e148:	4770      	bx	lr
 801e14a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e14c:	4770      	bx	lr
 801e14e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e150:	4770      	bx	lr
 801e152:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e154:	4770      	bx	lr
 801e156:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e158:	4770      	bx	lr
 801e15a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e15c:	4770      	bx	lr

0801e15e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e15e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e162:	b087      	sub	sp, #28
 801e164:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e166:	9205      	str	r2, [sp, #20]
 801e168:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e16c:	9101      	str	r1, [sp, #4]
 801e16e:	9202      	str	r2, [sp, #8]
 801e170:	6841      	ldr	r1, [r0, #4]
 801e172:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e176:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e17a:	fb01 2404 	mla	r4, r1, r4, r2
 801e17e:	6802      	ldr	r2, [r0, #0]
 801e180:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e184:	f8de 2000 	ldr.w	r2, [lr]
 801e188:	9203      	str	r2, [sp, #12]
 801e18a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e18e:	3204      	adds	r2, #4
 801e190:	9204      	str	r2, [sp, #16]
 801e192:	9a02      	ldr	r2, [sp, #8]
 801e194:	43d6      	mvns	r6, r2
 801e196:	b2f6      	uxtb	r6, r6
 801e198:	9a01      	ldr	r2, [sp, #4]
 801e19a:	2a00      	cmp	r2, #0
 801e19c:	dc03      	bgt.n	801e1a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e19e:	9a05      	ldr	r2, [sp, #20]
 801e1a0:	2a00      	cmp	r2, #0
 801e1a2:	f340 8129 	ble.w	801e3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e1a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1a8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e1ac:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e1b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1b2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e1b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	dd0e      	ble.n	801e1dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e1be:	1408      	asrs	r0, r1, #16
 801e1c0:	d405      	bmi.n	801e1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1c2:	4560      	cmp	r0, ip
 801e1c4:	da03      	bge.n	801e1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1c6:	1410      	asrs	r0, r2, #16
 801e1c8:	d401      	bmi.n	801e1ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1ca:	42b8      	cmp	r0, r7
 801e1cc:	db07      	blt.n	801e1de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e1ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e1d0:	3b01      	subs	r3, #1
 801e1d2:	3402      	adds	r4, #2
 801e1d4:	4401      	add	r1, r0
 801e1d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e1d8:	4402      	add	r2, r0
 801e1da:	e7ee      	b.n	801e1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e1dc:	d071      	beq.n	801e2c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e1de:	1e58      	subs	r0, r3, #1
 801e1e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e1e2:	fb05 1500 	mla	r5, r5, r0, r1
 801e1e6:	142d      	asrs	r5, r5, #16
 801e1e8:	d45f      	bmi.n	801e2aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e1ea:	4565      	cmp	r5, ip
 801e1ec:	da5d      	bge.n	801e2aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e1ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e1f0:	fb05 2000 	mla	r0, r5, r0, r2
 801e1f4:	1400      	asrs	r0, r0, #16
 801e1f6:	d458      	bmi.n	801e2aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e1f8:	42b8      	cmp	r0, r7
 801e1fa:	da56      	bge.n	801e2aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e1fc:	4699      	mov	r9, r3
 801e1fe:	46a2      	mov	sl, r4
 801e200:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e204:	f1b9 0f00 	cmp.w	r9, #0
 801e208:	dd57      	ble.n	801e2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e20a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e20e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e212:	9803      	ldr	r0, [sp, #12]
 801e214:	140d      	asrs	r5, r1, #16
 801e216:	f109 39ff 	add.w	r9, r9, #4294967295
 801e21a:	fb07 000c 	mla	r0, r7, ip, r0
 801e21e:	5d40      	ldrb	r0, [r0, r5]
 801e220:	9d04      	ldr	r5, [sp, #16]
 801e222:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e226:	f8ba 5000 	ldrh.w	r5, [sl]
 801e22a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e22e:	122f      	asrs	r7, r5, #8
 801e230:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e234:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e238:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e23c:	00ed      	lsls	r5, r5, #3
 801e23e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e242:	fb17 f706 	smulbb	r7, r7, r6
 801e246:	b2ed      	uxtb	r5, r5
 801e248:	fb18 f806 	smulbb	r8, r8, r6
 801e24c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e250:	10c7      	asrs	r7, r0, #3
 801e252:	fb15 f506 	smulbb	r5, r5, r6
 801e256:	00c0      	lsls	r0, r0, #3
 801e258:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e25c:	fa1f fc8c 	uxth.w	ip, ip
 801e260:	b2c0      	uxtb	r0, r0
 801e262:	fb07 870b 	mla	r7, r7, fp, r8
 801e266:	fb00 500b 	mla	r0, r0, fp, r5
 801e26a:	f10c 0501 	add.w	r5, ip, #1
 801e26e:	b2bf      	uxth	r7, r7
 801e270:	b280      	uxth	r0, r0
 801e272:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e276:	f107 0801 	add.w	r8, r7, #1
 801e27a:	1c45      	adds	r5, r0, #1
 801e27c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e280:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e284:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e288:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e28a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e28e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e292:	4401      	add	r1, r0
 801e294:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e298:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e29a:	ea45 0c0c 	orr.w	ip, r5, ip
 801e29e:	4402      	add	r2, r0
 801e2a0:	ea4c 0c08 	orr.w	ip, ip, r8
 801e2a4:	f82a cb02 	strh.w	ip, [sl], #2
 801e2a8:	e7ac      	b.n	801e204 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e2aa:	f04f 0800 	mov.w	r8, #0
 801e2ae:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e2b2:	eb03 0008 	add.w	r0, r3, r8
 801e2b6:	2800      	cmp	r0, #0
 801e2b8:	dc41      	bgt.n	801e33e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e2ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e2c2:	9b01      	ldr	r3, [sp, #4]
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	f340 8097 	ble.w	801e3f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e2ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2d8:	eef0 6a62 	vmov.f32	s13, s5
 801e2dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e2e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2e8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e2ec:	eef0 6a43 	vmov.f32	s13, s6
 801e2f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2f4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e2f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e300:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e304:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e308:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e30c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e310:	ee12 2a90 	vmov	r2, s5
 801e314:	eef0 2a47 	vmov.f32	s5, s14
 801e318:	fb92 f3f3 	sdiv	r3, r2, r3
 801e31c:	ee13 2a10 	vmov	r2, s6
 801e320:	9313      	str	r3, [sp, #76]	; 0x4c
 801e322:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e324:	eeb0 3a67 	vmov.f32	s6, s15
 801e328:	fb92 f3f3 	sdiv	r3, r2, r3
 801e32c:	9314      	str	r3, [sp, #80]	; 0x50
 801e32e:	9b01      	ldr	r3, [sp, #4]
 801e330:	9a05      	ldr	r2, [sp, #20]
 801e332:	3b01      	subs	r3, #1
 801e334:	9301      	str	r3, [sp, #4]
 801e336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e338:	bf08      	it	eq
 801e33a:	4613      	moveq	r3, r2
 801e33c:	e72c      	b.n	801e198 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e33e:	140f      	asrs	r7, r1, #16
 801e340:	d453      	bmi.n	801e3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e342:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e346:	42bd      	cmp	r5, r7
 801e348:	dd4f      	ble.n	801e3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e34a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e34e:	d44c      	bmi.n	801e3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e350:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e354:	4560      	cmp	r0, ip
 801e356:	dd48      	ble.n	801e3ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e358:	9803      	ldr	r0, [sp, #12]
 801e35a:	b22d      	sxth	r5, r5
 801e35c:	fb0c 0505 	mla	r5, ip, r5, r0
 801e360:	5de8      	ldrb	r0, [r5, r7]
 801e362:	9d04      	ldr	r5, [sp, #16]
 801e364:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e368:	f06f 0501 	mvn.w	r5, #1
 801e36c:	fb05 fb08 	mul.w	fp, r5, r8
 801e370:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e374:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e378:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e37c:	122f      	asrs	r7, r5, #8
 801e37e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e382:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e386:	00ed      	lsls	r5, r5, #3
 801e388:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e38c:	fb17 f706 	smulbb	r7, r7, r6
 801e390:	b2ed      	uxtb	r5, r5
 801e392:	fb19 f906 	smulbb	r9, r9, r6
 801e396:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e39a:	10c7      	asrs	r7, r0, #3
 801e39c:	fb15 f506 	smulbb	r5, r5, r6
 801e3a0:	00c0      	lsls	r0, r0, #3
 801e3a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e3a6:	fa1f fc8c 	uxth.w	ip, ip
 801e3aa:	b2c0      	uxtb	r0, r0
 801e3ac:	fb07 970a 	mla	r7, r7, sl, r9
 801e3b0:	fb00 500a 	mla	r0, r0, sl, r5
 801e3b4:	f10c 0501 	add.w	r5, ip, #1
 801e3b8:	b2bf      	uxth	r7, r7
 801e3ba:	b280      	uxth	r0, r0
 801e3bc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e3c0:	f107 0901 	add.w	r9, r7, #1
 801e3c4:	1c45      	adds	r5, r0, #1
 801e3c6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e3ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e3ce:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e3d2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e3d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e3da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e3de:	ea45 0c0c 	orr.w	ip, r5, ip
 801e3e2:	ea4c 0c09 	orr.w	ip, ip, r9
 801e3e6:	f824 c00b 	strh.w	ip, [r4, fp]
 801e3ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e3ec:	f108 38ff 	add.w	r8, r8, #4294967295
 801e3f0:	4401      	add	r1, r0
 801e3f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e3f4:	4402      	add	r2, r0
 801e3f6:	e75c      	b.n	801e2b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e3f8:	b007      	add	sp, #28
 801e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e402:	b085      	sub	sp, #20
 801e404:	4693      	mov	fp, r2
 801e406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e40a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e40c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e40e:	6870      	ldr	r0, [r6, #4]
 801e410:	9100      	str	r1, [sp, #0]
 801e412:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e416:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e41a:	fb00 2404 	mla	r4, r0, r4, r2
 801e41e:	6832      	ldr	r2, [r6, #0]
 801e420:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e424:	682a      	ldr	r2, [r5, #0]
 801e426:	9201      	str	r2, [sp, #4]
 801e428:	686a      	ldr	r2, [r5, #4]
 801e42a:	3204      	adds	r2, #4
 801e42c:	9202      	str	r2, [sp, #8]
 801e42e:	9a00      	ldr	r2, [sp, #0]
 801e430:	2a00      	cmp	r2, #0
 801e432:	dc03      	bgt.n	801e43c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e434:	f1bb 0f00 	cmp.w	fp, #0
 801e438:	f340 80a0 	ble.w	801e57c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e43c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e43e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e442:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e446:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e448:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e44c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e450:	2b00      	cmp	r3, #0
 801e452:	dd0c      	ble.n	801e46e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e454:	1406      	asrs	r6, r0, #16
 801e456:	d405      	bmi.n	801e464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e458:	454e      	cmp	r6, r9
 801e45a:	da03      	bge.n	801e464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e45c:	1416      	asrs	r6, r2, #16
 801e45e:	d401      	bmi.n	801e464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e460:	4546      	cmp	r6, r8
 801e462:	db05      	blt.n	801e470 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e464:	4470      	add	r0, lr
 801e466:	4462      	add	r2, ip
 801e468:	3b01      	subs	r3, #1
 801e46a:	3402      	adds	r4, #2
 801e46c:	e7f0      	b.n	801e450 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e46e:	d00f      	beq.n	801e490 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e470:	1e5e      	subs	r6, r3, #1
 801e472:	fb0e 0706 	mla	r7, lr, r6, r0
 801e476:	143f      	asrs	r7, r7, #16
 801e478:	d541      	bpl.n	801e4fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e47a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e47e:	4698      	mov	r8, r3
 801e480:	9603      	str	r6, [sp, #12]
 801e482:	f1b8 0f00 	cmp.w	r8, #0
 801e486:	dc59      	bgt.n	801e53c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e48c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e490:	9b00      	ldr	r3, [sp, #0]
 801e492:	2b00      	cmp	r3, #0
 801e494:	dd72      	ble.n	801e57c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e496:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e49a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e49c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4a0:	eeb0 6a62 	vmov.f32	s12, s5
 801e4a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e4a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e4b0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e4b4:	eeb0 6a43 	vmov.f32	s12, s6
 801e4b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e4bc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e4c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4d8:	ee12 2a90 	vmov	r2, s5
 801e4dc:	eef0 2a47 	vmov.f32	s5, s14
 801e4e0:	fb92 fef3 	sdiv	lr, r2, r3
 801e4e4:	ee13 2a10 	vmov	r2, s6
 801e4e8:	eeb0 3a67 	vmov.f32	s6, s15
 801e4ec:	fb92 fcf3 	sdiv	ip, r2, r3
 801e4f0:	9b00      	ldr	r3, [sp, #0]
 801e4f2:	3b01      	subs	r3, #1
 801e4f4:	9300      	str	r3, [sp, #0]
 801e4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4f8:	bf08      	it	eq
 801e4fa:	465b      	moveq	r3, fp
 801e4fc:	e797      	b.n	801e42e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e4fe:	454f      	cmp	r7, r9
 801e500:	dabb      	bge.n	801e47a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e502:	fb0c 2606 	mla	r6, ip, r6, r2
 801e506:	1436      	asrs	r6, r6, #16
 801e508:	d4b7      	bmi.n	801e47a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e50a:	4546      	cmp	r6, r8
 801e50c:	dab5      	bge.n	801e47a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e50e:	461e      	mov	r6, r3
 801e510:	46a0      	mov	r8, r4
 801e512:	2e00      	cmp	r6, #0
 801e514:	ddb8      	ble.n	801e488 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e516:	1417      	asrs	r7, r2, #16
 801e518:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e51c:	9901      	ldr	r1, [sp, #4]
 801e51e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e522:	4462      	add	r2, ip
 801e524:	4470      	add	r0, lr
 801e526:	fb0a 1707 	mla	r7, sl, r7, r1
 801e52a:	9902      	ldr	r1, [sp, #8]
 801e52c:	3e01      	subs	r6, #1
 801e52e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e532:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e536:	f828 7b02 	strh.w	r7, [r8], #2
 801e53a:	e7ea      	b.n	801e512 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e53c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e540:	d417      	bmi.n	801e572 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e542:	68ae      	ldr	r6, [r5, #8]
 801e544:	454e      	cmp	r6, r9
 801e546:	dd14      	ble.n	801e572 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e548:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e54c:	d411      	bmi.n	801e572 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e54e:	68ef      	ldr	r7, [r5, #12]
 801e550:	4557      	cmp	r7, sl
 801e552:	dd0e      	ble.n	801e572 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e554:	9f01      	ldr	r7, [sp, #4]
 801e556:	b236      	sxth	r6, r6
 801e558:	f06f 0101 	mvn.w	r1, #1
 801e55c:	fb0a 7606 	mla	r6, sl, r6, r7
 801e560:	9f02      	ldr	r7, [sp, #8]
 801e562:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e566:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e56a:	fb01 f608 	mul.w	r6, r1, r8
 801e56e:	9903      	ldr	r1, [sp, #12]
 801e570:	538f      	strh	r7, [r1, r6]
 801e572:	4470      	add	r0, lr
 801e574:	4462      	add	r2, ip
 801e576:	f108 38ff 	add.w	r8, r8, #4294967295
 801e57a:	e782      	b.n	801e482 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e57c:	b005      	add	sp, #20
 801e57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e582 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e586:	b087      	sub	sp, #28
 801e588:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e58a:	9205      	str	r2, [sp, #20]
 801e58c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e590:	9102      	str	r1, [sp, #8]
 801e592:	9203      	str	r2, [sp, #12]
 801e594:	6861      	ldr	r1, [r4, #4]
 801e596:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e59a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e59e:	fb01 2000 	mla	r0, r1, r0, r2
 801e5a2:	6822      	ldr	r2, [r4, #0]
 801e5a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e5a8:	9200      	str	r2, [sp, #0]
 801e5aa:	f8dc 2000 	ldr.w	r2, [ip]
 801e5ae:	9204      	str	r2, [sp, #16]
 801e5b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e5b4:	3204      	adds	r2, #4
 801e5b6:	9201      	str	r2, [sp, #4]
 801e5b8:	9a03      	ldr	r2, [sp, #12]
 801e5ba:	43d5      	mvns	r5, r2
 801e5bc:	b2ed      	uxtb	r5, r5
 801e5be:	9a02      	ldr	r2, [sp, #8]
 801e5c0:	2a00      	cmp	r2, #0
 801e5c2:	dc03      	bgt.n	801e5cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e5c4:	9a05      	ldr	r2, [sp, #20]
 801e5c6:	2a00      	cmp	r2, #0
 801e5c8:	f340 812c 	ble.w	801e824 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e5cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e5ce:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e5d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e5d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e5d8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e5dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	dd10      	ble.n	801e606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e5e4:	140c      	asrs	r4, r1, #16
 801e5e6:	d405      	bmi.n	801e5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5e8:	4574      	cmp	r4, lr
 801e5ea:	da03      	bge.n	801e5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5ec:	1414      	asrs	r4, r2, #16
 801e5ee:	d401      	bmi.n	801e5f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e5f0:	42bc      	cmp	r4, r7
 801e5f2:	db09      	blt.n	801e608 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e5f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5f6:	3b01      	subs	r3, #1
 801e5f8:	9800      	ldr	r0, [sp, #0]
 801e5fa:	4421      	add	r1, r4
 801e5fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e5fe:	3002      	adds	r0, #2
 801e600:	4422      	add	r2, r4
 801e602:	9000      	str	r0, [sp, #0]
 801e604:	e7ec      	b.n	801e5e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e606:	d071      	beq.n	801e6ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e608:	1e5c      	subs	r4, r3, #1
 801e60a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e60c:	fb06 1604 	mla	r6, r6, r4, r1
 801e610:	1436      	asrs	r6, r6, #16
 801e612:	d45d      	bmi.n	801e6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e614:	4576      	cmp	r6, lr
 801e616:	da5b      	bge.n	801e6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e618:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e61a:	fb06 2404 	mla	r4, r6, r4, r2
 801e61e:	1424      	asrs	r4, r4, #16
 801e620:	d456      	bmi.n	801e6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e622:	42bc      	cmp	r4, r7
 801e624:	da54      	bge.n	801e6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e626:	4698      	mov	r8, r3
 801e628:	f8dd 9000 	ldr.w	r9, [sp]
 801e62c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e630:	f1b8 0f00 	cmp.w	r8, #0
 801e634:	dd54      	ble.n	801e6e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e636:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e63a:	1414      	asrs	r4, r2, #16
 801e63c:	9804      	ldr	r0, [sp, #16]
 801e63e:	140e      	asrs	r6, r1, #16
 801e640:	f108 38ff 	add.w	r8, r8, #4294967295
 801e644:	fb07 0404 	mla	r4, r7, r4, r0
 801e648:	9801      	ldr	r0, [sp, #4]
 801e64a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e64e:	f8b9 4000 	ldrh.w	r4, [r9]
 801e652:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e656:	1227      	asrs	r7, r4, #8
 801e658:	eb00 0b0e 	add.w	fp, r0, lr
 801e65c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e660:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e664:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e666:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e66a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e66e:	4401      	add	r1, r0
 801e670:	fb16 f60a 	smulbb	r6, r6, sl
 801e674:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e676:	fb1b fb0a 	smulbb	fp, fp, sl
 801e67a:	fb07 6705 	mla	r7, r7, r5, r6
 801e67e:	10e6      	asrs	r6, r4, #3
 801e680:	00e4      	lsls	r4, r4, #3
 801e682:	4402      	add	r2, r0
 801e684:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e688:	b2bf      	uxth	r7, r7
 801e68a:	b2e4      	uxtb	r4, r4
 801e68c:	fb06 b605 	mla	r6, r6, r5, fp
 801e690:	fb14 f405 	smulbb	r4, r4, r5
 801e694:	b2b6      	uxth	r6, r6
 801e696:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e69a:	1c7c      	adds	r4, r7, #1
 801e69c:	f106 0b01 	add.w	fp, r6, #1
 801e6a0:	fa1f fe8e 	uxth.w	lr, lr
 801e6a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e6a8:	f10e 0401 	add.w	r4, lr, #1
 801e6ac:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e6b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e6b4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e6b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e6bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e6c0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e6c4:	4327      	orrs	r7, r4
 801e6c6:	ea47 070b 	orr.w	r7, r7, fp
 801e6ca:	f829 7b02 	strh.w	r7, [r9], #2
 801e6ce:	e7af      	b.n	801e630 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e6d0:	f04f 0e00 	mov.w	lr, #0
 801e6d4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e6d8:	eb03 040e 	add.w	r4, r3, lr
 801e6dc:	2c00      	cmp	r4, #0
 801e6de:	dc43      	bgt.n	801e768 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e6e0:	9a00      	ldr	r2, [sp, #0]
 801e6e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e6e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e6ea:	9300      	str	r3, [sp, #0]
 801e6ec:	9b02      	ldr	r3, [sp, #8]
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	f340 8098 	ble.w	801e824 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e6f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e702:	eef0 6a62 	vmov.f32	s13, s5
 801e706:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e70a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e70e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e712:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e716:	eef0 6a43 	vmov.f32	s13, s6
 801e71a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e71e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e722:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e726:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e72a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e72e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e732:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e736:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e73a:	ee12 2a90 	vmov	r2, s5
 801e73e:	eef0 2a47 	vmov.f32	s5, s14
 801e742:	fb92 f3f3 	sdiv	r3, r2, r3
 801e746:	ee13 2a10 	vmov	r2, s6
 801e74a:	9313      	str	r3, [sp, #76]	; 0x4c
 801e74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e74e:	eeb0 3a67 	vmov.f32	s6, s15
 801e752:	fb92 f3f3 	sdiv	r3, r2, r3
 801e756:	9314      	str	r3, [sp, #80]	; 0x50
 801e758:	9b02      	ldr	r3, [sp, #8]
 801e75a:	9a05      	ldr	r2, [sp, #20]
 801e75c:	3b01      	subs	r3, #1
 801e75e:	9302      	str	r3, [sp, #8]
 801e760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e762:	bf08      	it	eq
 801e764:	4613      	moveq	r3, r2
 801e766:	e72a      	b.n	801e5be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e768:	140f      	asrs	r7, r1, #16
 801e76a:	d454      	bmi.n	801e816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e76c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e770:	42be      	cmp	r6, r7
 801e772:	dd50      	ble.n	801e816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e774:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e778:	d44d      	bmi.n	801e816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e77a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e77e:	4544      	cmp	r4, r8
 801e780:	dd49      	ble.n	801e816 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e782:	9c04      	ldr	r4, [sp, #16]
 801e784:	b236      	sxth	r6, r6
 801e786:	f06f 0001 	mvn.w	r0, #1
 801e78a:	fb08 4606 	mla	r6, r8, r6, r4
 801e78e:	9c01      	ldr	r4, [sp, #4]
 801e790:	fb00 fa0e 	mul.w	sl, r0, lr
 801e794:	9800      	ldr	r0, [sp, #0]
 801e796:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e79a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e79e:	eb04 0b08 	add.w	fp, r4, r8
 801e7a2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e7a6:	9801      	ldr	r0, [sp, #4]
 801e7a8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e7ac:	1227      	asrs	r7, r4, #8
 801e7ae:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e7b2:	fb16 f609 	smulbb	r6, r6, r9
 801e7b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e7ba:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e7be:	fb1b fb09 	smulbb	fp, fp, r9
 801e7c2:	fb07 6705 	mla	r7, r7, r5, r6
 801e7c6:	10e6      	asrs	r6, r4, #3
 801e7c8:	00e4      	lsls	r4, r4, #3
 801e7ca:	9800      	ldr	r0, [sp, #0]
 801e7cc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e7d0:	b2bf      	uxth	r7, r7
 801e7d2:	b2e4      	uxtb	r4, r4
 801e7d4:	fb06 b605 	mla	r6, r6, r5, fp
 801e7d8:	fb14 f405 	smulbb	r4, r4, r5
 801e7dc:	b2b6      	uxth	r6, r6
 801e7de:	fb08 4809 	mla	r8, r8, r9, r4
 801e7e2:	1c7c      	adds	r4, r7, #1
 801e7e4:	f106 0b01 	add.w	fp, r6, #1
 801e7e8:	fa1f f888 	uxth.w	r8, r8
 801e7ec:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e7f0:	f108 0401 	add.w	r4, r8, #1
 801e7f4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e7f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e7fc:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e800:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e804:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e808:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e80c:	4327      	orrs	r7, r4
 801e80e:	ea47 070b 	orr.w	r7, r7, fp
 801e812:	f820 700a 	strh.w	r7, [r0, sl]
 801e816:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e818:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e81c:	4401      	add	r1, r0
 801e81e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e820:	4402      	add	r2, r0
 801e822:	e759      	b.n	801e6d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e824:	b007      	add	sp, #28
 801e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e82c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e830:	b085      	sub	sp, #20
 801e832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e836:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e838:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e83a:	9203      	str	r2, [sp, #12]
 801e83c:	6870      	ldr	r0, [r6, #4]
 801e83e:	686f      	ldr	r7, [r5, #4]
 801e840:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e844:	3704      	adds	r7, #4
 801e846:	9101      	str	r1, [sp, #4]
 801e848:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e84c:	fb00 2404 	mla	r4, r0, r4, r2
 801e850:	6832      	ldr	r2, [r6, #0]
 801e852:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e856:	682a      	ldr	r2, [r5, #0]
 801e858:	9202      	str	r2, [sp, #8]
 801e85a:	9a01      	ldr	r2, [sp, #4]
 801e85c:	2a00      	cmp	r2, #0
 801e85e:	dc03      	bgt.n	801e868 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e860:	9a03      	ldr	r2, [sp, #12]
 801e862:	2a00      	cmp	r2, #0
 801e864:	f340 80cc 	ble.w	801ea00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e86a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e86e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e872:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e874:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e878:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	dd0d      	ble.n	801e89c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e880:	1406      	asrs	r6, r0, #16
 801e882:	d405      	bmi.n	801e890 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e884:	454e      	cmp	r6, r9
 801e886:	da03      	bge.n	801e890 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e888:	1416      	asrs	r6, r2, #16
 801e88a:	d401      	bmi.n	801e890 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e88c:	4546      	cmp	r6, r8
 801e88e:	db06      	blt.n	801e89e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e890:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e892:	4460      	add	r0, ip
 801e894:	3b01      	subs	r3, #1
 801e896:	3402      	adds	r4, #2
 801e898:	4432      	add	r2, r6
 801e89a:	e7ef      	b.n	801e87c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e89c:	d00f      	beq.n	801e8be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e89e:	1e5e      	subs	r6, r3, #1
 801e8a0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e8a4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e8a8:	d543      	bpl.n	801e932 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e8aa:	4698      	mov	r8, r3
 801e8ac:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e8b0:	f1b8 0f00 	cmp.w	r8, #0
 801e8b4:	dc71      	bgt.n	801e99a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e8b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8be:	9b01      	ldr	r3, [sp, #4]
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	f340 809d 	ble.w	801ea00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e8c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8d0:	eeb0 6a62 	vmov.f32	s12, s5
 801e8d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e8e4:	eeb0 6a43 	vmov.f32	s12, s6
 801e8e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8ec:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e8f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e900:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e904:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e908:	ee12 2a90 	vmov	r2, s5
 801e90c:	eef0 2a47 	vmov.f32	s5, s14
 801e910:	fb92 fcf3 	sdiv	ip, r2, r3
 801e914:	ee13 2a10 	vmov	r2, s6
 801e918:	eeb0 3a67 	vmov.f32	s6, s15
 801e91c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e920:	9312      	str	r3, [sp, #72]	; 0x48
 801e922:	9b01      	ldr	r3, [sp, #4]
 801e924:	9a03      	ldr	r2, [sp, #12]
 801e926:	3b01      	subs	r3, #1
 801e928:	9301      	str	r3, [sp, #4]
 801e92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e92c:	bf08      	it	eq
 801e92e:	4613      	moveq	r3, r2
 801e930:	e793      	b.n	801e85a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e932:	45ce      	cmp	lr, r9
 801e934:	dab9      	bge.n	801e8aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e936:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e938:	fb01 2606 	mla	r6, r1, r6, r2
 801e93c:	1436      	asrs	r6, r6, #16
 801e93e:	d4b4      	bmi.n	801e8aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e940:	4546      	cmp	r6, r8
 801e942:	dab2      	bge.n	801e8aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e944:	4698      	mov	r8, r3
 801e946:	46a2      	mov	sl, r4
 801e948:	f1b8 0f00 	cmp.w	r8, #0
 801e94c:	ddb3      	ble.n	801e8b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e94e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e952:	1416      	asrs	r6, r2, #16
 801e954:	9902      	ldr	r1, [sp, #8]
 801e956:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e95a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e95e:	4460      	add	r0, ip
 801e960:	fb09 1606 	mla	r6, r9, r6, r1
 801e964:	4928      	ldr	r1, [pc, #160]	; (801ea08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e966:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e96a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e96e:	eb07 0b0e 	add.w	fp, r7, lr
 801e972:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e976:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e97a:	00f6      	lsls	r6, r6, #3
 801e97c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e980:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e982:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e986:	440a      	add	r2, r1
 801e988:	ea49 0606 	orr.w	r6, r9, r6
 801e98c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e990:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e994:	f82a 6b02 	strh.w	r6, [sl], #2
 801e998:	e7d6      	b.n	801e948 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e99a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e99e:	d429      	bmi.n	801e9f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9a0:	68ae      	ldr	r6, [r5, #8]
 801e9a2:	454e      	cmp	r6, r9
 801e9a4:	dd26      	ble.n	801e9f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9a6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e9aa:	d423      	bmi.n	801e9f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9ac:	68e9      	ldr	r1, [r5, #12]
 801e9ae:	4559      	cmp	r1, fp
 801e9b0:	dd20      	ble.n	801e9f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9b2:	fa0f fe86 	sxth.w	lr, r6
 801e9b6:	9902      	ldr	r1, [sp, #8]
 801e9b8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e9bc:	f06f 0101 	mvn.w	r1, #1
 801e9c0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e9c4:	fb01 f908 	mul.w	r9, r1, r8
 801e9c8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e9cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e9d0:	eb07 060e 	add.w	r6, r7, lr
 801e9d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e9d8:	7876      	ldrb	r6, [r6, #1]
 801e9da:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e9de:	00f6      	lsls	r6, r6, #3
 801e9e0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e9e4:	ea4b 0606 	orr.w	r6, fp, r6
 801e9e8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e9ec:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e9f0:	f82a 6009 	strh.w	r6, [sl, r9]
 801e9f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e9f6:	4460      	add	r0, ip
 801e9f8:	f108 38ff 	add.w	r8, r8, #4294967295
 801e9fc:	440a      	add	r2, r1
 801e9fe:	e757      	b.n	801e8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ea00:	b005      	add	sp, #20
 801ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea06:	bf00      	nop
 801ea08:	fffff800 	.word	0xfffff800

0801ea0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea10:	b087      	sub	sp, #28
 801ea12:	468b      	mov	fp, r1
 801ea14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea18:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ea1a:	9204      	str	r2, [sp, #16]
 801ea1c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ea20:	6841      	ldr	r1, [r0, #4]
 801ea22:	9205      	str	r2, [sp, #20]
 801ea24:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ea28:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ea2c:	fb01 2404 	mla	r4, r1, r4, r2
 801ea30:	6802      	ldr	r2, [r0, #0]
 801ea32:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ea36:	f8dc 2000 	ldr.w	r2, [ip]
 801ea3a:	9201      	str	r2, [sp, #4]
 801ea3c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ea40:	3204      	adds	r2, #4
 801ea42:	9202      	str	r2, [sp, #8]
 801ea44:	f1bb 0f00 	cmp.w	fp, #0
 801ea48:	dc03      	bgt.n	801ea52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ea4a:	9a04      	ldr	r2, [sp, #16]
 801ea4c:	2a00      	cmp	r2, #0
 801ea4e:	f340 8138 	ble.w	801ecc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ea52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea54:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ea58:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ea5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ea5e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801ea62:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	dd0e      	ble.n	801ea88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ea6a:	1402      	asrs	r2, r0, #16
 801ea6c:	d405      	bmi.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea6e:	42ba      	cmp	r2, r7
 801ea70:	da03      	bge.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea72:	140a      	asrs	r2, r1, #16
 801ea74:	d401      	bmi.n	801ea7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea76:	42b2      	cmp	r2, r6
 801ea78:	db07      	blt.n	801ea8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ea7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea7c:	3b01      	subs	r3, #1
 801ea7e:	3402      	adds	r4, #2
 801ea80:	4410      	add	r0, r2
 801ea82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea84:	4411      	add	r1, r2
 801ea86:	e7ee      	b.n	801ea66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea88:	d019      	beq.n	801eabe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ea8a:	1e5a      	subs	r2, r3, #1
 801ea8c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea8e:	fb05 0502 	mla	r5, r5, r2, r0
 801ea92:	142d      	asrs	r5, r5, #16
 801ea94:	d409      	bmi.n	801eaaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea96:	42bd      	cmp	r5, r7
 801ea98:	da07      	bge.n	801eaaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ea9c:	fb05 1202 	mla	r2, r5, r2, r1
 801eaa0:	1412      	asrs	r2, r2, #16
 801eaa2:	d402      	bmi.n	801eaaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eaa4:	42b2      	cmp	r2, r6
 801eaa6:	f2c0 80ac 	blt.w	801ec02 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801eaaa:	f04f 0e00 	mov.w	lr, #0
 801eaae:	eb03 020e 	add.w	r2, r3, lr
 801eab2:	2a00      	cmp	r2, #0
 801eab4:	dc3e      	bgt.n	801eb34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eaba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eabe:	f1bb 0f00 	cmp.w	fp, #0
 801eac2:	f340 80fe 	ble.w	801ecc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eac6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eaca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eacc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ead0:	f1bb 0b01 	subs.w	fp, fp, #1
 801ead4:	eeb0 6a62 	vmov.f32	s12, s5
 801ead8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eadc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eae0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eae4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eae8:	eeb0 6a43 	vmov.f32	s12, s6
 801eaec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eaf0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801eaf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eaf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eafc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb0c:	ee12 2a90 	vmov	r2, s5
 801eb10:	eef0 2a47 	vmov.f32	s5, s14
 801eb14:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb18:	ee13 2a10 	vmov	r2, s6
 801eb1c:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb20:	eeb0 3a67 	vmov.f32	s6, s15
 801eb24:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb28:	9a04      	ldr	r2, [sp, #16]
 801eb2a:	9314      	str	r3, [sp, #80]	; 0x50
 801eb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb2e:	bf08      	it	eq
 801eb30:	4613      	moveq	r3, r2
 801eb32:	e787      	b.n	801ea44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eb34:	1406      	asrs	r6, r0, #16
 801eb36:	d45d      	bmi.n	801ebf4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb38:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801eb3c:	42b5      	cmp	r5, r6
 801eb3e:	dd59      	ble.n	801ebf4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb40:	140f      	asrs	r7, r1, #16
 801eb42:	d457      	bmi.n	801ebf4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb44:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801eb48:	42ba      	cmp	r2, r7
 801eb4a:	dd53      	ble.n	801ebf4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb4c:	9a01      	ldr	r2, [sp, #4]
 801eb4e:	b22d      	sxth	r5, r5
 801eb50:	fb07 2505 	mla	r5, r7, r5, r2
 801eb54:	5daa      	ldrb	r2, [r5, r6]
 801eb56:	9d02      	ldr	r5, [sp, #8]
 801eb58:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eb5c:	0e2e      	lsrs	r6, r5, #24
 801eb5e:	d049      	beq.n	801ebf4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb60:	f06f 0201 	mvn.w	r2, #1
 801eb64:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eb68:	fb02 f20e 	mul.w	r2, r2, lr
 801eb6c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801eb70:	9203      	str	r2, [sp, #12]
 801eb72:	9a05      	ldr	r2, [sp, #20]
 801eb74:	ea4f 2728 	mov.w	r7, r8, asr #8
 801eb78:	4356      	muls	r6, r2
 801eb7a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eb7e:	1c72      	adds	r2, r6, #1
 801eb80:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801eb84:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eb88:	b2ed      	uxtb	r5, r5
 801eb8a:	1212      	asrs	r2, r2, #8
 801eb8c:	fa1f f982 	uxth.w	r9, r2
 801eb90:	43d2      	mvns	r2, r2
 801eb92:	fb16 f609 	smulbb	r6, r6, r9
 801eb96:	b2d2      	uxtb	r2, r2
 801eb98:	fb15 f509 	smulbb	r5, r5, r9
 801eb9c:	fb07 6702 	mla	r7, r7, r2, r6
 801eba0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801eba4:	fb1a fa09 	smulbb	sl, sl, r9
 801eba8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ebac:	b2bf      	uxth	r7, r7
 801ebae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ebb2:	fa5f f888 	uxtb.w	r8, r8
 801ebb6:	fb06 a602 	mla	r6, r6, r2, sl
 801ebba:	fb08 5502 	mla	r5, r8, r2, r5
 801ebbe:	1c7a      	adds	r2, r7, #1
 801ebc0:	b2b6      	uxth	r6, r6
 801ebc2:	b2ad      	uxth	r5, r5
 801ebc4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ebc8:	9a03      	ldr	r2, [sp, #12]
 801ebca:	f105 0a01 	add.w	sl, r5, #1
 801ebce:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ebd2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ebd6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ebda:	ea4a 0707 	orr.w	r7, sl, r7
 801ebde:	f106 0a01 	add.w	sl, r6, #1
 801ebe2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ebe6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ebea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ebee:	ea47 070a 	orr.w	r7, r7, sl
 801ebf2:	52a7      	strh	r7, [r4, r2]
 801ebf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ebf6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ebfa:	4410      	add	r0, r2
 801ebfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ebfe:	4411      	add	r1, r2
 801ec00:	e755      	b.n	801eaae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ec02:	f04f 0800 	mov.w	r8, #0
 801ec06:	eba3 0208 	sub.w	r2, r3, r8
 801ec0a:	2a00      	cmp	r2, #0
 801ec0c:	f77f af53 	ble.w	801eab6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ec10:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ec14:	140a      	asrs	r2, r1, #16
 801ec16:	9f01      	ldr	r7, [sp, #4]
 801ec18:	1405      	asrs	r5, r0, #16
 801ec1a:	fb06 7202 	mla	r2, r6, r2, r7
 801ec1e:	5d52      	ldrb	r2, [r2, r5]
 801ec20:	9d02      	ldr	r5, [sp, #8]
 801ec22:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ec26:	0e2e      	lsrs	r6, r5, #24
 801ec28:	d044      	beq.n	801ecb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ec2a:	9a05      	ldr	r2, [sp, #20]
 801ec2c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ec30:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ec34:	4356      	muls	r6, r2
 801ec36:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ec3a:	1c72      	adds	r2, r6, #1
 801ec3c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ec40:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ec44:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ec48:	b2ed      	uxtb	r5, r5
 801ec4a:	1212      	asrs	r2, r2, #8
 801ec4c:	fa1f f982 	uxth.w	r9, r2
 801ec50:	43d2      	mvns	r2, r2
 801ec52:	fb16 f609 	smulbb	r6, r6, r9
 801ec56:	b2d2      	uxtb	r2, r2
 801ec58:	fb15 f509 	smulbb	r5, r5, r9
 801ec5c:	fb07 6702 	mla	r7, r7, r2, r6
 801ec60:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ec64:	fb1a fa09 	smulbb	sl, sl, r9
 801ec68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ec6c:	b2bf      	uxth	r7, r7
 801ec6e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ec72:	fa5f fe8e 	uxtb.w	lr, lr
 801ec76:	fb06 a602 	mla	r6, r6, r2, sl
 801ec7a:	fb0e 5502 	mla	r5, lr, r2, r5
 801ec7e:	1c7a      	adds	r2, r7, #1
 801ec80:	b2b6      	uxth	r6, r6
 801ec82:	b2ad      	uxth	r5, r5
 801ec84:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ec88:	f105 0a01 	add.w	sl, r5, #1
 801ec8c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec90:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec94:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec98:	ea4a 0707 	orr.w	r7, sl, r7
 801ec9c:	f106 0a01 	add.w	sl, r6, #1
 801eca0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eca4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eca8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ecac:	ea47 070a 	orr.w	r7, r7, sl
 801ecb0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ecb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ecb6:	f108 0801 	add.w	r8, r8, #1
 801ecba:	4410      	add	r0, r2
 801ecbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ecbe:	4411      	add	r1, r2
 801ecc0:	e7a1      	b.n	801ec06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ecc2:	b007      	add	sp, #28
 801ecc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eccc:	b085      	sub	sp, #20
 801ecce:	468b      	mov	fp, r1
 801ecd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ecd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ecd6:	9203      	str	r2, [sp, #12]
 801ecd8:	6841      	ldr	r1, [r0, #4]
 801ecda:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ecde:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ece2:	fb01 2404 	mla	r4, r1, r4, r2
 801ece6:	6802      	ldr	r2, [r0, #0]
 801ece8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ecec:	f8de 2000 	ldr.w	r2, [lr]
 801ecf0:	9200      	str	r2, [sp, #0]
 801ecf2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ecf6:	3204      	adds	r2, #4
 801ecf8:	9201      	str	r2, [sp, #4]
 801ecfa:	f1bb 0f00 	cmp.w	fp, #0
 801ecfe:	dc03      	bgt.n	801ed08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ed00:	9a03      	ldr	r2, [sp, #12]
 801ed02:	2a00      	cmp	r2, #0
 801ed04:	f340 8153 	ble.w	801efae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ed08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed0a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ed0e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ed12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ed14:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ed18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	dd0e      	ble.n	801ed3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ed20:	1408      	asrs	r0, r1, #16
 801ed22:	d405      	bmi.n	801ed30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed24:	42b8      	cmp	r0, r7
 801ed26:	da03      	bge.n	801ed30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed28:	1410      	asrs	r0, r2, #16
 801ed2a:	d401      	bmi.n	801ed30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed2c:	42b0      	cmp	r0, r6
 801ed2e:	db07      	blt.n	801ed40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ed30:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ed32:	3b01      	subs	r3, #1
 801ed34:	3402      	adds	r4, #2
 801ed36:	4401      	add	r1, r0
 801ed38:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ed3a:	4402      	add	r2, r0
 801ed3c:	e7ee      	b.n	801ed1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ed3e:	d017      	beq.n	801ed70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ed40:	1e58      	subs	r0, r3, #1
 801ed42:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ed44:	fb05 1500 	mla	r5, r5, r0, r1
 801ed48:	142d      	asrs	r5, r5, #16
 801ed4a:	d409      	bmi.n	801ed60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed4c:	42bd      	cmp	r5, r7
 801ed4e:	da07      	bge.n	801ed60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ed52:	fb05 2000 	mla	r0, r5, r0, r2
 801ed56:	1400      	asrs	r0, r0, #16
 801ed58:	d402      	bmi.n	801ed60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed5a:	42b0      	cmp	r0, r6
 801ed5c:	f2c0 80bc 	blt.w	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ed60:	2600      	movs	r6, #0
 801ed62:	1998      	adds	r0, r3, r6
 801ed64:	2800      	cmp	r0, #0
 801ed66:	dc3e      	bgt.n	801ede6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ed68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ed70:	f1bb 0f00 	cmp.w	fp, #0
 801ed74:	f340 811b 	ble.w	801efae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ed78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed82:	f1bb 0b01 	subs.w	fp, fp, #1
 801ed86:	eeb0 6a62 	vmov.f32	s12, s5
 801ed8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed96:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ed9a:	eeb0 6a43 	vmov.f32	s12, s6
 801ed9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eda2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eda6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801edba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edbe:	ee12 2a90 	vmov	r2, s5
 801edc2:	eef0 2a47 	vmov.f32	s5, s14
 801edc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801edca:	ee13 2a10 	vmov	r2, s6
 801edce:	9311      	str	r3, [sp, #68]	; 0x44
 801edd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edd2:	eeb0 3a67 	vmov.f32	s6, s15
 801edd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801edda:	9a03      	ldr	r2, [sp, #12]
 801eddc:	9312      	str	r3, [sp, #72]	; 0x48
 801edde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ede0:	bf08      	it	eq
 801ede2:	4613      	moveq	r3, r2
 801ede4:	e789      	b.n	801ecfa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ede6:	140f      	asrs	r7, r1, #16
 801ede8:	d426      	bmi.n	801ee38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801edea:	f8de 5008 	ldr.w	r5, [lr, #8]
 801edee:	42bd      	cmp	r5, r7
 801edf0:	dd22      	ble.n	801ee38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801edf2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801edf6:	d41f      	bmi.n	801ee38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801edf8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801edfc:	4560      	cmp	r0, ip
 801edfe:	dd1b      	ble.n	801ee38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee00:	9800      	ldr	r0, [sp, #0]
 801ee02:	b22d      	sxth	r5, r5
 801ee04:	fb0c 0505 	mla	r5, ip, r5, r0
 801ee08:	5de8      	ldrb	r0, [r5, r7]
 801ee0a:	9d01      	ldr	r5, [sp, #4]
 801ee0c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ee10:	0e07      	lsrs	r7, r0, #24
 801ee12:	2fff      	cmp	r7, #255	; 0xff
 801ee14:	d116      	bne.n	801ee44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ee16:	f06f 0501 	mvn.w	r5, #1
 801ee1a:	fb05 f706 	mul.w	r7, r5, r6
 801ee1e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ee22:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ee26:	0945      	lsrs	r5, r0, #5
 801ee28:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ee2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee30:	ea4c 0505 	orr.w	r5, ip, r5
 801ee34:	4305      	orrs	r5, r0
 801ee36:	53e5      	strh	r5, [r4, r7]
 801ee38:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ee3a:	3e01      	subs	r6, #1
 801ee3c:	4401      	add	r1, r0
 801ee3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ee40:	4402      	add	r2, r0
 801ee42:	e78e      	b.n	801ed62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ee44:	b2fd      	uxtb	r5, r7
 801ee46:	2f00      	cmp	r7, #0
 801ee48:	d0f6      	beq.n	801ee38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee4a:	f06f 0701 	mvn.w	r7, #1
 801ee4e:	fa1f f985 	uxth.w	r9, r5
 801ee52:	43ed      	mvns	r5, r5
 801ee54:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ee58:	4377      	muls	r7, r6
 801ee5a:	fb1a fa09 	smulbb	sl, sl, r9
 801ee5e:	b2ed      	uxtb	r5, r5
 801ee60:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ee64:	9702      	str	r7, [sp, #8]
 801ee66:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ee6a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ee6e:	fb17 f709 	smulbb	r7, r7, r9
 801ee72:	b2c0      	uxtb	r0, r0
 801ee74:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ee78:	fb10 f009 	smulbb	r0, r0, r9
 801ee7c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ee80:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ee84:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ee88:	fa1f fc8c 	uxth.w	ip, ip
 801ee8c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ee90:	fa5f f888 	uxtb.w	r8, r8
 801ee94:	fb07 a705 	mla	r7, r7, r5, sl
 801ee98:	fb08 0005 	mla	r0, r8, r5, r0
 801ee9c:	f10c 0501 	add.w	r5, ip, #1
 801eea0:	b2bf      	uxth	r7, r7
 801eea2:	b280      	uxth	r0, r0
 801eea4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eea8:	f100 0a01 	add.w	sl, r0, #1
 801eeac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eeb0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801eeb4:	9802      	ldr	r0, [sp, #8]
 801eeb6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eeba:	ea4a 0c0c 	orr.w	ip, sl, ip
 801eebe:	f107 0a01 	add.w	sl, r7, #1
 801eec2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801eec6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eeca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eece:	ea4c 0c0a 	orr.w	ip, ip, sl
 801eed2:	f824 c000 	strh.w	ip, [r4, r0]
 801eed6:	e7af      	b.n	801ee38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801eed8:	f04f 0800 	mov.w	r8, #0
 801eedc:	eba3 0008 	sub.w	r0, r3, r8
 801eee0:	2800      	cmp	r0, #0
 801eee2:	f77f af41 	ble.w	801ed68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eee6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801eeea:	1410      	asrs	r0, r2, #16
 801eeec:	9f00      	ldr	r7, [sp, #0]
 801eeee:	140d      	asrs	r5, r1, #16
 801eef0:	fb06 7000 	mla	r0, r6, r0, r7
 801eef4:	5d40      	ldrb	r0, [r0, r5]
 801eef6:	9d01      	ldr	r5, [sp, #4]
 801eef8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801eefc:	0e2e      	lsrs	r6, r5, #24
 801eefe:	2eff      	cmp	r6, #255	; 0xff
 801ef00:	d112      	bne.n	801ef28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ef02:	482c      	ldr	r0, [pc, #176]	; (801efb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ef04:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ef08:	0968      	lsrs	r0, r5, #5
 801ef0a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ef0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef12:	4330      	orrs	r0, r6
 801ef14:	4328      	orrs	r0, r5
 801ef16:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ef1a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ef1c:	f108 0801 	add.w	r8, r8, #1
 801ef20:	4401      	add	r1, r0
 801ef22:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ef24:	4402      	add	r2, r0
 801ef26:	e7d9      	b.n	801eedc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef28:	b2f0      	uxtb	r0, r6
 801ef2a:	2e00      	cmp	r6, #0
 801ef2c:	d0f5      	beq.n	801ef1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ef2e:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ef32:	fa1f f980 	uxth.w	r9, r0
 801ef36:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ef3a:	43c0      	mvns	r0, r0
 801ef3c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ef40:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ef44:	fb16 f609 	smulbb	r6, r6, r9
 801ef48:	b2c0      	uxtb	r0, r0
 801ef4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef4e:	b2ed      	uxtb	r5, r5
 801ef50:	fb1a fa09 	smulbb	sl, sl, r9
 801ef54:	fb07 6700 	mla	r7, r7, r0, r6
 801ef58:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ef5c:	fb15 f509 	smulbb	r5, r5, r9
 801ef60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ef64:	b2bf      	uxth	r7, r7
 801ef66:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ef6a:	fa5f fc8c 	uxtb.w	ip, ip
 801ef6e:	fb06 a600 	mla	r6, r6, r0, sl
 801ef72:	fb0c 5500 	mla	r5, ip, r0, r5
 801ef76:	1c78      	adds	r0, r7, #1
 801ef78:	b2b6      	uxth	r6, r6
 801ef7a:	b2ad      	uxth	r5, r5
 801ef7c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ef80:	f105 0a01 	add.w	sl, r5, #1
 801ef84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef88:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ef8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef90:	ea4a 0707 	orr.w	r7, sl, r7
 801ef94:	f106 0a01 	add.w	sl, r6, #1
 801ef98:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ef9c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801efa0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801efa4:	ea47 070a 	orr.w	r7, r7, sl
 801efa8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801efac:	e7b5      	b.n	801ef1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801efae:	b005      	add	sp, #20
 801efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efb4:	fffff800 	.word	0xfffff800

0801efb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efbc:	b087      	sub	sp, #28
 801efbe:	468b      	mov	fp, r1
 801efc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801efc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801efc6:	9204      	str	r2, [sp, #16]
 801efc8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801efcc:	6861      	ldr	r1, [r4, #4]
 801efce:	9205      	str	r2, [sp, #20]
 801efd0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801efd4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801efd8:	fb01 2000 	mla	r0, r1, r0, r2
 801efdc:	6822      	ldr	r2, [r4, #0]
 801efde:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801efe2:	f8de 2000 	ldr.w	r2, [lr]
 801efe6:	9201      	str	r2, [sp, #4]
 801efe8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801efec:	9202      	str	r2, [sp, #8]
 801efee:	f1bb 0f00 	cmp.w	fp, #0
 801eff2:	dc03      	bgt.n	801effc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801eff4:	9a04      	ldr	r2, [sp, #16]
 801eff6:	2a00      	cmp	r2, #0
 801eff8:	f340 8142 	ble.w	801f280 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801effc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801effe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f002:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f008:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f00c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f010:	2b00      	cmp	r3, #0
 801f012:	dd0e      	ble.n	801f032 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f014:	140c      	asrs	r4, r1, #16
 801f016:	d405      	bmi.n	801f024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f018:	42bc      	cmp	r4, r7
 801f01a:	da03      	bge.n	801f024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f01c:	1414      	asrs	r4, r2, #16
 801f01e:	d401      	bmi.n	801f024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f020:	42b4      	cmp	r4, r6
 801f022:	db07      	blt.n	801f034 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f024:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f026:	3b01      	subs	r3, #1
 801f028:	3002      	adds	r0, #2
 801f02a:	4421      	add	r1, r4
 801f02c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f02e:	4422      	add	r2, r4
 801f030:	e7ee      	b.n	801f010 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f032:	d019      	beq.n	801f068 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f034:	1e5c      	subs	r4, r3, #1
 801f036:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f038:	fb05 1504 	mla	r5, r5, r4, r1
 801f03c:	142d      	asrs	r5, r5, #16
 801f03e:	d409      	bmi.n	801f054 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f040:	42bd      	cmp	r5, r7
 801f042:	da07      	bge.n	801f054 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f044:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f046:	fb05 2404 	mla	r4, r5, r4, r2
 801f04a:	1424      	asrs	r4, r4, #16
 801f04c:	d402      	bmi.n	801f054 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f04e:	42b4      	cmp	r4, r6
 801f050:	f2c0 80b1 	blt.w	801f1b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f054:	f04f 0800 	mov.w	r8, #0
 801f058:	eb03 0408 	add.w	r4, r3, r8
 801f05c:	2c00      	cmp	r4, #0
 801f05e:	dc3e      	bgt.n	801f0de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f060:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f064:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f068:	f1bb 0f00 	cmp.w	fp, #0
 801f06c:	f340 8108 	ble.w	801f280 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f070:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f076:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f07a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f07e:	eeb0 6a62 	vmov.f32	s12, s5
 801f082:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f086:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f08a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f08e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f092:	eeb0 6a43 	vmov.f32	s12, s6
 801f096:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f09a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f09e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0b6:	ee12 2a90 	vmov	r2, s5
 801f0ba:	eef0 2a47 	vmov.f32	s5, s14
 801f0be:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0c2:	ee13 2a10 	vmov	r2, s6
 801f0c6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0ca:	eeb0 3a67 	vmov.f32	s6, s15
 801f0ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0d2:	9a04      	ldr	r2, [sp, #16]
 801f0d4:	9314      	str	r3, [sp, #80]	; 0x50
 801f0d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0d8:	bf08      	it	eq
 801f0da:	4613      	moveq	r3, r2
 801f0dc:	e787      	b.n	801efee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f0de:	140e      	asrs	r6, r1, #16
 801f0e0:	d462      	bmi.n	801f1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f0e2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f0e6:	42b5      	cmp	r5, r6
 801f0e8:	dd5e      	ble.n	801f1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f0ea:	1417      	asrs	r7, r2, #16
 801f0ec:	d45c      	bmi.n	801f1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f0ee:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f0f2:	42bc      	cmp	r4, r7
 801f0f4:	dd58      	ble.n	801f1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f0f6:	b22d      	sxth	r5, r5
 801f0f8:	9c02      	ldr	r4, [sp, #8]
 801f0fa:	fb07 6505 	mla	r5, r7, r5, r6
 801f0fe:	5d66      	ldrb	r6, [r4, r5]
 801f100:	2e00      	cmp	r6, #0
 801f102:	d051      	beq.n	801f1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f104:	9c01      	ldr	r4, [sp, #4]
 801f106:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f10a:	f06f 0401 	mvn.w	r4, #1
 801f10e:	fb04 f408 	mul.w	r4, r4, r8
 801f112:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f116:	5b05      	ldrh	r5, [r0, r4]
 801f118:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f11c:	9403      	str	r4, [sp, #12]
 801f11e:	9c05      	ldr	r4, [sp, #20]
 801f120:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f124:	4366      	muls	r6, r4
 801f126:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f12a:	1c74      	adds	r4, r6, #1
 801f12c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f130:	122e      	asrs	r6, r5, #8
 801f132:	1224      	asrs	r4, r4, #8
 801f134:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f138:	00ed      	lsls	r5, r5, #3
 801f13a:	b2a7      	uxth	r7, r4
 801f13c:	43e4      	mvns	r4, r4
 801f13e:	b2ed      	uxtb	r5, r5
 801f140:	b2e4      	uxtb	r4, r4
 801f142:	fb16 f604 	smulbb	r6, r6, r4
 801f146:	fb15 f504 	smulbb	r5, r5, r4
 801f14a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f14e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f152:	fb1a fa04 	smulbb	sl, sl, r4
 801f156:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f15a:	fa1f fc8c 	uxth.w	ip, ip
 801f15e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f162:	fa5f f989 	uxtb.w	r9, r9
 801f166:	fb06 a607 	mla	r6, r6, r7, sl
 801f16a:	f10c 0401 	add.w	r4, ip, #1
 801f16e:	fb09 5507 	mla	r5, r9, r7, r5
 801f172:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f176:	9c03      	ldr	r4, [sp, #12]
 801f178:	b2ad      	uxth	r5, r5
 801f17a:	b2b6      	uxth	r6, r6
 801f17c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f180:	f105 0a01 	add.w	sl, r5, #1
 801f184:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f188:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f18c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f190:	f106 0a01 	add.w	sl, r6, #1
 801f194:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f198:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f19c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f1a0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f1a4:	f820 c004 	strh.w	ip, [r0, r4]
 801f1a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1ae:	4421      	add	r1, r4
 801f1b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1b2:	4422      	add	r2, r4
 801f1b4:	e750      	b.n	801f058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f1b6:	f04f 0900 	mov.w	r9, #0
 801f1ba:	eba3 0409 	sub.w	r4, r3, r9
 801f1be:	2c00      	cmp	r4, #0
 801f1c0:	f77f af4e 	ble.w	801f060 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f1c4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f1c8:	140d      	asrs	r5, r1, #16
 801f1ca:	1414      	asrs	r4, r2, #16
 801f1cc:	fb06 5404 	mla	r4, r6, r4, r5
 801f1d0:	9d02      	ldr	r5, [sp, #8]
 801f1d2:	5d2e      	ldrb	r6, [r5, r4]
 801f1d4:	2e00      	cmp	r6, #0
 801f1d6:	d04c      	beq.n	801f272 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f1d8:	9d01      	ldr	r5, [sp, #4]
 801f1da:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f1de:	9c05      	ldr	r4, [sp, #20]
 801f1e0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f1e4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f1e8:	4366      	muls	r6, r4
 801f1ea:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f1ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f1f2:	1c74      	adds	r4, r6, #1
 801f1f4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f1f8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f1fc:	122e      	asrs	r6, r5, #8
 801f1fe:	1224      	asrs	r4, r4, #8
 801f200:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f204:	00ed      	lsls	r5, r5, #3
 801f206:	b2a7      	uxth	r7, r4
 801f208:	43e4      	mvns	r4, r4
 801f20a:	b2ed      	uxtb	r5, r5
 801f20c:	b2e4      	uxtb	r4, r4
 801f20e:	fb16 f604 	smulbb	r6, r6, r4
 801f212:	fb15 f504 	smulbb	r5, r5, r4
 801f216:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f21a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f21e:	fb1a fa04 	smulbb	sl, sl, r4
 801f222:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f226:	fa1f fc8c 	uxth.w	ip, ip
 801f22a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f22e:	fa5f f888 	uxtb.w	r8, r8
 801f232:	fb06 a607 	mla	r6, r6, r7, sl
 801f236:	f10c 0401 	add.w	r4, ip, #1
 801f23a:	fb08 5507 	mla	r5, r8, r7, r5
 801f23e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f242:	b2ad      	uxth	r5, r5
 801f244:	b2b6      	uxth	r6, r6
 801f246:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f24a:	f105 0a01 	add.w	sl, r5, #1
 801f24e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f252:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f256:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f25a:	f106 0a01 	add.w	sl, r6, #1
 801f25e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f262:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f266:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f26a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f26e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f272:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f274:	f109 0901 	add.w	r9, r9, #1
 801f278:	4421      	add	r1, r4
 801f27a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f27c:	4422      	add	r2, r4
 801f27e:	e79c      	b.n	801f1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f280:	b007      	add	sp, #28
 801f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f286 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f28a:	b085      	sub	sp, #20
 801f28c:	468b      	mov	fp, r1
 801f28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f292:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f294:	9203      	str	r2, [sp, #12]
 801f296:	6861      	ldr	r1, [r4, #4]
 801f298:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f29c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f2a0:	fb01 2000 	mla	r0, r1, r0, r2
 801f2a4:	6822      	ldr	r2, [r4, #0]
 801f2a6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f2aa:	f8d8 2000 	ldr.w	r2, [r8]
 801f2ae:	9200      	str	r2, [sp, #0]
 801f2b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f2b4:	9201      	str	r2, [sp, #4]
 801f2b6:	f1bb 0f00 	cmp.w	fp, #0
 801f2ba:	dc03      	bgt.n	801f2c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f2bc:	9a03      	ldr	r2, [sp, #12]
 801f2be:	2a00      	cmp	r2, #0
 801f2c0:	f340 8146 	ble.w	801f550 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f2c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f2c6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f2ca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f2ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f2d0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f2d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	dd0e      	ble.n	801f2fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f2dc:	140c      	asrs	r4, r1, #16
 801f2de:	d405      	bmi.n	801f2ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f2e0:	42bc      	cmp	r4, r7
 801f2e2:	da03      	bge.n	801f2ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f2e4:	1414      	asrs	r4, r2, #16
 801f2e6:	d401      	bmi.n	801f2ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f2e8:	42b4      	cmp	r4, r6
 801f2ea:	db07      	blt.n	801f2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f2ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f2ee:	3b01      	subs	r3, #1
 801f2f0:	3002      	adds	r0, #2
 801f2f2:	4421      	add	r1, r4
 801f2f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f2f6:	4422      	add	r2, r4
 801f2f8:	e7ee      	b.n	801f2d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f2fa:	d017      	beq.n	801f32c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f2fc:	1e5c      	subs	r4, r3, #1
 801f2fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f300:	fb05 1504 	mla	r5, r5, r4, r1
 801f304:	142d      	asrs	r5, r5, #16
 801f306:	d409      	bmi.n	801f31c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f308:	42bd      	cmp	r5, r7
 801f30a:	da07      	bge.n	801f31c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f30c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f30e:	fb05 2404 	mla	r4, r5, r4, r2
 801f312:	1424      	asrs	r4, r4, #16
 801f314:	d402      	bmi.n	801f31c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f316:	42b4      	cmp	r4, r6
 801f318:	f2c0 80b3 	blt.w	801f482 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f31c:	2600      	movs	r6, #0
 801f31e:	199c      	adds	r4, r3, r6
 801f320:	2c00      	cmp	r4, #0
 801f322:	dc3e      	bgt.n	801f3a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f328:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f32c:	f1bb 0f00 	cmp.w	fp, #0
 801f330:	f340 810e 	ble.w	801f550 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f334:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f33a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f33e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f342:	eeb0 6a62 	vmov.f32	s12, s5
 801f346:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f34a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f34e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f352:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f356:	eeb0 6a43 	vmov.f32	s12, s6
 801f35a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f35e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f362:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f366:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f36a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f36e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f372:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f376:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f37a:	ee12 2a90 	vmov	r2, s5
 801f37e:	eef0 2a47 	vmov.f32	s5, s14
 801f382:	fb92 f3f3 	sdiv	r3, r2, r3
 801f386:	ee13 2a10 	vmov	r2, s6
 801f38a:	9311      	str	r3, [sp, #68]	; 0x44
 801f38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f38e:	eeb0 3a67 	vmov.f32	s6, s15
 801f392:	fb92 f3f3 	sdiv	r3, r2, r3
 801f396:	9a03      	ldr	r2, [sp, #12]
 801f398:	9312      	str	r3, [sp, #72]	; 0x48
 801f39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f39c:	bf08      	it	eq
 801f39e:	4613      	moveq	r3, r2
 801f3a0:	e789      	b.n	801f2b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f3a2:	140f      	asrs	r7, r1, #16
 801f3a4:	d418      	bmi.n	801f3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f3aa:	42bd      	cmp	r5, r7
 801f3ac:	dd14      	ble.n	801f3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3ae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f3b2:	d411      	bmi.n	801f3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3b4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f3b8:	4564      	cmp	r4, ip
 801f3ba:	dd0d      	ble.n	801f3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3bc:	b22d      	sxth	r5, r5
 801f3be:	9c01      	ldr	r4, [sp, #4]
 801f3c0:	fb0c 7505 	mla	r5, ip, r5, r7
 801f3c4:	5d64      	ldrb	r4, [r4, r5]
 801f3c6:	2cff      	cmp	r4, #255	; 0xff
 801f3c8:	d10c      	bne.n	801f3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f3ca:	9c00      	ldr	r4, [sp, #0]
 801f3cc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f3d0:	f06f 0401 	mvn.w	r4, #1
 801f3d4:	4374      	muls	r4, r6
 801f3d6:	5305      	strh	r5, [r0, r4]
 801f3d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f3da:	3e01      	subs	r6, #1
 801f3dc:	4421      	add	r1, r4
 801f3de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f3e0:	4422      	add	r2, r4
 801f3e2:	e79c      	b.n	801f31e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f3e4:	2c00      	cmp	r4, #0
 801f3e6:	d0f7      	beq.n	801f3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3e8:	9f00      	ldr	r7, [sp, #0]
 801f3ea:	fa1f fc84 	uxth.w	ip, r4
 801f3ee:	43e4      	mvns	r4, r4
 801f3f0:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f3f4:	f06f 0501 	mvn.w	r5, #1
 801f3f8:	b2e4      	uxtb	r4, r4
 801f3fa:	4375      	muls	r5, r6
 801f3fc:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f400:	9502      	str	r5, [sp, #8]
 801f402:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f406:	5b45      	ldrh	r5, [r0, r5]
 801f408:	122f      	asrs	r7, r5, #8
 801f40a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f40e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f412:	00ed      	lsls	r5, r5, #3
 801f414:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f418:	fb17 f704 	smulbb	r7, r7, r4
 801f41c:	b2ed      	uxtb	r5, r5
 801f41e:	fb1a fa04 	smulbb	sl, sl, r4
 801f422:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f426:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f42a:	fb15 f504 	smulbb	r5, r5, r4
 801f42e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f432:	fa1f fe8e 	uxth.w	lr, lr
 801f436:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f43a:	fa5f f989 	uxtb.w	r9, r9
 801f43e:	fb07 a70c 	mla	r7, r7, ip, sl
 801f442:	f10e 0401 	add.w	r4, lr, #1
 801f446:	fb09 550c 	mla	r5, r9, ip, r5
 801f44a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f44e:	9c02      	ldr	r4, [sp, #8]
 801f450:	b2ad      	uxth	r5, r5
 801f452:	b2bf      	uxth	r7, r7
 801f454:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f458:	f105 0a01 	add.w	sl, r5, #1
 801f45c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f460:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f464:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f468:	f107 0a01 	add.w	sl, r7, #1
 801f46c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f470:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f474:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f478:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f47c:	f820 e004 	strh.w	lr, [r0, r4]
 801f480:	e7aa      	b.n	801f3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f482:	f04f 0900 	mov.w	r9, #0
 801f486:	eba3 0409 	sub.w	r4, r3, r9
 801f48a:	2c00      	cmp	r4, #0
 801f48c:	f77f af4a 	ble.w	801f324 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f490:	1414      	asrs	r4, r2, #16
 801f492:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f496:	140d      	asrs	r5, r1, #16
 801f498:	fb06 5504 	mla	r5, r6, r4, r5
 801f49c:	9c01      	ldr	r4, [sp, #4]
 801f49e:	5d64      	ldrb	r4, [r4, r5]
 801f4a0:	2cff      	cmp	r4, #255	; 0xff
 801f4a2:	d10b      	bne.n	801f4bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f4a4:	9c00      	ldr	r4, [sp, #0]
 801f4a6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f4aa:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f4ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f4b0:	f109 0901 	add.w	r9, r9, #1
 801f4b4:	4421      	add	r1, r4
 801f4b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f4b8:	4422      	add	r2, r4
 801f4ba:	e7e4      	b.n	801f486 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f4bc:	2c00      	cmp	r4, #0
 801f4be:	d0f6      	beq.n	801f4ae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f4c0:	9e00      	ldr	r6, [sp, #0]
 801f4c2:	b2a7      	uxth	r7, r4
 801f4c4:	43e4      	mvns	r4, r4
 801f4c6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f4ca:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f4ce:	b2e4      	uxtb	r4, r4
 801f4d0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f4d4:	122e      	asrs	r6, r5, #8
 801f4d6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f4da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f4de:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f4e2:	00ed      	lsls	r5, r5, #3
 801f4e4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f4e8:	fb16 f604 	smulbb	r6, r6, r4
 801f4ec:	b2ed      	uxtb	r5, r5
 801f4ee:	fb1a fa04 	smulbb	sl, sl, r4
 801f4f2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f4f6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f4fa:	fb15 f504 	smulbb	r5, r5, r4
 801f4fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f502:	fa1f fc8c 	uxth.w	ip, ip
 801f506:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f50a:	fa5f fe8e 	uxtb.w	lr, lr
 801f50e:	fb06 a607 	mla	r6, r6, r7, sl
 801f512:	f10c 0401 	add.w	r4, ip, #1
 801f516:	fb0e 5507 	mla	r5, lr, r7, r5
 801f51a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f51e:	b2ad      	uxth	r5, r5
 801f520:	b2b6      	uxth	r6, r6
 801f522:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f526:	f105 0a01 	add.w	sl, r5, #1
 801f52a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f52e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f532:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f536:	f106 0a01 	add.w	sl, r6, #1
 801f53a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f53e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f542:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f546:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f54a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f54e:	e7ae      	b.n	801f4ae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f550:	b005      	add	sp, #20
 801f552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f556 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f55a:	b085      	sub	sp, #20
 801f55c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f55e:	9203      	str	r2, [sp, #12]
 801f560:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f564:	9100      	str	r1, [sp, #0]
 801f566:	9201      	str	r2, [sp, #4]
 801f568:	6841      	ldr	r1, [r0, #4]
 801f56a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f56e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f572:	fb01 2404 	mla	r4, r1, r4, r2
 801f576:	6802      	ldr	r2, [r0, #0]
 801f578:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f57c:	f8de 2000 	ldr.w	r2, [lr]
 801f580:	9202      	str	r2, [sp, #8]
 801f582:	9a01      	ldr	r2, [sp, #4]
 801f584:	43d6      	mvns	r6, r2
 801f586:	b2f6      	uxtb	r6, r6
 801f588:	9a00      	ldr	r2, [sp, #0]
 801f58a:	2a00      	cmp	r2, #0
 801f58c:	dc03      	bgt.n	801f596 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f58e:	9a03      	ldr	r2, [sp, #12]
 801f590:	2a00      	cmp	r2, #0
 801f592:	f340 8124 	ble.w	801f7de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f598:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f59c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f5a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5a2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f5a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	dd0e      	ble.n	801f5cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f5ae:	1408      	asrs	r0, r1, #16
 801f5b0:	d405      	bmi.n	801f5be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f5b2:	4560      	cmp	r0, ip
 801f5b4:	da03      	bge.n	801f5be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f5b6:	1410      	asrs	r0, r2, #16
 801f5b8:	d401      	bmi.n	801f5be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f5ba:	42b8      	cmp	r0, r7
 801f5bc:	db07      	blt.n	801f5ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f5be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f5c0:	3b01      	subs	r3, #1
 801f5c2:	3402      	adds	r4, #2
 801f5c4:	4401      	add	r1, r0
 801f5c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f5c8:	4402      	add	r2, r0
 801f5ca:	e7ee      	b.n	801f5aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f5cc:	d06e      	beq.n	801f6ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f5ce:	1e58      	subs	r0, r3, #1
 801f5d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f5d2:	fb05 1500 	mla	r5, r5, r0, r1
 801f5d6:	142d      	asrs	r5, r5, #16
 801f5d8:	d45c      	bmi.n	801f694 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f5da:	4565      	cmp	r5, ip
 801f5dc:	da5a      	bge.n	801f694 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f5de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f5e0:	fb05 2000 	mla	r0, r5, r0, r2
 801f5e4:	1400      	asrs	r0, r0, #16
 801f5e6:	d455      	bmi.n	801f694 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f5e8:	42b8      	cmp	r0, r7
 801f5ea:	da53      	bge.n	801f694 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f5ec:	4699      	mov	r9, r3
 801f5ee:	46a2      	mov	sl, r4
 801f5f0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f5f4:	f1b9 0f00 	cmp.w	r9, #0
 801f5f8:	dd54      	ble.n	801f6a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f5fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f5fe:	140d      	asrs	r5, r1, #16
 801f600:	1410      	asrs	r0, r2, #16
 801f602:	f109 39ff 	add.w	r9, r9, #4294967295
 801f606:	fb07 5000 	mla	r0, r7, r0, r5
 801f60a:	9d02      	ldr	r5, [sp, #8]
 801f60c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f610:	f8ba 5000 	ldrh.w	r5, [sl]
 801f614:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f618:	122f      	asrs	r7, r5, #8
 801f61a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f61e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f622:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f626:	00ed      	lsls	r5, r5, #3
 801f628:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f62c:	fb17 f706 	smulbb	r7, r7, r6
 801f630:	b2ed      	uxtb	r5, r5
 801f632:	fb18 f806 	smulbb	r8, r8, r6
 801f636:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f63a:	10c7      	asrs	r7, r0, #3
 801f63c:	fb15 f506 	smulbb	r5, r5, r6
 801f640:	00c0      	lsls	r0, r0, #3
 801f642:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f646:	fa1f fc8c 	uxth.w	ip, ip
 801f64a:	b2c0      	uxtb	r0, r0
 801f64c:	fb07 870b 	mla	r7, r7, fp, r8
 801f650:	fb00 500b 	mla	r0, r0, fp, r5
 801f654:	f10c 0501 	add.w	r5, ip, #1
 801f658:	b2bf      	uxth	r7, r7
 801f65a:	b280      	uxth	r0, r0
 801f65c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f660:	f107 0801 	add.w	r8, r7, #1
 801f664:	1c45      	adds	r5, r0, #1
 801f666:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f66a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f66e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f672:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f674:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f678:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f67c:	4401      	add	r1, r0
 801f67e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f682:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f684:	ea45 0c0c 	orr.w	ip, r5, ip
 801f688:	4402      	add	r2, r0
 801f68a:	ea4c 0c08 	orr.w	ip, ip, r8
 801f68e:	f82a cb02 	strh.w	ip, [sl], #2
 801f692:	e7af      	b.n	801f5f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f694:	f04f 0800 	mov.w	r8, #0
 801f698:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f69c:	eb03 0008 	add.w	r0, r3, r8
 801f6a0:	2800      	cmp	r0, #0
 801f6a2:	dc41      	bgt.n	801f728 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f6a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f6ac:	9b00      	ldr	r3, [sp, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	f340 8095 	ble.w	801f7de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f6b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f6b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6c2:	eef0 6a62 	vmov.f32	s13, s5
 801f6c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f6ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6d2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f6d6:	eef0 6a43 	vmov.f32	s13, s6
 801f6da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6de:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f6e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6fa:	ee12 2a90 	vmov	r2, s5
 801f6fe:	eef0 2a47 	vmov.f32	s5, s14
 801f702:	fb92 f3f3 	sdiv	r3, r2, r3
 801f706:	ee13 2a10 	vmov	r2, s6
 801f70a:	9311      	str	r3, [sp, #68]	; 0x44
 801f70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f70e:	eeb0 3a67 	vmov.f32	s6, s15
 801f712:	fb92 f3f3 	sdiv	r3, r2, r3
 801f716:	9312      	str	r3, [sp, #72]	; 0x48
 801f718:	9b00      	ldr	r3, [sp, #0]
 801f71a:	9a03      	ldr	r2, [sp, #12]
 801f71c:	3b01      	subs	r3, #1
 801f71e:	9300      	str	r3, [sp, #0]
 801f720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f722:	bf08      	it	eq
 801f724:	4613      	moveq	r3, r2
 801f726:	e72f      	b.n	801f588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f728:	140f      	asrs	r7, r1, #16
 801f72a:	d451      	bmi.n	801f7d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f72c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f730:	42bd      	cmp	r5, r7
 801f732:	dd4d      	ble.n	801f7d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f734:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f738:	d44a      	bmi.n	801f7d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f73a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f73e:	4560      	cmp	r0, ip
 801f740:	dd46      	ble.n	801f7d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f742:	b22d      	sxth	r5, r5
 801f744:	9802      	ldr	r0, [sp, #8]
 801f746:	fb0c 7505 	mla	r5, ip, r5, r7
 801f74a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f74e:	f06f 0501 	mvn.w	r5, #1
 801f752:	fb05 fb08 	mul.w	fp, r5, r8
 801f756:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f75a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f75e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f762:	122f      	asrs	r7, r5, #8
 801f764:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f768:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f76c:	00ed      	lsls	r5, r5, #3
 801f76e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f772:	fb17 f706 	smulbb	r7, r7, r6
 801f776:	b2ed      	uxtb	r5, r5
 801f778:	fb19 f906 	smulbb	r9, r9, r6
 801f77c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f780:	10c7      	asrs	r7, r0, #3
 801f782:	fb15 f506 	smulbb	r5, r5, r6
 801f786:	00c0      	lsls	r0, r0, #3
 801f788:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f78c:	fa1f fc8c 	uxth.w	ip, ip
 801f790:	b2c0      	uxtb	r0, r0
 801f792:	fb07 970a 	mla	r7, r7, sl, r9
 801f796:	fb00 500a 	mla	r0, r0, sl, r5
 801f79a:	f10c 0501 	add.w	r5, ip, #1
 801f79e:	b2bf      	uxth	r7, r7
 801f7a0:	b280      	uxth	r0, r0
 801f7a2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f7a6:	f107 0901 	add.w	r9, r7, #1
 801f7aa:	1c45      	adds	r5, r0, #1
 801f7ac:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f7b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f7b4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f7b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f7bc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f7c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f7c4:	ea45 0c0c 	orr.w	ip, r5, ip
 801f7c8:	ea4c 0c09 	orr.w	ip, ip, r9
 801f7cc:	f824 c00b 	strh.w	ip, [r4, fp]
 801f7d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f7d2:	f108 38ff 	add.w	r8, r8, #4294967295
 801f7d6:	4401      	add	r1, r0
 801f7d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f7da:	4402      	add	r2, r0
 801f7dc:	e75e      	b.n	801f69c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f7de:	b005      	add	sp, #20
 801f7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7e8:	b085      	sub	sp, #20
 801f7ea:	4693      	mov	fp, r2
 801f7ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f7f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f7f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f7f4:	6870      	ldr	r0, [r6, #4]
 801f7f6:	9101      	str	r1, [sp, #4]
 801f7f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f7fc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f800:	fb00 2404 	mla	r4, r0, r4, r2
 801f804:	6832      	ldr	r2, [r6, #0]
 801f806:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f80a:	682a      	ldr	r2, [r5, #0]
 801f80c:	9202      	str	r2, [sp, #8]
 801f80e:	9a01      	ldr	r2, [sp, #4]
 801f810:	2a00      	cmp	r2, #0
 801f812:	dc03      	bgt.n	801f81c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f814:	f1bb 0f00 	cmp.w	fp, #0
 801f818:	f340 809a 	ble.w	801f950 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f81c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f81e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f822:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f826:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f828:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f82c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f830:	2b00      	cmp	r3, #0
 801f832:	dd0c      	ble.n	801f84e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f834:	1406      	asrs	r6, r0, #16
 801f836:	d405      	bmi.n	801f844 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f838:	454e      	cmp	r6, r9
 801f83a:	da03      	bge.n	801f844 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f83c:	1416      	asrs	r6, r2, #16
 801f83e:	d401      	bmi.n	801f844 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f840:	4546      	cmp	r6, r8
 801f842:	db05      	blt.n	801f850 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f844:	4470      	add	r0, lr
 801f846:	4462      	add	r2, ip
 801f848:	3b01      	subs	r3, #1
 801f84a:	3402      	adds	r4, #2
 801f84c:	e7f0      	b.n	801f830 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f84e:	d00f      	beq.n	801f870 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f850:	1e5e      	subs	r6, r3, #1
 801f852:	fb0e 0706 	mla	r7, lr, r6, r0
 801f856:	143f      	asrs	r7, r7, #16
 801f858:	d541      	bpl.n	801f8de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f85a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f85e:	4698      	mov	r8, r3
 801f860:	9603      	str	r6, [sp, #12]
 801f862:	f1b8 0f00 	cmp.w	r8, #0
 801f866:	dc56      	bgt.n	801f916 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f86c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f870:	9b01      	ldr	r3, [sp, #4]
 801f872:	2b00      	cmp	r3, #0
 801f874:	dd6c      	ble.n	801f950 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f876:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f87c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f880:	eeb0 6a62 	vmov.f32	s12, s5
 801f884:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f888:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f88c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f890:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f894:	eeb0 6a43 	vmov.f32	s12, s6
 801f898:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f89c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f8a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f8a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f8b8:	ee12 2a90 	vmov	r2, s5
 801f8bc:	eef0 2a47 	vmov.f32	s5, s14
 801f8c0:	fb92 fef3 	sdiv	lr, r2, r3
 801f8c4:	ee13 2a10 	vmov	r2, s6
 801f8c8:	eeb0 3a67 	vmov.f32	s6, s15
 801f8cc:	fb92 fcf3 	sdiv	ip, r2, r3
 801f8d0:	9b01      	ldr	r3, [sp, #4]
 801f8d2:	3b01      	subs	r3, #1
 801f8d4:	9301      	str	r3, [sp, #4]
 801f8d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8d8:	bf08      	it	eq
 801f8da:	465b      	moveq	r3, fp
 801f8dc:	e797      	b.n	801f80e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f8de:	454f      	cmp	r7, r9
 801f8e0:	dabb      	bge.n	801f85a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8e2:	fb0c 2606 	mla	r6, ip, r6, r2
 801f8e6:	1436      	asrs	r6, r6, #16
 801f8e8:	d4b7      	bmi.n	801f85a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8ea:	4546      	cmp	r6, r8
 801f8ec:	dab5      	bge.n	801f85a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8ee:	461e      	mov	r6, r3
 801f8f0:	46a0      	mov	r8, r4
 801f8f2:	2e00      	cmp	r6, #0
 801f8f4:	ddb8      	ble.n	801f868 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f8f6:	1417      	asrs	r7, r2, #16
 801f8f8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f8fc:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f900:	9902      	ldr	r1, [sp, #8]
 801f902:	4470      	add	r0, lr
 801f904:	4462      	add	r2, ip
 801f906:	fb0a 9707 	mla	r7, sl, r7, r9
 801f90a:	3e01      	subs	r6, #1
 801f90c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f910:	f828 7b02 	strh.w	r7, [r8], #2
 801f914:	e7ed      	b.n	801f8f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f916:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f91a:	d414      	bmi.n	801f946 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f91c:	68ae      	ldr	r6, [r5, #8]
 801f91e:	454e      	cmp	r6, r9
 801f920:	dd11      	ble.n	801f946 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f922:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f926:	d40e      	bmi.n	801f946 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f928:	68ef      	ldr	r7, [r5, #12]
 801f92a:	4557      	cmp	r7, sl
 801f92c:	dd0b      	ble.n	801f946 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f92e:	b236      	sxth	r6, r6
 801f930:	f06f 0101 	mvn.w	r1, #1
 801f934:	9f02      	ldr	r7, [sp, #8]
 801f936:	fb0a 9606 	mla	r6, sl, r6, r9
 801f93a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f93e:	fb01 f608 	mul.w	r6, r1, r8
 801f942:	9903      	ldr	r1, [sp, #12]
 801f944:	538f      	strh	r7, [r1, r6]
 801f946:	4470      	add	r0, lr
 801f948:	4462      	add	r2, ip
 801f94a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f94e:	e788      	b.n	801f862 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f950:	b005      	add	sp, #20
 801f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f956 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f95a:	b087      	sub	sp, #28
 801f95c:	468b      	mov	fp, r1
 801f95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f962:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f964:	9203      	str	r2, [sp, #12]
 801f966:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f96a:	6841      	ldr	r1, [r0, #4]
 801f96c:	9204      	str	r2, [sp, #16]
 801f96e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801f972:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f976:	fb01 2505 	mla	r5, r1, r5, r2
 801f97a:	6802      	ldr	r2, [r0, #0]
 801f97c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801f980:	f8d9 2000 	ldr.w	r2, [r9]
 801f984:	9201      	str	r2, [sp, #4]
 801f986:	f1bb 0f00 	cmp.w	fp, #0
 801f98a:	dc03      	bgt.n	801f994 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f98c:	9a03      	ldr	r2, [sp, #12]
 801f98e:	2a00      	cmp	r2, #0
 801f990:	f340 8158 	ble.w	801fc44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f994:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f996:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f99a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f99e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9a0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f9a4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	dd0e      	ble.n	801f9ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f9ac:	1402      	asrs	r2, r0, #16
 801f9ae:	d405      	bmi.n	801f9bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9b0:	42ba      	cmp	r2, r7
 801f9b2:	da03      	bge.n	801f9bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9b4:	140a      	asrs	r2, r1, #16
 801f9b6:	d401      	bmi.n	801f9bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9b8:	42b2      	cmp	r2, r6
 801f9ba:	db07      	blt.n	801f9cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f9bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f9be:	3b01      	subs	r3, #1
 801f9c0:	3502      	adds	r5, #2
 801f9c2:	4410      	add	r0, r2
 801f9c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f9c6:	4411      	add	r1, r2
 801f9c8:	e7ee      	b.n	801f9a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f9ca:	d017      	beq.n	801f9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f9cc:	1e5a      	subs	r2, r3, #1
 801f9ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f9d0:	fb04 0402 	mla	r4, r4, r2, r0
 801f9d4:	1424      	asrs	r4, r4, #16
 801f9d6:	d409      	bmi.n	801f9ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9d8:	42bc      	cmp	r4, r7
 801f9da:	da07      	bge.n	801f9ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9de:	fb04 1202 	mla	r2, r4, r2, r1
 801f9e2:	1412      	asrs	r2, r2, #16
 801f9e4:	d402      	bmi.n	801f9ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f9e6:	42b2      	cmp	r2, r6
 801f9e8:	f2c0 80bf 	blt.w	801fb6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f9ec:	2700      	movs	r7, #0
 801f9ee:	19da      	adds	r2, r3, r7
 801f9f0:	2a00      	cmp	r2, #0
 801f9f2:	dc3e      	bgt.n	801fa72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f9f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9f8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f9fc:	f1bb 0f00 	cmp.w	fp, #0
 801fa00:	f340 8120 	ble.w	801fc44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801fa04:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa0e:	f1bb 0b01 	subs.w	fp, fp, #1
 801fa12:	eeb0 6a62 	vmov.f32	s12, s5
 801fa16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa22:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fa26:	eeb0 6a43 	vmov.f32	s12, s6
 801fa2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa2e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fa32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa4a:	ee12 2a90 	vmov	r2, s5
 801fa4e:	eef0 2a47 	vmov.f32	s5, s14
 801fa52:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa56:	ee13 2a10 	vmov	r2, s6
 801fa5a:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa5e:	eeb0 3a67 	vmov.f32	s6, s15
 801fa62:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa66:	9a03      	ldr	r2, [sp, #12]
 801fa68:	9314      	str	r3, [sp, #80]	; 0x50
 801fa6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa6c:	bf08      	it	eq
 801fa6e:	4613      	moveq	r3, r2
 801fa70:	e789      	b.n	801f986 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fa72:	1406      	asrs	r6, r0, #16
 801fa74:	d42d      	bmi.n	801fad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa76:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fa7a:	42b4      	cmp	r4, r6
 801fa7c:	dd29      	ble.n	801fad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa7e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fa82:	d426      	bmi.n	801fad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa84:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fa88:	4562      	cmp	r2, ip
 801fa8a:	dd22      	ble.n	801fad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa8c:	b224      	sxth	r4, r4
 801fa8e:	9a01      	ldr	r2, [sp, #4]
 801fa90:	fb0c 6404 	mla	r4, ip, r4, r6
 801fa94:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fa98:	0e22      	lsrs	r2, r4, #24
 801fa9a:	d01a      	beq.n	801fad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa9c:	9e04      	ldr	r6, [sp, #16]
 801fa9e:	4372      	muls	r2, r6
 801faa0:	1c56      	adds	r6, r2, #1
 801faa2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801faa6:	0a26      	lsrs	r6, r4, #8
 801faa8:	1212      	asrs	r2, r2, #8
 801faaa:	9605      	str	r6, [sp, #20]
 801faac:	2aff      	cmp	r2, #255	; 0xff
 801faae:	d116      	bne.n	801fade <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fab0:	f06f 0201 	mvn.w	r2, #1
 801fab4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fab8:	fb02 fc07 	mul.w	ip, r2, r7
 801fabc:	0962      	lsrs	r2, r4, #5
 801fabe:	f026 0607 	bic.w	r6, r6, #7
 801fac2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fac6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801faca:	4316      	orrs	r6, r2
 801facc:	4326      	orrs	r6, r4
 801face:	f825 600c 	strh.w	r6, [r5, ip]
 801fad2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fad4:	3f01      	subs	r7, #1
 801fad6:	4410      	add	r0, r2
 801fad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fada:	4411      	add	r1, r2
 801fadc:	e787      	b.n	801f9ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fade:	f06f 0601 	mvn.w	r6, #1
 801fae2:	fa1f fa82 	uxth.w	sl, r2
 801fae6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801faea:	43d2      	mvns	r2, r2
 801faec:	437e      	muls	r6, r7
 801faee:	b2e4      	uxtb	r4, r4
 801faf0:	fb1c fc0a 	smulbb	ip, ip, sl
 801faf4:	b2d2      	uxtb	r2, r2
 801faf6:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fafa:	fb14 f40a 	smulbb	r4, r4, sl
 801fafe:	9602      	str	r6, [sp, #8]
 801fb00:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fb04:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fb08:	fb16 f60a 	smulbb	r6, r6, sl
 801fb0c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fb10:	fb0e ce02 	mla	lr, lr, r2, ip
 801fb14:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fb18:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fb1c:	fa1f fe8e 	uxth.w	lr, lr
 801fb20:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fb24:	fa5f f888 	uxtb.w	r8, r8
 801fb28:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fb2c:	fb08 4402 	mla	r4, r8, r2, r4
 801fb30:	f10e 0201 	add.w	r2, lr, #1
 801fb34:	fa1f fc8c 	uxth.w	ip, ip
 801fb38:	b2a4      	uxth	r4, r4
 801fb3a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fb3e:	9a02      	ldr	r2, [sp, #8]
 801fb40:	1c66      	adds	r6, r4, #1
 801fb42:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fb46:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fb4a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fb4e:	ea46 0e0e 	orr.w	lr, r6, lr
 801fb52:	f10c 0601 	add.w	r6, ip, #1
 801fb56:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fb5a:	0976      	lsrs	r6, r6, #5
 801fb5c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fb60:	ea4e 0e06 	orr.w	lr, lr, r6
 801fb64:	f825 e002 	strh.w	lr, [r5, r2]
 801fb68:	e7b3      	b.n	801fad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb6a:	f04f 0800 	mov.w	r8, #0
 801fb6e:	eba3 0208 	sub.w	r2, r3, r8
 801fb72:	2a00      	cmp	r2, #0
 801fb74:	f77f af3e 	ble.w	801f9f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fb78:	1404      	asrs	r4, r0, #16
 801fb7a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fb7e:	140a      	asrs	r2, r1, #16
 801fb80:	fb06 4202 	mla	r2, r6, r2, r4
 801fb84:	9c01      	ldr	r4, [sp, #4]
 801fb86:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fb8a:	0e22      	lsrs	r2, r4, #24
 801fb8c:	d015      	beq.n	801fbba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fb8e:	9e04      	ldr	r6, [sp, #16]
 801fb90:	4372      	muls	r2, r6
 801fb92:	1c56      	adds	r6, r2, #1
 801fb94:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fb98:	0a26      	lsrs	r6, r4, #8
 801fb9a:	1212      	asrs	r2, r2, #8
 801fb9c:	2aff      	cmp	r2, #255	; 0xff
 801fb9e:	d113      	bne.n	801fbc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fba0:	0962      	lsrs	r2, r4, #5
 801fba2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fba6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fbaa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fbae:	f026 0607 	bic.w	r6, r6, #7
 801fbb2:	4316      	orrs	r6, r2
 801fbb4:	4326      	orrs	r6, r4
 801fbb6:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fbba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fbbc:	f108 0801 	add.w	r8, r8, #1
 801fbc0:	4410      	add	r0, r2
 801fbc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fbc4:	4411      	add	r1, r2
 801fbc6:	e7d2      	b.n	801fb6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fbc8:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fbcc:	fa1f fa82 	uxth.w	sl, r2
 801fbd0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fbd4:	43d2      	mvns	r2, r2
 801fbd6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fbda:	fb17 f70a 	smulbb	r7, r7, sl
 801fbde:	b2d2      	uxtb	r2, r2
 801fbe0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fbe4:	b2e4      	uxtb	r4, r4
 801fbe6:	b2f6      	uxtb	r6, r6
 801fbe8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fbec:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fbf0:	fb14 f40a 	smulbb	r4, r4, sl
 801fbf4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fbf8:	fa1f fc8c 	uxth.w	ip, ip
 801fbfc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fc00:	fb16 f60a 	smulbb	r6, r6, sl
 801fc04:	fa5f fe8e 	uxtb.w	lr, lr
 801fc08:	fb0e 4402 	mla	r4, lr, r2, r4
 801fc0c:	fb07 6702 	mla	r7, r7, r2, r6
 801fc10:	f10c 0201 	add.w	r2, ip, #1
 801fc14:	b2a4      	uxth	r4, r4
 801fc16:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fc1a:	1c66      	adds	r6, r4, #1
 801fc1c:	b2bf      	uxth	r7, r7
 801fc1e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fc22:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fc26:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fc2a:	ea46 0c0c 	orr.w	ip, r6, ip
 801fc2e:	1c7e      	adds	r6, r7, #1
 801fc30:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fc34:	0976      	lsrs	r6, r6, #5
 801fc36:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fc3a:	ea4c 0c06 	orr.w	ip, ip, r6
 801fc3e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fc42:	e7ba      	b.n	801fbba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fc44:	b007      	add	sp, #28
 801fc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fc4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc50:	b085      	sub	sp, #20
 801fc52:	468b      	mov	fp, r1
 801fc54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fc58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fc5a:	9203      	str	r2, [sp, #12]
 801fc5c:	6841      	ldr	r1, [r0, #4]
 801fc5e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fc62:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fc66:	fb01 2404 	mla	r4, r1, r4, r2
 801fc6a:	6802      	ldr	r2, [r0, #0]
 801fc6c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fc70:	f8d8 2000 	ldr.w	r2, [r8]
 801fc74:	9201      	str	r2, [sp, #4]
 801fc76:	f1bb 0f00 	cmp.w	fp, #0
 801fc7a:	dc03      	bgt.n	801fc84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fc7c:	9a03      	ldr	r2, [sp, #12]
 801fc7e:	2a00      	cmp	r2, #0
 801fc80:	f340 814f 	ble.w	801ff22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fc84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fc86:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fc8a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc90:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fc94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	dd0e      	ble.n	801fcba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc9c:	1408      	asrs	r0, r1, #16
 801fc9e:	d405      	bmi.n	801fcac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fca0:	42b8      	cmp	r0, r7
 801fca2:	da03      	bge.n	801fcac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fca4:	1410      	asrs	r0, r2, #16
 801fca6:	d401      	bmi.n	801fcac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fca8:	42b0      	cmp	r0, r6
 801fcaa:	db07      	blt.n	801fcbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fcac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fcae:	3b01      	subs	r3, #1
 801fcb0:	3402      	adds	r4, #2
 801fcb2:	4401      	add	r1, r0
 801fcb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fcb6:	4402      	add	r2, r0
 801fcb8:	e7ee      	b.n	801fc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fcba:	d017      	beq.n	801fcec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fcbc:	1e58      	subs	r0, r3, #1
 801fcbe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fcc0:	fb05 1500 	mla	r5, r5, r0, r1
 801fcc4:	142d      	asrs	r5, r5, #16
 801fcc6:	d409      	bmi.n	801fcdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcc8:	42bd      	cmp	r5, r7
 801fcca:	da07      	bge.n	801fcdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fccc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fcce:	fb05 2000 	mla	r0, r5, r0, r2
 801fcd2:	1400      	asrs	r0, r0, #16
 801fcd4:	d402      	bmi.n	801fcdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fcd6:	42b0      	cmp	r0, r6
 801fcd8:	f2c0 80ba 	blt.w	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fcdc:	2600      	movs	r6, #0
 801fcde:	1998      	adds	r0, r3, r6
 801fce0:	2800      	cmp	r0, #0
 801fce2:	dc3e      	bgt.n	801fd62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fce8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fcec:	f1bb 0f00 	cmp.w	fp, #0
 801fcf0:	f340 8117 	ble.w	801ff22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fcf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcfe:	f1bb 0b01 	subs.w	fp, fp, #1
 801fd02:	eeb0 6a62 	vmov.f32	s12, s5
 801fd06:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd12:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fd16:	eeb0 6a43 	vmov.f32	s12, s6
 801fd1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd1e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fd22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd26:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd3a:	ee12 2a90 	vmov	r2, s5
 801fd3e:	eef0 2a47 	vmov.f32	s5, s14
 801fd42:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd46:	ee13 2a10 	vmov	r2, s6
 801fd4a:	9311      	str	r3, [sp, #68]	; 0x44
 801fd4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd4e:	eeb0 3a67 	vmov.f32	s6, s15
 801fd52:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd56:	9a03      	ldr	r2, [sp, #12]
 801fd58:	9312      	str	r3, [sp, #72]	; 0x48
 801fd5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd5c:	bf08      	it	eq
 801fd5e:	4613      	moveq	r3, r2
 801fd60:	e789      	b.n	801fc76 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fd62:	140f      	asrs	r7, r1, #16
 801fd64:	d424      	bmi.n	801fdb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd66:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fd6a:	42bd      	cmp	r5, r7
 801fd6c:	dd20      	ble.n	801fdb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd6e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fd72:	d41d      	bmi.n	801fdb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd74:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fd78:	4560      	cmp	r0, ip
 801fd7a:	dd19      	ble.n	801fdb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd7c:	b22d      	sxth	r5, r5
 801fd7e:	9801      	ldr	r0, [sp, #4]
 801fd80:	fb0c 7505 	mla	r5, ip, r5, r7
 801fd84:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fd88:	0e07      	lsrs	r7, r0, #24
 801fd8a:	2fff      	cmp	r7, #255	; 0xff
 801fd8c:	d116      	bne.n	801fdbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd8e:	f06f 0501 	mvn.w	r5, #1
 801fd92:	fb05 f706 	mul.w	r7, r5, r6
 801fd96:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fd9a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fd9e:	0945      	lsrs	r5, r0, #5
 801fda0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fda4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fda8:	ea4c 0505 	orr.w	r5, ip, r5
 801fdac:	4305      	orrs	r5, r0
 801fdae:	53e5      	strh	r5, [r4, r7]
 801fdb0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fdb2:	3e01      	subs	r6, #1
 801fdb4:	4401      	add	r1, r0
 801fdb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fdb8:	4402      	add	r2, r0
 801fdba:	e790      	b.n	801fcde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fdbc:	b2fd      	uxtb	r5, r7
 801fdbe:	2f00      	cmp	r7, #0
 801fdc0:	d0f6      	beq.n	801fdb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdc2:	f06f 0701 	mvn.w	r7, #1
 801fdc6:	fa1f f985 	uxth.w	r9, r5
 801fdca:	43ed      	mvns	r5, r5
 801fdcc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fdd0:	4377      	muls	r7, r6
 801fdd2:	fb1a fa09 	smulbb	sl, sl, r9
 801fdd6:	b2ed      	uxtb	r5, r5
 801fdd8:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fddc:	9702      	str	r7, [sp, #8]
 801fdde:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fde2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fde6:	fb17 f709 	smulbb	r7, r7, r9
 801fdea:	b2c0      	uxtb	r0, r0
 801fdec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fdf0:	fb10 f009 	smulbb	r0, r0, r9
 801fdf4:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fdf8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fdfc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe00:	fa1f fc8c 	uxth.w	ip, ip
 801fe04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fe08:	fa5f fe8e 	uxtb.w	lr, lr
 801fe0c:	fb07 a705 	mla	r7, r7, r5, sl
 801fe10:	fb0e 0005 	mla	r0, lr, r5, r0
 801fe14:	f10c 0501 	add.w	r5, ip, #1
 801fe18:	b2bf      	uxth	r7, r7
 801fe1a:	b280      	uxth	r0, r0
 801fe1c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fe20:	f100 0a01 	add.w	sl, r0, #1
 801fe24:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fe28:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fe2c:	9802      	ldr	r0, [sp, #8]
 801fe2e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe32:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fe36:	f107 0a01 	add.w	sl, r7, #1
 801fe3a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fe3e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fe46:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fe4a:	f824 c000 	strh.w	ip, [r4, r0]
 801fe4e:	e7af      	b.n	801fdb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe50:	f04f 0e00 	mov.w	lr, #0
 801fe54:	eba3 000e 	sub.w	r0, r3, lr
 801fe58:	2800      	cmp	r0, #0
 801fe5a:	f77f af43 	ble.w	801fce4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe5e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fe62:	140d      	asrs	r5, r1, #16
 801fe64:	1410      	asrs	r0, r2, #16
 801fe66:	fb06 5000 	mla	r0, r6, r0, r5
 801fe6a:	9d01      	ldr	r5, [sp, #4]
 801fe6c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fe70:	0e2e      	lsrs	r6, r5, #24
 801fe72:	2eff      	cmp	r6, #255	; 0xff
 801fe74:	d112      	bne.n	801fe9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fe76:	482c      	ldr	r0, [pc, #176]	; (801ff28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801fe78:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fe7c:	0968      	lsrs	r0, r5, #5
 801fe7e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fe82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe86:	4330      	orrs	r0, r6
 801fe88:	4328      	orrs	r0, r5
 801fe8a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801fe8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe90:	f10e 0e01 	add.w	lr, lr, #1
 801fe94:	4401      	add	r1, r0
 801fe96:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe98:	4402      	add	r2, r0
 801fe9a:	e7db      	b.n	801fe54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fe9c:	b2f0      	uxtb	r0, r6
 801fe9e:	2e00      	cmp	r6, #0
 801fea0:	d0f5      	beq.n	801fe8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fea2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fea6:	fa1f f980 	uxth.w	r9, r0
 801feaa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801feae:	43c0      	mvns	r0, r0
 801feb0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801feb4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801feb8:	fb16 f609 	smulbb	r6, r6, r9
 801febc:	b2c0      	uxtb	r0, r0
 801febe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fec2:	b2ed      	uxtb	r5, r5
 801fec4:	fb1a fa09 	smulbb	sl, sl, r9
 801fec8:	fb07 6700 	mla	r7, r7, r0, r6
 801fecc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fed0:	fb15 f509 	smulbb	r5, r5, r9
 801fed4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fed8:	b2bf      	uxth	r7, r7
 801feda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fede:	fa5f fc8c 	uxtb.w	ip, ip
 801fee2:	fb06 a600 	mla	r6, r6, r0, sl
 801fee6:	fb0c 5500 	mla	r5, ip, r0, r5
 801feea:	1c78      	adds	r0, r7, #1
 801feec:	b2b6      	uxth	r6, r6
 801feee:	b2ad      	uxth	r5, r5
 801fef0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fef4:	f105 0a01 	add.w	sl, r5, #1
 801fef8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fefc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ff00:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ff04:	ea4a 0707 	orr.w	r7, sl, r7
 801ff08:	f106 0a01 	add.w	sl, r6, #1
 801ff0c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ff10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ff14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ff18:	ea47 070a 	orr.w	r7, r7, sl
 801ff1c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ff20:	e7b5      	b.n	801fe8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff22:	b005      	add	sp, #20
 801ff24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff28:	fffff800 	.word	0xfffff800

0801ff2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff30:	b087      	sub	sp, #28
 801ff32:	468b      	mov	fp, r1
 801ff34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff38:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ff3a:	9203      	str	r2, [sp, #12]
 801ff3c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ff40:	6841      	ldr	r1, [r0, #4]
 801ff42:	9204      	str	r2, [sp, #16]
 801ff44:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801ff48:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ff4c:	fb01 2404 	mla	r4, r1, r4, r2
 801ff50:	6802      	ldr	r2, [r0, #0]
 801ff52:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ff56:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ff5a:	3201      	adds	r2, #1
 801ff5c:	f022 0201 	bic.w	r2, r2, #1
 801ff60:	9200      	str	r2, [sp, #0]
 801ff62:	f8d9 2000 	ldr.w	r2, [r9]
 801ff66:	9201      	str	r2, [sp, #4]
 801ff68:	f1bb 0f00 	cmp.w	fp, #0
 801ff6c:	dc03      	bgt.n	801ff76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ff6e:	9a03      	ldr	r2, [sp, #12]
 801ff70:	2a00      	cmp	r2, #0
 801ff72:	f340 816a 	ble.w	802024a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ff76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ff78:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ff7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ff80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ff82:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ff86:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	dd0e      	ble.n	801ffac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff8e:	1402      	asrs	r2, r0, #16
 801ff90:	d405      	bmi.n	801ff9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff92:	42ba      	cmp	r2, r7
 801ff94:	da03      	bge.n	801ff9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff96:	140a      	asrs	r2, r1, #16
 801ff98:	d401      	bmi.n	801ff9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff9a:	42b2      	cmp	r2, r6
 801ff9c:	db07      	blt.n	801ffae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ff9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ffa0:	3b01      	subs	r3, #1
 801ffa2:	3402      	adds	r4, #2
 801ffa4:	4410      	add	r0, r2
 801ffa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ffa8:	4411      	add	r1, r2
 801ffaa:	e7ee      	b.n	801ff8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ffac:	d017      	beq.n	801ffde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ffae:	1e5a      	subs	r2, r3, #1
 801ffb0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ffb2:	fb05 0502 	mla	r5, r5, r2, r0
 801ffb6:	142d      	asrs	r5, r5, #16
 801ffb8:	d409      	bmi.n	801ffce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ffba:	42bd      	cmp	r5, r7
 801ffbc:	da07      	bge.n	801ffce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ffbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ffc0:	fb05 1202 	mla	r2, r5, r2, r1
 801ffc4:	1412      	asrs	r2, r2, #16
 801ffc6:	d402      	bmi.n	801ffce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ffc8:	42b2      	cmp	r2, r6
 801ffca:	f2c0 80c8 	blt.w	802015e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ffce:	2700      	movs	r7, #0
 801ffd0:	19da      	adds	r2, r3, r7
 801ffd2:	2a00      	cmp	r2, #0
 801ffd4:	dc3e      	bgt.n	8020054 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ffd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffda:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ffde:	f1bb 0f00 	cmp.w	fp, #0
 801ffe2:	f340 8132 	ble.w	802024a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ffe6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fff0:	f1bb 0b01 	subs.w	fp, fp, #1
 801fff4:	eeb0 6a62 	vmov.f32	s12, s5
 801fff8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fffc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020000:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020004:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020008:	eeb0 6a43 	vmov.f32	s12, s6
 802000c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020010:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020014:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020018:	ee61 7a27 	vmul.f32	s15, s2, s15
 802001c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020020:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020024:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020028:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802002c:	ee12 2a90 	vmov	r2, s5
 8020030:	eef0 2a47 	vmov.f32	s5, s14
 8020034:	fb92 f3f3 	sdiv	r3, r2, r3
 8020038:	ee13 2a10 	vmov	r2, s6
 802003c:	9313      	str	r3, [sp, #76]	; 0x4c
 802003e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020040:	eeb0 3a67 	vmov.f32	s6, s15
 8020044:	fb92 f3f3 	sdiv	r3, r2, r3
 8020048:	9a03      	ldr	r2, [sp, #12]
 802004a:	9314      	str	r3, [sp, #80]	; 0x50
 802004c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802004e:	bf08      	it	eq
 8020050:	4613      	moveq	r3, r2
 8020052:	e789      	b.n	801ff68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020054:	1405      	asrs	r5, r0, #16
 8020056:	d436      	bmi.n	80200c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020058:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802005c:	42aa      	cmp	r2, r5
 802005e:	dd32      	ble.n	80200c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020060:	140e      	asrs	r6, r1, #16
 8020062:	d430      	bmi.n	80200c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020064:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020068:	42b2      	cmp	r2, r6
 802006a:	dd2c      	ble.n	80200c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802006c:	9a00      	ldr	r2, [sp, #0]
 802006e:	fb06 5502 	mla	r5, r6, r2, r5
 8020072:	9e01      	ldr	r6, [sp, #4]
 8020074:	086a      	lsrs	r2, r5, #1
 8020076:	5cb2      	ldrb	r2, [r6, r2]
 8020078:	07ee      	lsls	r6, r5, #31
 802007a:	bf54      	ite	pl
 802007c:	f002 020f 	andpl.w	r2, r2, #15
 8020080:	1112      	asrmi	r2, r2, #4
 8020082:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020086:	b2d2      	uxtb	r2, r2
 8020088:	b1ea      	cbz	r2, 80200c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802008a:	9d04      	ldr	r5, [sp, #16]
 802008c:	436a      	muls	r2, r5
 802008e:	1c55      	adds	r5, r2, #1
 8020090:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020094:	4d6e      	ldr	r5, [pc, #440]	; (8020250 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020096:	1212      	asrs	r2, r2, #8
 8020098:	682d      	ldr	r5, [r5, #0]
 802009a:	2aff      	cmp	r2, #255	; 0xff
 802009c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80200a0:	9605      	str	r6, [sp, #20]
 80200a2:	d116      	bne.n	80200d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80200a4:	f06f 0201 	mvn.w	r2, #1
 80200a8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80200ac:	fb02 fc07 	mul.w	ip, r2, r7
 80200b0:	096a      	lsrs	r2, r5, #5
 80200b2:	f026 0607 	bic.w	r6, r6, #7
 80200b6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80200ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80200be:	4316      	orrs	r6, r2
 80200c0:	432e      	orrs	r6, r5
 80200c2:	f824 600c 	strh.w	r6, [r4, ip]
 80200c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80200c8:	3f01      	subs	r7, #1
 80200ca:	4410      	add	r0, r2
 80200cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80200ce:	4411      	add	r1, r2
 80200d0:	e77e      	b.n	801ffd0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80200d2:	f06f 0601 	mvn.w	r6, #1
 80200d6:	fa1f fa82 	uxth.w	sl, r2
 80200da:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80200de:	43d2      	mvns	r2, r2
 80200e0:	437e      	muls	r6, r7
 80200e2:	b2ed      	uxtb	r5, r5
 80200e4:	fb1c fc0a 	smulbb	ip, ip, sl
 80200e8:	b2d2      	uxtb	r2, r2
 80200ea:	f834 8006 	ldrh.w	r8, [r4, r6]
 80200ee:	fb15 f50a 	smulbb	r5, r5, sl
 80200f2:	9602      	str	r6, [sp, #8]
 80200f4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80200f8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80200fc:	fb16 f60a 	smulbb	r6, r6, sl
 8020100:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020104:	fb0e ce02 	mla	lr, lr, r2, ip
 8020108:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802010c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020110:	fa1f fe8e 	uxth.w	lr, lr
 8020114:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020118:	fa5f f888 	uxtb.w	r8, r8
 802011c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020120:	fb08 5502 	mla	r5, r8, r2, r5
 8020124:	f10e 0201 	add.w	r2, lr, #1
 8020128:	fa1f fc8c 	uxth.w	ip, ip
 802012c:	b2ad      	uxth	r5, r5
 802012e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020132:	9a02      	ldr	r2, [sp, #8]
 8020134:	1c6e      	adds	r6, r5, #1
 8020136:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 802013a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802013e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020142:	ea46 0e0e 	orr.w	lr, r6, lr
 8020146:	f10c 0601 	add.w	r6, ip, #1
 802014a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802014e:	0976      	lsrs	r6, r6, #5
 8020150:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020154:	ea4e 0e06 	orr.w	lr, lr, r6
 8020158:	f824 e002 	strh.w	lr, [r4, r2]
 802015c:	e7b3      	b.n	80200c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802015e:	f04f 0800 	mov.w	r8, #0
 8020162:	eba3 0208 	sub.w	r2, r3, r8
 8020166:	2a00      	cmp	r2, #0
 8020168:	f77f af35 	ble.w	801ffd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802016c:	1402      	asrs	r2, r0, #16
 802016e:	9e00      	ldr	r6, [sp, #0]
 8020170:	140d      	asrs	r5, r1, #16
 8020172:	fb06 2505 	mla	r5, r6, r5, r2
 8020176:	9e01      	ldr	r6, [sp, #4]
 8020178:	086a      	lsrs	r2, r5, #1
 802017a:	07ed      	lsls	r5, r5, #31
 802017c:	5cb2      	ldrb	r2, [r6, r2]
 802017e:	bf54      	ite	pl
 8020180:	f002 020f 	andpl.w	r2, r2, #15
 8020184:	1112      	asrmi	r2, r2, #4
 8020186:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802018a:	b2d2      	uxtb	r2, r2
 802018c:	b1c2      	cbz	r2, 80201c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802018e:	9d04      	ldr	r5, [sp, #16]
 8020190:	436a      	muls	r2, r5
 8020192:	1c55      	adds	r5, r2, #1
 8020194:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020198:	4d2d      	ldr	r5, [pc, #180]	; (8020250 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802019a:	1212      	asrs	r2, r2, #8
 802019c:	682e      	ldr	r6, [r5, #0]
 802019e:	2aff      	cmp	r2, #255	; 0xff
 80201a0:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80201a4:	d113      	bne.n	80201ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80201a6:	0972      	lsrs	r2, r6, #5
 80201a8:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80201ac:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80201b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80201b4:	f025 0507 	bic.w	r5, r5, #7
 80201b8:	4315      	orrs	r5, r2
 80201ba:	4335      	orrs	r5, r6
 80201bc:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80201c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80201c2:	f108 0801 	add.w	r8, r8, #1
 80201c6:	4410      	add	r0, r2
 80201c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80201ca:	4411      	add	r1, r2
 80201cc:	e7c9      	b.n	8020162 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80201ce:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80201d2:	fa1f fa82 	uxth.w	sl, r2
 80201d6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80201da:	43d2      	mvns	r2, r2
 80201dc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80201e0:	fb17 f70a 	smulbb	r7, r7, sl
 80201e4:	b2d2      	uxtb	r2, r2
 80201e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80201ea:	b2f6      	uxtb	r6, r6
 80201ec:	b2ed      	uxtb	r5, r5
 80201ee:	fb0c 7c02 	mla	ip, ip, r2, r7
 80201f2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80201f6:	fb16 f60a 	smulbb	r6, r6, sl
 80201fa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80201fe:	fa1f fc8c 	uxth.w	ip, ip
 8020202:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020206:	fb15 f50a 	smulbb	r5, r5, sl
 802020a:	fa5f fe8e 	uxtb.w	lr, lr
 802020e:	fb0e 6602 	mla	r6, lr, r2, r6
 8020212:	fb07 5702 	mla	r7, r7, r2, r5
 8020216:	f10c 0201 	add.w	r2, ip, #1
 802021a:	b2b6      	uxth	r6, r6
 802021c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020220:	1c75      	adds	r5, r6, #1
 8020222:	b2bf      	uxth	r7, r7
 8020224:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020228:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802022c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020230:	ea45 0c0c 	orr.w	ip, r5, ip
 8020234:	1c7d      	adds	r5, r7, #1
 8020236:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802023a:	096d      	lsrs	r5, r5, #5
 802023c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020240:	ea4c 0c05 	orr.w	ip, ip, r5
 8020244:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8020248:	e7ba      	b.n	80201c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802024a:	b007      	add	sp, #28
 802024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020250:	2402ae74 	.word	0x2402ae74

08020254 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020258:	b087      	sub	sp, #28
 802025a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802025e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8020568 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020262:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020264:	9101      	str	r1, [sp, #4]
 8020266:	9205      	str	r2, [sp, #20]
 8020268:	6841      	ldr	r1, [r0, #4]
 802026a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802026e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020272:	fb01 2404 	mla	r4, r1, r4, r2
 8020276:	6802      	ldr	r2, [r0, #0]
 8020278:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802027c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020280:	3201      	adds	r2, #1
 8020282:	f022 0201 	bic.w	r2, r2, #1
 8020286:	9202      	str	r2, [sp, #8]
 8020288:	f8db 2000 	ldr.w	r2, [fp]
 802028c:	9203      	str	r2, [sp, #12]
 802028e:	9a01      	ldr	r2, [sp, #4]
 8020290:	2a00      	cmp	r2, #0
 8020292:	dc03      	bgt.n	802029c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020294:	9a05      	ldr	r2, [sp, #20]
 8020296:	2a00      	cmp	r2, #0
 8020298:	f340 8162 	ble.w	8020560 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802029c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802029e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80202a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80202a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202a8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80202ac:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	dd0e      	ble.n	80202d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80202b4:	1402      	asrs	r2, r0, #16
 80202b6:	d405      	bmi.n	80202c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202b8:	42ba      	cmp	r2, r7
 80202ba:	da03      	bge.n	80202c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202bc:	140a      	asrs	r2, r1, #16
 80202be:	d401      	bmi.n	80202c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80202c0:	42b2      	cmp	r2, r6
 80202c2:	db07      	blt.n	80202d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80202c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202c6:	3b01      	subs	r3, #1
 80202c8:	3402      	adds	r4, #2
 80202ca:	4410      	add	r0, r2
 80202cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80202ce:	4411      	add	r1, r2
 80202d0:	e7ee      	b.n	80202b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80202d2:	d017      	beq.n	8020304 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80202d4:	1e5a      	subs	r2, r3, #1
 80202d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80202d8:	fb05 0502 	mla	r5, r5, r2, r0
 80202dc:	142d      	asrs	r5, r5, #16
 80202de:	d409      	bmi.n	80202f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80202e0:	42bd      	cmp	r5, r7
 80202e2:	da07      	bge.n	80202f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80202e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80202e6:	fb05 1202 	mla	r2, r5, r2, r1
 80202ea:	1412      	asrs	r2, r2, #16
 80202ec:	d402      	bmi.n	80202f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80202ee:	42b2      	cmp	r2, r6
 80202f0:	f2c0 80c3 	blt.w	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80202f4:	2500      	movs	r5, #0
 80202f6:	195a      	adds	r2, r3, r5
 80202f8:	2a00      	cmp	r2, #0
 80202fa:	dc3f      	bgt.n	802037c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80202fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020300:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020304:	9b01      	ldr	r3, [sp, #4]
 8020306:	2b00      	cmp	r3, #0
 8020308:	f340 812a 	ble.w	8020560 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802030c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020312:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020316:	eeb0 6a62 	vmov.f32	s12, s5
 802031a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802031e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020322:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020326:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802032a:	eeb0 6a43 	vmov.f32	s12, s6
 802032e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020332:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020336:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802033a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802033e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020342:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020346:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802034a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802034e:	ee12 2a90 	vmov	r2, s5
 8020352:	eef0 2a47 	vmov.f32	s5, s14
 8020356:	fb92 f3f3 	sdiv	r3, r2, r3
 802035a:	ee13 2a10 	vmov	r2, s6
 802035e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020360:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020362:	eeb0 3a67 	vmov.f32	s6, s15
 8020366:	fb92 f3f3 	sdiv	r3, r2, r3
 802036a:	9314      	str	r3, [sp, #80]	; 0x50
 802036c:	9b01      	ldr	r3, [sp, #4]
 802036e:	9a05      	ldr	r2, [sp, #20]
 8020370:	3b01      	subs	r3, #1
 8020372:	9301      	str	r3, [sp, #4]
 8020374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020376:	bf08      	it	eq
 8020378:	4613      	moveq	r3, r2
 802037a:	e788      	b.n	802028e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802037c:	1406      	asrs	r6, r0, #16
 802037e:	d42c      	bmi.n	80203da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020380:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020384:	42b2      	cmp	r2, r6
 8020386:	dd28      	ble.n	80203da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020388:	140f      	asrs	r7, r1, #16
 802038a:	d426      	bmi.n	80203da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802038c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020390:	42ba      	cmp	r2, r7
 8020392:	dd22      	ble.n	80203da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020394:	9a02      	ldr	r2, [sp, #8]
 8020396:	fb07 6602 	mla	r6, r7, r2, r6
 802039a:	9f03      	ldr	r7, [sp, #12]
 802039c:	0872      	lsrs	r2, r6, #1
 802039e:	07f6      	lsls	r6, r6, #31
 80203a0:	5cba      	ldrb	r2, [r7, r2]
 80203a2:	bf54      	ite	pl
 80203a4:	f002 020f 	andpl.w	r2, r2, #15
 80203a8:	1112      	asrmi	r2, r2, #4
 80203aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80203ae:	b2d2      	uxtb	r2, r2
 80203b0:	2aff      	cmp	r2, #255	; 0xff
 80203b2:	d118      	bne.n	80203e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80203b4:	f06f 0601 	mvn.w	r6, #1
 80203b8:	f8d8 2000 	ldr.w	r2, [r8]
 80203bc:	fb06 f705 	mul.w	r7, r6, r5
 80203c0:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80203c4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80203c8:	0956      	lsrs	r6, r2, #5
 80203ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80203ce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80203d2:	ea4c 0606 	orr.w	r6, ip, r6
 80203d6:	4316      	orrs	r6, r2
 80203d8:	53e6      	strh	r6, [r4, r7]
 80203da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80203dc:	3d01      	subs	r5, #1
 80203de:	4410      	add	r0, r2
 80203e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80203e2:	4411      	add	r1, r2
 80203e4:	e787      	b.n	80202f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80203e6:	2a00      	cmp	r2, #0
 80203e8:	d0f7      	beq.n	80203da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203ea:	f06f 0601 	mvn.w	r6, #1
 80203ee:	f8d8 c000 	ldr.w	ip, [r8]
 80203f2:	fa1f f982 	uxth.w	r9, r2
 80203f6:	43d2      	mvns	r2, r2
 80203f8:	436e      	muls	r6, r5
 80203fa:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80203fe:	b2d2      	uxtb	r2, r2
 8020400:	f834 e006 	ldrh.w	lr, [r4, r6]
 8020404:	fb1a fa09 	smulbb	sl, sl, r9
 8020408:	9604      	str	r6, [sp, #16]
 802040a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802040e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020412:	fb16 f609 	smulbb	r6, r6, r9
 8020416:	fa5f fc8c 	uxtb.w	ip, ip
 802041a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802041e:	fb1c fc09 	smulbb	ip, ip, r9
 8020422:	fb07 6702 	mla	r7, r7, r2, r6
 8020426:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802042a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802042e:	b2bf      	uxth	r7, r7
 8020430:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020434:	fa5f fe8e 	uxtb.w	lr, lr
 8020438:	fb06 a602 	mla	r6, r6, r2, sl
 802043c:	fb0e cc02 	mla	ip, lr, r2, ip
 8020440:	1c7a      	adds	r2, r7, #1
 8020442:	b2b6      	uxth	r6, r6
 8020444:	fa1f fc8c 	uxth.w	ip, ip
 8020448:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802044c:	9a04      	ldr	r2, [sp, #16]
 802044e:	f10c 0a01 	add.w	sl, ip, #1
 8020452:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020456:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802045a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802045e:	ea4a 0707 	orr.w	r7, sl, r7
 8020462:	f106 0a01 	add.w	sl, r6, #1
 8020466:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802046a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802046e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020472:	ea47 070a 	orr.w	r7, r7, sl
 8020476:	52a7      	strh	r7, [r4, r2]
 8020478:	e7af      	b.n	80203da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802047a:	f04f 0e00 	mov.w	lr, #0
 802047e:	eba3 020e 	sub.w	r2, r3, lr
 8020482:	2a00      	cmp	r2, #0
 8020484:	f77f af3a 	ble.w	80202fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020488:	1402      	asrs	r2, r0, #16
 802048a:	9e02      	ldr	r6, [sp, #8]
 802048c:	140d      	asrs	r5, r1, #16
 802048e:	fb06 2505 	mla	r5, r6, r5, r2
 8020492:	9e03      	ldr	r6, [sp, #12]
 8020494:	086a      	lsrs	r2, r5, #1
 8020496:	07ed      	lsls	r5, r5, #31
 8020498:	5cb2      	ldrb	r2, [r6, r2]
 802049a:	bf54      	ite	pl
 802049c:	f002 020f 	andpl.w	r2, r2, #15
 80204a0:	1112      	asrmi	r2, r2, #4
 80204a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80204a6:	b2d2      	uxtb	r2, r2
 80204a8:	2aff      	cmp	r2, #255	; 0xff
 80204aa:	d115      	bne.n	80204d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80204ac:	f8d8 5000 	ldr.w	r5, [r8]
 80204b0:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80204b4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80204b8:	096a      	lsrs	r2, r5, #5
 80204ba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80204be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80204c2:	4332      	orrs	r2, r6
 80204c4:	432a      	orrs	r2, r5
 80204c6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80204ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80204cc:	f10e 0e01 	add.w	lr, lr, #1
 80204d0:	4410      	add	r0, r2
 80204d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80204d4:	4411      	add	r1, r2
 80204d6:	e7d2      	b.n	802047e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80204d8:	2a00      	cmp	r2, #0
 80204da:	d0f6      	beq.n	80204ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80204dc:	f8d8 7000 	ldr.w	r7, [r8]
 80204e0:	fa1f f982 	uxth.w	r9, r2
 80204e4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80204e8:	43d2      	mvns	r2, r2
 80204ea:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80204ee:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80204f2:	ea4f 262c 	mov.w	r6, ip, asr #8
 80204f6:	fb15 f509 	smulbb	r5, r5, r9
 80204fa:	b2d2      	uxtb	r2, r2
 80204fc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020500:	b2ff      	uxtb	r7, r7
 8020502:	fb1a fa09 	smulbb	sl, sl, r9
 8020506:	fb06 5602 	mla	r6, r6, r2, r5
 802050a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802050e:	fb17 f709 	smulbb	r7, r7, r9
 8020512:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020516:	b2b6      	uxth	r6, r6
 8020518:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802051c:	fa5f fc8c 	uxtb.w	ip, ip
 8020520:	fb05 a502 	mla	r5, r5, r2, sl
 8020524:	fb0c 7702 	mla	r7, ip, r2, r7
 8020528:	1c72      	adds	r2, r6, #1
 802052a:	b2ad      	uxth	r5, r5
 802052c:	b2bf      	uxth	r7, r7
 802052e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020532:	f107 0a01 	add.w	sl, r7, #1
 8020536:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802053a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802053e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020542:	ea4a 0606 	orr.w	r6, sl, r6
 8020546:	f105 0a01 	add.w	sl, r5, #1
 802054a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802054e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020552:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020556:	ea46 060a 	orr.w	r6, r6, sl
 802055a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802055e:	e7b4      	b.n	80204ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020560:	b007      	add	sp, #28
 8020562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020566:	bf00      	nop
 8020568:	2402ae74 	.word	0x2402ae74

0802056c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 802056c:	4770      	bx	lr

0802056e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 802056e:	4770      	bx	lr

08020570 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8020570:	4770      	bx	lr

08020572 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020572:	4770      	bx	lr

08020574 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020574:	4770      	bx	lr

08020576 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020576:	4770      	bx	lr

08020578 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020578:	4770      	bx	lr

0802057a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802057a:	4770      	bx	lr

0802057c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802057c:	4770      	bx	lr

0802057e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802057e:	4770      	bx	lr

08020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020580:	4770      	bx	lr

08020582 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020582:	4770      	bx	lr

08020584 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020584:	4770      	bx	lr

08020586 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020586:	4770      	bx	lr

08020588 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020588:	4770      	bx	lr

0802058a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802058a:	4770      	bx	lr

0802058c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802058c:	4770      	bx	lr

0802058e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802058e:	4770      	bx	lr

08020590 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020590:	4770      	bx	lr

08020592 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020592:	4770      	bx	lr

08020594 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020594:	4770      	bx	lr

08020596 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020596:	4770      	bx	lr

08020598 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020598:	4770      	bx	lr

0802059a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802059a:	4770      	bx	lr

0802059c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802059c:	4770      	bx	lr

0802059e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802059e:	4770      	bx	lr

080205a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80205a0:	4770      	bx	lr

080205a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80205a2:	4770      	bx	lr

080205a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80205a4:	4770      	bx	lr

080205a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80205a6:	4770      	bx	lr

080205a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80205a8:	4770      	bx	lr

080205aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80205aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205ae:	b088      	sub	sp, #32
 80205b0:	4606      	mov	r6, r0
 80205b2:	4688      	mov	r8, r1
 80205b4:	4691      	mov	r9, r2
 80205b6:	ac08      	add	r4, sp, #32
 80205b8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80205bc:	4620      	mov	r0, r4
 80205be:	f7fd fc63 	bl	801de88 <_ZNK8touchgfx6Bitmap7getDataEv>
 80205c2:	6833      	ldr	r3, [r6, #0]
 80205c4:	4605      	mov	r5, r0
 80205c6:	4620      	mov	r0, r4
 80205c8:	699f      	ldr	r7, [r3, #24]
 80205ca:	f7fd fb71 	bl	801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80205ce:	4682      	mov	sl, r0
 80205d0:	4620      	mov	r0, r4
 80205d2:	f7fd fba1 	bl	801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80205d6:	9500      	str	r5, [sp, #0]
 80205d8:	464b      	mov	r3, r9
 80205da:	4642      	mov	r2, r8
 80205dc:	4631      	mov	r1, r6
 80205de:	e9cd a001 	strd	sl, r0, [sp, #4]
 80205e2:	a806      	add	r0, sp, #24
 80205e4:	47b8      	blx	r7
 80205e6:	4628      	mov	r0, r5
 80205e8:	b008      	add	sp, #32
 80205ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080205f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80205f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80205f4:	2300      	movs	r3, #0
 80205f6:	9300      	str	r3, [sp, #0]
 80205f8:	4b3d      	ldr	r3, [pc, #244]	; (80206f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80205fa:	781b      	ldrb	r3, [r3, #0]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d137      	bne.n	8020670 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8020600:	4a3c      	ldr	r2, [pc, #240]	; (80206f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020602:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020606:	f8ad 2004 	strh.w	r2, [sp, #4]
 802060a:	2b00      	cmp	r3, #0
 802060c:	d132      	bne.n	8020674 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802060e:	4b3a      	ldr	r3, [pc, #232]	; (80206f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020614:	ac02      	add	r4, sp, #8
 8020616:	6808      	ldr	r0, [r1, #0]
 8020618:	f8ad 3006 	strh.w	r3, [sp, #6]
 802061c:	ab02      	add	r3, sp, #8
 802061e:	6849      	ldr	r1, [r1, #4]
 8020620:	4d36      	ldr	r5, [pc, #216]	; (80206fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8020622:	c303      	stmia	r3!, {r0, r1}
 8020624:	4669      	mov	r1, sp
 8020626:	4620      	mov	r0, r4
 8020628:	f7fa f840 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802062c:	4668      	mov	r0, sp
 802062e:	f7fa f815 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020632:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020636:	f8bd 2000 	ldrh.w	r2, [sp]
 802063a:	462f      	mov	r7, r5
 802063c:	6828      	ldr	r0, [r5, #0]
 802063e:	4413      	add	r3, r2
 8020640:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020644:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020648:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802064c:	4413      	add	r3, r2
 802064e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020652:	6803      	ldr	r3, [r0, #0]
 8020654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020656:	4798      	blx	r3
 8020658:	f010 0f01 	tst.w	r0, #1
 802065c:	d00c      	beq.n	8020678 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802065e:	6828      	ldr	r0, [r5, #0]
 8020660:	6803      	ldr	r3, [r0, #0]
 8020662:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020668:	4798      	blx	r3
 802066a:	b004      	add	sp, #16
 802066c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020670:	4a21      	ldr	r2, [pc, #132]	; (80206f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020672:	e7c6      	b.n	8020602 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020674:	4b1f      	ldr	r3, [pc, #124]	; (80206f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020676:	e7cb      	b.n	8020610 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020678:	6838      	ldr	r0, [r7, #0]
 802067a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802067e:	6803      	ldr	r3, [r0, #0]
 8020680:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8020684:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802068a:	4798      	blx	r3
 802068c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020690:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020694:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020698:	fb16 3602 	smlabb	r6, r6, r2, r3
 802069c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80206a0:	6838      	ldr	r0, [r7, #0]
 80206a2:	6803      	ldr	r3, [r0, #0]
 80206a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206a6:	4798      	blx	r3
 80206a8:	4a12      	ldr	r2, [pc, #72]	; (80206f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80206aa:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80206ae:	8813      	ldrh	r3, [r2, #0]
 80206b0:	4691      	mov	r9, r2
 80206b2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80206b6:	435d      	muls	r5, r3
 80206b8:	fb03 1404 	mla	r4, r3, r4, r1
 80206bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80206c0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80206c4:	6838      	ldr	r0, [r7, #0]
 80206c6:	42ac      	cmp	r4, r5
 80206c8:	6803      	ldr	r3, [r0, #0]
 80206ca:	d20e      	bcs.n	80206ea <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80206cc:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80206d0:	4632      	mov	r2, r6
 80206d2:	4643      	mov	r3, r8
 80206d4:	4621      	mov	r1, r4
 80206d6:	47d0      	blx	sl
 80206d8:	f8b9 3000 	ldrh.w	r3, [r9]
 80206dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80206e0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80206e4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80206e8:	e7ec      	b.n	80206c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80206ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206ec:	4798      	blx	r3
 80206ee:	e7bc      	b.n	802066a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80206f0:	2402ae64 	.word	0x2402ae64
 80206f4:	2402ae66 	.word	0x2402ae66
 80206f8:	2402ae68 	.word	0x2402ae68
 80206fc:	2402ae6c 	.word	0x2402ae6c

08020700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020704:	b08b      	sub	sp, #44	; 0x2c
 8020706:	460f      	mov	r7, r1
 8020708:	4616      	mov	r6, r2
 802070a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802070e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020712:	f1bb 0f00 	cmp.w	fp, #0
 8020716:	d04a      	beq.n	80207ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8020718:	6810      	ldr	r0, [r2, #0]
 802071a:	ad06      	add	r5, sp, #24
 802071c:	6851      	ldr	r1, [r2, #4]
 802071e:	c503      	stmia	r5!, {r0, r1}
 8020720:	6818      	ldr	r0, [r3, #0]
 8020722:	ad08      	add	r5, sp, #32
 8020724:	6859      	ldr	r1, [r3, #4]
 8020726:	c503      	stmia	r5!, {r0, r1}
 8020728:	a806      	add	r0, sp, #24
 802072a:	f7f9 ff97 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802072e:	4631      	mov	r1, r6
 8020730:	a808      	add	r0, sp, #32
 8020732:	f7f9 ffbb 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020736:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802073a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802073e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020742:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020746:	fb16 2103 	smlabb	r1, r6, r3, r2
 802074a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802074e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8020752:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020756:	4f5f      	ldr	r7, [pc, #380]	; (80208d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020758:	440a      	add	r2, r1
 802075a:	6838      	ldr	r0, [r7, #0]
 802075c:	46b9      	mov	r9, r7
 802075e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020762:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020766:	4413      	add	r3, r2
 8020768:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802076c:	6803      	ldr	r3, [r0, #0]
 802076e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020770:	4798      	blx	r3
 8020772:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020776:	d11d      	bne.n	80207b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020778:	b9fc      	cbnz	r4, 80207ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802077a:	f010 0f01 	tst.w	r0, #1
 802077e:	d01c      	beq.n	80207ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020780:	f8d9 0000 	ldr.w	r0, [r9]
 8020784:	2700      	movs	r7, #0
 8020786:	b2ad      	uxth	r5, r5
 8020788:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802078c:	6801      	ldr	r1, [r0, #0]
 802078e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020792:	f8cd b00c 	str.w	fp, [sp, #12]
 8020796:	9501      	str	r5, [sp, #4]
 8020798:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802079c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80207a0:	9402      	str	r4, [sp, #8]
 80207a2:	fa1f f488 	uxth.w	r4, r8
 80207a6:	9400      	str	r4, [sp, #0]
 80207a8:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80207aa:	4631      	mov	r1, r6
 80207ac:	47a0      	blx	r4
 80207ae:	b00b      	add	sp, #44	; 0x2c
 80207b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207b4:	f010 0f04 	tst.w	r0, #4
 80207b8:	e7e1      	b.n	802077e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80207ba:	f8d9 0000 	ldr.w	r0, [r9]
 80207be:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80207c2:	6803      	ldr	r3, [r0, #0]
 80207c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207c6:	4798      	blx	r3
 80207c8:	4b43      	ldr	r3, [pc, #268]	; (80208d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80207ca:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80207ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80207d2:	881a      	ldrh	r2, [r3, #0]
 80207d4:	469a      	mov	sl, r3
 80207d6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80207da:	fb05 f502 	mul.w	r5, r5, r2
 80207de:	fb02 1404 	mla	r4, r2, r4, r1
 80207e2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80207e6:	d059      	beq.n	802089c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80207e8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80207ec:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80207f0:	fa1f f28b 	uxth.w	r2, fp
 80207f4:	469e      	mov	lr, r3
 80207f6:	fa1f f989 	uxth.w	r9, r9
 80207fa:	42ac      	cmp	r4, r5
 80207fc:	d264      	bcs.n	80208c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80207fe:	eb04 0a07 	add.w	sl, r4, r7
 8020802:	4554      	cmp	r4, sl
 8020804:	d23d      	bcs.n	8020882 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020806:	8821      	ldrh	r1, [r4, #0]
 8020808:	f836 3b02 	ldrh.w	r3, [r6], #2
 802080c:	1208      	asrs	r0, r1, #8
 802080e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020812:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020816:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802081a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802081e:	00c9      	lsls	r1, r1, #3
 8020820:	fb10 f009 	smulbb	r0, r0, r9
 8020824:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020828:	b2c9      	uxtb	r1, r1
 802082a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802082e:	10d8      	asrs	r0, r3, #3
 8020830:	fb1b fb09 	smulbb	fp, fp, r9
 8020834:	00db      	lsls	r3, r3, #3
 8020836:	fa1f fc8c 	uxth.w	ip, ip
 802083a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802083e:	fb11 f109 	smulbb	r1, r1, r9
 8020842:	b2db      	uxtb	r3, r3
 8020844:	fb00 b002 	mla	r0, r0, r2, fp
 8020848:	f10c 0b01 	add.w	fp, ip, #1
 802084c:	fb03 1302 	mla	r3, r3, r2, r1
 8020850:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020854:	b29b      	uxth	r3, r3
 8020856:	b280      	uxth	r0, r0
 8020858:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 802085c:	f103 0c01 	add.w	ip, r3, #1
 8020860:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020864:	1c43      	adds	r3, r0, #1
 8020866:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802086a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802086e:	0940      	lsrs	r0, r0, #5
 8020870:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020874:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020878:	ea4c 0c00 	orr.w	ip, ip, r0
 802087c:	f824 cb02 	strh.w	ip, [r4], #2
 8020880:	e7bf      	b.n	8020802 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8020882:	f8be 3000 	ldrh.w	r3, [lr]
 8020886:	eba3 0308 	sub.w	r3, r3, r8
 802088a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802088e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020892:	eba3 0308 	sub.w	r3, r3, r8
 8020896:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802089a:	e7ae      	b.n	80207fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 802089c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80208a0:	f8d9 0000 	ldr.w	r0, [r9]
 80208a4:	42ac      	cmp	r4, r5
 80208a6:	6803      	ldr	r3, [r0, #0]
 80208a8:	d20e      	bcs.n	80208c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80208aa:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80208ae:	4632      	mov	r2, r6
 80208b0:	463b      	mov	r3, r7
 80208b2:	4621      	mov	r1, r4
 80208b4:	47c0      	blx	r8
 80208b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80208ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80208be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80208c2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80208c6:	e7eb      	b.n	80208a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80208c8:	4b02      	ldr	r3, [pc, #8]	; (80208d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80208ca:	6818      	ldr	r0, [r3, #0]
 80208cc:	6803      	ldr	r3, [r0, #0]
 80208ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208d0:	4798      	blx	r3
 80208d2:	e76c      	b.n	80207ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80208d4:	2402ae6c 	.word	0x2402ae6c
 80208d8:	2402ae66 	.word	0x2402ae66

080208dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 80208dc:	b510      	push	{r4, lr}
 80208de:	4604      	mov	r4, r0
 80208e0:	2104      	movs	r1, #4
 80208e2:	f00a fe2c 	bl	802b53e <_ZdlPvj>
 80208e6:	4620      	mov	r0, r4
 80208e8:	bd10      	pop	{r4, pc}

080208ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 80208ea:	b510      	push	{r4, lr}
 80208ec:	4604      	mov	r4, r0
 80208ee:	2104      	movs	r1, #4
 80208f0:	f00a fe25 	bl	802b53e <_ZdlPvj>
 80208f4:	4620      	mov	r0, r4
 80208f6:	bd10      	pop	{r4, pc}

080208f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 80208f8:	b510      	push	{r4, lr}
 80208fa:	4604      	mov	r4, r0
 80208fc:	f640 0144 	movw	r1, #2116	; 0x844
 8020900:	f00a fe1d 	bl	802b53e <_ZdlPvj>
 8020904:	4620      	mov	r0, r4
 8020906:	bd10      	pop	{r4, pc}

08020908 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020908:	b510      	push	{r4, lr}
 802090a:	4604      	mov	r4, r0
 802090c:	2104      	movs	r1, #4
 802090e:	f00a fe16 	bl	802b53e <_ZdlPvj>
 8020912:	4620      	mov	r0, r4
 8020914:	bd10      	pop	{r4, pc}

08020916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020916:	b510      	push	{r4, lr}
 8020918:	4604      	mov	r4, r0
 802091a:	2104      	movs	r1, #4
 802091c:	f00a fe0f 	bl	802b53e <_ZdlPvj>
 8020920:	4620      	mov	r0, r4
 8020922:	bd10      	pop	{r4, pc}

08020924 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020924:	b510      	push	{r4, lr}
 8020926:	4604      	mov	r4, r0
 8020928:	2104      	movs	r1, #4
 802092a:	f00a fe08 	bl	802b53e <_ZdlPvj>
 802092e:	4620      	mov	r0, r4
 8020930:	bd10      	pop	{r4, pc}

08020932 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020932:	b510      	push	{r4, lr}
 8020934:	4604      	mov	r4, r0
 8020936:	2104      	movs	r1, #4
 8020938:	f00a fe01 	bl	802b53e <_ZdlPvj>
 802093c:	4620      	mov	r0, r4
 802093e:	bd10      	pop	{r4, pc}

08020940 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020940:	b510      	push	{r4, lr}
 8020942:	4604      	mov	r4, r0
 8020944:	2104      	movs	r1, #4
 8020946:	f00a fdfa 	bl	802b53e <_ZdlPvj>
 802094a:	4620      	mov	r0, r4
 802094c:	bd10      	pop	{r4, pc}

0802094e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802094e:	b510      	push	{r4, lr}
 8020950:	4604      	mov	r4, r0
 8020952:	2104      	movs	r1, #4
 8020954:	f00a fdf3 	bl	802b53e <_ZdlPvj>
 8020958:	4620      	mov	r0, r4
 802095a:	bd10      	pop	{r4, pc}

0802095c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802095c:	b510      	push	{r4, lr}
 802095e:	4604      	mov	r4, r0
 8020960:	2104      	movs	r1, #4
 8020962:	f00a fdec 	bl	802b53e <_ZdlPvj>
 8020966:	4620      	mov	r0, r4
 8020968:	bd10      	pop	{r4, pc}

0802096a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802096a:	b510      	push	{r4, lr}
 802096c:	4604      	mov	r4, r0
 802096e:	2104      	movs	r1, #4
 8020970:	f00a fde5 	bl	802b53e <_ZdlPvj>
 8020974:	4620      	mov	r0, r4
 8020976:	bd10      	pop	{r4, pc}

08020978 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020978:	b510      	push	{r4, lr}
 802097a:	4604      	mov	r4, r0
 802097c:	2104      	movs	r1, #4
 802097e:	f00a fdde 	bl	802b53e <_ZdlPvj>
 8020982:	4620      	mov	r0, r4
 8020984:	bd10      	pop	{r4, pc}

08020986 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020986:	b510      	push	{r4, lr}
 8020988:	4604      	mov	r4, r0
 802098a:	2104      	movs	r1, #4
 802098c:	f00a fdd7 	bl	802b53e <_ZdlPvj>
 8020990:	4620      	mov	r0, r4
 8020992:	bd10      	pop	{r4, pc}

08020994 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020994:	b510      	push	{r4, lr}
 8020996:	4604      	mov	r4, r0
 8020998:	2104      	movs	r1, #4
 802099a:	f00a fdd0 	bl	802b53e <_ZdlPvj>
 802099e:	4620      	mov	r0, r4
 80209a0:	bd10      	pop	{r4, pc}

080209a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80209a2:	b510      	push	{r4, lr}
 80209a4:	4604      	mov	r4, r0
 80209a6:	2104      	movs	r1, #4
 80209a8:	f00a fdc9 	bl	802b53e <_ZdlPvj>
 80209ac:	4620      	mov	r0, r4
 80209ae:	bd10      	pop	{r4, pc}

080209b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209b0:	b510      	push	{r4, lr}
 80209b2:	4604      	mov	r4, r0
 80209b4:	2104      	movs	r1, #4
 80209b6:	f00a fdc2 	bl	802b53e <_ZdlPvj>
 80209ba:	4620      	mov	r0, r4
 80209bc:	bd10      	pop	{r4, pc}

080209be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80209be:	b510      	push	{r4, lr}
 80209c0:	4604      	mov	r4, r0
 80209c2:	2104      	movs	r1, #4
 80209c4:	f00a fdbb 	bl	802b53e <_ZdlPvj>
 80209c8:	4620      	mov	r0, r4
 80209ca:	bd10      	pop	{r4, pc}

080209cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80209cc:	b510      	push	{r4, lr}
 80209ce:	4604      	mov	r4, r0
 80209d0:	2104      	movs	r1, #4
 80209d2:	f00a fdb4 	bl	802b53e <_ZdlPvj>
 80209d6:	4620      	mov	r0, r4
 80209d8:	bd10      	pop	{r4, pc}

080209da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80209da:	b510      	push	{r4, lr}
 80209dc:	4604      	mov	r4, r0
 80209de:	2104      	movs	r1, #4
 80209e0:	f00a fdad 	bl	802b53e <_ZdlPvj>
 80209e4:	4620      	mov	r0, r4
 80209e6:	bd10      	pop	{r4, pc}

080209e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80209e8:	b510      	push	{r4, lr}
 80209ea:	4604      	mov	r4, r0
 80209ec:	2104      	movs	r1, #4
 80209ee:	f00a fda6 	bl	802b53e <_ZdlPvj>
 80209f2:	4620      	mov	r0, r4
 80209f4:	bd10      	pop	{r4, pc}

080209f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80209f6:	b510      	push	{r4, lr}
 80209f8:	4604      	mov	r4, r0
 80209fa:	2104      	movs	r1, #4
 80209fc:	f00a fd9f 	bl	802b53e <_ZdlPvj>
 8020a00:	4620      	mov	r0, r4
 8020a02:	bd10      	pop	{r4, pc}

08020a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a04:	b510      	push	{r4, lr}
 8020a06:	4604      	mov	r4, r0
 8020a08:	2104      	movs	r1, #4
 8020a0a:	f00a fd98 	bl	802b53e <_ZdlPvj>
 8020a0e:	4620      	mov	r0, r4
 8020a10:	bd10      	pop	{r4, pc}

08020a12 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a12:	b510      	push	{r4, lr}
 8020a14:	4604      	mov	r4, r0
 8020a16:	2104      	movs	r1, #4
 8020a18:	f00a fd91 	bl	802b53e <_ZdlPvj>
 8020a1c:	4620      	mov	r0, r4
 8020a1e:	bd10      	pop	{r4, pc}

08020a20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020a20:	b510      	push	{r4, lr}
 8020a22:	4604      	mov	r4, r0
 8020a24:	2104      	movs	r1, #4
 8020a26:	f00a fd8a 	bl	802b53e <_ZdlPvj>
 8020a2a:	4620      	mov	r0, r4
 8020a2c:	bd10      	pop	{r4, pc}

08020a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a2e:	b510      	push	{r4, lr}
 8020a30:	4604      	mov	r4, r0
 8020a32:	2104      	movs	r1, #4
 8020a34:	f00a fd83 	bl	802b53e <_ZdlPvj>
 8020a38:	4620      	mov	r0, r4
 8020a3a:	bd10      	pop	{r4, pc}

08020a3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a3c:	b510      	push	{r4, lr}
 8020a3e:	4604      	mov	r4, r0
 8020a40:	2104      	movs	r1, #4
 8020a42:	f00a fd7c 	bl	802b53e <_ZdlPvj>
 8020a46:	4620      	mov	r0, r4
 8020a48:	bd10      	pop	{r4, pc}

08020a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a4a:	b510      	push	{r4, lr}
 8020a4c:	4604      	mov	r4, r0
 8020a4e:	2104      	movs	r1, #4
 8020a50:	f00a fd75 	bl	802b53e <_ZdlPvj>
 8020a54:	4620      	mov	r0, r4
 8020a56:	bd10      	pop	{r4, pc}

08020a58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020a58:	b510      	push	{r4, lr}
 8020a5a:	4604      	mov	r4, r0
 8020a5c:	2104      	movs	r1, #4
 8020a5e:	f00a fd6e 	bl	802b53e <_ZdlPvj>
 8020a62:	4620      	mov	r0, r4
 8020a64:	bd10      	pop	{r4, pc}

08020a66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020a66:	b510      	push	{r4, lr}
 8020a68:	4604      	mov	r4, r0
 8020a6a:	2104      	movs	r1, #4
 8020a6c:	f00a fd67 	bl	802b53e <_ZdlPvj>
 8020a70:	4620      	mov	r0, r4
 8020a72:	bd10      	pop	{r4, pc}

08020a74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020a74:	b510      	push	{r4, lr}
 8020a76:	4604      	mov	r4, r0
 8020a78:	2104      	movs	r1, #4
 8020a7a:	f00a fd60 	bl	802b53e <_ZdlPvj>
 8020a7e:	4620      	mov	r0, r4
 8020a80:	bd10      	pop	{r4, pc}

08020a82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020a82:	b510      	push	{r4, lr}
 8020a84:	4604      	mov	r4, r0
 8020a86:	2104      	movs	r1, #4
 8020a88:	f00a fd59 	bl	802b53e <_ZdlPvj>
 8020a8c:	4620      	mov	r0, r4
 8020a8e:	bd10      	pop	{r4, pc}

08020a90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8020a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a94:	b08f      	sub	sp, #60	; 0x3c
 8020a96:	461c      	mov	r4, r3
 8020a98:	9205      	str	r2, [sp, #20]
 8020a9a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020a9e:	9100      	str	r1, [sp, #0]
 8020aa0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020aa2:	9201      	str	r2, [sp, #4]
 8020aa4:	2a00      	cmp	r2, #0
 8020aa6:	f000 8116 	beq.w	8020cd6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 8020aaa:	6820      	ldr	r0, [r4, #0]
 8020aac:	aa0a      	add	r2, sp, #40	; 0x28
 8020aae:	6861      	ldr	r1, [r4, #4]
 8020ab0:	c203      	stmia	r2!, {r0, r1}
 8020ab2:	6818      	ldr	r0, [r3, #0]
 8020ab4:	aa0c      	add	r2, sp, #48	; 0x30
 8020ab6:	6859      	ldr	r1, [r3, #4]
 8020ab8:	c203      	stmia	r2!, {r0, r1}
 8020aba:	a80a      	add	r0, sp, #40	; 0x28
 8020abc:	f7f9 fdce 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ac0:	4621      	mov	r1, r4
 8020ac2:	a80c      	add	r0, sp, #48	; 0x30
 8020ac4:	f7f9 fdf2 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ac8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020acc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8020ad0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020ad4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8020ad8:	bfdb      	ittet	le
 8020ada:	b2b3      	uxthle	r3, r6
 8020adc:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8020ae0:	2301      	movgt	r3, #1
 8020ae2:	fb92 f3f3 	sdivle	r3, r2, r3
 8020ae6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020aea:	441d      	add	r5, r3
 8020aec:	fb92 f1f3 	sdiv	r1, r2, r3
 8020af0:	fa1f fc81 	uxth.w	ip, r1
 8020af4:	3d01      	subs	r5, #1
 8020af6:	fb0c 2413 	mls	r4, ip, r3, r2
 8020afa:	4661      	mov	r1, ip
 8020afc:	fb14 f406 	smulbb	r4, r4, r6
 8020b00:	4404      	add	r4, r0
 8020b02:	fb95 f5f3 	sdiv	r5, r5, r3
 8020b06:	b2a4      	uxth	r4, r4
 8020b08:	b131      	cbz	r1, 8020b18 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8020b0a:	9b05      	ldr	r3, [sp, #20]
 8020b0c:	9900      	ldr	r1, [sp, #0]
 8020b0e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020b12:	ba1b      	rev	r3, r3
 8020b14:	4419      	add	r1, r3
 8020b16:	9100      	str	r1, [sp, #0]
 8020b18:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020b1c:	b2ad      	uxth	r5, r5
 8020b1e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020b22:	4418      	add	r0, r3
 8020b24:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020b28:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8020b2c:	00ad      	lsls	r5, r5, #2
 8020b2e:	441a      	add	r2, r3
 8020b30:	4b6a      	ldr	r3, [pc, #424]	; (8020cdc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8020b32:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8020b36:	6818      	ldr	r0, [r3, #0]
 8020b38:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8020b3c:	6803      	ldr	r3, [r0, #0]
 8020b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b40:	4798      	blx	r3
 8020b42:	4967      	ldr	r1, [pc, #412]	; (8020ce0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8020b44:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020b48:	2c00      	cmp	r4, #0
 8020b4a:	880b      	ldrh	r3, [r1, #0]
 8020b4c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020b50:	bf0c      	ite	eq
 8020b52:	46c6      	moveq	lr, r8
 8020b54:	f04f 0e00 	movne.w	lr, #0
 8020b58:	9109      	str	r1, [sp, #36]	; 0x24
 8020b5a:	fb03 c202 	mla	r2, r3, r2, ip
 8020b5e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020b62:	4373      	muls	r3, r6
 8020b64:	fa1f fe8e 	uxth.w	lr, lr
 8020b68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020b6c:	9103      	str	r1, [sp, #12]
 8020b6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020b72:	9306      	str	r3, [sp, #24]
 8020b74:	1d2b      	adds	r3, r5, #4
 8020b76:	9307      	str	r3, [sp, #28]
 8020b78:	9b01      	ldr	r3, [sp, #4]
 8020b7a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8020b7e:	2300      	movs	r3, #0
 8020b80:	b292      	uxth	r2, r2
 8020b82:	9302      	str	r3, [sp, #8]
 8020b84:	9204      	str	r2, [sp, #16]
 8020b86:	9a06      	ldr	r2, [sp, #24]
 8020b88:	4282      	cmp	r2, r0
 8020b8a:	f240 809f 	bls.w	8020ccc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 8020b8e:	b963      	cbnz	r3, 8020baa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8020b90:	9b00      	ldr	r3, [sp, #0]
 8020b92:	781a      	ldrb	r2, [r3, #0]
 8020b94:	0993      	lsrs	r3, r2, #6
 8020b96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8020b9a:	9202      	str	r2, [sp, #8]
 8020b9c:	1e5a      	subs	r2, r3, #1
 8020b9e:	2a02      	cmp	r2, #2
 8020ba0:	d815      	bhi.n	8020bce <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8020ba2:	9a00      	ldr	r2, [sp, #0]
 8020ba4:	b29b      	uxth	r3, r3
 8020ba6:	3201      	adds	r2, #1
 8020ba8:	9200      	str	r2, [sp, #0]
 8020baa:	b1b4      	cbz	r4, 8020bda <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8020bac:	429c      	cmp	r4, r3
 8020bae:	bf91      	iteee	ls
 8020bb0:	1b1c      	subls	r4, r3, r4
 8020bb2:	1ae4      	subhi	r4, r4, r3
 8020bb4:	4671      	movhi	r1, lr
 8020bb6:	f04f 0a00 	movhi.w	sl, #0
 8020bba:	bf9b      	ittet	ls
 8020bbc:	fa1f fa84 	uxthls.w	sl, r4
 8020bc0:	2400      	movls	r4, #0
 8020bc2:	b2a4      	uxthhi	r4, r4
 8020bc4:	fa1f f188 	uxthls.w	r1, r8
 8020bc8:	4653      	mov	r3, sl
 8020bca:	468e      	mov	lr, r1
 8020bcc:	e7db      	b.n	8020b86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 8020bce:	9a00      	ldr	r2, [sp, #0]
 8020bd0:	9b00      	ldr	r3, [sp, #0]
 8020bd2:	3202      	adds	r2, #2
 8020bd4:	785b      	ldrb	r3, [r3, #1]
 8020bd6:	9200      	str	r2, [sp, #0]
 8020bd8:	e7e7      	b.n	8020baa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8020bda:	2202      	movs	r2, #2
 8020bdc:	9907      	ldr	r1, [sp, #28]
 8020bde:	4573      	cmp	r3, lr
 8020be0:	4615      	mov	r5, r2
 8020be2:	9a02      	ldr	r2, [sp, #8]
 8020be4:	bf24      	itt	cs
 8020be6:	eba3 0a0e 	subcs.w	sl, r3, lr
 8020bea:	46f1      	movcs	r9, lr
 8020bec:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020bf0:	9905      	ldr	r1, [sp, #20]
 8020bf2:	bf34      	ite	cc
 8020bf4:	4699      	movcc	r9, r3
 8020bf6:	fa1f fa8a 	uxthcs.w	sl, sl
 8020bfa:	f831 c002 	ldrh.w	ip, [r1, r2]
 8020bfe:	bf38      	it	cc
 8020c00:	ebae 0103 	subcc.w	r1, lr, r3
 8020c04:	9a01      	ldr	r2, [sp, #4]
 8020c06:	bf2e      	itee	cs
 8020c08:	4621      	movcs	r1, r4
 8020c0a:	b289      	uxthcc	r1, r1
 8020c0c:	46a2      	movcc	sl, r4
 8020c0e:	2aff      	cmp	r2, #255	; 0xff
 8020c10:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020c14:	d105      	bne.n	8020c22 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 8020c16:	4481      	add	r9, r0
 8020c18:	4581      	cmp	r9, r0
 8020c1a:	d045      	beq.n	8020ca8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8020c1c:	f820 cb02 	strh.w	ip, [r0], #2
 8020c20:	e7fa      	b.n	8020c18 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 8020c22:	ea4f 222c 	mov.w	r2, ip, asr #8
 8020c26:	9d03      	ldr	r5, [sp, #12]
 8020c28:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8020c2c:	4481      	add	r9, r0
 8020c2e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020c32:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020c36:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020c3a:	fa5f fc8c 	uxtb.w	ip, ip
 8020c3e:	436a      	muls	r2, r5
 8020c40:	fb0b fb05 	mul.w	fp, fp, r5
 8020c44:	fb0c fc05 	mul.w	ip, ip, r5
 8020c48:	9208      	str	r2, [sp, #32]
 8020c4a:	4581      	cmp	r9, r0
 8020c4c:	d02c      	beq.n	8020ca8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8020c4e:	8802      	ldrh	r2, [r0, #0]
 8020c50:	9d04      	ldr	r5, [sp, #16]
 8020c52:	1216      	asrs	r6, r2, #8
 8020c54:	9f04      	ldr	r7, [sp, #16]
 8020c56:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020c5a:	fb16 f605 	smulbb	r6, r6, r5
 8020c5e:	9d08      	ldr	r5, [sp, #32]
 8020c60:	442e      	add	r6, r5
 8020c62:	10d5      	asrs	r5, r2, #3
 8020c64:	00d2      	lsls	r2, r2, #3
 8020c66:	b2b6      	uxth	r6, r6
 8020c68:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020c6c:	b2d2      	uxtb	r2, r2
 8020c6e:	fb15 f507 	smulbb	r5, r5, r7
 8020c72:	fb12 f207 	smulbb	r2, r2, r7
 8020c76:	1c77      	adds	r7, r6, #1
 8020c78:	445d      	add	r5, fp
 8020c7a:	4462      	add	r2, ip
 8020c7c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020c80:	b2ad      	uxth	r5, r5
 8020c82:	b292      	uxth	r2, r2
 8020c84:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020c88:	1c57      	adds	r7, r2, #1
 8020c8a:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8020c8e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020c92:	4316      	orrs	r6, r2
 8020c94:	1c6a      	adds	r2, r5, #1
 8020c96:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020c9a:	096d      	lsrs	r5, r5, #5
 8020c9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020ca0:	432e      	orrs	r6, r5
 8020ca2:	f820 6b02 	strh.w	r6, [r0], #2
 8020ca6:	e7d0      	b.n	8020c4a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8020ca8:	4573      	cmp	r3, lr
 8020caa:	d38d      	bcc.n	8020bc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8020cac:	fa1f f188 	uxth.w	r1, r8
 8020cb0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8020cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cb6:	1a64      	subs	r4, r4, r1
 8020cb8:	881b      	ldrh	r3, [r3, #0]
 8020cba:	b2a4      	uxth	r4, r4
 8020cbc:	eba3 0308 	sub.w	r3, r3, r8
 8020cc0:	2c00      	cmp	r4, #0
 8020cc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020cc6:	bf18      	it	ne
 8020cc8:	2100      	movne	r1, #0
 8020cca:	e77d      	b.n	8020bc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8020ccc:	4b03      	ldr	r3, [pc, #12]	; (8020cdc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8020cce:	6818      	ldr	r0, [r3, #0]
 8020cd0:	6803      	ldr	r3, [r0, #0]
 8020cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020cd4:	4798      	blx	r3
 8020cd6:	b00f      	add	sp, #60	; 0x3c
 8020cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cdc:	2402ae6c 	.word	0x2402ae6c
 8020ce0:	2402ae66 	.word	0x2402ae66

08020ce4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8020ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce8:	b09f      	sub	sp, #124	; 0x7c
 8020cea:	461d      	mov	r5, r3
 8020cec:	4604      	mov	r4, r0
 8020cee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cf0:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 8020cf4:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8020cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8020cfa:	2a00      	cmp	r2, #0
 8020cfc:	f000 81ed 	beq.w	80210da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 8020d00:	6828      	ldr	r0, [r5, #0]
 8020d02:	aa1a      	add	r2, sp, #104	; 0x68
 8020d04:	6869      	ldr	r1, [r5, #4]
 8020d06:	c203      	stmia	r2!, {r0, r1}
 8020d08:	6818      	ldr	r0, [r3, #0]
 8020d0a:	aa1c      	add	r2, sp, #112	; 0x70
 8020d0c:	6859      	ldr	r1, [r3, #4]
 8020d0e:	c203      	stmia	r2!, {r0, r1}
 8020d10:	a81a      	add	r0, sp, #104	; 0x68
 8020d12:	f7f9 fca3 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d16:	4629      	mov	r1, r5
 8020d18:	a81c      	add	r0, sp, #112	; 0x70
 8020d1a:	f7f9 fcc7 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d1e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8020d22:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 8020d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020d2a:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 8020d2e:	bfdb      	ittet	le
 8020d30:	b29a      	uxthle	r2, r3
 8020d32:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8020d36:	2201      	movgt	r2, #1
 8020d38:	fb91 f2f2 	sdivle	r2, r1, r2
 8020d3c:	9202      	str	r2, [sp, #8]
 8020d3e:	9802      	ldr	r0, [sp, #8]
 8020d40:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8020d44:	9902      	ldr	r1, [sp, #8]
 8020d46:	fb92 f0f0 	sdiv	r0, r2, r0
 8020d4a:	b280      	uxth	r0, r0
 8020d4c:	4488      	add	r8, r1
 8020d4e:	9010      	str	r0, [sp, #64]	; 0x40
 8020d50:	f108 38ff 	add.w	r8, r8, #4294967295
 8020d54:	9802      	ldr	r0, [sp, #8]
 8020d56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020d58:	fb05 2510 	mls	r5, r5, r0, r2
 8020d5c:	fb98 f8f1 	sdiv	r8, r8, r1
 8020d60:	fb15 f503 	smulbb	r5, r5, r3
 8020d64:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8020d68:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8020d6c:	f108 0801 	add.w	r8, r8, #1
 8020d70:	440d      	add	r5, r1
 8020d72:	4419      	add	r1, r3
 8020d74:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8020d78:	fa1f f888 	uxth.w	r8, r8
 8020d7c:	441a      	add	r2, r3
 8020d7e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8020d82:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8020d86:	b2ad      	uxth	r5, r5
 8020d88:	9304      	str	r3, [sp, #16]
 8020d8a:	4b94      	ldr	r3, [pc, #592]	; (8020fdc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8020d8c:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 8020d90:	6818      	ldr	r0, [r3, #0]
 8020d92:	6803      	ldr	r3, [r0, #0]
 8020d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020d96:	4798      	blx	r3
 8020d98:	4b91      	ldr	r3, [pc, #580]	; (8020fe0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8020d9a:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 8020d9e:	2d00      	cmp	r5, #0
 8020da0:	881a      	ldrh	r2, [r3, #0]
 8020da2:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8020da6:	fb02 f606 	mul.w	r6, r2, r6
 8020daa:	fb02 7101 	mla	r1, r2, r1, r7
 8020dae:	9318      	str	r3, [sp, #96]	; 0x60
 8020db0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020db4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8020db8:	f04f 0100 	mov.w	r1, #0
 8020dbc:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 8020dc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8020dc2:	4b88      	ldr	r3, [pc, #544]	; (8020fe4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 8020dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8020dc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020dc8:	eba3 0304 	sub.w	r3, r3, r4
 8020dcc:	910d      	str	r1, [sp, #52]	; 0x34
 8020dce:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8020dd2:	9319      	str	r3, [sp, #100]	; 0x64
 8020dd4:	f108 0204 	add.w	r2, r8, #4
 8020dd8:	9211      	str	r2, [sp, #68]	; 0x44
 8020dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ddc:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8020de0:	9215      	str	r2, [sp, #84]	; 0x54
 8020de2:	9a04      	ldr	r2, [sp, #16]
 8020de4:	bf18      	it	ne
 8020de6:	2200      	movne	r2, #0
 8020de8:	b292      	uxth	r2, r2
 8020dea:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020dee:	fa11 f383 	uxtah	r3, r1, r3
 8020df2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020df4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020df8:	3304      	adds	r3, #4
 8020dfa:	9306      	str	r3, [sp, #24]
 8020dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020dfe:	4283      	cmp	r3, r0
 8020e00:	f240 8166 	bls.w	80210d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 8020e04:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8020e08:	f04f 0a01 	mov.w	sl, #1
 8020e0c:	9902      	ldr	r1, [sp, #8]
 8020e0e:	9e06      	ldr	r6, [sp, #24]
 8020e10:	46d3      	mov	fp, sl
 8020e12:	4657      	mov	r7, sl
 8020e14:	7836      	ldrb	r6, [r6, #0]
 8020e16:	fbb5 f3f3 	udiv	r3, r5, r3
 8020e1a:	1acb      	subs	r3, r1, r3
 8020e1c:	9612      	str	r6, [sp, #72]	; 0x48
 8020e1e:	3601      	adds	r6, #1
 8020e20:	b29b      	uxth	r3, r3
 8020e22:	9605      	str	r6, [sp, #20]
 8020e24:	9316      	str	r3, [sp, #88]	; 0x58
 8020e26:	9b06      	ldr	r3, [sp, #24]
 8020e28:	7859      	ldrb	r1, [r3, #1]
 8020e2a:	789b      	ldrb	r3, [r3, #2]
 8020e2c:	021b      	lsls	r3, r3, #8
 8020e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020e32:	9906      	ldr	r1, [sp, #24]
 8020e34:	78c9      	ldrb	r1, [r1, #3]
 8020e36:	430b      	orrs	r3, r1
 8020e38:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020e3a:	4419      	add	r1, r3
 8020e3c:	1c4e      	adds	r6, r1, #1
 8020e3e:	7849      	ldrb	r1, [r1, #1]
 8020e40:	9603      	str	r6, [sp, #12]
 8020e42:	0209      	lsls	r1, r1, #8
 8020e44:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020e46:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8020e4a:	5cf3      	ldrb	r3, [r6, r3]
 8020e4c:	4319      	orrs	r1, r3
 8020e4e:	b28b      	uxth	r3, r1
 8020e50:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8020e54:	930c      	str	r3, [sp, #48]	; 0x30
 8020e56:	2300      	movs	r3, #0
 8020e58:	9307      	str	r3, [sp, #28]
 8020e5a:	469c      	mov	ip, r3
 8020e5c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8020e60:	930e      	str	r3, [sp, #56]	; 0x38
 8020e62:	2d00      	cmp	r5, #0
 8020e64:	d07e      	beq.n	8020f64 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 8020e66:	42af      	cmp	r7, r5
 8020e68:	d26e      	bcs.n	8020f48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 8020e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e6c:	1bed      	subs	r5, r5, r7
 8020e6e:	9201      	str	r2, [sp, #4]
 8020e70:	4283      	cmp	r3, r0
 8020e72:	b2ad      	uxth	r5, r5
 8020e74:	d802      	bhi.n	8020e7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 8020e76:	e073      	b.n	8020f60 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d15f      	bne.n	8020f3c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 8020e7c:	9b03      	ldr	r3, [sp, #12]
 8020e7e:	f1cb 0207 	rsb	r2, fp, #7
 8020e82:	785b      	ldrb	r3, [r3, #1]
 8020e84:	4093      	lsls	r3, r2
 8020e86:	005b      	lsls	r3, r3, #1
 8020e88:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8020e8c:	9b03      	ldr	r3, [sp, #12]
 8020e8e:	781b      	ldrb	r3, [r3, #0]
 8020e90:	fa43 f30b 	asr.w	r3, r3, fp
 8020e94:	b2db      	uxtb	r3, r3
 8020e96:	4313      	orrs	r3, r2
 8020e98:	f10b 0201 	add.w	r2, fp, #1
 8020e9c:	fa5f fb82 	uxtb.w	fp, r2
 8020ea0:	9a03      	ldr	r2, [sp, #12]
 8020ea2:	b29f      	uxth	r7, r3
 8020ea4:	f1bb 0f08 	cmp.w	fp, #8
 8020ea8:	bf13      	iteet	ne
 8020eaa:	3201      	addne	r2, #1
 8020eac:	3202      	addeq	r2, #2
 8020eae:	f04f 0b00 	moveq.w	fp, #0
 8020eb2:	9203      	strne	r2, [sp, #12]
 8020eb4:	bf08      	it	eq
 8020eb6:	9203      	streq	r2, [sp, #12]
 8020eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020eba:	42ba      	cmp	r2, r7
 8020ebc:	d309      	bcc.n	8020ed2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8020ebe:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8020ec2:	2301      	movs	r3, #1
 8020ec4:	9a05      	ldr	r2, [sp, #20]
 8020ec6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8020eca:	d30e      	bcc.n	8020eea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8020ecc:	469a      	mov	sl, r3
 8020ece:	2600      	movs	r6, #0
 8020ed0:	e035      	b.n	8020f3e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 8020ed2:	9b05      	ldr	r3, [sp, #20]
 8020ed4:	429f      	cmp	r7, r3
 8020ed6:	d318      	bcc.n	8020f0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 8020ed8:	eb04 030a 	add.w	r3, r4, sl
 8020edc:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 8020ee0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 8020ee4:	f10a 0301 	add.w	r3, sl, #1
 8020ee8:	b29b      	uxth	r3, r3
 8020eea:	9a05      	ldr	r2, [sp, #20]
 8020eec:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8020ef0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020ef4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020ef6:	7116      	strb	r6, [r2, #4]
 8020ef8:	f10a 0601 	add.w	r6, sl, #1
 8020efc:	80d1      	strh	r1, [r2, #6]
 8020efe:	7156      	strb	r6, [r2, #5]
 8020f00:	9a05      	ldr	r2, [sp, #20]
 8020f02:	3201      	adds	r2, #1
 8020f04:	b292      	uxth	r2, r2
 8020f06:	9205      	str	r2, [sp, #20]
 8020f08:	e7e0      	b.n	8020ecc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 8020f0a:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8020f0e:	463a      	mov	r2, r7
 8020f10:	795b      	ldrb	r3, [r3, #5]
 8020f12:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8020f16:	4426      	add	r6, r4
 8020f18:	9919      	ldr	r1, [sp, #100]	; 0x64
 8020f1a:	eb01 0c06 	add.w	ip, r1, r6
 8020f1e:	f1bc 0f00 	cmp.w	ip, #0
 8020f22:	dd07      	ble.n	8020f34 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 8020f24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020f28:	f892 c004 	ldrb.w	ip, [r2, #4]
 8020f2c:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8020f30:	88d2      	ldrh	r2, [r2, #6]
 8020f32:	e7f1      	b.n	8020f18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 8020f34:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8020f38:	b29b      	uxth	r3, r3
 8020f3a:	e7c3      	b.n	8020ec4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 8020f3c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020f3e:	970c      	str	r7, [sp, #48]	; 0x30
 8020f40:	46b4      	mov	ip, r6
 8020f42:	9a01      	ldr	r2, [sp, #4]
 8020f44:	461f      	mov	r7, r3
 8020f46:	e78c      	b.n	8020e62 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 8020f48:	1b7b      	subs	r3, r7, r5
 8020f4a:	eb0c 0605 	add.w	r6, ip, r5
 8020f4e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020f52:	b29b      	uxth	r3, r3
 8020f54:	b2b6      	uxth	r6, r6
 8020f56:	9201      	str	r2, [sp, #4]
 8020f58:	2500      	movs	r5, #0
 8020f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f5c:	4282      	cmp	r2, r0
 8020f5e:	d88b      	bhi.n	8020e78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 8020f60:	9a01      	ldr	r2, [sp, #4]
 8020f62:	e74b      	b.n	8020dfc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 8020f64:	4297      	cmp	r7, r2
 8020f66:	d332      	bcc.n	8020fce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 8020f68:	1abb      	subs	r3, r7, r2
 8020f6a:	9208      	str	r2, [sp, #32]
 8020f6c:	9501      	str	r5, [sp, #4]
 8020f6e:	b29b      	uxth	r3, r3
 8020f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020f72:	29ff      	cmp	r1, #255	; 0xff
 8020f74:	9908      	ldr	r1, [sp, #32]
 8020f76:	eb0c 0601 	add.w	r6, ip, r1
 8020f7a:	d135      	bne.n	8020fe8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 8020f7c:	f1a0 0e02 	sub.w	lr, r0, #2
 8020f80:	b2b6      	uxth	r6, r6
 8020f82:	45b4      	cmp	ip, r6
 8020f84:	f040 808c 	bne.w	80210a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 8020f88:	9908      	ldr	r1, [sp, #32]
 8020f8a:	4297      	cmp	r7, r2
 8020f8c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020f90:	d3e2      	bcc.n	8020f58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 8020f92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020f94:	9904      	ldr	r1, [sp, #16]
 8020f96:	8812      	ldrh	r2, [r2, #0]
 8020f98:	1a52      	subs	r2, r2, r1
 8020f9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020f9c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020fa0:	9a07      	ldr	r2, [sp, #28]
 8020fa2:	3201      	adds	r2, #1
 8020fa4:	428a      	cmp	r2, r1
 8020fa6:	9207      	str	r2, [sp, #28]
 8020fa8:	f040 8087 	bne.w	80210ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 8020fac:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8020fb0:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8020fb4:	9b04      	ldr	r3, [sp, #16]
 8020fb6:	1bed      	subs	r5, r5, r7
 8020fb8:	b2ad      	uxth	r5, r5
 8020fba:	2d00      	cmp	r5, #0
 8020fbc:	bf08      	it	eq
 8020fbe:	461a      	moveq	r2, r3
 8020fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020fc2:	bf18      	it	ne
 8020fc4:	2200      	movne	r2, #0
 8020fc6:	3301      	adds	r3, #1
 8020fc8:	b292      	uxth	r2, r2
 8020fca:	930d      	str	r3, [sp, #52]	; 0x34
 8020fcc:	e70d      	b.n	8020dea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 8020fce:	1bd1      	subs	r1, r2, r7
 8020fd0:	9708      	str	r7, [sp, #32]
 8020fd2:	b28b      	uxth	r3, r1
 8020fd4:	9301      	str	r3, [sp, #4]
 8020fd6:	462b      	mov	r3, r5
 8020fd8:	e7ca      	b.n	8020f70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 8020fda:	bf00      	nop
 8020fdc:	2402ae6c 	.word	0x2402ae6c
 8020fe0:	2402ae66 	.word	0x2402ae66
 8020fe4:	fffff7fb 	.word	0xfffff7fb
 8020fe8:	b2b6      	uxth	r6, r6
 8020fea:	900b      	str	r0, [sp, #44]	; 0x2c
 8020fec:	45b4      	cmp	ip, r6
 8020fee:	d0cb      	beq.n	8020f88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 8020ff0:	f10c 0101 	add.w	r1, ip, #1
 8020ff4:	44a4      	add	ip, r4
 8020ff6:	9117      	str	r1, [sp, #92]	; 0x5c
 8020ff8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 8020ffc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020ffe:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8021002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021004:	ea4f 2825 	mov.w	r8, r5, asr #8
 8021008:	f8b1 c000 	ldrh.w	ip, [r1]
 802100c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802100e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021012:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8021016:	ea4f 09ec 	mov.w	r9, ip, asr #3
 802101a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802101e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021022:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021026:	fb1e fe01 	smulbb	lr, lr, r1
 802102a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802102c:	fa5f fc8c 	uxtb.w	ip, ip
 8021030:	fb08 e801 	mla	r8, r8, r1, lr
 8021034:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8021038:	990e      	ldr	r1, [sp, #56]	; 0x38
 802103a:	00ed      	lsls	r5, r5, #3
 802103c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021040:	fa1f f888 	uxth.w	r8, r8
 8021044:	fb19 f901 	smulbb	r9, r9, r1
 8021048:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802104a:	b2ed      	uxtb	r5, r5
 802104c:	fb0e 9e01 	mla	lr, lr, r1, r9
 8021050:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021052:	fb1c fc01 	smulbb	ip, ip, r1
 8021056:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021058:	fa1f fe8e 	uxth.w	lr, lr
 802105c:	fb05 c501 	mla	r5, r5, r1, ip
 8021060:	f108 0c01 	add.w	ip, r8, #1
 8021064:	f10e 0901 	add.w	r9, lr, #1
 8021068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802106a:	b2ad      	uxth	r5, r5
 802106c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021070:	f105 0c01 	add.w	ip, r5, #1
 8021074:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 8021078:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802107c:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8021080:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021084:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021088:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802108c:	ea4c 0808 	orr.w	r8, ip, r8
 8021090:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 8021094:	ea48 0809 	orr.w	r8, r8, r9
 8021098:	f821 8b02 	strh.w	r8, [r1], #2
 802109c:	910b      	str	r1, [sp, #44]	; 0x2c
 802109e:	e7a5      	b.n	8020fec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 80210a0:	f10c 0801 	add.w	r8, ip, #1
 80210a4:	44a4      	add	ip, r4
 80210a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80210a8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 80210ac:	fa1f fc88 	uxth.w	ip, r8
 80210b0:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80210b4:	f82e 5f02 	strh.w	r5, [lr, #2]!
 80210b8:	e763      	b.n	8020f82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 80210ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80210be:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80210c2:	1aad      	subs	r5, r5, r2
 80210c4:	b2ad      	uxth	r5, r5
 80210c6:	2d00      	cmp	r5, #0
 80210c8:	bf18      	it	ne
 80210ca:	2200      	movne	r2, #0
 80210cc:	9201      	str	r2, [sp, #4]
 80210ce:	e744      	b.n	8020f5a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 80210d0:	4b03      	ldr	r3, [pc, #12]	; (80210e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 80210d2:	6818      	ldr	r0, [r3, #0]
 80210d4:	6803      	ldr	r3, [r0, #0]
 80210d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210d8:	4798      	blx	r3
 80210da:	b01f      	add	sp, #124	; 0x7c
 80210dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210e0:	2402ae6c 	.word	0x2402ae6c

080210e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80210e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210e8:	b08f      	sub	sp, #60	; 0x3c
 80210ea:	461c      	mov	r4, r3
 80210ec:	460f      	mov	r7, r1
 80210ee:	9203      	str	r2, [sp, #12]
 80210f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80210f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80210f6:	9202      	str	r2, [sp, #8]
 80210f8:	2a00      	cmp	r2, #0
 80210fa:	f000 8128 	beq.w	802134e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80210fe:	6820      	ldr	r0, [r4, #0]
 8021100:	aa0a      	add	r2, sp, #40	; 0x28
 8021102:	6861      	ldr	r1, [r4, #4]
 8021104:	c203      	stmia	r2!, {r0, r1}
 8021106:	6818      	ldr	r0, [r3, #0]
 8021108:	aa0c      	add	r2, sp, #48	; 0x30
 802110a:	6859      	ldr	r1, [r3, #4]
 802110c:	c203      	stmia	r2!, {r0, r1}
 802110e:	a80a      	add	r0, sp, #40	; 0x28
 8021110:	f7f9 faa4 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021114:	4621      	mov	r1, r4
 8021116:	a80c      	add	r0, sp, #48	; 0x30
 8021118:	f7f9 fac8 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802111c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021120:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8021124:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021128:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 802112c:	bfdb      	ittet	le
 802112e:	b2b3      	uxthle	r3, r6
 8021130:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8021134:	2301      	movgt	r3, #1
 8021136:	fb92 f3f3 	sdivle	r3, r2, r3
 802113a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802113e:	441d      	add	r5, r3
 8021140:	fb92 f1f3 	sdiv	r1, r2, r3
 8021144:	fa1f fc81 	uxth.w	ip, r1
 8021148:	3d01      	subs	r5, #1
 802114a:	fb0c 2413 	mls	r4, ip, r3, r2
 802114e:	4661      	mov	r1, ip
 8021150:	fb14 f406 	smulbb	r4, r4, r6
 8021154:	4404      	add	r4, r0
 8021156:	fb95 f5f3 	sdiv	r5, r5, r3
 802115a:	b2a4      	uxth	r4, r4
 802115c:	b121      	cbz	r1, 8021168 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 802115e:	9b03      	ldr	r3, [sp, #12]
 8021160:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021164:	ba1b      	rev	r3, r3
 8021166:	441f      	add	r7, r3
 8021168:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802116c:	b2ad      	uxth	r5, r5
 802116e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8021172:	4418      	add	r0, r3
 8021174:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021178:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 802117c:	00ad      	lsls	r5, r5, #2
 802117e:	441a      	add	r2, r3
 8021180:	4b74      	ldr	r3, [pc, #464]	; (8021354 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021182:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8021186:	6818      	ldr	r0, [r3, #0]
 8021188:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 802118c:	6803      	ldr	r3, [r0, #0]
 802118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021190:	4798      	blx	r3
 8021192:	4a71      	ldr	r2, [pc, #452]	; (8021358 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021194:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8021198:	2c00      	cmp	r4, #0
 802119a:	8813      	ldrh	r3, [r2, #0]
 802119c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80211a0:	bf0c      	ite	eq
 80211a2:	46c8      	moveq	r8, r9
 80211a4:	f04f 0800 	movne.w	r8, #0
 80211a8:	9209      	str	r2, [sp, #36]	; 0x24
 80211aa:	fb03 c101 	mla	r1, r3, r1, ip
 80211ae:	4373      	muls	r3, r6
 80211b0:	fa1f f888 	uxth.w	r8, r8
 80211b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80211b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80211bc:	9304      	str	r3, [sp, #16]
 80211be:	1d2b      	adds	r3, r5, #4
 80211c0:	9305      	str	r3, [sp, #20]
 80211c2:	2300      	movs	r3, #0
 80211c4:	9301      	str	r3, [sp, #4]
 80211c6:	9a04      	ldr	r2, [sp, #16]
 80211c8:	4282      	cmp	r2, r0
 80211ca:	f240 80bb 	bls.w	8021344 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80211ce:	b95b      	cbnz	r3, 80211e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 80211d0:	783a      	ldrb	r2, [r7, #0]
 80211d2:	0993      	lsrs	r3, r2, #6
 80211d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80211d8:	9201      	str	r2, [sp, #4]
 80211da:	1e5a      	subs	r2, r3, #1
 80211dc:	2a02      	cmp	r2, #2
 80211de:	bf8d      	iteet	hi
 80211e0:	787b      	ldrbhi	r3, [r7, #1]
 80211e2:	3701      	addls	r7, #1
 80211e4:	b29b      	uxthls	r3, r3
 80211e6:	3702      	addhi	r7, #2
 80211e8:	b184      	cbz	r4, 802120c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 80211ea:	429c      	cmp	r4, r3
 80211ec:	bf91      	iteee	ls
 80211ee:	1b1c      	subls	r4, r3, r4
 80211f0:	1ae4      	subhi	r4, r4, r3
 80211f2:	46c4      	movhi	ip, r8
 80211f4:	f04f 0a00 	movhi.w	sl, #0
 80211f8:	bf9b      	ittet	ls
 80211fa:	fa1f fa84 	uxthls.w	sl, r4
 80211fe:	2400      	movls	r4, #0
 8021200:	b2a4      	uxthhi	r4, r4
 8021202:	fa1f fc89 	uxthls.w	ip, r9
 8021206:	4653      	mov	r3, sl
 8021208:	46e0      	mov	r8, ip
 802120a:	e7dc      	b.n	80211c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 802120c:	2204      	movs	r2, #4
 802120e:	9905      	ldr	r1, [sp, #20]
 8021210:	4543      	cmp	r3, r8
 8021212:	4615      	mov	r5, r2
 8021214:	9a01      	ldr	r2, [sp, #4]
 8021216:	bf24      	itt	cs
 8021218:	eba3 0a08 	subcs.w	sl, r3, r8
 802121c:	46c6      	movcs	lr, r8
 802121e:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021222:	9903      	ldr	r1, [sp, #12]
 8021224:	bf3c      	itt	cc
 8021226:	eba8 0c03 	subcc.w	ip, r8, r3
 802122a:	469e      	movcc	lr, r3
 802122c:	588a      	ldr	r2, [r1, r2]
 802122e:	bf26      	itte	cs
 8021230:	fa1f fa8a 	uxthcs.w	sl, sl
 8021234:	46a4      	movcs	ip, r4
 8021236:	fa1f fc8c 	uxthcc.w	ip, ip
 802123a:	ea4f 6112 	mov.w	r1, r2, lsr #24
 802123e:	bf38      	it	cc
 8021240:	46a2      	movcc	sl, r4
 8021242:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8021246:	2900      	cmp	r1, #0
 8021248:	d066      	beq.n	8021318 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 802124a:	29ff      	cmp	r1, #255	; 0xff
 802124c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021250:	d114      	bne.n	802127c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8021252:	9d02      	ldr	r5, [sp, #8]
 8021254:	2dff      	cmp	r5, #255	; 0xff
 8021256:	d111      	bne.n	802127c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8021258:	0951      	lsrs	r1, r2, #5
 802125a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802125e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021262:	4486      	add	lr, r0
 8021264:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021268:	f026 0607 	bic.w	r6, r6, #7
 802126c:	430e      	orrs	r6, r1
 802126e:	4316      	orrs	r6, r2
 8021270:	b2b6      	uxth	r6, r6
 8021272:	4586      	cmp	lr, r0
 8021274:	d051      	beq.n	802131a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8021276:	f820 6b02 	strh.w	r6, [r0], #2
 802127a:	e7fa      	b.n	8021272 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 802127c:	9d02      	ldr	r5, [sp, #8]
 802127e:	b2f6      	uxtb	r6, r6
 8021280:	4486      	add	lr, r0
 8021282:	4369      	muls	r1, r5
 8021284:	1c4d      	adds	r5, r1, #1
 8021286:	eb05 2521 	add.w	r5, r5, r1, asr #8
 802128a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802128e:	b2d2      	uxtb	r2, r2
 8021290:	122d      	asrs	r5, r5, #8
 8021292:	ea6f 0b05 	mvn.w	fp, r5
 8021296:	b2ad      	uxth	r5, r5
 8021298:	fb11 f105 	smulbb	r1, r1, r5
 802129c:	fa5f fb8b 	uxtb.w	fp, fp
 80212a0:	fb16 f605 	smulbb	r6, r6, r5
 80212a4:	fb12 f205 	smulbb	r2, r2, r5
 80212a8:	b289      	uxth	r1, r1
 80212aa:	b2b6      	uxth	r6, r6
 80212ac:	b292      	uxth	r2, r2
 80212ae:	9106      	str	r1, [sp, #24]
 80212b0:	9607      	str	r6, [sp, #28]
 80212b2:	9208      	str	r2, [sp, #32]
 80212b4:	4586      	cmp	lr, r0
 80212b6:	d030      	beq.n	802131a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80212b8:	8802      	ldrh	r2, [r0, #0]
 80212ba:	9906      	ldr	r1, [sp, #24]
 80212bc:	1216      	asrs	r6, r2, #8
 80212be:	10d5      	asrs	r5, r2, #3
 80212c0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80212c4:	00d2      	lsls	r2, r2, #3
 80212c6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80212ca:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80212ce:	b2d2      	uxtb	r2, r2
 80212d0:	fb06 160b 	mla	r6, r6, fp, r1
 80212d4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80212d8:	9907      	ldr	r1, [sp, #28]
 80212da:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80212de:	b2b6      	uxth	r6, r6
 80212e0:	fb05 150b 	mla	r5, r5, fp, r1
 80212e4:	9908      	ldr	r1, [sp, #32]
 80212e6:	fb02 120b 	mla	r2, r2, fp, r1
 80212ea:	1c71      	adds	r1, r6, #1
 80212ec:	b2ad      	uxth	r5, r5
 80212ee:	b292      	uxth	r2, r2
 80212f0:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80212f4:	1c51      	adds	r1, r2, #1
 80212f6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80212fa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80212fe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021302:	4316      	orrs	r6, r2
 8021304:	1c6a      	adds	r2, r5, #1
 8021306:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802130a:	096d      	lsrs	r5, r5, #5
 802130c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021310:	432e      	orrs	r6, r5
 8021312:	f820 6b02 	strh.w	r6, [r0], #2
 8021316:	e7cd      	b.n	80212b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 8021318:	4470      	add	r0, lr
 802131a:	4543      	cmp	r3, r8
 802131c:	f4ff af73 	bcc.w	8021206 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8021320:	fa1f fc89 	uxth.w	ip, r9
 8021324:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802132a:	eba4 040c 	sub.w	r4, r4, ip
 802132e:	881b      	ldrh	r3, [r3, #0]
 8021330:	b2a4      	uxth	r4, r4
 8021332:	eba3 0309 	sub.w	r3, r3, r9
 8021336:	2c00      	cmp	r4, #0
 8021338:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802133c:	bf18      	it	ne
 802133e:	f04f 0c00 	movne.w	ip, #0
 8021342:	e760      	b.n	8021206 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8021344:	4b03      	ldr	r3, [pc, #12]	; (8021354 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8021346:	6818      	ldr	r0, [r3, #0]
 8021348:	6803      	ldr	r3, [r0, #0]
 802134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802134c:	4798      	blx	r3
 802134e:	b00f      	add	sp, #60	; 0x3c
 8021350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021354:	2402ae6c 	.word	0x2402ae6c
 8021358:	2402ae66 	.word	0x2402ae66

0802135c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021360:	b093      	sub	sp, #76	; 0x4c
 8021362:	461c      	mov	r4, r3
 8021364:	9205      	str	r2, [sp, #20]
 8021366:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 802136a:	9101      	str	r1, [sp, #4]
 802136c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802136e:	9202      	str	r2, [sp, #8]
 8021370:	2a00      	cmp	r2, #0
 8021372:	f000 812e 	beq.w	80215d2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8021376:	6820      	ldr	r0, [r4, #0]
 8021378:	aa0e      	add	r2, sp, #56	; 0x38
 802137a:	6861      	ldr	r1, [r4, #4]
 802137c:	c203      	stmia	r2!, {r0, r1}
 802137e:	6818      	ldr	r0, [r3, #0]
 8021380:	aa10      	add	r2, sp, #64	; 0x40
 8021382:	6859      	ldr	r1, [r3, #4]
 8021384:	c203      	stmia	r2!, {r0, r1}
 8021386:	a80e      	add	r0, sp, #56	; 0x38
 8021388:	f7f9 f968 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802138c:	4621      	mov	r1, r4
 802138e:	a810      	add	r0, sp, #64	; 0x40
 8021390:	f7f9 f98c 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021394:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8021398:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802139c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80213a0:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 80213a4:	bfdb      	ittet	le
 80213a6:	b2b3      	uxthle	r3, r6
 80213a8:	f44f 6280 	movle.w	r2, #1024	; 0x400
 80213ac:	2301      	movgt	r3, #1
 80213ae:	fb92 f3f3 	sdivle	r3, r2, r3
 80213b2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80213b6:	441d      	add	r5, r3
 80213b8:	fb92 f1f3 	sdiv	r1, r2, r3
 80213bc:	fa1f fc81 	uxth.w	ip, r1
 80213c0:	3d01      	subs	r5, #1
 80213c2:	fb0c 2413 	mls	r4, ip, r3, r2
 80213c6:	4661      	mov	r1, ip
 80213c8:	fb14 f406 	smulbb	r4, r4, r6
 80213cc:	4404      	add	r4, r0
 80213ce:	fb95 f5f3 	sdiv	r5, r5, r3
 80213d2:	b2a4      	uxth	r4, r4
 80213d4:	b131      	cbz	r1, 80213e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 80213d6:	9b05      	ldr	r3, [sp, #20]
 80213d8:	9901      	ldr	r1, [sp, #4]
 80213da:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80213de:	ba1b      	rev	r3, r3
 80213e0:	4419      	add	r1, r3
 80213e2:	9101      	str	r1, [sp, #4]
 80213e4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80213e8:	b2ad      	uxth	r5, r5
 80213ea:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80213ee:	4418      	add	r0, r3
 80213f0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80213f4:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 80213f8:	00ad      	lsls	r5, r5, #2
 80213fa:	441a      	add	r2, r3
 80213fc:	4b76      	ldr	r3, [pc, #472]	; (80215d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80213fe:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8021402:	6818      	ldr	r0, [r3, #0]
 8021404:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8021408:	6803      	ldr	r3, [r0, #0]
 802140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802140c:	4798      	blx	r3
 802140e:	4973      	ldr	r1, [pc, #460]	; (80215dc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8021410:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 8021414:	2c00      	cmp	r4, #0
 8021416:	880b      	ldrh	r3, [r1, #0]
 8021418:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802141c:	910d      	str	r1, [sp, #52]	; 0x34
 802141e:	fb03 c202 	mla	r2, r3, r2, ip
 8021422:	bf08      	it	eq
 8021424:	46dc      	moveq	ip, fp
 8021426:	fb03 f306 	mul.w	r3, r3, r6
 802142a:	bf18      	it	ne
 802142c:	f04f 0c00 	movne.w	ip, #0
 8021430:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021434:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021438:	fa1f fc8c 	uxth.w	ip, ip
 802143c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021440:	9106      	str	r1, [sp, #24]
 8021442:	9308      	str	r3, [sp, #32]
 8021444:	1d2b      	adds	r3, r5, #4
 8021446:	9309      	str	r3, [sp, #36]	; 0x24
 8021448:	9b02      	ldr	r3, [sp, #8]
 802144a:	43da      	mvns	r2, r3
 802144c:	2300      	movs	r3, #0
 802144e:	b2d2      	uxtb	r2, r2
 8021450:	9303      	str	r3, [sp, #12]
 8021452:	9207      	str	r2, [sp, #28]
 8021454:	9a08      	ldr	r2, [sp, #32]
 8021456:	4282      	cmp	r2, r0
 8021458:	f240 80b6 	bls.w	80215c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 802145c:	b963      	cbnz	r3, 8021478 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 802145e:	9b01      	ldr	r3, [sp, #4]
 8021460:	781a      	ldrb	r2, [r3, #0]
 8021462:	0993      	lsrs	r3, r2, #6
 8021464:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021468:	9203      	str	r2, [sp, #12]
 802146a:	1e5a      	subs	r2, r3, #1
 802146c:	2a02      	cmp	r2, #2
 802146e:	d815      	bhi.n	802149c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 8021470:	9a01      	ldr	r2, [sp, #4]
 8021472:	b29b      	uxth	r3, r3
 8021474:	3201      	adds	r2, #1
 8021476:	9201      	str	r2, [sp, #4]
 8021478:	b1b4      	cbz	r4, 80214a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 802147a:	429c      	cmp	r4, r3
 802147c:	bf91      	iteee	ls
 802147e:	1b1c      	subls	r4, r3, r4
 8021480:	1ae4      	subhi	r4, r4, r3
 8021482:	4666      	movhi	r6, ip
 8021484:	f04f 0800 	movhi.w	r8, #0
 8021488:	bf9b      	ittet	ls
 802148a:	fa1f f884 	uxthls.w	r8, r4
 802148e:	2400      	movls	r4, #0
 8021490:	b2a4      	uxthhi	r4, r4
 8021492:	fa1f f68b 	uxthls.w	r6, fp
 8021496:	4643      	mov	r3, r8
 8021498:	46b4      	mov	ip, r6
 802149a:	e7db      	b.n	8021454 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 802149c:	9a01      	ldr	r2, [sp, #4]
 802149e:	9b01      	ldr	r3, [sp, #4]
 80214a0:	3202      	adds	r2, #2
 80214a2:	785b      	ldrb	r3, [r3, #1]
 80214a4:	9201      	str	r2, [sp, #4]
 80214a6:	e7e7      	b.n	8021478 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 80214a8:	2203      	movs	r2, #3
 80214aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80214ac:	4563      	cmp	r3, ip
 80214ae:	4615      	mov	r5, r2
 80214b0:	9a03      	ldr	r2, [sp, #12]
 80214b2:	bf2c      	ite	cs
 80214b4:	eba3 080c 	subcs.w	r8, r3, ip
 80214b8:	ebac 0603 	subcc.w	r6, ip, r3
 80214bc:	fb15 1202 	smlabb	r2, r5, r2, r1
 80214c0:	9905      	ldr	r1, [sp, #20]
 80214c2:	bf24      	itt	cs
 80214c4:	fa1f f888 	uxthcs.w	r8, r8
 80214c8:	46e1      	movcs	r9, ip
 80214ca:	eb01 0502 	add.w	r5, r1, r2
 80214ce:	9902      	ldr	r1, [sp, #8]
 80214d0:	bf2f      	iteee	cs
 80214d2:	4626      	movcs	r6, r4
 80214d4:	b2b6      	uxthcc	r6, r6
 80214d6:	4699      	movcc	r9, r3
 80214d8:	46a0      	movcc	r8, r4
 80214da:	29ff      	cmp	r1, #255	; 0xff
 80214dc:	d04a      	beq.n	8021574 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80214de:	9f06      	ldr	r7, [sp, #24]
 80214e0:	46ca      	mov	sl, r9
 80214e2:	78a9      	ldrb	r1, [r5, #2]
 80214e4:	9004      	str	r0, [sp, #16]
 80214e6:	4379      	muls	r1, r7
 80214e8:	910a      	str	r1, [sp, #40]	; 0x28
 80214ea:	7869      	ldrb	r1, [r5, #1]
 80214ec:	4379      	muls	r1, r7
 80214ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80214f0:	9905      	ldr	r1, [sp, #20]
 80214f2:	5c8a      	ldrb	r2, [r1, r2]
 80214f4:	437a      	muls	r2, r7
 80214f6:	920c      	str	r2, [sp, #48]	; 0x30
 80214f8:	f1ba 0f00 	cmp.w	sl, #0
 80214fc:	d03d      	beq.n	802157a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 80214fe:	9a04      	ldr	r2, [sp, #16]
 8021500:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021504:	9f07      	ldr	r7, [sp, #28]
 8021506:	8812      	ldrh	r2, [r2, #0]
 8021508:	fa1f fa8a 	uxth.w	sl, sl
 802150c:	46be      	mov	lr, r7
 802150e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021510:	1215      	asrs	r5, r2, #8
 8021512:	10d1      	asrs	r1, r2, #3
 8021514:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021518:	00d2      	lsls	r2, r2, #3
 802151a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802151e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021522:	b2d2      	uxtb	r2, r2
 8021524:	fb05 750e 	mla	r5, r5, lr, r7
 8021528:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802152c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802152e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021532:	b2ad      	uxth	r5, r5
 8021534:	fb01 710e 	mla	r1, r1, lr, r7
 8021538:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802153a:	fb02 720e 	mla	r2, r2, lr, r7
 802153e:	f105 0e01 	add.w	lr, r5, #1
 8021542:	b289      	uxth	r1, r1
 8021544:	b292      	uxth	r2, r2
 8021546:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802154a:	f102 0e01 	add.w	lr, r2, #1
 802154e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021552:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021556:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802155a:	4315      	orrs	r5, r2
 802155c:	1c4a      	adds	r2, r1, #1
 802155e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021562:	9a04      	ldr	r2, [sp, #16]
 8021564:	0949      	lsrs	r1, r1, #5
 8021566:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802156a:	430d      	orrs	r5, r1
 802156c:	f822 5b02 	strh.w	r5, [r2], #2
 8021570:	9204      	str	r2, [sp, #16]
 8021572:	e7c1      	b.n	80214f8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021574:	4649      	mov	r1, r9
 8021576:	4686      	mov	lr, r0
 8021578:	b999      	cbnz	r1, 80215a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 802157a:	4563      	cmp	r3, ip
 802157c:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8021580:	d389      	bcc.n	8021496 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8021582:	fa1f f68b 	uxth.w	r6, fp
 8021586:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 802158a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802158c:	1ba4      	subs	r4, r4, r6
 802158e:	881b      	ldrh	r3, [r3, #0]
 8021590:	b2a4      	uxth	r4, r4
 8021592:	eba3 030b 	sub.w	r3, r3, fp
 8021596:	2c00      	cmp	r4, #0
 8021598:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802159c:	bf18      	it	ne
 802159e:	2600      	movne	r6, #0
 80215a0:	e779      	b.n	8021496 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 80215a2:	78aa      	ldrb	r2, [r5, #2]
 80215a4:	3901      	subs	r1, #1
 80215a6:	4f0e      	ldr	r7, [pc, #56]	; (80215e0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 80215a8:	b289      	uxth	r1, r1
 80215aa:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 80215ae:	786a      	ldrb	r2, [r5, #1]
 80215b0:	00d2      	lsls	r2, r2, #3
 80215b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215b6:	ea4a 0202 	orr.w	r2, sl, r2
 80215ba:	f895 a000 	ldrb.w	sl, [r5]
 80215be:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 80215c2:	f82e 2b02 	strh.w	r2, [lr], #2
 80215c6:	e7d7      	b.n	8021578 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 80215c8:	4b03      	ldr	r3, [pc, #12]	; (80215d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80215ca:	6818      	ldr	r0, [r3, #0]
 80215cc:	6803      	ldr	r3, [r0, #0]
 80215ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215d0:	4798      	blx	r3
 80215d2:	b013      	add	sp, #76	; 0x4c
 80215d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215d8:	2402ae6c 	.word	0x2402ae6c
 80215dc:	2402ae66 	.word	0x2402ae66
 80215e0:	fffff800 	.word	0xfffff800

080215e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80215e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215e8:	b09d      	sub	sp, #116	; 0x74
 80215ea:	461c      	mov	r4, r3
 80215ec:	4683      	mov	fp, r0
 80215ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215f0:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 80215f4:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 80215f8:	920e      	str	r2, [sp, #56]	; 0x38
 80215fa:	2a00      	cmp	r2, #0
 80215fc:	f000 81e4 	beq.w	80219c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 8021600:	6820      	ldr	r0, [r4, #0]
 8021602:	aa18      	add	r2, sp, #96	; 0x60
 8021604:	6861      	ldr	r1, [r4, #4]
 8021606:	c203      	stmia	r2!, {r0, r1}
 8021608:	6818      	ldr	r0, [r3, #0]
 802160a:	aa1a      	add	r2, sp, #104	; 0x68
 802160c:	6859      	ldr	r1, [r3, #4]
 802160e:	c203      	stmia	r2!, {r0, r1}
 8021610:	a818      	add	r0, sp, #96	; 0x60
 8021612:	f7f9 f823 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021616:	4621      	mov	r1, r4
 8021618:	a81a      	add	r0, sp, #104	; 0x68
 802161a:	f7f9 f847 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802161e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8021622:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 8021626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802162a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 802162e:	bfdb      	ittet	le
 8021630:	b29a      	uxthle	r2, r3
 8021632:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8021636:	2201      	movgt	r2, #1
 8021638:	fb91 f2f2 	sdivle	r2, r1, r2
 802163c:	9202      	str	r2, [sp, #8]
 802163e:	9802      	ldr	r0, [sp, #8]
 8021640:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8021644:	9902      	ldr	r1, [sp, #8]
 8021646:	fb92 f0f0 	sdiv	r0, r2, r0
 802164a:	b280      	uxth	r0, r0
 802164c:	440c      	add	r4, r1
 802164e:	900f      	str	r0, [sp, #60]	; 0x3c
 8021650:	3c01      	subs	r4, #1
 8021652:	9802      	ldr	r0, [sp, #8]
 8021654:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021656:	fb05 2510 	mls	r5, r5, r0, r2
 802165a:	fb94 f4f1 	sdiv	r4, r4, r1
 802165e:	fb15 f503 	smulbb	r5, r5, r3
 8021662:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8021666:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 802166a:	3401      	adds	r4, #1
 802166c:	440d      	add	r5, r1
 802166e:	4419      	add	r1, r3
 8021670:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8021674:	b2a4      	uxth	r4, r4
 8021676:	441a      	add	r2, r3
 8021678:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802167c:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 8021680:	00a4      	lsls	r4, r4, #2
 8021682:	9306      	str	r3, [sp, #24]
 8021684:	b2ad      	uxth	r5, r5
 8021686:	4bb3      	ldr	r3, [pc, #716]	; (8021954 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8021688:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 802168c:	6818      	ldr	r0, [r3, #0]
 802168e:	6803      	ldr	r3, [r0, #0]
 8021690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021692:	4798      	blx	r3
 8021694:	4bb0      	ldr	r3, [pc, #704]	; (8021958 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8021696:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 802169a:	2d00      	cmp	r5, #0
 802169c:	881a      	ldrh	r2, [r3, #0]
 802169e:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 80216a2:	fb02 f606 	mul.w	r6, r2, r6
 80216a6:	fb02 7101 	mla	r1, r2, r1, r7
 80216aa:	9316      	str	r3, [sp, #88]	; 0x58
 80216ac:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 80216b0:	4baa      	ldr	r3, [pc, #680]	; (802195c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 80216b2:	bf18      	it	ne
 80216b4:	2100      	movne	r1, #0
 80216b6:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 80216ba:	eba3 030b 	sub.w	r3, r3, fp
 80216be:	920a      	str	r2, [sp, #40]	; 0x28
 80216c0:	f104 0204 	add.w	r2, r4, #4
 80216c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80216c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80216c8:	9a06      	ldr	r2, [sp, #24]
 80216ca:	bf08      	it	eq
 80216cc:	4611      	moveq	r1, r2
 80216ce:	2200      	movs	r2, #0
 80216d0:	b289      	uxth	r1, r1
 80216d2:	920d      	str	r2, [sp, #52]	; 0x34
 80216d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80216d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216d8:	fa12 f383 	uxtah	r3, r2, r3
 80216dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80216de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80216e2:	3304      	adds	r3, #4
 80216e4:	9308      	str	r3, [sp, #32]
 80216e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216e8:	4543      	cmp	r3, r8
 80216ea:	f240 8168 	bls.w	80219be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 80216ee:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80216f2:	f04f 0e01 	mov.w	lr, #1
 80216f6:	9a02      	ldr	r2, [sp, #8]
 80216f8:	9808      	ldr	r0, [sp, #32]
 80216fa:	fbb5 f3f3 	udiv	r3, r5, r3
 80216fe:	1ad3      	subs	r3, r2, r3
 8021700:	7800      	ldrb	r0, [r0, #0]
 8021702:	b29b      	uxth	r3, r3
 8021704:	9010      	str	r0, [sp, #64]	; 0x40
 8021706:	3001      	adds	r0, #1
 8021708:	9314      	str	r3, [sp, #80]	; 0x50
 802170a:	9b08      	ldr	r3, [sp, #32]
 802170c:	9007      	str	r0, [sp, #28]
 802170e:	785a      	ldrb	r2, [r3, #1]
 8021710:	789b      	ldrb	r3, [r3, #2]
 8021712:	021b      	lsls	r3, r3, #8
 8021714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021718:	9a08      	ldr	r2, [sp, #32]
 802171a:	78d2      	ldrb	r2, [r2, #3]
 802171c:	4313      	orrs	r3, r2
 802171e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021720:	441a      	add	r2, r3
 8021722:	1c50      	adds	r0, r2, #1
 8021724:	7852      	ldrb	r2, [r2, #1]
 8021726:	9005      	str	r0, [sp, #20]
 8021728:	0212      	lsls	r2, r2, #8
 802172a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802172c:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8021730:	5cc3      	ldrb	r3, [r0, r3]
 8021732:	431a      	orrs	r2, r3
 8021734:	b293      	uxth	r3, r2
 8021736:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 802173a:	930b      	str	r3, [sp, #44]	; 0x2c
 802173c:	2300      	movs	r3, #0
 802173e:	9309      	str	r3, [sp, #36]	; 0x24
 8021740:	2301      	movs	r3, #1
 8021742:	9301      	str	r3, [sp, #4]
 8021744:	9304      	str	r3, [sp, #16]
 8021746:	2300      	movs	r3, #0
 8021748:	9303      	str	r3, [sp, #12]
 802174a:	2d00      	cmp	r5, #0
 802174c:	d07d      	beq.n	802184a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 802174e:	45ae      	cmp	lr, r5
 8021750:	d26c      	bcs.n	802182c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 8021752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021754:	eba5 050e 	sub.w	r5, r5, lr
 8021758:	460c      	mov	r4, r1
 802175a:	4543      	cmp	r3, r8
 802175c:	b2ad      	uxth	r5, r5
 802175e:	d802      	bhi.n	8021766 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8021760:	e071      	b.n	8021846 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 8021762:	2b00      	cmp	r3, #0
 8021764:	d15d      	bne.n	8021822 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 8021766:	9b05      	ldr	r3, [sp, #20]
 8021768:	9a04      	ldr	r2, [sp, #16]
 802176a:	785b      	ldrb	r3, [r3, #1]
 802176c:	f1c2 0207 	rsb	r2, r2, #7
 8021770:	9904      	ldr	r1, [sp, #16]
 8021772:	4093      	lsls	r3, r2
 8021774:	005b      	lsls	r3, r3, #1
 8021776:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 802177a:	9b05      	ldr	r3, [sp, #20]
 802177c:	781b      	ldrb	r3, [r3, #0]
 802177e:	410b      	asrs	r3, r1
 8021780:	3101      	adds	r1, #1
 8021782:	b2c9      	uxtb	r1, r1
 8021784:	b2db      	uxtb	r3, r3
 8021786:	2908      	cmp	r1, #8
 8021788:	9104      	str	r1, [sp, #16]
 802178a:	9905      	ldr	r1, [sp, #20]
 802178c:	ea43 0302 	orr.w	r3, r3, r2
 8021790:	bf0c      	ite	eq
 8021792:	3102      	addeq	r1, #2
 8021794:	3101      	addne	r1, #1
 8021796:	b29a      	uxth	r2, r3
 8021798:	bf05      	ittet	eq
 802179a:	9105      	streq	r1, [sp, #20]
 802179c:	2100      	moveq	r1, #0
 802179e:	9105      	strne	r1, [sp, #20]
 80217a0:	9104      	streq	r1, [sp, #16]
 80217a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80217a4:	4291      	cmp	r1, r2
 80217a6:	d30a      	bcc.n	80217be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 80217a8:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 80217ac:	2301      	movs	r3, #1
 80217ae:	9907      	ldr	r1, [sp, #28]
 80217b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80217b4:	d30f      	bcc.n	80217d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 80217b6:	2100      	movs	r1, #0
 80217b8:	9301      	str	r3, [sp, #4]
 80217ba:	9103      	str	r1, [sp, #12]
 80217bc:	e032      	b.n	8021824 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 80217be:	9b07      	ldr	r3, [sp, #28]
 80217c0:	429a      	cmp	r2, r3
 80217c2:	d318      	bcc.n	80217f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 80217c4:	9b01      	ldr	r3, [sp, #4]
 80217c6:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 80217ca:	445b      	add	r3, fp
 80217cc:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 80217d0:	9b01      	ldr	r3, [sp, #4]
 80217d2:	3301      	adds	r3, #1
 80217d4:	b29b      	uxth	r3, r3
 80217d6:	9907      	ldr	r1, [sp, #28]
 80217d8:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 80217dc:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80217e0:	7108      	strb	r0, [r1, #4]
 80217e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80217e4:	80c8      	strh	r0, [r1, #6]
 80217e6:	9801      	ldr	r0, [sp, #4]
 80217e8:	3001      	adds	r0, #1
 80217ea:	7148      	strb	r0, [r1, #5]
 80217ec:	9907      	ldr	r1, [sp, #28]
 80217ee:	3101      	adds	r1, #1
 80217f0:	b289      	uxth	r1, r1
 80217f2:	9107      	str	r1, [sp, #28]
 80217f4:	e7df      	b.n	80217b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80217f6:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80217fa:	4611      	mov	r1, r2
 80217fc:	795b      	ldrb	r3, [r3, #5]
 80217fe:	f603 0004 	addw	r0, r3, #2052	; 0x804
 8021802:	4458      	add	r0, fp
 8021804:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8021806:	4406      	add	r6, r0
 8021808:	2e00      	cmp	r6, #0
 802180a:	dd06      	ble.n	802181a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 802180c:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8021810:	790e      	ldrb	r6, [r1, #4]
 8021812:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8021816:	88c9      	ldrh	r1, [r1, #6]
 8021818:	e7f4      	b.n	8021804 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 802181a:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 802181e:	b29b      	uxth	r3, r3
 8021820:	e7c5      	b.n	80217ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 8021822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021824:	4621      	mov	r1, r4
 8021826:	920b      	str	r2, [sp, #44]	; 0x2c
 8021828:	469e      	mov	lr, r3
 802182a:	e78e      	b.n	802174a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 802182c:	9a03      	ldr	r2, [sp, #12]
 802182e:	ebae 0305 	sub.w	r3, lr, r5
 8021832:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021836:	442a      	add	r2, r5
 8021838:	b29b      	uxth	r3, r3
 802183a:	b292      	uxth	r2, r2
 802183c:	9203      	str	r2, [sp, #12]
 802183e:	2500      	movs	r5, #0
 8021840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021842:	4542      	cmp	r2, r8
 8021844:	d88d      	bhi.n	8021762 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 8021846:	4621      	mov	r1, r4
 8021848:	e74d      	b.n	80216e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 802184a:	458e      	cmp	lr, r1
 802184c:	f04f 0900 	mov.w	r9, #0
 8021850:	bf2b      	itete	cs
 8021852:	ebae 0301 	subcs.w	r3, lr, r1
 8021856:	eba1 040e 	subcc.w	r4, r1, lr
 802185a:	462c      	movcs	r4, r5
 802185c:	462b      	movcc	r3, r5
 802185e:	bf27      	ittee	cs
 8021860:	b29b      	uxthcs	r3, r3
 8021862:	910c      	strcs	r1, [sp, #48]	; 0x30
 8021864:	b2a4      	uxthcc	r4, r4
 8021866:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 802186a:	9a03      	ldr	r2, [sp, #12]
 802186c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802186e:	444a      	add	r2, r9
 8021870:	4548      	cmp	r0, r9
 8021872:	b292      	uxth	r2, r2
 8021874:	d074      	beq.n	8021960 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 8021876:	2004      	movs	r0, #4
 8021878:	445a      	add	r2, fp
 802187a:	4605      	mov	r5, r0
 802187c:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 8021880:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021882:	fb15 0202 	smlabb	r2, r5, r2, r0
 8021886:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021888:	5880      	ldr	r0, [r0, r2]
 802188a:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 802188e:	d014      	beq.n	80218ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021890:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021894:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8021898:	d112      	bne.n	80218c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 802189a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802189c:	2aff      	cmp	r2, #255	; 0xff
 802189e:	d10f      	bne.n	80218c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 80218a0:	0942      	lsrs	r2, r0, #5
 80218a2:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80218a6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80218aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80218ae:	f025 0507 	bic.w	r5, r5, #7
 80218b2:	4315      	orrs	r5, r2
 80218b4:	4305      	orrs	r5, r0
 80218b6:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 80218ba:	f109 0901 	add.w	r9, r9, #1
 80218be:	e7d4      	b.n	802186a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 80218c0:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 80218c4:	b2ed      	uxtb	r5, r5
 80218c6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80218ca:	ea4f 272c 	mov.w	r7, ip, asr #8
 80218ce:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 80218d2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80218d6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80218da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80218de:	9215      	str	r2, [sp, #84]	; 0x54
 80218e0:	fa5f fc8c 	uxtb.w	ip, ip
 80218e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80218e6:	b2c0      	uxtb	r0, r0
 80218e8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80218ec:	fb02 fa0a 	mul.w	sl, r2, sl
 80218f0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80218f4:	f10a 0201 	add.w	r2, sl, #1
 80218f8:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80218fc:	1212      	asrs	r2, r2, #8
 80218fe:	fa1f fa82 	uxth.w	sl, r2
 8021902:	43d2      	mvns	r2, r2
 8021904:	fb16 f60a 	smulbb	r6, r6, sl
 8021908:	b2d2      	uxtb	r2, r2
 802190a:	fb10 f00a 	smulbb	r0, r0, sl
 802190e:	fb07 6702 	mla	r7, r7, r2, r6
 8021912:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8021914:	fb0c 0002 	mla	r0, ip, r2, r0
 8021918:	fb15 f50a 	smulbb	r5, r5, sl
 802191c:	b2bf      	uxth	r7, r7
 802191e:	b280      	uxth	r0, r0
 8021920:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021924:	fb06 5602 	mla	r6, r6, r2, r5
 8021928:	1c7a      	adds	r2, r7, #1
 802192a:	1c45      	adds	r5, r0, #1
 802192c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021930:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021934:	b2b6      	uxth	r6, r6
 8021936:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802193a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802193e:	432f      	orrs	r7, r5
 8021940:	1c75      	adds	r5, r6, #1
 8021942:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021946:	096d      	lsrs	r5, r5, #5
 8021948:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802194c:	432f      	orrs	r7, r5
 802194e:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8021952:	e7b2      	b.n	80218ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021954:	2402ae6c 	.word	0x2402ae6c
 8021958:	2402ae66 	.word	0x2402ae66
 802195c:	fffff7fb 	.word	0xfffff7fb
 8021960:	9203      	str	r2, [sp, #12]
 8021962:	458e      	cmp	lr, r1
 8021964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021966:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802196a:	f4ff af68 	bcc.w	802183e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 802196e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021970:	9906      	ldr	r1, [sp, #24]
 8021972:	8812      	ldrh	r2, [r2, #0]
 8021974:	1a52      	subs	r2, r2, r1
 8021976:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021978:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802197c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802197e:	3201      	adds	r2, #1
 8021980:	428a      	cmp	r2, r1
 8021982:	9209      	str	r2, [sp, #36]	; 0x24
 8021984:	d111      	bne.n	80219aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 8021986:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 802198a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 802198e:	9b06      	ldr	r3, [sp, #24]
 8021990:	eba5 0509 	sub.w	r5, r5, r9
 8021994:	b2ad      	uxth	r5, r5
 8021996:	2d00      	cmp	r5, #0
 8021998:	bf08      	it	eq
 802199a:	4619      	moveq	r1, r3
 802199c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802199e:	bf18      	it	ne
 80219a0:	2100      	movne	r1, #0
 80219a2:	3301      	adds	r3, #1
 80219a4:	b289      	uxth	r1, r1
 80219a6:	930d      	str	r3, [sp, #52]	; 0x34
 80219a8:	e694      	b.n	80216d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 80219aa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80219ae:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80219b2:	1b2d      	subs	r5, r5, r4
 80219b4:	b2ad      	uxth	r5, r5
 80219b6:	2d00      	cmp	r5, #0
 80219b8:	bf18      	it	ne
 80219ba:	2400      	movne	r4, #0
 80219bc:	e740      	b.n	8021840 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 80219be:	4b04      	ldr	r3, [pc, #16]	; (80219d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 80219c0:	6818      	ldr	r0, [r3, #0]
 80219c2:	6803      	ldr	r3, [r0, #0]
 80219c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219c6:	4798      	blx	r3
 80219c8:	b01d      	add	sp, #116	; 0x74
 80219ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219ce:	bf00      	nop
 80219d0:	2402ae6c 	.word	0x2402ae6c

080219d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80219d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219d8:	b09f      	sub	sp, #124	; 0x7c
 80219da:	461d      	mov	r5, r3
 80219dc:	4604      	mov	r4, r0
 80219de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80219e0:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 80219e4:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 80219e8:	920a      	str	r2, [sp, #40]	; 0x28
 80219ea:	2a00      	cmp	r2, #0
 80219ec:	f000 81fe 	beq.w	8021dec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 80219f0:	6828      	ldr	r0, [r5, #0]
 80219f2:	aa1a      	add	r2, sp, #104	; 0x68
 80219f4:	6869      	ldr	r1, [r5, #4]
 80219f6:	c203      	stmia	r2!, {r0, r1}
 80219f8:	6818      	ldr	r0, [r3, #0]
 80219fa:	aa1c      	add	r2, sp, #112	; 0x70
 80219fc:	6859      	ldr	r1, [r3, #4]
 80219fe:	c203      	stmia	r2!, {r0, r1}
 8021a00:	a81a      	add	r0, sp, #104	; 0x68
 8021a02:	f7f8 fe2b 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a06:	4629      	mov	r1, r5
 8021a08:	a81c      	add	r0, sp, #112	; 0x70
 8021a0a:	f7f8 fe4f 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a0e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8021a12:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 8021a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021a1a:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 8021a1e:	bfdb      	ittet	le
 8021a20:	b29a      	uxthle	r2, r3
 8021a22:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8021a26:	2201      	movgt	r2, #1
 8021a28:	fb91 f2f2 	sdivle	r2, r1, r2
 8021a2c:	9201      	str	r2, [sp, #4]
 8021a2e:	9801      	ldr	r0, [sp, #4]
 8021a30:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8021a34:	9901      	ldr	r1, [sp, #4]
 8021a36:	fb92 f0f0 	sdiv	r0, r2, r0
 8021a3a:	b280      	uxth	r0, r0
 8021a3c:	440e      	add	r6, r1
 8021a3e:	9010      	str	r0, [sp, #64]	; 0x40
 8021a40:	3e01      	subs	r6, #1
 8021a42:	9801      	ldr	r0, [sp, #4]
 8021a44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021a46:	fb05 2510 	mls	r5, r5, r0, r2
 8021a4a:	fb96 f6f1 	sdiv	r6, r6, r1
 8021a4e:	fb15 f503 	smulbb	r5, r5, r3
 8021a52:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8021a56:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021a5a:	3601      	adds	r6, #1
 8021a5c:	440d      	add	r5, r1
 8021a5e:	4419      	add	r1, r3
 8021a60:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8021a64:	b2b6      	uxth	r6, r6
 8021a66:	441a      	add	r2, r3
 8021a68:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8021a6c:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8021a70:	b2ad      	uxth	r5, r5
 8021a72:	9304      	str	r3, [sp, #16]
 8021a74:	4b96      	ldr	r3, [pc, #600]	; (8021cd0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8021a76:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 8021a7a:	6818      	ldr	r0, [r3, #0]
 8021a7c:	6803      	ldr	r3, [r0, #0]
 8021a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a80:	4798      	blx	r3
 8021a82:	4b94      	ldr	r3, [pc, #592]	; (8021cd4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 8021a84:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 8021a88:	2d00      	cmp	r5, #0
 8021a8a:	881a      	ldrh	r2, [r3, #0]
 8021a8c:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 8021a90:	fb02 f707 	mul.w	r7, r2, r7
 8021a94:	fb02 c101 	mla	r1, r2, r1, ip
 8021a98:	9318      	str	r3, [sp, #96]	; 0x60
 8021a9a:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8021a9e:	4b8e      	ldr	r3, [pc, #568]	; (8021cd8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8021aa0:	bf18      	it	ne
 8021aa2:	2100      	movne	r1, #0
 8021aa4:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8021aa8:	eba3 0304 	sub.w	r3, r3, r4
 8021aac:	920b      	str	r2, [sp, #44]	; 0x2c
 8021aae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021ab0:	9319      	str	r3, [sp, #100]	; 0x64
 8021ab2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021ab6:	f106 0204 	add.w	r2, r6, #4
 8021aba:	9206      	str	r2, [sp, #24]
 8021abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021abe:	ea6f 0202 	mvn.w	r2, r2
 8021ac2:	b2d2      	uxtb	r2, r2
 8021ac4:	9215      	str	r2, [sp, #84]	; 0x54
 8021ac6:	9a04      	ldr	r2, [sp, #16]
 8021ac8:	bf08      	it	eq
 8021aca:	4611      	moveq	r1, r2
 8021acc:	2200      	movs	r2, #0
 8021ace:	b289      	uxth	r1, r1
 8021ad0:	920d      	str	r2, [sp, #52]	; 0x34
 8021ad2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ad6:	fa12 f383 	uxtah	r3, r2, r3
 8021ada:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ae0:	3304      	adds	r3, #4
 8021ae2:	9307      	str	r3, [sp, #28]
 8021ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ae6:	455b      	cmp	r3, fp
 8021ae8:	f240 817b 	bls.w	8021de2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 8021aec:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021af0:	f04f 0801 	mov.w	r8, #1
 8021af4:	9a01      	ldr	r2, [sp, #4]
 8021af6:	9807      	ldr	r0, [sp, #28]
 8021af8:	46c4      	mov	ip, r8
 8021afa:	f8cd 8008 	str.w	r8, [sp, #8]
 8021afe:	7800      	ldrb	r0, [r0, #0]
 8021b00:	fbb5 f3f3 	udiv	r3, r5, r3
 8021b04:	1ad3      	subs	r3, r2, r3
 8021b06:	9011      	str	r0, [sp, #68]	; 0x44
 8021b08:	3001      	adds	r0, #1
 8021b0a:	b29b      	uxth	r3, r3
 8021b0c:	9005      	str	r0, [sp, #20]
 8021b0e:	9316      	str	r3, [sp, #88]	; 0x58
 8021b10:	9b07      	ldr	r3, [sp, #28]
 8021b12:	785a      	ldrb	r2, [r3, #1]
 8021b14:	789b      	ldrb	r3, [r3, #2]
 8021b16:	021b      	lsls	r3, r3, #8
 8021b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021b1c:	9a07      	ldr	r2, [sp, #28]
 8021b1e:	78d2      	ldrb	r2, [r2, #3]
 8021b20:	4313      	orrs	r3, r2
 8021b22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021b24:	441a      	add	r2, r3
 8021b26:	1c50      	adds	r0, r2, #1
 8021b28:	7852      	ldrb	r2, [r2, #1]
 8021b2a:	9003      	str	r0, [sp, #12]
 8021b2c:	0212      	lsls	r2, r2, #8
 8021b2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021b30:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8021b34:	5cc3      	ldrb	r3, [r0, r3]
 8021b36:	431a      	orrs	r2, r3
 8021b38:	b293      	uxth	r3, r2
 8021b3a:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8021b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8021b40:	2300      	movs	r3, #0
 8021b42:	9308      	str	r3, [sp, #32]
 8021b44:	461a      	mov	r2, r3
 8021b46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8021b4c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b52:	2d00      	cmp	r5, #0
 8021b54:	d07d      	beq.n	8021c52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 8021b56:	45ac      	cmp	ip, r5
 8021b58:	d26d      	bcs.n	8021c36 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 8021b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b5c:	eba5 050c 	sub.w	r5, r5, ip
 8021b60:	4608      	mov	r0, r1
 8021b62:	455b      	cmp	r3, fp
 8021b64:	b2ad      	uxth	r5, r5
 8021b66:	d802      	bhi.n	8021b6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8021b68:	e071      	b.n	8021c4e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d15d      	bne.n	8021c2a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8021b6e:	9b03      	ldr	r3, [sp, #12]
 8021b70:	9a02      	ldr	r2, [sp, #8]
 8021b72:	785b      	ldrb	r3, [r3, #1]
 8021b74:	f1c2 0207 	rsb	r2, r2, #7
 8021b78:	9902      	ldr	r1, [sp, #8]
 8021b7a:	4093      	lsls	r3, r2
 8021b7c:	005b      	lsls	r3, r3, #1
 8021b7e:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8021b82:	9b03      	ldr	r3, [sp, #12]
 8021b84:	781b      	ldrb	r3, [r3, #0]
 8021b86:	410b      	asrs	r3, r1
 8021b88:	3101      	adds	r1, #1
 8021b8a:	b2c9      	uxtb	r1, r1
 8021b8c:	b2db      	uxtb	r3, r3
 8021b8e:	2908      	cmp	r1, #8
 8021b90:	9102      	str	r1, [sp, #8]
 8021b92:	9903      	ldr	r1, [sp, #12]
 8021b94:	ea43 0302 	orr.w	r3, r3, r2
 8021b98:	bf0c      	ite	eq
 8021b9a:	3102      	addeq	r1, #2
 8021b9c:	3101      	addne	r1, #1
 8021b9e:	b29a      	uxth	r2, r3
 8021ba0:	bf05      	ittet	eq
 8021ba2:	9103      	streq	r1, [sp, #12]
 8021ba4:	2100      	moveq	r1, #0
 8021ba6:	9103      	strne	r1, [sp, #12]
 8021ba8:	9102      	streq	r1, [sp, #8]
 8021baa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021bac:	4291      	cmp	r1, r2
 8021bae:	d30a      	bcc.n	8021bc6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8021bb0:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8021bb4:	2301      	movs	r3, #1
 8021bb6:	9905      	ldr	r1, [sp, #20]
 8021bb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021bbc:	d30f      	bcc.n	8021bde <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8021bbe:	2100      	movs	r1, #0
 8021bc0:	4698      	mov	r8, r3
 8021bc2:	9100      	str	r1, [sp, #0]
 8021bc4:	e032      	b.n	8021c2c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 8021bc6:	9b05      	ldr	r3, [sp, #20]
 8021bc8:	429a      	cmp	r2, r3
 8021bca:	d318      	bcc.n	8021bfe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8021bcc:	eb04 0308 	add.w	r3, r4, r8
 8021bd0:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 8021bd4:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8021bd8:	f108 0301 	add.w	r3, r8, #1
 8021bdc:	b29b      	uxth	r3, r3
 8021bde:	9905      	ldr	r1, [sp, #20]
 8021be0:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8021be4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021be8:	710e      	strb	r6, [r1, #4]
 8021bea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021bec:	80ce      	strh	r6, [r1, #6]
 8021bee:	f108 0601 	add.w	r6, r8, #1
 8021bf2:	714e      	strb	r6, [r1, #5]
 8021bf4:	9905      	ldr	r1, [sp, #20]
 8021bf6:	3101      	adds	r1, #1
 8021bf8:	b289      	uxth	r1, r1
 8021bfa:	9105      	str	r1, [sp, #20]
 8021bfc:	e7df      	b.n	8021bbe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8021bfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021c02:	4611      	mov	r1, r2
 8021c04:	795b      	ldrb	r3, [r3, #5]
 8021c06:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8021c0a:	4426      	add	r6, r4
 8021c0c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8021c0e:	4437      	add	r7, r6
 8021c10:	2f00      	cmp	r7, #0
 8021c12:	dd06      	ble.n	8021c22 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 8021c14:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021c18:	790f      	ldrb	r7, [r1, #4]
 8021c1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021c1e:	88c9      	ldrh	r1, [r1, #6]
 8021c20:	e7f4      	b.n	8021c0c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8021c22:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8021c26:	b29b      	uxth	r3, r3
 8021c28:	e7c5      	b.n	8021bb6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 8021c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021c2c:	920c      	str	r2, [sp, #48]	; 0x30
 8021c2e:	4601      	mov	r1, r0
 8021c30:	9a00      	ldr	r2, [sp, #0]
 8021c32:	469c      	mov	ip, r3
 8021c34:	e78d      	b.n	8021b52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8021c36:	ebac 0305 	sub.w	r3, ip, r5
 8021c3a:	1957      	adds	r7, r2, r5
 8021c3c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021c40:	b2ba      	uxth	r2, r7
 8021c42:	b29b      	uxth	r3, r3
 8021c44:	9200      	str	r2, [sp, #0]
 8021c46:	2500      	movs	r5, #0
 8021c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021c4a:	455a      	cmp	r2, fp
 8021c4c:	d88d      	bhi.n	8021b6a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8021c4e:	4601      	mov	r1, r0
 8021c50:	e748      	b.n	8021ae4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 8021c52:	458c      	cmp	ip, r1
 8021c54:	bf27      	ittee	cs
 8021c56:	ebac 0301 	subcs.w	r3, ip, r1
 8021c5a:	4628      	movcs	r0, r5
 8021c5c:	eba1 000c 	subcc.w	r0, r1, ip
 8021c60:	462b      	movcc	r3, r5
 8021c62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021c64:	bf27      	ittee	cs
 8021c66:	b29b      	uxthcs	r3, r3
 8021c68:	9109      	strcs	r1, [sp, #36]	; 0x24
 8021c6a:	b280      	uxthcc	r0, r0
 8021c6c:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 8021c70:	2dff      	cmp	r5, #255	; 0xff
 8021c72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021c74:	eb02 0705 	add.w	r7, r2, r5
 8021c78:	b2bd      	uxth	r5, r7
 8021c7a:	9500      	str	r5, [sp, #0]
 8021c7c:	d12e      	bne.n	8021cdc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 8021c7e:	465e      	mov	r6, fp
 8021c80:	9d00      	ldr	r5, [sp, #0]
 8021c82:	42aa      	cmp	r2, r5
 8021c84:	f040 8083 	bne.w	8021d8e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8021c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c8a:	458c      	cmp	ip, r1
 8021c8c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021c90:	d3d9      	bcc.n	8021c46 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8021c92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021c94:	9904      	ldr	r1, [sp, #16]
 8021c96:	8812      	ldrh	r2, [r2, #0]
 8021c98:	1a52      	subs	r2, r2, r1
 8021c9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021c9c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021ca0:	9a08      	ldr	r2, [sp, #32]
 8021ca2:	3201      	adds	r2, #1
 8021ca4:	428a      	cmp	r2, r1
 8021ca6:	9208      	str	r2, [sp, #32]
 8021ca8:	f040 8091 	bne.w	8021dce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 8021cac:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8021cb0:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 8021cb4:	9b04      	ldr	r3, [sp, #16]
 8021cb6:	eba5 050c 	sub.w	r5, r5, ip
 8021cba:	b2ad      	uxth	r5, r5
 8021cbc:	2d00      	cmp	r5, #0
 8021cbe:	bf08      	it	eq
 8021cc0:	4619      	moveq	r1, r3
 8021cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021cc4:	bf18      	it	ne
 8021cc6:	2100      	movne	r1, #0
 8021cc8:	3301      	adds	r3, #1
 8021cca:	b289      	uxth	r1, r1
 8021ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8021cce:	e700      	b.n	8021ad2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 8021cd0:	2402ae6c 	.word	0x2402ae6c
 8021cd4:	2402ae66 	.word	0x2402ae66
 8021cd8:	fffff7fb 	.word	0xfffff7fb
 8021cdc:	46d9      	mov	r9, fp
 8021cde:	9d00      	ldr	r5, [sp, #0]
 8021ce0:	42aa      	cmp	r2, r5
 8021ce2:	d0d1      	beq.n	8021c88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 8021ce4:	1c55      	adds	r5, r2, #1
 8021ce6:	4422      	add	r2, r4
 8021ce8:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 8021cec:	9a06      	ldr	r2, [sp, #24]
 8021cee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021cf2:	9517      	str	r5, [sp, #92]	; 0x5c
 8021cf4:	4472      	add	r2, lr
 8021cf6:	9212      	str	r2, [sp, #72]	; 0x48
 8021cf8:	f8b9 2000 	ldrh.w	r2, [r9]
 8021cfc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021cfe:	1216      	asrs	r6, r2, #8
 8021d00:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021d04:	10d5      	asrs	r5, r2, #3
 8021d06:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021d08:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021d0c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021d10:	00d2      	lsls	r2, r2, #3
 8021d12:	fb1a fa07 	smulbb	sl, sl, r7
 8021d16:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021d1a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d1c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021d20:	b2d2      	uxtb	r2, r2
 8021d22:	fb06 a607 	mla	r6, r6, r7, sl
 8021d26:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021d28:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021d2c:	f897 a001 	ldrb.w	sl, [r7, #1]
 8021d30:	b2b6      	uxth	r6, r6
 8021d32:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021d34:	fb1a fa07 	smulbb	sl, sl, r7
 8021d38:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d3a:	fb05 a507 	mla	r5, r5, r7, sl
 8021d3e:	9f06      	ldr	r7, [sp, #24]
 8021d40:	f106 0a01 	add.w	sl, r6, #1
 8021d44:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021d48:	b2ad      	uxth	r5, r5
 8021d4a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021d4c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021d50:	f105 0a01 	add.w	sl, r5, #1
 8021d54:	fb1e fe07 	smulbb	lr, lr, r7
 8021d58:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021d5a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021d5e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8021d62:	fb02 e207 	mla	r2, r2, r7, lr
 8021d66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021d6a:	b292      	uxth	r2, r2
 8021d6c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021d70:	f102 0e01 	add.w	lr, r2, #1
 8021d74:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8021d78:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8021d7c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021d80:	ea4e 0606 	orr.w	r6, lr, r6
 8021d84:	ea46 060a 	orr.w	r6, r6, sl
 8021d88:	f829 6b02 	strh.w	r6, [r9], #2
 8021d8c:	e7a7      	b.n	8021cde <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 8021d8e:	f102 0e01 	add.w	lr, r2, #1
 8021d92:	4422      	add	r2, r4
 8021d94:	9f06      	ldr	r7, [sp, #24]
 8021d96:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 8021d9a:	9a06      	ldr	r2, [sp, #24]
 8021d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021da0:	eb02 0a05 	add.w	sl, r2, r5
 8021da4:	4a13      	ldr	r2, [pc, #76]	; (8021df4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8021da6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021daa:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8021dae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021db2:	00d2      	lsls	r2, r2, #3
 8021db4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021db8:	ea49 0202 	orr.w	r2, r9, r2
 8021dbc:	f817 9005 	ldrb.w	r9, [r7, r5]
 8021dc0:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8021dc4:	f826 2b02 	strh.w	r2, [r6], #2
 8021dc8:	fa1f f28e 	uxth.w	r2, lr
 8021dcc:	e758      	b.n	8021c80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 8021dce:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021dd2:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8021dd6:	1a2d      	subs	r5, r5, r0
 8021dd8:	b2ad      	uxth	r5, r5
 8021dda:	2d00      	cmp	r5, #0
 8021ddc:	bf18      	it	ne
 8021dde:	2000      	movne	r0, #0
 8021de0:	e732      	b.n	8021c48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8021de2:	4b05      	ldr	r3, [pc, #20]	; (8021df8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 8021de4:	6818      	ldr	r0, [r3, #0]
 8021de6:	6803      	ldr	r3, [r0, #0]
 8021de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dea:	4798      	blx	r3
 8021dec:	b01f      	add	sp, #124	; 0x7c
 8021dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021df2:	bf00      	nop
 8021df4:	fffff800 	.word	0xfffff800
 8021df8:	2402ae6c 	.word	0x2402ae6c

08021dfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e00:	b091      	sub	sp, #68	; 0x44
 8021e02:	469b      	mov	fp, r3
 8021e04:	4616      	mov	r6, r2
 8021e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021e0a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8021e0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021e12:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8021e16:	4604      	mov	r4, r0
 8021e18:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8021e1c:	4640      	mov	r0, r8
 8021e1e:	460d      	mov	r5, r1
 8021e20:	4659      	mov	r1, fp
 8021e22:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021e26:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8021e2a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8021e2e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8021e32:	f7f5 f9a5 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8021e36:	4631      	mov	r1, r6
 8021e38:	4640      	mov	r0, r8
 8021e3a:	f7f5 f9a1 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 8021e3e:	4b74      	ldr	r3, [pc, #464]	; (8022010 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8021e40:	8818      	ldrh	r0, [r3, #0]
 8021e42:	4b74      	ldr	r3, [pc, #464]	; (8022014 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8021e44:	b202      	sxth	r2, r0
 8021e46:	8819      	ldrh	r1, [r3, #0]
 8021e48:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021e4c:	b20e      	sxth	r6, r1
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	da07      	bge.n	8021e62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8021e52:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8021e56:	4463      	add	r3, ip
 8021e58:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8021e62:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021e66:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8021e6a:	1ad2      	subs	r2, r2, r3
 8021e6c:	4594      	cmp	ip, r2
 8021e6e:	bfc4      	itt	gt
 8021e70:	1ac2      	subgt	r2, r0, r3
 8021e72:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8021e76:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021e7a:	2a00      	cmp	r2, #0
 8021e7c:	da07      	bge.n	8021e8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8021e7e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8021e82:	4462      	add	r2, ip
 8021e84:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8021e88:	2200      	movs	r2, #0
 8021e8a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8021e8e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8021e92:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021e96:	eba6 060a 	sub.w	r6, r6, sl
 8021e9a:	42b2      	cmp	r2, r6
 8021e9c:	bfc4      	itt	gt
 8021e9e:	eba1 020a 	subgt.w	r2, r1, sl
 8021ea2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8021ea6:	4a5c      	ldr	r2, [pc, #368]	; (8022018 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021ea8:	7812      	ldrb	r2, [r2, #0]
 8021eaa:	b9a2      	cbnz	r2, 8021ed6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8021eac:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021eb0:	4286      	cmp	r6, r0
 8021eb2:	4640      	mov	r0, r8
 8021eb4:	9303      	str	r3, [sp, #12]
 8021eb6:	bf14      	ite	ne
 8021eb8:	2600      	movne	r6, #0
 8021eba:	2601      	moveq	r6, #1
 8021ebc:	f7f5 f9a3 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021ec0:	9b03      	ldr	r3, [sp, #12]
 8021ec2:	b160      	cbz	r0, 8021ede <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021ec4:	2300      	movs	r3, #0
 8021ec6:	8023      	strh	r3, [r4, #0]
 8021ec8:	8063      	strh	r3, [r4, #2]
 8021eca:	80a3      	strh	r3, [r4, #4]
 8021ecc:	4620      	mov	r0, r4
 8021ece:	80e3      	strh	r3, [r4, #6]
 8021ed0:	b011      	add	sp, #68	; 0x44
 8021ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ed6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8021eda:	428e      	cmp	r6, r1
 8021edc:	e7e9      	b.n	8021eb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8021ede:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021ee2:	a90e      	add	r1, sp, #56	; 0x38
 8021ee4:	900e      	str	r0, [sp, #56]	; 0x38
 8021ee6:	a80c      	add	r0, sp, #48	; 0x30
 8021ee8:	9205      	str	r2, [sp, #20]
 8021eea:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021eee:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8021ef2:	9206      	str	r2, [sp, #24]
 8021ef4:	f8bb 2000 	ldrh.w	r2, [fp]
 8021ef8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8021efc:	1a9b      	subs	r3, r3, r2
 8021efe:	b21b      	sxth	r3, r3
 8021f00:	9303      	str	r3, [sp, #12]
 8021f02:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021f06:	f8df b118 	ldr.w	fp, [pc, #280]	; 8022020 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021f0a:	ebaa 0a03 	sub.w	sl, sl, r3
 8021f0e:	fa0f f38a 	sxth.w	r3, sl
 8021f12:	9304      	str	r3, [sp, #16]
 8021f14:	9b03      	ldr	r3, [sp, #12]
 8021f16:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8021f1a:	9b04      	ldr	r3, [sp, #16]
 8021f1c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021f20:	9b05      	ldr	r3, [sp, #20]
 8021f22:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021f26:	9b06      	ldr	r3, [sp, #24]
 8021f28:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021f2c:	f7f8 fbbe 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f30:	4640      	mov	r0, r8
 8021f32:	f7f8 fb93 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f36:	a80e      	add	r0, sp, #56	; 0x38
 8021f38:	f7f8 fb90 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f3c:	4b37      	ldr	r3, [pc, #220]	; (802201c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021f3e:	4628      	mov	r0, r5
 8021f40:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8021f44:	881b      	ldrh	r3, [r3, #0]
 8021f46:	9307      	str	r3, [sp, #28]
 8021f48:	682b      	ldr	r3, [r5, #0]
 8021f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f4c:	4798      	blx	r3
 8021f4e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8021f52:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021f56:	4681      	mov	r9, r0
 8021f58:	f8db 0000 	ldr.w	r0, [fp]
 8021f5c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8021f60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8021f62:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021f66:	6803      	ldr	r3, [r0, #0]
 8021f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f6a:	4798      	blx	r3
 8021f6c:	4607      	mov	r7, r0
 8021f6e:	f8db 0000 	ldr.w	r0, [fp]
 8021f72:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021f76:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021f7a:	6803      	ldr	r3, [r0, #0]
 8021f7c:	9109      	str	r1, [sp, #36]	; 0x24
 8021f7e:	9208      	str	r2, [sp, #32]
 8021f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f82:	4798      	blx	r3
 8021f84:	f010 0f01 	tst.w	r0, #1
 8021f88:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021f8c:	d012      	beq.n	8021fb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8021f8e:	f8db 0000 	ldr.w	r0, [fp]
 8021f92:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021f96:	6803      	ldr	r3, [r0, #0]
 8021f98:	9200      	str	r2, [sp, #0]
 8021f9a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8021f9c:	462b      	mov	r3, r5
 8021f9e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021fa2:	47b0      	blx	r6
 8021fa4:	9b03      	ldr	r3, [sp, #12]
 8021fa6:	8023      	strh	r3, [r4, #0]
 8021fa8:	9b04      	ldr	r3, [sp, #16]
 8021faa:	8063      	strh	r3, [r4, #2]
 8021fac:	9b05      	ldr	r3, [sp, #20]
 8021fae:	80a3      	strh	r3, [r4, #4]
 8021fb0:	9b06      	ldr	r3, [sp, #24]
 8021fb2:	e78b      	b.n	8021ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021fb4:	fb09 f202 	mul.w	r2, r9, r2
 8021fb8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021fbc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021fc0:	440f      	add	r7, r1
 8021fc2:	b166      	cbz	r6, 8021fde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021fc4:	9a07      	ldr	r2, [sp, #28]
 8021fc6:	4592      	cmp	sl, r2
 8021fc8:	d109      	bne.n	8021fde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021fca:	f8db 0000 	ldr.w	r0, [fp]
 8021fce:	fb09 f303 	mul.w	r3, r9, r3
 8021fd2:	4629      	mov	r1, r5
 8021fd4:	6802      	ldr	r2, [r0, #0]
 8021fd6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8021fd8:	463a      	mov	r2, r7
 8021fda:	47b0      	blx	r6
 8021fdc:	e7e2      	b.n	8021fa4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021fde:	fb0a f303 	mul.w	r3, sl, r3
 8021fe2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021fe6:	f8df b038 	ldr.w	fp, [pc, #56]	; 8022020 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021fea:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021fee:	4545      	cmp	r5, r8
 8021ff0:	d2d8      	bcs.n	8021fa4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021ff2:	f8db 0000 	ldr.w	r0, [fp]
 8021ff6:	4629      	mov	r1, r5
 8021ff8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021ffc:	4435      	add	r5, r6
 8021ffe:	6802      	ldr	r2, [r0, #0]
 8022000:	005b      	lsls	r3, r3, #1
 8022002:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8022006:	463a      	mov	r2, r7
 8022008:	47d0      	blx	sl
 802200a:	444f      	add	r7, r9
 802200c:	e7ef      	b.n	8021fee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 802200e:	bf00      	nop
 8022010:	2402ae60 	.word	0x2402ae60
 8022014:	2402ae62 	.word	0x2402ae62
 8022018:	2402ae64 	.word	0x2402ae64
 802201c:	2402ae66 	.word	0x2402ae66
 8022020:	2402ae6c 	.word	0x2402ae6c

08022024 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022026:	4606      	mov	r6, r0
 8022028:	b087      	sub	sp, #28
 802202a:	460c      	mov	r4, r1
 802202c:	4617      	mov	r7, r2
 802202e:	461d      	mov	r5, r3
 8022030:	b333      	cbz	r3, 8022080 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022032:	4608      	mov	r0, r1
 8022034:	f7f5 f8e7 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022038:	bb10      	cbnz	r0, 8022080 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802203a:	6820      	ldr	r0, [r4, #0]
 802203c:	ab04      	add	r3, sp, #16
 802203e:	6861      	ldr	r1, [r4, #4]
 8022040:	4c1b      	ldr	r4, [pc, #108]	; (80220b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022042:	c303      	stmia	r3!, {r0, r1}
 8022044:	a804      	add	r0, sp, #16
 8022046:	f7f8 fb09 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802204a:	6820      	ldr	r0, [r4, #0]
 802204c:	6803      	ldr	r3, [r0, #0]
 802204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022050:	4798      	blx	r3
 8022052:	2dff      	cmp	r5, #255	; 0xff
 8022054:	d016      	beq.n	8022084 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8022056:	f010 0f08 	tst.w	r0, #8
 802205a:	6820      	ldr	r0, [r4, #0]
 802205c:	d015      	beq.n	802208a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 802205e:	2400      	movs	r4, #0
 8022060:	6801      	ldr	r1, [r0, #0]
 8022062:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022066:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802206a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 802206e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022072:	9401      	str	r4, [sp, #4]
 8022074:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022078:	9400      	str	r4, [sp, #0]
 802207a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 802207c:	4639      	mov	r1, r7
 802207e:	47a0      	blx	r4
 8022080:	b007      	add	sp, #28
 8022082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022084:	f010 0f02 	tst.w	r0, #2
 8022088:	e7e7      	b.n	802205a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802208a:	6803      	ldr	r3, [r0, #0]
 802208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802208e:	4798      	blx	r3
 8022090:	4b08      	ldr	r3, [pc, #32]	; (80220b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022092:	4601      	mov	r1, r0
 8022094:	4630      	mov	r0, r6
 8022096:	881a      	ldrh	r2, [r3, #0]
 8022098:	6833      	ldr	r3, [r6, #0]
 802209a:	e9cd 7500 	strd	r7, r5, [sp]
 802209e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80220a0:	ab04      	add	r3, sp, #16
 80220a2:	47a8      	blx	r5
 80220a4:	6820      	ldr	r0, [r4, #0]
 80220a6:	6803      	ldr	r3, [r0, #0]
 80220a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220aa:	4798      	blx	r3
 80220ac:	e7e8      	b.n	8022080 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80220ae:	bf00      	nop
 80220b0:	2402ae6c 	.word	0x2402ae6c
 80220b4:	2402ae66 	.word	0x2402ae66

080220b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80220b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220bc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80220c0:	4688      	mov	r8, r1
 80220c2:	4614      	mov	r4, r2
 80220c4:	461d      	mov	r5, r3
 80220c6:	9e08      	ldr	r6, [sp, #32]
 80220c8:	2f00      	cmp	r7, #0
 80220ca:	f000 80ab 	beq.w	8022224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80220ce:	4618      	mov	r0, r3
 80220d0:	f7f5 f899 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 80220d4:	2800      	cmp	r0, #0
 80220d6:	f040 80a5 	bne.w	8022224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80220da:	f9b5 1000 	ldrsh.w	r1, [r5]
 80220de:	2fff      	cmp	r7, #255	; 0xff
 80220e0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80220e4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80220e8:	fb04 1303 	mla	r3, r4, r3, r1
 80220ec:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80220f0:	eba4 0200 	sub.w	r2, r4, r0
 80220f4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80220f8:	fb04 f505 	mul.w	r5, r4, r5
 80220fc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8022100:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8022104:	d04a      	beq.n	802219c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8022106:	b2bc      	uxth	r4, r7
 8022108:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 802210c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8022110:	fa5f f788 	uxtb.w	r7, r8
 8022114:	b2f3      	uxtb	r3, r6
 8022116:	0040      	lsls	r0, r0, #1
 8022118:	fb0e fe04 	mul.w	lr, lr, r4
 802211c:	4367      	muls	r7, r4
 802211e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8022122:	4363      	muls	r3, r4
 8022124:	fa1f fc8c 	uxth.w	ip, ip
 8022128:	42a9      	cmp	r1, r5
 802212a:	d27b      	bcs.n	8022224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 802212c:	eb01 0900 	add.w	r9, r1, r0
 8022130:	4549      	cmp	r1, r9
 8022132:	d231      	bcs.n	8022198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8022134:	880a      	ldrh	r2, [r1, #0]
 8022136:	1214      	asrs	r4, r2, #8
 8022138:	10d6      	asrs	r6, r2, #3
 802213a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802213e:	00d2      	lsls	r2, r2, #3
 8022140:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022144:	b2d2      	uxtb	r2, r2
 8022146:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802214a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802214e:	fb14 f40c 	smulbb	r4, r4, ip
 8022152:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022156:	fb12 f20c 	smulbb	r2, r2, ip
 802215a:	fb16 f60c 	smulbb	r6, r6, ip
 802215e:	4474      	add	r4, lr
 8022160:	441a      	add	r2, r3
 8022162:	b2a4      	uxth	r4, r4
 8022164:	443e      	add	r6, r7
 8022166:	b292      	uxth	r2, r2
 8022168:	f104 0a01 	add.w	sl, r4, #1
 802216c:	b2b6      	uxth	r6, r6
 802216e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022172:	f102 0a01 	add.w	sl, r2, #1
 8022176:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802217a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802217e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022182:	4322      	orrs	r2, r4
 8022184:	1c74      	adds	r4, r6, #1
 8022186:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 802218a:	0976      	lsrs	r6, r6, #5
 802218c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022190:	4332      	orrs	r2, r6
 8022192:	f821 2b02 	strh.w	r2, [r1], #2
 8022196:	e7cb      	b.n	8022130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8022198:	4441      	add	r1, r8
 802219a:	e7c5      	b.n	8022128 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 802219c:	0973      	lsrs	r3, r6, #5
 802219e:	4f22      	ldr	r7, [pc, #136]	; (8022228 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 80221a0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80221a4:	ea08 0707 	and.w	r7, r8, r7
 80221a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80221ac:	433b      	orrs	r3, r7
 80221ae:	07e7      	lsls	r7, r4, #31
 80221b0:	ea43 0306 	orr.w	r3, r3, r6
 80221b4:	b29b      	uxth	r3, r3
 80221b6:	d50b      	bpl.n	80221d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 80221b8:	0040      	lsls	r0, r0, #1
 80221ba:	0052      	lsls	r2, r2, #1
 80221bc:	42a9      	cmp	r1, r5
 80221be:	d231      	bcs.n	8022224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80221c0:	180c      	adds	r4, r1, r0
 80221c2:	42a1      	cmp	r1, r4
 80221c4:	d202      	bcs.n	80221cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80221c6:	f821 3b02 	strh.w	r3, [r1], #2
 80221ca:	e7fa      	b.n	80221c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80221cc:	4411      	add	r1, r2
 80221ce:	e7f5      	b.n	80221bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80221d0:	078e      	lsls	r6, r1, #30
 80221d2:	d008      	beq.n	80221e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80221d4:	0066      	lsls	r6, r4, #1
 80221d6:	460a      	mov	r2, r1
 80221d8:	42aa      	cmp	r2, r5
 80221da:	d202      	bcs.n	80221e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80221dc:	8013      	strh	r3, [r2, #0]
 80221de:	4432      	add	r2, r6
 80221e0:	e7fa      	b.n	80221d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80221e2:	3102      	adds	r1, #2
 80221e4:	3801      	subs	r0, #1
 80221e6:	07c2      	lsls	r2, r0, #31
 80221e8:	d50b      	bpl.n	8022202 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80221ea:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80221ee:	0066      	lsls	r6, r4, #1
 80221f0:	3a01      	subs	r2, #1
 80221f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80221f6:	42aa      	cmp	r2, r5
 80221f8:	d202      	bcs.n	8022200 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 80221fa:	8013      	strh	r3, [r2, #0]
 80221fc:	4432      	add	r2, r6
 80221fe:	e7fa      	b.n	80221f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8022200:	3801      	subs	r0, #1
 8022202:	b178      	cbz	r0, 8022224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8022204:	1040      	asrs	r0, r0, #1
 8022206:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 802220a:	0080      	lsls	r0, r0, #2
 802220c:	0064      	lsls	r4, r4, #1
 802220e:	42a9      	cmp	r1, r5
 8022210:	d208      	bcs.n	8022224 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8022212:	180e      	adds	r6, r1, r0
 8022214:	460a      	mov	r2, r1
 8022216:	42b2      	cmp	r2, r6
 8022218:	d202      	bcs.n	8022220 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 802221a:	f842 3b04 	str.w	r3, [r2], #4
 802221e:	e7fa      	b.n	8022216 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8022220:	4421      	add	r1, r4
 8022222:	e7f4      	b.n	802220e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8022224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022228:	00fff800 	.word	0x00fff800

0802222c <_ZN8touchgfx8LCD16bppC1Ev>:
 802222c:	2200      	movs	r2, #0
 802222e:	4912      	ldr	r1, [pc, #72]	; (8022278 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8022230:	6042      	str	r2, [r0, #4]
 8022232:	6001      	str	r1, [r0, #0]
 8022234:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022238:	e9c0 2204 	strd	r2, r2, [r0, #16]
 802223c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022240:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022244:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022248:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 802224c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022250:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022254:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022258:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 802225c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022260:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022264:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8022268:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 802226c:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 8022270:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8022274:	4770      	bx	lr
 8022276:	bf00      	nop
 8022278:	080303d8 	.word	0x080303d8

0802227c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022280:	b08d      	sub	sp, #52	; 0x34
 8022282:	460d      	mov	r5, r1
 8022284:	4604      	mov	r4, r0
 8022286:	4699      	mov	r9, r3
 8022288:	6808      	ldr	r0, [r1, #0]
 802228a:	ab08      	add	r3, sp, #32
 802228c:	6849      	ldr	r1, [r1, #4]
 802228e:	c303      	stmia	r3!, {r0, r1}
 8022290:	6810      	ldr	r0, [r2, #0]
 8022292:	ab0a      	add	r3, sp, #40	; 0x28
 8022294:	6851      	ldr	r1, [r2, #4]
 8022296:	c303      	stmia	r3!, {r0, r1}
 8022298:	a808      	add	r0, sp, #32
 802229a:	f7f8 f9df 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802229e:	4629      	mov	r1, r5
 80222a0:	a80a      	add	r0, sp, #40	; 0x28
 80222a2:	4d67      	ldr	r5, [pc, #412]	; (8022440 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80222a4:	f7f8 fa02 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222a8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80222ac:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80222b0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80222b4:	6828      	ldr	r0, [r5, #0]
 80222b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80222ba:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80222be:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80222c2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80222c6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80222ca:	440a      	add	r2, r1
 80222cc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80222d0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80222d4:	4413      	add	r3, r2
 80222d6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80222da:	6803      	ldr	r3, [r0, #0]
 80222dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222de:	4798      	blx	r3
 80222e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80222e4:	d119      	bne.n	802231a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80222e6:	f010 0f20 	tst.w	r0, #32
 80222ea:	6828      	ldr	r0, [r5, #0]
 80222ec:	d018      	beq.n	8022320 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80222ee:	2500      	movs	r5, #0
 80222f0:	6801      	ldr	r1, [r0, #0]
 80222f2:	b2b6      	uxth	r6, r6
 80222f4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80222f8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80222fc:	9601      	str	r6, [sp, #4]
 80222fe:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022302:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022306:	9502      	str	r5, [sp, #8]
 8022308:	fa1f f588 	uxth.w	r5, r8
 802230c:	9500      	str	r5, [sp, #0]
 802230e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022310:	4621      	mov	r1, r4
 8022312:	47a8      	blx	r5
 8022314:	b00d      	add	sp, #52	; 0x34
 8022316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802231a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802231e:	e7e4      	b.n	80222ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022320:	6803      	ldr	r3, [r0, #0]
 8022322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022324:	4798      	blx	r3
 8022326:	4947      	ldr	r1, [pc, #284]	; (8022444 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022328:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 802232c:	880b      	ldrh	r3, [r1, #0]
 802232e:	468a      	mov	sl, r1
 8022330:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022334:	fb03 5202 	mla	r2, r3, r2, r5
 8022338:	4373      	muls	r3, r6
 802233a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802233e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022342:	9307      	str	r3, [sp, #28]
 8022344:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022348:	9306      	str	r3, [sp, #24]
 802234a:	9b07      	ldr	r3, [sp, #28]
 802234c:	4298      	cmp	r0, r3
 802234e:	d270      	bcs.n	8022432 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022350:	9b06      	ldr	r3, [sp, #24]
 8022352:	4621      	mov	r1, r4
 8022354:	eb00 0b03 	add.w	fp, r0, r3
 8022358:	4558      	cmp	r0, fp
 802235a:	d25d      	bcs.n	8022418 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 802235c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022360:	0e23      	lsrs	r3, r4, #24
 8022362:	d014      	beq.n	802238e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022364:	2bff      	cmp	r3, #255	; 0xff
 8022366:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 802236a:	d112      	bne.n	8022392 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802236c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022370:	d10f      	bne.n	8022392 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022372:	0963      	lsrs	r3, r4, #5
 8022374:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022378:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802237c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022380:	f02c 0c07 	bic.w	ip, ip, #7
 8022384:	ea43 0c0c 	orr.w	ip, r3, ip
 8022388:	ea4c 0404 	orr.w	r4, ip, r4
 802238c:	8004      	strh	r4, [r0, #0]
 802238e:	3002      	adds	r0, #2
 8022390:	e7e2      	b.n	8022358 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022392:	fb09 f303 	mul.w	r3, r9, r3
 8022396:	8807      	ldrh	r7, [r0, #0]
 8022398:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 802239c:	fa5f fc8c 	uxtb.w	ip, ip
 80223a0:	1c5a      	adds	r2, r3, #1
 80223a2:	123e      	asrs	r6, r7, #8
 80223a4:	10fd      	asrs	r5, r7, #3
 80223a6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80223aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80223ae:	00ff      	lsls	r7, r7, #3
 80223b0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80223b4:	1212      	asrs	r2, r2, #8
 80223b6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80223ba:	b293      	uxth	r3, r2
 80223bc:	43d2      	mvns	r2, r2
 80223be:	b2ff      	uxtb	r7, r7
 80223c0:	fb1e fe03 	smulbb	lr, lr, r3
 80223c4:	b2d2      	uxtb	r2, r2
 80223c6:	fb1c fc03 	smulbb	ip, ip, r3
 80223ca:	b2e4      	uxtb	r4, r4
 80223cc:	fb06 e602 	mla	r6, r6, r2, lr
 80223d0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80223d4:	fb14 f403 	smulbb	r4, r4, r3
 80223d8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80223dc:	b2b6      	uxth	r6, r6
 80223de:	fb05 c502 	mla	r5, r5, r2, ip
 80223e2:	fb07 4702 	mla	r7, r7, r2, r4
 80223e6:	f106 0e01 	add.w	lr, r6, #1
 80223ea:	b2ad      	uxth	r5, r5
 80223ec:	b2bf      	uxth	r7, r7
 80223ee:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80223f2:	f105 0c01 	add.w	ip, r5, #1
 80223f6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80223fa:	1c7e      	adds	r6, r7, #1
 80223fc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022400:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022404:	096d      	lsrs	r5, r5, #5
 8022406:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802240a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802240e:	ea46 060e 	orr.w	r6, r6, lr
 8022412:	432e      	orrs	r6, r5
 8022414:	8006      	strh	r6, [r0, #0]
 8022416:	e7ba      	b.n	802238e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022418:	f8ba 3000 	ldrh.w	r3, [sl]
 802241c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8022420:	eba3 0308 	sub.w	r3, r3, r8
 8022424:	eba4 0408 	sub.w	r4, r4, r8
 8022428:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802242c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022430:	e78b      	b.n	802234a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8022432:	4b03      	ldr	r3, [pc, #12]	; (8022440 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022434:	6818      	ldr	r0, [r3, #0]
 8022436:	6803      	ldr	r3, [r0, #0]
 8022438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802243a:	4798      	blx	r3
 802243c:	e76a      	b.n	8022314 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802243e:	bf00      	nop
 8022440:	2402ae6c 	.word	0x2402ae6c
 8022444:	2402ae66 	.word	0x2402ae66

08022448 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802244c:	b085      	sub	sp, #20
 802244e:	6810      	ldr	r0, [r2, #0]
 8022450:	460c      	mov	r4, r1
 8022452:	6851      	ldr	r1, [r2, #4]
 8022454:	466d      	mov	r5, sp
 8022456:	4616      	mov	r6, r2
 8022458:	c503      	stmia	r5!, {r0, r1}
 802245a:	6818      	ldr	r0, [r3, #0]
 802245c:	6859      	ldr	r1, [r3, #4]
 802245e:	c503      	stmia	r5!, {r0, r1}
 8022460:	4668      	mov	r0, sp
 8022462:	4d2e      	ldr	r5, [pc, #184]	; (802251c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022464:	f7f8 f8fa 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022468:	4631      	mov	r1, r6
 802246a:	a802      	add	r0, sp, #8
 802246c:	4e2c      	ldr	r6, [pc, #176]	; (8022520 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802246e:	f7f8 f91d 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022472:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022476:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802247a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802247e:	6828      	ldr	r0, [r5, #0]
 8022480:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022484:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022488:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 802248c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022490:	f8bd 1000 	ldrh.w	r1, [sp]
 8022494:	440a      	add	r2, r1
 8022496:	f8ad 2008 	strh.w	r2, [sp, #8]
 802249a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802249e:	4413      	add	r3, r2
 80224a0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80224a4:	6803      	ldr	r3, [r0, #0]
 80224a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80224a8:	4798      	blx	r3
 80224aa:	8833      	ldrh	r3, [r6, #0]
 80224ac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80224b0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80224b4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80224b8:	f8df e068 	ldr.w	lr, [pc, #104]	; 8022524 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80224bc:	fb03 1202 	mla	r2, r3, r2, r1
 80224c0:	fb08 f303 	mul.w	r3, r8, r3
 80224c4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80224c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80224cc:	4298      	cmp	r0, r3
 80224ce:	d21d      	bcs.n	802250c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80224d0:	eb00 080c 	add.w	r8, r0, ip
 80224d4:	4540      	cmp	r0, r8
 80224d6:	d20f      	bcs.n	80224f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80224d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80224dc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80224e0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80224e4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80224e8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80224ec:	ea42 0209 	orr.w	r2, r2, r9
 80224f0:	430a      	orrs	r2, r1
 80224f2:	f820 2b02 	strh.w	r2, [r0], #2
 80224f6:	e7ed      	b.n	80224d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80224f8:	8832      	ldrh	r2, [r6, #0]
 80224fa:	1bd2      	subs	r2, r2, r7
 80224fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022500:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022504:	1bd2      	subs	r2, r2, r7
 8022506:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802250a:	e7df      	b.n	80224cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 802250c:	6828      	ldr	r0, [r5, #0]
 802250e:	6803      	ldr	r3, [r0, #0]
 8022510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022512:	4798      	blx	r3
 8022514:	b005      	add	sp, #20
 8022516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802251a:	bf00      	nop
 802251c:	2402ae6c 	.word	0x2402ae6c
 8022520:	2402ae66 	.word	0x2402ae66
 8022524:	fffff800 	.word	0xfffff800

08022528 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8022528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802252c:	b08e      	sub	sp, #56	; 0x38
 802252e:	460e      	mov	r6, r1
 8022530:	4604      	mov	r4, r0
 8022532:	461d      	mov	r5, r3
 8022534:	6808      	ldr	r0, [r1, #0]
 8022536:	ab0a      	add	r3, sp, #40	; 0x28
 8022538:	6849      	ldr	r1, [r1, #4]
 802253a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8022710 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802253e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8022714 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022542:	c303      	stmia	r3!, {r0, r1}
 8022544:	6810      	ldr	r0, [r2, #0]
 8022546:	ab0c      	add	r3, sp, #48	; 0x30
 8022548:	6851      	ldr	r1, [r2, #4]
 802254a:	c303      	stmia	r3!, {r0, r1}
 802254c:	a80a      	add	r0, sp, #40	; 0x28
 802254e:	f7f8 f885 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022552:	4631      	mov	r1, r6
 8022554:	a80c      	add	r0, sp, #48	; 0x30
 8022556:	f7f8 f8a9 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802255a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802255e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022562:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022566:	f8d8 0000 	ldr.w	r0, [r8]
 802256a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802256e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8022572:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8022576:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802257a:	440c      	add	r4, r1
 802257c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022580:	440a      	add	r2, r1
 8022582:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022586:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802258a:	4413      	add	r3, r2
 802258c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022590:	6803      	ldr	r3, [r0, #0]
 8022592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022594:	4798      	blx	r3
 8022596:	2dff      	cmp	r5, #255	; 0xff
 8022598:	d124      	bne.n	80225e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802259a:	f010 0f01 	tst.w	r0, #1
 802259e:	f8d8 0000 	ldr.w	r0, [r8]
 80225a2:	d022      	beq.n	80225ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80225a4:	2100      	movs	r1, #0
 80225a6:	f04f 0e01 	mov.w	lr, #1
 80225aa:	f8d0 c000 	ldr.w	ip, [r0]
 80225ae:	b2b6      	uxth	r6, r6
 80225b0:	f8cd e018 	str.w	lr, [sp, #24]
 80225b4:	b2bf      	uxth	r7, r7
 80225b6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80225ba:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80225be:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80225c2:	f8b9 e000 	ldrh.w	lr, [r9]
 80225c6:	9503      	str	r5, [sp, #12]
 80225c8:	9601      	str	r6, [sp, #4]
 80225ca:	9700      	str	r7, [sp, #0]
 80225cc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80225d0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80225d4:	9102      	str	r1, [sp, #8]
 80225d6:	4621      	mov	r1, r4
 80225d8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80225dc:	47a8      	blx	r5
 80225de:	b00e      	add	sp, #56	; 0x38
 80225e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225e4:	f010 0f04 	tst.w	r0, #4
 80225e8:	e7d9      	b.n	802259e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80225ea:	6803      	ldr	r3, [r0, #0]
 80225ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225ee:	4798      	blx	r3
 80225f0:	f8b9 3000 	ldrh.w	r3, [r9]
 80225f4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80225f8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80225fc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8022600:	435e      	muls	r6, r3
 8022602:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022606:	2dff      	cmp	r5, #255	; 0xff
 8022608:	fb03 1202 	mla	r2, r3, r2, r1
 802260c:	ebac 0c07 	sub.w	ip, ip, r7
 8022610:	eba3 0707 	sub.w	r7, r3, r7
 8022614:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022618:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802261c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8022620:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8022624:	d049      	beq.n	80226ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8022626:	43eb      	mvns	r3, r5
 8022628:	fa1f f985 	uxth.w	r9, r5
 802262c:	b2db      	uxtb	r3, r3
 802262e:	42b0      	cmp	r0, r6
 8022630:	d266      	bcs.n	8022700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022632:	eb00 0a0e 	add.w	sl, r0, lr
 8022636:	4550      	cmp	r0, sl
 8022638:	4621      	mov	r1, r4
 802263a:	f104 0403 	add.w	r4, r4, #3
 802263e:	d25b      	bcs.n	80226f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022640:	8802      	ldrh	r2, [r0, #0]
 8022642:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022646:	ea4f 2822 	mov.w	r8, r2, asr #8
 802264a:	fb11 f109 	smulbb	r1, r1, r9
 802264e:	10d5      	asrs	r5, r2, #3
 8022650:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022654:	00d2      	lsls	r2, r2, #3
 8022656:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802265a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802265e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022662:	fb08 1803 	mla	r8, r8, r3, r1
 8022666:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802266a:	b2d2      	uxtb	r2, r2
 802266c:	fb11 f109 	smulbb	r1, r1, r9
 8022670:	fa1f f888 	uxth.w	r8, r8
 8022674:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022678:	fb05 1503 	mla	r5, r5, r3, r1
 802267c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022680:	fb11 f109 	smulbb	r1, r1, r9
 8022684:	b2ad      	uxth	r5, r5
 8022686:	fb02 1203 	mla	r2, r2, r3, r1
 802268a:	f108 0101 	add.w	r1, r8, #1
 802268e:	b292      	uxth	r2, r2
 8022690:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022694:	1c51      	adds	r1, r2, #1
 8022696:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802269a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802269e:	1c69      	adds	r1, r5, #1
 80226a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80226a4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80226a8:	096d      	lsrs	r5, r5, #5
 80226aa:	ea42 0208 	orr.w	r2, r2, r8
 80226ae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80226b2:	432a      	orrs	r2, r5
 80226b4:	f820 2b02 	strh.w	r2, [r0], #2
 80226b8:	e7bd      	b.n	8022636 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80226ba:	4a14      	ldr	r2, [pc, #80]	; (802270c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80226bc:	42b0      	cmp	r0, r6
 80226be:	d21f      	bcs.n	8022700 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80226c0:	eb00 050e 	add.w	r5, r0, lr
 80226c4:	42a8      	cmp	r0, r5
 80226c6:	4621      	mov	r1, r4
 80226c8:	f104 0403 	add.w	r4, r4, #3
 80226cc:	d210      	bcs.n	80226f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80226ce:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80226d2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80226d6:	00db      	lsls	r3, r3, #3
 80226d8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80226dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80226e0:	430b      	orrs	r3, r1
 80226e2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80226e6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80226ea:	f820 3b02 	strh.w	r3, [r0], #2
 80226ee:	e7e9      	b.n	80226c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80226f0:	4438      	add	r0, r7
 80226f2:	eb01 040c 	add.w	r4, r1, ip
 80226f6:	e7e1      	b.n	80226bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80226f8:	4438      	add	r0, r7
 80226fa:	eb01 040c 	add.w	r4, r1, ip
 80226fe:	e796      	b.n	802262e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022700:	4b03      	ldr	r3, [pc, #12]	; (8022710 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022702:	6818      	ldr	r0, [r3, #0]
 8022704:	6803      	ldr	r3, [r0, #0]
 8022706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022708:	4798      	blx	r3
 802270a:	e768      	b.n	80225de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 802270c:	fffff800 	.word	0xfffff800
 8022710:	2402ae6c 	.word	0x2402ae6c
 8022714:	2402ae66 	.word	0x2402ae66

08022718 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022718:	b4f0      	push	{r4, r5, r6, r7}
 802271a:	4616      	mov	r6, r2
 802271c:	461c      	mov	r4, r3
 802271e:	460d      	mov	r5, r1
 8022720:	9a04      	ldr	r2, [sp, #16]
 8022722:	2e01      	cmp	r6, #1
 8022724:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022728:	f89d 7018 	ldrb.w	r7, [sp, #24]
 802272c:	d012      	beq.n	8022754 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802272e:	d303      	bcc.n	8022738 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8022730:	2e02      	cmp	r6, #2
 8022732:	d00a      	beq.n	802274a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8022734:	bcf0      	pop	{r4, r5, r6, r7}
 8022736:	4770      	bx	lr
 8022738:	6805      	ldr	r5, [r0, #0]
 802273a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802273e:	68ed      	ldr	r5, [r5, #12]
 8022740:	4613      	mov	r3, r2
 8022742:	4622      	mov	r2, r4
 8022744:	46ac      	mov	ip, r5
 8022746:	bcf0      	pop	{r4, r5, r6, r7}
 8022748:	4760      	bx	ip
 802274a:	4621      	mov	r1, r4
 802274c:	4628      	mov	r0, r5
 802274e:	bcf0      	pop	{r4, r5, r6, r7}
 8022750:	f7ff bd94 	b.w	802227c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022754:	4621      	mov	r1, r4
 8022756:	4628      	mov	r0, r5
 8022758:	bcf0      	pop	{r4, r5, r6, r7}
 802275a:	f7ff bee5 	b.w	8022528 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08022760 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022764:	b093      	sub	sp, #76	; 0x4c
 8022766:	4681      	mov	r9, r0
 8022768:	4688      	mov	r8, r1
 802276a:	6810      	ldr	r0, [r2, #0]
 802276c:	6851      	ldr	r1, [r2, #4]
 802276e:	ac0e      	add	r4, sp, #56	; 0x38
 8022770:	4616      	mov	r6, r2
 8022772:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8022776:	4f6b      	ldr	r7, [pc, #428]	; (8022924 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8022778:	c403      	stmia	r4!, {r0, r1}
 802277a:	6818      	ldr	r0, [r3, #0]
 802277c:	ac10      	add	r4, sp, #64	; 0x40
 802277e:	6859      	ldr	r1, [r3, #4]
 8022780:	c403      	stmia	r4!, {r0, r1}
 8022782:	a80e      	add	r0, sp, #56	; 0x38
 8022784:	f7f7 ff6a 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022788:	4631      	mov	r1, r6
 802278a:	a810      	add	r0, sp, #64	; 0x40
 802278c:	4e66      	ldr	r6, [pc, #408]	; (8022928 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802278e:	f7f7 ff8d 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022792:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022796:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802279a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802279e:	6830      	ldr	r0, [r6, #0]
 80227a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80227a4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80227a8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80227ac:	4489      	add	r9, r1
 80227ae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80227b2:	440a      	add	r2, r1
 80227b4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80227b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80227bc:	4413      	add	r3, r2
 80227be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80227c2:	6803      	ldr	r3, [r0, #0]
 80227c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227c6:	4798      	blx	r3
 80227c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80227cc:	6830      	ldr	r0, [r6, #0]
 80227ce:	d01d      	beq.n	802280c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80227d0:	2200      	movs	r2, #0
 80227d2:	6801      	ldr	r1, [r0, #0]
 80227d4:	b2a4      	uxth	r4, r4
 80227d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80227da:	b2ad      	uxth	r5, r5
 80227dc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80227e0:	220b      	movs	r2, #11
 80227e2:	9207      	str	r2, [sp, #28]
 80227e4:	883a      	ldrh	r2, [r7, #0]
 80227e6:	9502      	str	r5, [sp, #8]
 80227e8:	9206      	str	r2, [sp, #24]
 80227ea:	2201      	movs	r2, #1
 80227ec:	9401      	str	r4, [sp, #4]
 80227ee:	e9cd a204 	strd	sl, r2, [sp, #16]
 80227f2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80227f6:	9203      	str	r2, [sp, #12]
 80227f8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80227fc:	9200      	str	r2, [sp, #0]
 80227fe:	4642      	mov	r2, r8
 8022800:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8022802:	4649      	mov	r1, r9
 8022804:	47a0      	blx	r4
 8022806:	b013      	add	sp, #76	; 0x4c
 8022808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802280c:	6803      	ldr	r3, [r0, #0]
 802280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022810:	4798      	blx	r3
 8022812:	883b      	ldrh	r3, [r7, #0]
 8022814:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022818:	f04f 0e04 	mov.w	lr, #4
 802281c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8022820:	435d      	muls	r5, r3
 8022822:	fb03 1202 	mla	r2, r3, r2, r1
 8022826:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802282a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802282e:	920c      	str	r2, [sp, #48]	; 0x30
 8022830:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022834:	1b12      	subs	r2, r2, r4
 8022836:	920d      	str	r2, [sp, #52]	; 0x34
 8022838:	0062      	lsls	r2, r4, #1
 802283a:	1b1c      	subs	r4, r3, r4
 802283c:	920a      	str	r2, [sp, #40]	; 0x28
 802283e:	0063      	lsls	r3, r4, #1
 8022840:	930b      	str	r3, [sp, #44]	; 0x2c
 8022842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022844:	4298      	cmp	r0, r3
 8022846:	d266      	bcs.n	8022916 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8022848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802284a:	eb00 0b03 	add.w	fp, r0, r3
 802284e:	4558      	cmp	r0, fp
 8022850:	d25c      	bcs.n	802290c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022852:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022856:	fb1e e303 	smlabb	r3, lr, r3, lr
 802285a:	f858 2003 	ldr.w	r2, [r8, r3]
 802285e:	0e11      	lsrs	r1, r2, #24
 8022860:	d012      	beq.n	8022888 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022862:	29ff      	cmp	r1, #255	; 0xff
 8022864:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8022868:	d110      	bne.n	802288c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802286a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802286e:	d10d      	bne.n	802288c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022870:	0953      	lsrs	r3, r2, #5
 8022872:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8022876:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802287a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802287e:	f027 0707 	bic.w	r7, r7, #7
 8022882:	431f      	orrs	r7, r3
 8022884:	433a      	orrs	r2, r7
 8022886:	8002      	strh	r2, [r0, #0]
 8022888:	3002      	adds	r0, #2
 802288a:	e7e0      	b.n	802284e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 802288c:	fb0a f101 	mul.w	r1, sl, r1
 8022890:	8806      	ldrh	r6, [r0, #0]
 8022892:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022896:	b2d2      	uxtb	r2, r2
 8022898:	1c4b      	adds	r3, r1, #1
 802289a:	1235      	asrs	r5, r6, #8
 802289c:	10f4      	asrs	r4, r6, #3
 802289e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80228a2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80228a6:	00f6      	lsls	r6, r6, #3
 80228a8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80228ac:	121b      	asrs	r3, r3, #8
 80228ae:	b2f6      	uxtb	r6, r6
 80228b0:	b299      	uxth	r1, r3
 80228b2:	43db      	mvns	r3, r3
 80228b4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80228b8:	fb1c fc01 	smulbb	ip, ip, r1
 80228bc:	b2db      	uxtb	r3, r3
 80228be:	fb12 f201 	smulbb	r2, r2, r1
 80228c2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80228c6:	fb05 c503 	mla	r5, r5, r3, ip
 80228ca:	b2ff      	uxtb	r7, r7
 80228cc:	fb06 2203 	mla	r2, r6, r3, r2
 80228d0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80228d4:	fb17 f701 	smulbb	r7, r7, r1
 80228d8:	b2ad      	uxth	r5, r5
 80228da:	b292      	uxth	r2, r2
 80228dc:	fb04 7403 	mla	r4, r4, r3, r7
 80228e0:	f105 0c01 	add.w	ip, r5, #1
 80228e4:	1c57      	adds	r7, r2, #1
 80228e6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80228ea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80228ee:	b2a4      	uxth	r4, r4
 80228f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80228f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80228f8:	433d      	orrs	r5, r7
 80228fa:	1c67      	adds	r7, r4, #1
 80228fc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8022900:	0964      	lsrs	r4, r4, #5
 8022902:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022906:	4325      	orrs	r5, r4
 8022908:	8005      	strh	r5, [r0, #0]
 802290a:	e7bd      	b.n	8022888 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802290c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802290e:	4418      	add	r0, r3
 8022910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022912:	4499      	add	r9, r3
 8022914:	e795      	b.n	8022842 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8022916:	4b04      	ldr	r3, [pc, #16]	; (8022928 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8022918:	6818      	ldr	r0, [r3, #0]
 802291a:	6803      	ldr	r3, [r0, #0]
 802291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802291e:	4798      	blx	r3
 8022920:	e771      	b.n	8022806 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8022922:	bf00      	nop
 8022924:	2402ae66 	.word	0x2402ae66
 8022928:	2402ae6c 	.word	0x2402ae6c

0802292c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 802292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022930:	b087      	sub	sp, #28
 8022932:	4680      	mov	r8, r0
 8022934:	460d      	mov	r5, r1
 8022936:	4614      	mov	r4, r2
 8022938:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 802293c:	2e00      	cmp	r6, #0
 802293e:	f000 80b9 	beq.w	8022ab4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8022942:	6810      	ldr	r0, [r2, #0]
 8022944:	af02      	add	r7, sp, #8
 8022946:	6851      	ldr	r1, [r2, #4]
 8022948:	c703      	stmia	r7!, {r0, r1}
 802294a:	6818      	ldr	r0, [r3, #0]
 802294c:	af04      	add	r7, sp, #16
 802294e:	6859      	ldr	r1, [r3, #4]
 8022950:	c703      	stmia	r7!, {r0, r1}
 8022952:	a802      	add	r0, sp, #8
 8022954:	f7f7 fe82 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022958:	4621      	mov	r1, r4
 802295a:	a804      	add	r0, sp, #16
 802295c:	f7f7 fea6 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022960:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022964:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022968:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802296c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022970:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022974:	eb08 0401 	add.w	r4, r8, r1
 8022978:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802297c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022980:	440a      	add	r2, r1
 8022982:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022986:	f8ad 2010 	strh.w	r2, [sp, #16]
 802298a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802298e:	4413      	add	r3, r2
 8022990:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022994:	4b49      	ldr	r3, [pc, #292]	; (8022abc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022996:	6818      	ldr	r0, [r3, #0]
 8022998:	6803      	ldr	r3, [r0, #0]
 802299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802299c:	4798      	blx	r3
 802299e:	4b48      	ldr	r3, [pc, #288]	; (8022ac0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80229a0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80229a4:	2eff      	cmp	r6, #255	; 0xff
 80229a6:	881a      	ldrh	r2, [r3, #0]
 80229a8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80229ac:	fb02 c101 	mla	r1, r2, r1, ip
 80229b0:	fb02 f207 	mul.w	r2, r2, r7
 80229b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80229b8:	f105 0104 	add.w	r1, r5, #4
 80229bc:	461d      	mov	r5, r3
 80229be:	d05a      	beq.n	8022a76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80229c0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80229c4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80229c8:	b2b6      	uxth	r6, r6
 80229ca:	9301      	str	r3, [sp, #4]
 80229cc:	fa1f fe8e 	uxth.w	lr, lr
 80229d0:	4282      	cmp	r2, r0
 80229d2:	d96a      	bls.n	8022aaa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80229d4:	eb00 0b0a 	add.w	fp, r0, sl
 80229d8:	4583      	cmp	fp, r0
 80229da:	d940      	bls.n	8022a5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80229dc:	8805      	ldrh	r5, [r0, #0]
 80229de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80229e2:	122f      	asrs	r7, r5, #8
 80229e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80229e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80229ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80229f0:	00ed      	lsls	r5, r5, #3
 80229f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80229f6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80229fa:	fb17 f70e 	smulbb	r7, r7, lr
 80229fe:	b2ed      	uxtb	r5, r5
 8022a00:	fb19 f90e 	smulbb	r9, r9, lr
 8022a04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022a08:	fb15 f50e 	smulbb	r5, r5, lr
 8022a0c:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022a10:	10df      	asrs	r7, r3, #3
 8022a12:	00db      	lsls	r3, r3, #3
 8022a14:	fa1f fc8c 	uxth.w	ip, ip
 8022a18:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022a1c:	b2db      	uxtb	r3, r3
 8022a1e:	fb07 9706 	mla	r7, r7, r6, r9
 8022a22:	f10c 0901 	add.w	r9, ip, #1
 8022a26:	fb03 5306 	mla	r3, r3, r6, r5
 8022a2a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8022a2e:	b29b      	uxth	r3, r3
 8022a30:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8022a34:	b2bf      	uxth	r7, r7
 8022a36:	f103 0c01 	add.w	ip, r3, #1
 8022a3a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022a3e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022a42:	ea4c 0c09 	orr.w	ip, ip, r9
 8022a46:	f107 0901 	add.w	r9, r7, #1
 8022a4a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8022a4e:	097f      	lsrs	r7, r7, #5
 8022a50:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022a54:	ea4c 0c07 	orr.w	ip, ip, r7
 8022a58:	f820 cb02 	strh.w	ip, [r0], #2
 8022a5c:	e7bc      	b.n	80229d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8022a5e:	9b01      	ldr	r3, [sp, #4]
 8022a60:	881b      	ldrh	r3, [r3, #0]
 8022a62:	eba3 0308 	sub.w	r3, r3, r8
 8022a66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022a6e:	eba3 0308 	sub.w	r3, r3, r8
 8022a72:	441c      	add	r4, r3
 8022a74:	e7ac      	b.n	80229d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8022a76:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022a7a:	4282      	cmp	r2, r0
 8022a7c:	d915      	bls.n	8022aaa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022a7e:	eb00 060a 	add.w	r6, r0, sl
 8022a82:	4286      	cmp	r6, r0
 8022a84:	d906      	bls.n	8022a94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022a86:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022a8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022a8e:	f820 3b02 	strh.w	r3, [r0], #2
 8022a92:	e7f6      	b.n	8022a82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022a94:	882b      	ldrh	r3, [r5, #0]
 8022a96:	eba3 0308 	sub.w	r3, r3, r8
 8022a9a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a9e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022aa2:	eba3 0308 	sub.w	r3, r3, r8
 8022aa6:	441c      	add	r4, r3
 8022aa8:	e7e7      	b.n	8022a7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8022aaa:	4b04      	ldr	r3, [pc, #16]	; (8022abc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022aac:	6818      	ldr	r0, [r3, #0]
 8022aae:	6803      	ldr	r3, [r0, #0]
 8022ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ab2:	4798      	blx	r3
 8022ab4:	b007      	add	sp, #28
 8022ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aba:	bf00      	nop
 8022abc:	2402ae6c 	.word	0x2402ae6c
 8022ac0:	2402ae66 	.word	0x2402ae66

08022ac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ac8:	b091      	sub	sp, #68	; 0x44
 8022aca:	4680      	mov	r8, r0
 8022acc:	460f      	mov	r7, r1
 8022ace:	4614      	mov	r4, r2
 8022ad0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8022ad4:	2d00      	cmp	r5, #0
 8022ad6:	d051      	beq.n	8022b7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022ad8:	6810      	ldr	r0, [r2, #0]
 8022ada:	ae0c      	add	r6, sp, #48	; 0x30
 8022adc:	6851      	ldr	r1, [r2, #4]
 8022ade:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8022ce0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8022ae2:	c603      	stmia	r6!, {r0, r1}
 8022ae4:	6818      	ldr	r0, [r3, #0]
 8022ae6:	ae0e      	add	r6, sp, #56	; 0x38
 8022ae8:	6859      	ldr	r1, [r3, #4]
 8022aea:	c603      	stmia	r6!, {r0, r1}
 8022aec:	a80c      	add	r0, sp, #48	; 0x30
 8022aee:	f7f7 fdb5 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022af2:	4621      	mov	r1, r4
 8022af4:	a80e      	add	r0, sp, #56	; 0x38
 8022af6:	f7f7 fdd9 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022afa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022afe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022b02:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8022b06:	f8d9 0000 	ldr.w	r0, [r9]
 8022b0a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022b0e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8022b12:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8022b16:	eb08 0401 	add.w	r4, r8, r1
 8022b1a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022b1e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8022ce4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8022b22:	440a      	add	r2, r1
 8022b24:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022b28:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022b2c:	4413      	add	r3, r2
 8022b2e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022b32:	6803      	ldr	r3, [r0, #0]
 8022b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b36:	4798      	blx	r3
 8022b38:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022b3c:	f8d9 0000 	ldr.w	r0, [r9]
 8022b40:	d01f      	beq.n	8022b82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8022b42:	2200      	movs	r2, #0
 8022b44:	6801      	ldr	r1, [r0, #0]
 8022b46:	b2b6      	uxth	r6, r6
 8022b48:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022b4c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022b50:	220b      	movs	r2, #11
 8022b52:	9207      	str	r2, [sp, #28]
 8022b54:	f8b8 2000 	ldrh.w	r2, [r8]
 8022b58:	9601      	str	r6, [sp, #4]
 8022b5a:	9206      	str	r2, [sp, #24]
 8022b5c:	2201      	movs	r2, #1
 8022b5e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8022b62:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022b66:	9203      	str	r2, [sp, #12]
 8022b68:	fa1f f28a 	uxth.w	r2, sl
 8022b6c:	9202      	str	r2, [sp, #8]
 8022b6e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022b72:	9200      	str	r2, [sp, #0]
 8022b74:	463a      	mov	r2, r7
 8022b76:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8022b78:	4621      	mov	r1, r4
 8022b7a:	47a8      	blx	r5
 8022b7c:	b011      	add	sp, #68	; 0x44
 8022b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b82:	6803      	ldr	r3, [r0, #0]
 8022b84:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b8a:	4798      	blx	r3
 8022b8c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022b90:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022b94:	2dff      	cmp	r5, #255	; 0xff
 8022b96:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8022b9a:	fb0a fa02 	mul.w	sl, sl, r2
 8022b9e:	fb02 1303 	mla	r3, r2, r3, r1
 8022ba2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022ba6:	d062      	beq.n	8022c6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022ba8:	ea6f 0c05 	mvn.w	ip, r5
 8022bac:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022bb0:	b2ad      	uxth	r5, r5
 8022bb2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022bb6:	fa5f fc8c 	uxtb.w	ip, ip
 8022bba:	930a      	str	r3, [sp, #40]	; 0x28
 8022bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bbe:	4298      	cmp	r0, r3
 8022bc0:	f080 8085 	bcs.w	8022cce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022bc4:	eb00 0b09 	add.w	fp, r0, r9
 8022bc8:	4558      	cmp	r0, fp
 8022bca:	d246      	bcs.n	8022c5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022bcc:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022bd0:	2303      	movs	r3, #3
 8022bd2:	2204      	movs	r2, #4
 8022bd4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022bd8:	8803      	ldrh	r3, [r0, #0]
 8022bda:	eb07 0a0e 	add.w	sl, r7, lr
 8022bde:	1219      	asrs	r1, r3, #8
 8022be0:	10da      	asrs	r2, r3, #3
 8022be2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022be6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022bea:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022bee:	00db      	lsls	r3, r3, #3
 8022bf0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022bf4:	fb18 f805 	smulbb	r8, r8, r5
 8022bf8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022bfc:	fb1e fe05 	smulbb	lr, lr, r5
 8022c00:	b2db      	uxtb	r3, r3
 8022c02:	fb01 810c 	mla	r1, r1, ip, r8
 8022c06:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022c0a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022c0e:	fb18 f805 	smulbb	r8, r8, r5
 8022c12:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022c16:	b289      	uxth	r1, r1
 8022c18:	fb02 820c 	mla	r2, r2, ip, r8
 8022c1c:	fb03 e30c 	mla	r3, r3, ip, lr
 8022c20:	f101 0801 	add.w	r8, r1, #1
 8022c24:	b292      	uxth	r2, r2
 8022c26:	b29b      	uxth	r3, r3
 8022c28:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022c2c:	f102 0801 	add.w	r8, r2, #1
 8022c30:	f103 0e01 	add.w	lr, r3, #1
 8022c34:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022c38:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022c3c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022c40:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022c44:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022c48:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022c4c:	ea4e 0101 	orr.w	r1, lr, r1
 8022c50:	ea41 0108 	orr.w	r1, r1, r8
 8022c54:	f820 1b02 	strh.w	r1, [r0], #2
 8022c58:	e7b6      	b.n	8022bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8022c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c5c:	881b      	ldrh	r3, [r3, #0]
 8022c5e:	1b9b      	subs	r3, r3, r6
 8022c60:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022c64:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022c68:	1b9b      	subs	r3, r3, r6
 8022c6a:	441c      	add	r4, r3
 8022c6c:	e7a6      	b.n	8022bbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8022c6e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022c72:	2203      	movs	r2, #3
 8022c74:	2504      	movs	r5, #4
 8022c76:	4919      	ldr	r1, [pc, #100]	; (8022cdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8022c78:	4550      	cmp	r0, sl
 8022c7a:	d228      	bcs.n	8022cce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022c7c:	eb00 0c09 	add.w	ip, r0, r9
 8022c80:	4560      	cmp	r0, ip
 8022c82:	4623      	mov	r3, r4
 8022c84:	d219      	bcs.n	8022cba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8022c86:	f893 e000 	ldrb.w	lr, [r3]
 8022c8a:	3401      	adds	r4, #1
 8022c8c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022c90:	eb07 0b0e 	add.w	fp, r7, lr
 8022c94:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022c98:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022c9c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022ca0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022ca4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022ca8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022cac:	ea43 030b 	orr.w	r3, r3, fp
 8022cb0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022cb4:	f820 3b02 	strh.w	r3, [r0], #2
 8022cb8:	e7e2      	b.n	8022c80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022cba:	f8b8 3000 	ldrh.w	r3, [r8]
 8022cbe:	1b9b      	subs	r3, r3, r6
 8022cc0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022cc4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022cc8:	1b9b      	subs	r3, r3, r6
 8022cca:	441c      	add	r4, r3
 8022ccc:	e7d4      	b.n	8022c78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022cce:	4b04      	ldr	r3, [pc, #16]	; (8022ce0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8022cd0:	6818      	ldr	r0, [r3, #0]
 8022cd2:	6803      	ldr	r3, [r0, #0]
 8022cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022cd6:	4798      	blx	r3
 8022cd8:	e750      	b.n	8022b7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022cda:	bf00      	nop
 8022cdc:	fffff800 	.word	0xfffff800
 8022ce0:	2402ae6c 	.word	0x2402ae6c
 8022ce4:	2402ae66 	.word	0x2402ae66

08022ce8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022ce8:	b4f0      	push	{r4, r5, r6, r7}
 8022cea:	460c      	mov	r4, r1
 8022cec:	4611      	mov	r1, r2
 8022cee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022cf2:	461a      	mov	r2, r3
 8022cf4:	780f      	ldrb	r7, [r1, #0]
 8022cf6:	9b04      	ldr	r3, [sp, #16]
 8022cf8:	2f01      	cmp	r7, #1
 8022cfa:	784e      	ldrb	r6, [r1, #1]
 8022cfc:	d036      	beq.n	8022d6c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 8022cfe:	d31e      	bcc.n	8022d3e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 8022d00:	2f02      	cmp	r7, #2
 8022d02:	d14a      	bne.n	8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d04:	2e03      	cmp	r6, #3
 8022d06:	d848      	bhi.n	8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d08:	e8df f006 	tbb	[pc, r6]
 8022d0c:	16140702 	.word	0x16140702
 8022d10:	9504      	str	r5, [sp, #16]
 8022d12:	4620      	mov	r0, r4
 8022d14:	bcf0      	pop	{r4, r5, r6, r7}
 8022d16:	f7ff be09 	b.w	802292c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022d1a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8022d1c:	2800      	cmp	r0, #0
 8022d1e:	d03c      	beq.n	8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d20:	6806      	ldr	r6, [r0, #0]
 8022d22:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022d26:	68b5      	ldr	r5, [r6, #8]
 8022d28:	4613      	mov	r3, r2
 8022d2a:	46ac      	mov	ip, r5
 8022d2c:	460a      	mov	r2, r1
 8022d2e:	4621      	mov	r1, r4
 8022d30:	bcf0      	pop	{r4, r5, r6, r7}
 8022d32:	4760      	bx	ip
 8022d34:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8022d36:	e7f1      	b.n	8022d1c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022d38:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8022d3c:	e7ee      	b.n	8022d1c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022d3e:	2e03      	cmp	r6, #3
 8022d40:	d82b      	bhi.n	8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d42:	e8df f006 	tbb	[pc, r6]
 8022d46:	0702      	.short	0x0702
 8022d48:	100e      	.short	0x100e
 8022d4a:	9504      	str	r5, [sp, #16]
 8022d4c:	4620      	mov	r0, r4
 8022d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8022d50:	f7ff bd06 	b.w	8022760 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022d54:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8022d56:	b300      	cbz	r0, 8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d58:	6806      	ldr	r6, [r0, #0]
 8022d5a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022d5e:	68f5      	ldr	r5, [r6, #12]
 8022d60:	e7e2      	b.n	8022d28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022d62:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8022d64:	e7f7      	b.n	8022d56 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8022d66:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8022d6a:	e7f4      	b.n	8022d56 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8022d6c:	2e03      	cmp	r6, #3
 8022d6e:	d814      	bhi.n	8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d70:	e8df f006 	tbb	[pc, r6]
 8022d74:	100e0702 	.word	0x100e0702
 8022d78:	9504      	str	r5, [sp, #16]
 8022d7a:	4620      	mov	r0, r4
 8022d7c:	bcf0      	pop	{r4, r5, r6, r7}
 8022d7e:	f7ff bea1 	b.w	8022ac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022d82:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8022d84:	b148      	cbz	r0, 8022d9a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8022d86:	6806      	ldr	r6, [r0, #0]
 8022d88:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022d8c:	6935      	ldr	r5, [r6, #16]
 8022d8e:	e7cb      	b.n	8022d28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022d90:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8022d92:	e7f7      	b.n	8022d84 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8022d94:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8022d98:	e7f4      	b.n	8022d84 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8022d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8022d9c:	4770      	bx	lr
	...

08022da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022da4:	b087      	sub	sp, #28
 8022da6:	4604      	mov	r4, r0
 8022da8:	460e      	mov	r6, r1
 8022daa:	6810      	ldr	r0, [r2, #0]
 8022dac:	6851      	ldr	r1, [r2, #4]
 8022dae:	ad02      	add	r5, sp, #8
 8022db0:	4617      	mov	r7, r2
 8022db2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8022db6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8022fe8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022dba:	c503      	stmia	r5!, {r0, r1}
 8022dbc:	6818      	ldr	r0, [r3, #0]
 8022dbe:	ad04      	add	r5, sp, #16
 8022dc0:	6859      	ldr	r1, [r3, #4]
 8022dc2:	c503      	stmia	r5!, {r0, r1}
 8022dc4:	a802      	add	r0, sp, #8
 8022dc6:	f7f7 fc49 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022dca:	4639      	mov	r1, r7
 8022dcc:	a804      	add	r0, sp, #16
 8022dce:	f7f7 fc6d 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022dd2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022dd6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022dda:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022dde:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022de2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022de6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022dea:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022dee:	440e      	add	r6, r1
 8022df0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022df4:	440a      	add	r2, r1
 8022df6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022dfa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022dfe:	4413      	add	r3, r2
 8022e00:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022e04:	4b77      	ldr	r3, [pc, #476]	; (8022fe4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022e06:	6818      	ldr	r0, [r3, #0]
 8022e08:	6803      	ldr	r3, [r0, #0]
 8022e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e0c:	4798      	blx	r3
 8022e0e:	f8b9 b000 	ldrh.w	fp, [r9]
 8022e12:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022e16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022e1a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022e1e:	fb05 f50b 	mul.w	r5, r5, fp
 8022e22:	fb0b 2303 	mla	r3, fp, r3, r2
 8022e26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022e2a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022e2e:	9300      	str	r3, [sp, #0]
 8022e30:	d069      	beq.n	8022f06 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022e32:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022e36:	4558      	cmp	r0, fp
 8022e38:	f080 80cc 	bcs.w	8022fd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022e3c:	9b00      	ldr	r3, [sp, #0]
 8022e3e:	4631      	mov	r1, r6
 8022e40:	18c3      	adds	r3, r0, r3
 8022e42:	9301      	str	r3, [sp, #4]
 8022e44:	9b01      	ldr	r3, [sp, #4]
 8022e46:	4298      	cmp	r0, r3
 8022e48:	d24f      	bcs.n	8022eea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e4e:	2a00      	cmp	r2, #0
 8022e50:	d048      	beq.n	8022ee4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022e52:	fb0a f202 	mul.w	r2, sl, r2
 8022e56:	1c53      	adds	r3, r2, #1
 8022e58:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e5c:	121b      	asrs	r3, r3, #8
 8022e5e:	d041      	beq.n	8022ee4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022e60:	8802      	ldrh	r2, [r0, #0]
 8022e62:	b29e      	uxth	r6, r3
 8022e64:	f8b4 c000 	ldrh.w	ip, [r4]
 8022e68:	43db      	mvns	r3, r3
 8022e6a:	1215      	asrs	r5, r2, #8
 8022e6c:	b2db      	uxtb	r3, r3
 8022e6e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022e72:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022e76:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022e7a:	fb15 f503 	smulbb	r5, r5, r3
 8022e7e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022e82:	00d2      	lsls	r2, r2, #3
 8022e84:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022e88:	fb07 5706 	mla	r7, r7, r6, r5
 8022e8c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022e90:	b2d2      	uxtb	r2, r2
 8022e92:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022e96:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022e9a:	fb1e fe03 	smulbb	lr, lr, r3
 8022e9e:	b2bf      	uxth	r7, r7
 8022ea0:	fb12 f203 	smulbb	r2, r2, r3
 8022ea4:	fa5f fc8c 	uxtb.w	ip, ip
 8022ea8:	fb05 e506 	mla	r5, r5, r6, lr
 8022eac:	f107 0e01 	add.w	lr, r7, #1
 8022eb0:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022eb4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022eb8:	fa1f fc8c 	uxth.w	ip, ip
 8022ebc:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8022ec0:	b2ad      	uxth	r5, r5
 8022ec2:	f10c 0701 	add.w	r7, ip, #1
 8022ec6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022eca:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022ece:	ea47 070e 	orr.w	r7, r7, lr
 8022ed2:	f105 0e01 	add.w	lr, r5, #1
 8022ed6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022eda:	096d      	lsrs	r5, r5, #5
 8022edc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022ee0:	432f      	orrs	r7, r5
 8022ee2:	8007      	strh	r7, [r0, #0]
 8022ee4:	3002      	adds	r0, #2
 8022ee6:	3402      	adds	r4, #2
 8022ee8:	e7ac      	b.n	8022e44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022eea:	f8b9 3000 	ldrh.w	r3, [r9]
 8022eee:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022ef2:	eba3 0308 	sub.w	r3, r3, r8
 8022ef6:	eba6 0608 	sub.w	r6, r6, r8
 8022efa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022efe:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022f02:	440e      	add	r6, r1
 8022f04:	e797      	b.n	8022e36 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022f06:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022f0a:	42a8      	cmp	r0, r5
 8022f0c:	d262      	bcs.n	8022fd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022f0e:	9b00      	ldr	r3, [sp, #0]
 8022f10:	4631      	mov	r1, r6
 8022f12:	eb00 0b03 	add.w	fp, r0, r3
 8022f16:	4558      	cmp	r0, fp
 8022f18:	d24e      	bcs.n	8022fb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022f1e:	b12b      	cbz	r3, 8022f2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022f20:	2bff      	cmp	r3, #255	; 0xff
 8022f22:	f8b4 e000 	ldrh.w	lr, [r4]
 8022f26:	d104      	bne.n	8022f32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022f28:	f8a0 e000 	strh.w	lr, [r0]
 8022f2c:	3002      	adds	r0, #2
 8022f2e:	3402      	adds	r4, #2
 8022f30:	e7f1      	b.n	8022f16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022f32:	8802      	ldrh	r2, [r0, #0]
 8022f34:	b29f      	uxth	r7, r3
 8022f36:	43db      	mvns	r3, r3
 8022f38:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022f3c:	1216      	asrs	r6, r2, #8
 8022f3e:	b2db      	uxtb	r3, r3
 8022f40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022f44:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022f48:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022f4c:	00d2      	lsls	r2, r2, #3
 8022f4e:	fb16 f603 	smulbb	r6, r6, r3
 8022f52:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022f56:	b2d2      	uxtb	r2, r2
 8022f58:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022f5c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022f60:	fb1a fa03 	smulbb	sl, sl, r3
 8022f64:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022f68:	fa1f fc8c 	uxth.w	ip, ip
 8022f6c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022f70:	fb12 f303 	smulbb	r3, r2, r3
 8022f74:	fa5f fe8e 	uxtb.w	lr, lr
 8022f78:	fb06 a607 	mla	r6, r6, r7, sl
 8022f7c:	f10c 0201 	add.w	r2, ip, #1
 8022f80:	fb0e 3307 	mla	r3, lr, r7, r3
 8022f84:	b2b6      	uxth	r6, r6
 8022f86:	b29b      	uxth	r3, r3
 8022f88:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022f8c:	f106 0a01 	add.w	sl, r6, #1
 8022f90:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022f94:	f103 0c01 	add.w	ip, r3, #1
 8022f98:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022f9c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022fa0:	0976      	lsrs	r6, r6, #5
 8022fa2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022fa6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022faa:	ea4c 0c02 	orr.w	ip, ip, r2
 8022fae:	ea4c 0c06 	orr.w	ip, ip, r6
 8022fb2:	f8a0 c000 	strh.w	ip, [r0]
 8022fb6:	e7b9      	b.n	8022f2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022fb8:	f8b9 3000 	ldrh.w	r3, [r9]
 8022fbc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022fc0:	eba3 0308 	sub.w	r3, r3, r8
 8022fc4:	eba6 0608 	sub.w	r6, r6, r8
 8022fc8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022fcc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022fd0:	440e      	add	r6, r1
 8022fd2:	e79a      	b.n	8022f0a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022fd4:	4b03      	ldr	r3, [pc, #12]	; (8022fe4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022fd6:	6818      	ldr	r0, [r3, #0]
 8022fd8:	6803      	ldr	r3, [r0, #0]
 8022fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022fdc:	4798      	blx	r3
 8022fde:	b007      	add	sp, #28
 8022fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe4:	2402ae6c 	.word	0x2402ae6c
 8022fe8:	2402ae66 	.word	0x2402ae66

08022fec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ff0:	b089      	sub	sp, #36	; 0x24
 8022ff2:	4682      	mov	sl, r0
 8022ff4:	460f      	mov	r7, r1
 8022ff6:	4691      	mov	r9, r2
 8022ff8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8022ffc:	4698      	mov	r8, r3
 8022ffe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023000:	2e00      	cmp	r6, #0
 8023002:	d03d      	beq.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023004:	4608      	mov	r0, r1
 8023006:	f7fa fe53 	bl	801dcb0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802300a:	4605      	mov	r5, r0
 802300c:	4638      	mov	r0, r7
 802300e:	f7fa fe83 	bl	801dd18 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023012:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023016:	4638      	mov	r0, r7
 8023018:	f8ad 9008 	strh.w	r9, [sp, #8]
 802301c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023020:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023024:	f7fa ff30 	bl	801de88 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023028:	4605      	mov	r5, r0
 802302a:	4638      	mov	r0, r7
 802302c:	f7fa ff5c 	bl	801dee8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023030:	4681      	mov	r9, r0
 8023032:	4638      	mov	r0, r7
 8023034:	f7fa ffac 	bl	801df90 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023038:	280b      	cmp	r0, #11
 802303a:	d821      	bhi.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802303c:	e8df f000 	tbb	[pc, r0]
 8023040:	2006aebe 	.word	0x2006aebe
 8023044:	20202020 	.word	0x20202020
 8023048:	b5202020 	.word	0xb5202020
 802304c:	4bb0      	ldr	r3, [pc, #704]	; (8023310 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 802304e:	6818      	ldr	r0, [r3, #0]
 8023050:	6803      	ldr	r3, [r0, #0]
 8023052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023054:	4798      	blx	r3
 8023056:	2eff      	cmp	r6, #255	; 0xff
 8023058:	d101      	bne.n	802305e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 802305a:	0683      	lsls	r3, r0, #26
 802305c:	d506      	bpl.n	802306c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 802305e:	4633      	mov	r3, r6
 8023060:	4622      	mov	r2, r4
 8023062:	a902      	add	r1, sp, #8
 8023064:	4628      	mov	r0, r5
 8023066:	f7ff f909 	bl	802227c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802306a:	e009      	b.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802306c:	4638      	mov	r0, r7
 802306e:	f7fa fed3 	bl	801de18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023072:	b940      	cbnz	r0, 8023086 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8023074:	4623      	mov	r3, r4
 8023076:	aa02      	add	r2, sp, #8
 8023078:	4629      	mov	r1, r5
 802307a:	4650      	mov	r0, sl
 802307c:	f7ff f9e4 	bl	8022448 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023080:	b009      	add	sp, #36	; 0x24
 8023082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023086:	f10d 0818 	add.w	r8, sp, #24
 802308a:	4639      	mov	r1, r7
 802308c:	af04      	add	r7, sp, #16
 802308e:	4640      	mov	r0, r8
 8023090:	f7fa fe76 	bl	801dd80 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023094:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023098:	e887 0003 	stmia.w	r7, {r0, r1}
 802309c:	4638      	mov	r0, r7
 802309e:	4621      	mov	r1, r4
 80230a0:	f7f4 f86e 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 80230a4:	4638      	mov	r0, r7
 80230a6:	f7f4 f8ae 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 80230aa:	2800      	cmp	r0, #0
 80230ac:	d1d7      	bne.n	802305e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 80230ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80230b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80230b6:	4293      	cmp	r3, r2
 80230b8:	dd12      	ble.n	80230e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 80230ba:	1a9b      	subs	r3, r3, r2
 80230bc:	f9b4 0000 	ldrsh.w	r0, [r4]
 80230c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80230c4:	f8ad 0018 	strh.w	r0, [sp, #24]
 80230c8:	4628      	mov	r0, r5
 80230ca:	f8ad 201a 	strh.w	r2, [sp, #26]
 80230ce:	4642      	mov	r2, r8
 80230d0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80230d4:	a902      	add	r1, sp, #8
 80230d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80230da:	4633      	mov	r3, r6
 80230dc:	f7ff f8ce 	bl	802227c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80230e0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80230e4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80230e8:	4293      	cmp	r3, r2
 80230ea:	dd12      	ble.n	8023112 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 80230ec:	1a9b      	subs	r3, r3, r2
 80230ee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80230f2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80230f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80230fa:	4642      	mov	r2, r8
 80230fc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023100:	4628      	mov	r0, r5
 8023102:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023106:	23ff      	movs	r3, #255	; 0xff
 8023108:	f8ad 101e 	strh.w	r1, [sp, #30]
 802310c:	a902      	add	r1, sp, #8
 802310e:	f7ff f8b5 	bl	802227c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023112:	463b      	mov	r3, r7
 8023114:	aa02      	add	r2, sp, #8
 8023116:	4629      	mov	r1, r5
 8023118:	4650      	mov	r0, sl
 802311a:	f7ff f995 	bl	8022448 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802311e:	88a2      	ldrh	r2, [r4, #4]
 8023120:	8823      	ldrh	r3, [r4, #0]
 8023122:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023126:	4413      	add	r3, r2
 8023128:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802312c:	440a      	add	r2, r1
 802312e:	b29b      	uxth	r3, r3
 8023130:	b292      	uxth	r2, r2
 8023132:	b218      	sxth	r0, r3
 8023134:	b211      	sxth	r1, r2
 8023136:	4288      	cmp	r0, r1
 8023138:	dd12      	ble.n	8023160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 802313a:	1a9b      	subs	r3, r3, r2
 802313c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023140:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023144:	4642      	mov	r2, r8
 8023146:	f8ad 1018 	strh.w	r1, [sp, #24]
 802314a:	a902      	add	r1, sp, #8
 802314c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023150:	23ff      	movs	r3, #255	; 0xff
 8023152:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023156:	4628      	mov	r0, r5
 8023158:	f8ad 601a 	strh.w	r6, [sp, #26]
 802315c:	f7ff f88e 	bl	802227c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023160:	88e2      	ldrh	r2, [r4, #6]
 8023162:	8863      	ldrh	r3, [r4, #2]
 8023164:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023168:	4413      	add	r3, r2
 802316a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802316e:	440a      	add	r2, r1
 8023170:	b29b      	uxth	r3, r3
 8023172:	b292      	uxth	r2, r2
 8023174:	b218      	sxth	r0, r3
 8023176:	b211      	sxth	r1, r2
 8023178:	4288      	cmp	r0, r1
 802317a:	dd81      	ble.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802317c:	1a9b      	subs	r3, r3, r2
 802317e:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023182:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023186:	4642      	mov	r2, r8
 8023188:	f8ad 301e 	strh.w	r3, [sp, #30]
 802318c:	23ff      	movs	r3, #255	; 0xff
 802318e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023192:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023196:	f8ad 001c 	strh.w	r0, [sp, #28]
 802319a:	e762      	b.n	8023062 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 802319c:	4633      	mov	r3, r6
 802319e:	4622      	mov	r2, r4
 80231a0:	a902      	add	r1, sp, #8
 80231a2:	4628      	mov	r0, r5
 80231a4:	f7ff f9c0 	bl	8022528 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80231a8:	e76a      	b.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80231aa:	e9cd 4600 	strd	r4, r6, [sp]
 80231ae:	ab02      	add	r3, sp, #8
 80231b0:	464a      	mov	r2, r9
 80231b2:	4629      	mov	r1, r5
 80231b4:	4650      	mov	r0, sl
 80231b6:	f7ff fd97 	bl	8022ce8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80231ba:	e761      	b.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80231bc:	4638      	mov	r0, r7
 80231be:	f7fa fe2b 	bl	801de18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80231c2:	b950      	cbnz	r0, 80231da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 80231c4:	f8da 3000 	ldr.w	r3, [sl]
 80231c8:	aa02      	add	r2, sp, #8
 80231ca:	4629      	mov	r1, r5
 80231cc:	e9cd 6000 	strd	r6, r0, [sp]
 80231d0:	4650      	mov	r0, sl
 80231d2:	68de      	ldr	r6, [r3, #12]
 80231d4:	4623      	mov	r3, r4
 80231d6:	47b0      	blx	r6
 80231d8:	e752      	b.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80231da:	f10d 0818 	add.w	r8, sp, #24
 80231de:	4639      	mov	r1, r7
 80231e0:	af04      	add	r7, sp, #16
 80231e2:	4640      	mov	r0, r8
 80231e4:	f7fa fdcc 	bl	801dd80 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80231e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80231ec:	e887 0003 	stmia.w	r7, {r0, r1}
 80231f0:	4638      	mov	r0, r7
 80231f2:	4621      	mov	r1, r4
 80231f4:	f7f3 ffc4 	bl	8017180 <_ZN8touchgfx4RectaNERKS0_>
 80231f8:	4638      	mov	r0, r7
 80231fa:	f7f4 f804 	bl	8017206 <_ZNK8touchgfx4Rect7isEmptyEv>
 80231fe:	b138      	cbz	r0, 8023210 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023200:	4623      	mov	r3, r4
 8023202:	9600      	str	r6, [sp, #0]
 8023204:	aa02      	add	r2, sp, #8
 8023206:	4649      	mov	r1, r9
 8023208:	4628      	mov	r0, r5
 802320a:	f7ff fdc9 	bl	8022da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802320e:	e737      	b.n	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023210:	f8da 3000 	ldr.w	r3, [sl]
 8023214:	aa02      	add	r2, sp, #8
 8023216:	4629      	mov	r1, r5
 8023218:	e9cd 6000 	strd	r6, r0, [sp]
 802321c:	4650      	mov	r0, sl
 802321e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023222:	463b      	mov	r3, r7
 8023224:	47d8      	blx	fp
 8023226:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802322a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802322e:	4293      	cmp	r3, r2
 8023230:	dd13      	ble.n	802325a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 8023232:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023236:	1a9b      	subs	r3, r3, r2
 8023238:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802323c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023240:	4628      	mov	r0, r5
 8023242:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023246:	aa02      	add	r2, sp, #8
 8023248:	f8ad 101c 	strh.w	r1, [sp, #28]
 802324c:	4649      	mov	r1, r9
 802324e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023252:	4643      	mov	r3, r8
 8023254:	9600      	str	r6, [sp, #0]
 8023256:	f7ff fda3 	bl	8022da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802325a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802325e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023262:	4293      	cmp	r3, r2
 8023264:	dd13      	ble.n	802328e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 8023266:	1a9b      	subs	r3, r3, r2
 8023268:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802326c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023270:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023274:	aa02      	add	r2, sp, #8
 8023276:	f8ad 001a 	strh.w	r0, [sp, #26]
 802327a:	4628      	mov	r0, r5
 802327c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023280:	4643      	mov	r3, r8
 8023282:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023286:	4649      	mov	r1, r9
 8023288:	9600      	str	r6, [sp, #0]
 802328a:	f7ff fd89 	bl	8022da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802328e:	88a2      	ldrh	r2, [r4, #4]
 8023290:	8823      	ldrh	r3, [r4, #0]
 8023292:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023296:	4413      	add	r3, r2
 8023298:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802329c:	440a      	add	r2, r1
 802329e:	b29b      	uxth	r3, r3
 80232a0:	b292      	uxth	r2, r2
 80232a2:	b218      	sxth	r0, r3
 80232a4:	b211      	sxth	r1, r2
 80232a6:	4288      	cmp	r0, r1
 80232a8:	dd13      	ble.n	80232d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 80232aa:	1a9b      	subs	r3, r3, r2
 80232ac:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80232b0:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80232b4:	aa02      	add	r2, sp, #8
 80232b6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80232ba:	4649      	mov	r1, r9
 80232bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80232c0:	4643      	mov	r3, r8
 80232c2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80232c6:	4628      	mov	r0, r5
 80232c8:	9600      	str	r6, [sp, #0]
 80232ca:	f8ad 701a 	strh.w	r7, [sp, #26]
 80232ce:	f7ff fd67 	bl	8022da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80232d2:	88e2      	ldrh	r2, [r4, #6]
 80232d4:	8863      	ldrh	r3, [r4, #2]
 80232d6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80232da:	4413      	add	r3, r2
 80232dc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80232e0:	440a      	add	r2, r1
 80232e2:	b29b      	uxth	r3, r3
 80232e4:	b292      	uxth	r2, r2
 80232e6:	b218      	sxth	r0, r3
 80232e8:	b211      	sxth	r1, r2
 80232ea:	4288      	cmp	r0, r1
 80232ec:	f77f aec8 	ble.w	8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80232f0:	f9b4 7000 	ldrsh.w	r7, [r4]
 80232f4:	1a9b      	subs	r3, r3, r2
 80232f6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80232fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80232fe:	4643      	mov	r3, r8
 8023300:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023304:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023308:	f8ad 001c 	strh.w	r0, [sp, #28]
 802330c:	9600      	str	r6, [sp, #0]
 802330e:	e779      	b.n	8023204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 8023310:	2402ae6c 	.word	0x2402ae6c

08023314 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023314:	b180      	cbz	r0, 8023338 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8023316:	2903      	cmp	r1, #3
 8023318:	d81c      	bhi.n	8023354 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802331a:	e8df f001 	tbb	[pc, r1]
 802331e:	1d02      	.short	0x1d02
 8023320:	1f08      	.short	0x1f08
 8023322:	4b10      	ldr	r3, [pc, #64]	; (8023364 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023324:	8818      	ldrh	r0, [r3, #0]
 8023326:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802332a:	4240      	negs	r0, r0
 802332c:	4770      	bx	lr
 802332e:	4b0d      	ldr	r3, [pc, #52]	; (8023364 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023330:	8818      	ldrh	r0, [r3, #0]
 8023332:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023336:	4770      	bx	lr
 8023338:	2903      	cmp	r1, #3
 802333a:	d80b      	bhi.n	8023354 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802333c:	a301      	add	r3, pc, #4	; (adr r3, 8023344 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 802333e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023342:	bf00      	nop
 8023344:	08023359 	.word	0x08023359
 8023348:	0802332f 	.word	0x0802332f
 802334c:	0802335d 	.word	0x0802335d
 8023350:	08023323 	.word	0x08023323
 8023354:	2000      	movs	r0, #0
 8023356:	4770      	bx	lr
 8023358:	2001      	movs	r0, #1
 802335a:	4770      	bx	lr
 802335c:	f04f 30ff 	mov.w	r0, #4294967295
 8023360:	4770      	bx	lr
 8023362:	bf00      	nop
 8023364:	2402ae66 	.word	0x2402ae66

08023368 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023368:	b180      	cbz	r0, 802338c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 802336a:	2903      	cmp	r1, #3
 802336c:	d81c      	bhi.n	80233a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 802336e:	e8df f001 	tbb	[pc, r1]
 8023372:	021d      	.short	0x021d
 8023374:	071f      	.short	0x071f
 8023376:	4b10      	ldr	r3, [pc, #64]	; (80233b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023378:	8818      	ldrh	r0, [r3, #0]
 802337a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802337e:	4770      	bx	lr
 8023380:	4b0d      	ldr	r3, [pc, #52]	; (80233b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023382:	8818      	ldrh	r0, [r3, #0]
 8023384:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023388:	4240      	negs	r0, r0
 802338a:	4770      	bx	lr
 802338c:	2903      	cmp	r1, #3
 802338e:	d80b      	bhi.n	80233a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023390:	a301      	add	r3, pc, #4	; (adr r3, 8023398 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8023392:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023396:	bf00      	nop
 8023398:	08023377 	.word	0x08023377
 802339c:	080233b1 	.word	0x080233b1
 80233a0:	08023381 	.word	0x08023381
 80233a4:	080233ad 	.word	0x080233ad
 80233a8:	2000      	movs	r0, #0
 80233aa:	4770      	bx	lr
 80233ac:	2001      	movs	r0, #1
 80233ae:	4770      	bx	lr
 80233b0:	f04f 30ff 	mov.w	r0, #4294967295
 80233b4:	4770      	bx	lr
 80233b6:	bf00      	nop
 80233b8:	2402ae66 	.word	0x2402ae66

080233bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80233bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233c0:	b099      	sub	sp, #100	; 0x64
 80233c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80233c4:	a914      	add	r1, sp, #80	; 0x50
 80233c6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 80233ca:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80233ce:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80233d2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80233d6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80233da:	e881 000c 	stmia.w	r1, {r2, r3}
 80233de:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 80233e2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80233e6:	9309      	str	r3, [sp, #36]	; 0x24
 80233e8:	f891 900d 	ldrb.w	r9, [r1, #13]
 80233ec:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80233f0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80233f4:	9310      	str	r3, [sp, #64]	; 0x40
 80233f6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80233fa:	930c      	str	r3, [sp, #48]	; 0x30
 80233fc:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8023400:	798f      	ldrb	r7, [r1, #6]
 8023402:	431f      	orrs	r7, r3
 8023404:	f000 8195 	beq.w	8023732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023408:	ea4f 1909 	mov.w	r9, r9, lsl #4
 802340c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023410:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023414:	ea59 0903 	orrs.w	r9, r9, r3
 8023418:	f000 818b 	beq.w	8023732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802341c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023420:	b29b      	uxth	r3, r3
 8023422:	2d00      	cmp	r5, #0
 8023424:	f000 812e 	beq.w	8023684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8023428:	1aed      	subs	r5, r5, r3
 802342a:	b2ad      	uxth	r5, r5
 802342c:	042b      	lsls	r3, r5, #16
 802342e:	d502      	bpl.n	8023436 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023430:	1b64      	subs	r4, r4, r5
 8023432:	2500      	movs	r5, #0
 8023434:	b224      	sxth	r4, r4
 8023436:	f9b2 1000 	ldrsh.w	r1, [r2]
 802343a:	a814      	add	r0, sp, #80	; 0x50
 802343c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8023440:	428c      	cmp	r4, r1
 8023442:	b28b      	uxth	r3, r1
 8023444:	bfbf      	itttt	lt
 8023446:	18ed      	addlt	r5, r5, r3
 8023448:	1b2c      	sublt	r4, r5, r4
 802344a:	b2a5      	uxthlt	r5, r4
 802344c:	460c      	movlt	r4, r1
 802344e:	8891      	ldrh	r1, [r2, #4]
 8023450:	440b      	add	r3, r1
 8023452:	4621      	mov	r1, r4
 8023454:	b21b      	sxth	r3, r3
 8023456:	930f      	str	r3, [sp, #60]	; 0x3c
 8023458:	88d3      	ldrh	r3, [r2, #6]
 802345a:	8852      	ldrh	r2, [r2, #2]
 802345c:	4413      	add	r3, r2
 802345e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023460:	b21b      	sxth	r3, r3
 8023462:	930d      	str	r3, [sp, #52]	; 0x34
 8023464:	4bbd      	ldr	r3, [pc, #756]	; (802375c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8023466:	f893 b000 	ldrb.w	fp, [r3]
 802346a:	f10b 3cff 	add.w	ip, fp, #4294967295
 802346e:	f1dc 0300 	rsbs	r3, ip, #0
 8023472:	eb43 030c 	adc.w	r3, r3, ip
 8023476:	930e      	str	r3, [sp, #56]	; 0x38
 8023478:	4653      	mov	r3, sl
 802347a:	f7f6 ff64 	bl	801a346 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802347e:	4621      	mov	r1, r4
 8023480:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023484:	4653      	mov	r3, sl
 8023486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023488:	a814      	add	r0, sp, #80	; 0x50
 802348a:	f7f6 ff79 	bl	801a380 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802348e:	a918      	add	r1, sp, #96	; 0x60
 8023490:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023494:	a817      	add	r0, sp, #92	; 0x5c
 8023496:	f7f7 f89f 	bl	801a5d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802349a:	f1ba 0f00 	cmp.w	sl, #0
 802349e:	f040 80f4 	bne.w	802368a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80234a2:	f1bb 0f01 	cmp.w	fp, #1
 80234a6:	f040 80f8 	bne.w	802369a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80234aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	f040 8145 	bne.w	802373c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80234b2:	b2ba      	uxth	r2, r7
 80234b4:	b905      	cbnz	r5, 80234b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80234b6:	b16e      	cbz	r6, 80234d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80234b8:	fb06 5302 	mla	r3, r6, r2, r5
 80234bc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80234be:	4631      	mov	r1, r6
 80234c0:	fb08 f303 	mul.w	r3, r8, r3
 80234c4:	f003 0607 	and.w	r6, r3, #7
 80234c8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80234cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80234ce:	eba9 0301 	sub.w	r3, r9, r1
 80234d2:	930a      	str	r3, [sp, #40]	; 0x28
 80234d4:	4651      	mov	r1, sl
 80234d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80234d8:	f7ff ff1c 	bl	8023314 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80234dc:	4681      	mov	r9, r0
 80234de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80234e0:	f7ff ff42 	bl	8023368 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80234e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80234e8:	4683      	mov	fp, r0
 80234ea:	eba3 0a01 	sub.w	sl, r3, r1
 80234ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234f0:	459a      	cmp	sl, r3
 80234f2:	bfa8      	it	ge
 80234f4:	469a      	movge	sl, r3
 80234f6:	f1ba 0f00 	cmp.w	sl, #0
 80234fa:	f340 811a 	ble.w	8023732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80234fe:	1b64      	subs	r4, r4, r5
 8023500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023502:	1b1c      	subs	r4, r3, r4
 8023504:	42bc      	cmp	r4, r7
 8023506:	bfd4      	ite	le
 8023508:	ebc5 0504 	rsble	r5, r5, r4
 802350c:	ebc5 0507 	rsbgt	r5, r5, r7
 8023510:	2d00      	cmp	r5, #0
 8023512:	f340 810e 	ble.w	8023732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023516:	1b52      	subs	r2, r2, r5
 8023518:	fb08 f302 	mul.w	r3, r8, r2
 802351c:	930f      	str	r3, [sp, #60]	; 0x3c
 802351e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023520:	2b00      	cmp	r3, #0
 8023522:	f040 8116 	bne.w	8023752 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8023526:	4b8e      	ldr	r3, [pc, #568]	; (8023760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023528:	6818      	ldr	r0, [r3, #0]
 802352a:	6803      	ldr	r3, [r0, #0]
 802352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802352e:	4798      	blx	r3
 8023530:	2301      	movs	r3, #1
 8023532:	4a8c      	ldr	r2, [pc, #560]	; (8023764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023534:	fa03 f308 	lsl.w	r3, r3, r8
 8023538:	8811      	ldrh	r1, [r2, #0]
 802353a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802353e:	3b01      	subs	r3, #1
 8023540:	b2db      	uxtb	r3, r3
 8023542:	930e      	str	r3, [sp, #56]	; 0x38
 8023544:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8023548:	fb01 2303 	mla	r3, r1, r3, r2
 802354c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023550:	930a      	str	r3, [sp, #40]	; 0x28
 8023552:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023554:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023558:	9313      	str	r3, [sp, #76]	; 0x4c
 802355a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802355c:	0a19      	lsrs	r1, r3, #8
 802355e:	b2cb      	uxtb	r3, r1
 8023560:	9312      	str	r3, [sp, #72]	; 0x48
 8023562:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023564:	b2db      	uxtb	r3, r3
 8023566:	9311      	str	r3, [sp, #68]	; 0x44
 8023568:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802356a:	095a      	lsrs	r2, r3, #5
 802356c:	4b7e      	ldr	r3, [pc, #504]	; (8023768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802356e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023572:	400b      	ands	r3, r1
 8023574:	4313      	orrs	r3, r2
 8023576:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023578:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802357c:	4313      	orrs	r3, r2
 802357e:	b29b      	uxth	r3, r3
 8023580:	9310      	str	r3, [sp, #64]	; 0x40
 8023582:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023584:	781a      	ldrb	r2, [r3, #0]
 8023586:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802358a:	fb05 b919 	mls	r9, r5, r9, fp
 802358e:	4132      	asrs	r2, r6
 8023590:	fb03 fb05 	mul.w	fp, r3, r5
 8023594:	930d      	str	r3, [sp, #52]	; 0x34
 8023596:	b2d2      	uxtb	r2, r2
 8023598:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 802359c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80235a0:	f0c0 80f5 	bcc.w	802378e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80235a4:	46ae      	mov	lr, r5
 80235a6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80235aa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80235ae:	f0c0 80dd 	bcc.w	802376c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80235b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80235b4:	4013      	ands	r3, r2
 80235b6:	d055      	beq.n	8023664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80235b8:	20ff      	movs	r0, #255	; 0xff
 80235ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80235bc:	fb90 f1f1 	sdiv	r1, r0, r1
 80235c0:	434b      	muls	r3, r1
 80235c2:	2bfe      	cmp	r3, #254	; 0xfe
 80235c4:	dd03      	ble.n	80235ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80235c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80235c8:	4281      	cmp	r1, r0
 80235ca:	f000 80c4 	beq.w	8023756 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80235ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80235d0:	f8bc 4000 	ldrh.w	r4, [ip]
 80235d4:	fb11 f303 	smulbb	r3, r1, r3
 80235d8:	1220      	asrs	r0, r4, #8
 80235da:	b29b      	uxth	r3, r3
 80235dc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80235e0:	1c59      	adds	r1, r3, #1
 80235e2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80235e6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80235ea:	10e1      	asrs	r1, r4, #3
 80235ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80235f0:	00e4      	lsls	r4, r4, #3
 80235f2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80235f6:	b29f      	uxth	r7, r3
 80235f8:	43db      	mvns	r3, r3
 80235fa:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80235fe:	b2db      	uxtb	r3, r3
 8023600:	b2e4      	uxtb	r4, r4
 8023602:	9309      	str	r3, [sp, #36]	; 0x24
 8023604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023606:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802360a:	fb13 f907 	smulbb	r9, r3, r7
 802360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023610:	fb00 9003 	mla	r0, r0, r3, r9
 8023614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023616:	fb13 f907 	smulbb	r9, r3, r7
 802361a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802361c:	b280      	uxth	r0, r0
 802361e:	fb01 9103 	mla	r1, r1, r3, r9
 8023622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023624:	fb13 f707 	smulbb	r7, r3, r7
 8023628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802362a:	b289      	uxth	r1, r1
 802362c:	fb04 7403 	mla	r4, r4, r3, r7
 8023630:	1c43      	adds	r3, r0, #1
 8023632:	b2a4      	uxth	r4, r4
 8023634:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023638:	f104 0901 	add.w	r9, r4, #1
 802363c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023640:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023644:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023648:	ea49 0000 	orr.w	r0, r9, r0
 802364c:	f101 0901 	add.w	r9, r1, #1
 8023650:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023654:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023658:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802365c:	ea40 0009 	orr.w	r0, r0, r9
 8023660:	f8ac 0000 	strh.w	r0, [ip]
 8023664:	4446      	add	r6, r8
 8023666:	b2b6      	uxth	r6, r6
 8023668:	2e07      	cmp	r6, #7
 802366a:	bf89      	itett	hi
 802366c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 802366e:	fa42 f208 	asrls.w	r2, r2, r8
 8023672:	2600      	movhi	r6, #0
 8023674:	785a      	ldrbhi	r2, [r3, #1]
 8023676:	bf8a      	itet	hi
 8023678:	3301      	addhi	r3, #1
 802367a:	b2d2      	uxtbls	r2, r2
 802367c:	9328      	strhi	r3, [sp, #160]	; 0xa0
 802367e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023680:	449c      	add	ip, r3
 8023682:	e792      	b.n	80235aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8023684:	441c      	add	r4, r3
 8023686:	b224      	sxth	r4, r4
 8023688:	e6d5      	b.n	8023436 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802368a:	f1ba 0f01 	cmp.w	sl, #1
 802368e:	f47f af0c 	bne.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023692:	f1bb 0f01 	cmp.w	fp, #1
 8023696:	f47f af08 	bne.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802369a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8023760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 802369e:	f8db 0000 	ldr.w	r0, [fp]
 80236a2:	6803      	ldr	r3, [r0, #0]
 80236a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236a6:	4798      	blx	r3
 80236a8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80236ac:	465a      	mov	r2, fp
 80236ae:	d006      	beq.n	80236be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80236b0:	f1b8 0f04 	cmp.w	r8, #4
 80236b4:	d140      	bne.n	8023738 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80236b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80236b8:	3300      	adds	r3, #0
 80236ba:	bf18      	it	ne
 80236bc:	2301      	movne	r3, #1
 80236be:	0580      	lsls	r0, r0, #22
 80236c0:	d56e      	bpl.n	80237a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80236c2:	f1b8 0f08 	cmp.w	r8, #8
 80236c6:	d16b      	bne.n	80237a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	bf0c      	ite	eq
 80236cc:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80236d0:	f44f 7180 	movne.w	r1, #256	; 0x100
 80236d4:	2d00      	cmp	r5, #0
 80236d6:	f47f aee8 	bne.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236da:	2e00      	cmp	r6, #0
 80236dc:	f47f aee5 	bne.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236e0:	19e3      	adds	r3, r4, r7
 80236e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80236e4:	4283      	cmp	r3, r0
 80236e6:	f73f aee0 	bgt.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80236ee:	444b      	add	r3, r9
 80236f0:	4283      	cmp	r3, r0
 80236f2:	f73f aeda 	bgt.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236f6:	b2bf      	uxth	r7, r7
 80236f8:	f1b8 0f08 	cmp.w	r8, #8
 80236fc:	6810      	ldr	r0, [r2, #0]
 80236fe:	f04f 0500 	mov.w	r5, #0
 8023702:	bf18      	it	ne
 8023704:	3701      	addne	r7, #1
 8023706:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802370a:	6804      	ldr	r4, [r0, #0]
 802370c:	bf18      	it	ne
 802370e:	f027 0701 	bicne.w	r7, r7, #1
 8023712:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8023716:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802371a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802371c:	bf18      	it	ne
 802371e:	b2bf      	uxthne	r7, r7
 8023720:	9104      	str	r1, [sp, #16]
 8023722:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023724:	e9cd 7900 	strd	r7, r9, [sp]
 8023728:	e9cd 7102 	strd	r7, r1, [sp, #8]
 802372c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802372e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8023730:	47a0      	blx	r4
 8023732:	b019      	add	sp, #100	; 0x64
 8023734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023738:	2300      	movs	r3, #0
 802373a:	e7c0      	b.n	80236be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 802373c:	2208      	movs	r2, #8
 802373e:	fb92 f3f8 	sdiv	r3, r2, r8
 8023742:	1e5a      	subs	r2, r3, #1
 8023744:	443a      	add	r2, r7
 8023746:	fb92 f2f3 	sdiv	r2, r2, r3
 802374a:	fb12 f203 	smulbb	r2, r2, r3
 802374e:	b292      	uxth	r2, r2
 8023750:	e6b0      	b.n	80234b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8023752:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023754:	e6ec      	b.n	8023530 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8023756:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023758:	e782      	b.n	8023660 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802375a:	bf00      	nop
 802375c:	2402ae64 	.word	0x2402ae64
 8023760:	2402ae6c 	.word	0x2402ae6c
 8023764:	2402ae66 	.word	0x2402ae66
 8023768:	00fff800 	.word	0x00fff800
 802376c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802376e:	b153      	cbz	r3, 8023786 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8023770:	441e      	add	r6, r3
 8023772:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023774:	b2b6      	uxth	r6, r6
 8023776:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802377a:	f006 0607 	and.w	r6, r6, #7
 802377e:	781a      	ldrb	r2, [r3, #0]
 8023780:	9328      	str	r3, [sp, #160]	; 0xa0
 8023782:	4132      	asrs	r2, r6
 8023784:	b2d2      	uxtb	r2, r2
 8023786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023788:	445b      	add	r3, fp
 802378a:	930a      	str	r3, [sp, #40]	; 0x28
 802378c:	e706      	b.n	802359c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 802378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023790:	2b00      	cmp	r3, #0
 8023792:	d1ce      	bne.n	8023732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8023794:	4b05      	ldr	r3, [pc, #20]	; (80237ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8023796:	6818      	ldr	r0, [r3, #0]
 8023798:	6803      	ldr	r3, [r0, #0]
 802379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802379c:	4798      	blx	r3
 802379e:	e7c8      	b.n	8023732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	f43f ae82 	beq.w	80234aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80237a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80237aa:	e793      	b.n	80236d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80237ac:	2402ae6c 	.word	0x2402ae6c

080237b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80237b0:	b538      	push	{r3, r4, r5, lr}
 80237b2:	4c15      	ldr	r4, [pc, #84]	; (8023808 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80237b4:	4605      	mov	r5, r0
 80237b6:	7823      	ldrb	r3, [r4, #0]
 80237b8:	f3bf 8f5b 	dmb	ish
 80237bc:	07da      	lsls	r2, r3, #31
 80237be:	d40b      	bmi.n	80237d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80237c0:	4620      	mov	r0, r4
 80237c2:	f007 febe 	bl	802b542 <__cxa_guard_acquire>
 80237c6:	b138      	cbz	r0, 80237d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80237c8:	4620      	mov	r0, r4
 80237ca:	f007 fec6 	bl	802b55a <__cxa_guard_release>
 80237ce:	4a0f      	ldr	r2, [pc, #60]	; (802380c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80237d0:	490f      	ldr	r1, [pc, #60]	; (8023810 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80237d2:	4810      	ldr	r0, [pc, #64]	; (8023814 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80237d4:	f007 feae 	bl	802b534 <__aeabi_atexit>
 80237d8:	4c0f      	ldr	r4, [pc, #60]	; (8023818 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80237da:	7823      	ldrb	r3, [r4, #0]
 80237dc:	f3bf 8f5b 	dmb	ish
 80237e0:	07db      	lsls	r3, r3, #31
 80237e2:	d40b      	bmi.n	80237fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80237e4:	4620      	mov	r0, r4
 80237e6:	f007 feac 	bl	802b542 <__cxa_guard_acquire>
 80237ea:	b138      	cbz	r0, 80237fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80237ec:	4620      	mov	r0, r4
 80237ee:	f007 feb4 	bl	802b55a <__cxa_guard_release>
 80237f2:	4a06      	ldr	r2, [pc, #24]	; (802380c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80237f4:	4909      	ldr	r1, [pc, #36]	; (802381c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80237f6:	480a      	ldr	r0, [pc, #40]	; (8023820 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80237f8:	f007 fe9c 	bl	802b534 <__aeabi_atexit>
 80237fc:	4b05      	ldr	r3, [pc, #20]	; (8023814 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80237fe:	612b      	str	r3, [r5, #16]
 8023800:	4b07      	ldr	r3, [pc, #28]	; (8023820 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023802:	616b      	str	r3, [r5, #20]
 8023804:	bd38      	pop	{r3, r4, r5, pc}
 8023806:	bf00      	nop
 8023808:	2402af44 	.word	0x2402af44
 802380c:	24000000 	.word	0x24000000
 8023810:	080205a5 	.word	0x080205a5
 8023814:	240000b0 	.word	0x240000b0
 8023818:	2402af48 	.word	0x2402af48
 802381c:	080205a3 	.word	0x080205a3
 8023820:	240000b4 	.word	0x240000b4

08023824 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023824:	b538      	push	{r3, r4, r5, lr}
 8023826:	4c15      	ldr	r4, [pc, #84]	; (802387c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8023828:	4605      	mov	r5, r0
 802382a:	7823      	ldrb	r3, [r4, #0]
 802382c:	f3bf 8f5b 	dmb	ish
 8023830:	07da      	lsls	r2, r3, #31
 8023832:	d40b      	bmi.n	802384c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023834:	4620      	mov	r0, r4
 8023836:	f007 fe84 	bl	802b542 <__cxa_guard_acquire>
 802383a:	b138      	cbz	r0, 802384c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802383c:	4620      	mov	r0, r4
 802383e:	f007 fe8c 	bl	802b55a <__cxa_guard_release>
 8023842:	4a0f      	ldr	r2, [pc, #60]	; (8023880 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023844:	490f      	ldr	r1, [pc, #60]	; (8023884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8023846:	4810      	ldr	r0, [pc, #64]	; (8023888 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023848:	f007 fe74 	bl	802b534 <__aeabi_atexit>
 802384c:	4c0f      	ldr	r4, [pc, #60]	; (802388c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802384e:	7823      	ldrb	r3, [r4, #0]
 8023850:	f3bf 8f5b 	dmb	ish
 8023854:	07db      	lsls	r3, r3, #31
 8023856:	d40b      	bmi.n	8023870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023858:	4620      	mov	r0, r4
 802385a:	f007 fe72 	bl	802b542 <__cxa_guard_acquire>
 802385e:	b138      	cbz	r0, 8023870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023860:	4620      	mov	r0, r4
 8023862:	f007 fe7a 	bl	802b55a <__cxa_guard_release>
 8023866:	4a06      	ldr	r2, [pc, #24]	; (8023880 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023868:	4909      	ldr	r1, [pc, #36]	; (8023890 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802386a:	480a      	ldr	r0, [pc, #40]	; (8023894 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802386c:	f007 fe62 	bl	802b534 <__aeabi_atexit>
 8023870:	4b05      	ldr	r3, [pc, #20]	; (8023888 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023872:	60ab      	str	r3, [r5, #8]
 8023874:	4b07      	ldr	r3, [pc, #28]	; (8023894 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023876:	60eb      	str	r3, [r5, #12]
 8023878:	bd38      	pop	{r3, r4, r5, pc}
 802387a:	bf00      	nop
 802387c:	2402af1c 	.word	0x2402af1c
 8023880:	24000000 	.word	0x24000000
 8023884:	080205a9 	.word	0x080205a9
 8023888:	24000088 	.word	0x24000088
 802388c:	2402af20 	.word	0x2402af20
 8023890:	080205a7 	.word	0x080205a7
 8023894:	2400008c 	.word	0x2400008c

08023898 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8023898:	b510      	push	{r4, lr}
 802389a:	4604      	mov	r4, r0
 802389c:	f7ff ff88 	bl	80237b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80238a0:	4620      	mov	r0, r4
 80238a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238a6:	f7ff bfbd 	b.w	8023824 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080238ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80238ac:	b538      	push	{r3, r4, r5, lr}
 80238ae:	4c15      	ldr	r4, [pc, #84]	; (8023904 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80238b0:	4605      	mov	r5, r0
 80238b2:	7823      	ldrb	r3, [r4, #0]
 80238b4:	f3bf 8f5b 	dmb	ish
 80238b8:	07da      	lsls	r2, r3, #31
 80238ba:	d40b      	bmi.n	80238d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80238bc:	4620      	mov	r0, r4
 80238be:	f007 fe40 	bl	802b542 <__cxa_guard_acquire>
 80238c2:	b138      	cbz	r0, 80238d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80238c4:	4620      	mov	r0, r4
 80238c6:	f007 fe48 	bl	802b55a <__cxa_guard_release>
 80238ca:	4a0f      	ldr	r2, [pc, #60]	; (8023908 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80238cc:	490f      	ldr	r1, [pc, #60]	; (802390c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80238ce:	4810      	ldr	r0, [pc, #64]	; (8023910 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80238d0:	f007 fe30 	bl	802b534 <__aeabi_atexit>
 80238d4:	4c0f      	ldr	r4, [pc, #60]	; (8023914 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80238d6:	7823      	ldrb	r3, [r4, #0]
 80238d8:	f3bf 8f5b 	dmb	ish
 80238dc:	07db      	lsls	r3, r3, #31
 80238de:	d40b      	bmi.n	80238f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80238e0:	4620      	mov	r0, r4
 80238e2:	f007 fe2e 	bl	802b542 <__cxa_guard_acquire>
 80238e6:	b138      	cbz	r0, 80238f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80238e8:	4620      	mov	r0, r4
 80238ea:	f007 fe36 	bl	802b55a <__cxa_guard_release>
 80238ee:	4a06      	ldr	r2, [pc, #24]	; (8023908 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80238f0:	4909      	ldr	r1, [pc, #36]	; (8023918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80238f2:	480a      	ldr	r0, [pc, #40]	; (802391c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80238f4:	f007 fe1e 	bl	802b534 <__aeabi_atexit>
 80238f8:	4b05      	ldr	r3, [pc, #20]	; (8023910 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80238fa:	622b      	str	r3, [r5, #32]
 80238fc:	4b07      	ldr	r3, [pc, #28]	; (802391c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80238fe:	626b      	str	r3, [r5, #36]	; 0x24
 8023900:	bd38      	pop	{r3, r4, r5, pc}
 8023902:	bf00      	nop
 8023904:	2402af4c 	.word	0x2402af4c
 8023908:	24000000 	.word	0x24000000
 802390c:	0802059d 	.word	0x0802059d
 8023910:	240000b8 	.word	0x240000b8
 8023914:	2402af50 	.word	0x2402af50
 8023918:	0802059b 	.word	0x0802059b
 802391c:	240000bc 	.word	0x240000bc

08023920 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023920:	b538      	push	{r3, r4, r5, lr}
 8023922:	4c15      	ldr	r4, [pc, #84]	; (8023978 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023924:	4605      	mov	r5, r0
 8023926:	7823      	ldrb	r3, [r4, #0]
 8023928:	f3bf 8f5b 	dmb	ish
 802392c:	07da      	lsls	r2, r3, #31
 802392e:	d40b      	bmi.n	8023948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023930:	4620      	mov	r0, r4
 8023932:	f007 fe06 	bl	802b542 <__cxa_guard_acquire>
 8023936:	b138      	cbz	r0, 8023948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023938:	4620      	mov	r0, r4
 802393a:	f007 fe0e 	bl	802b55a <__cxa_guard_release>
 802393e:	4a0f      	ldr	r2, [pc, #60]	; (802397c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023940:	490f      	ldr	r1, [pc, #60]	; (8023980 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023942:	4810      	ldr	r0, [pc, #64]	; (8023984 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023944:	f007 fdf6 	bl	802b534 <__aeabi_atexit>
 8023948:	4c0f      	ldr	r4, [pc, #60]	; (8023988 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802394a:	7823      	ldrb	r3, [r4, #0]
 802394c:	f3bf 8f5b 	dmb	ish
 8023950:	07db      	lsls	r3, r3, #31
 8023952:	d40b      	bmi.n	802396c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023954:	4620      	mov	r0, r4
 8023956:	f007 fdf4 	bl	802b542 <__cxa_guard_acquire>
 802395a:	b138      	cbz	r0, 802396c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802395c:	4620      	mov	r0, r4
 802395e:	f007 fdfc 	bl	802b55a <__cxa_guard_release>
 8023962:	4a06      	ldr	r2, [pc, #24]	; (802397c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023964:	4909      	ldr	r1, [pc, #36]	; (802398c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023966:	480a      	ldr	r0, [pc, #40]	; (8023990 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023968:	f007 fde4 	bl	802b534 <__aeabi_atexit>
 802396c:	4b05      	ldr	r3, [pc, #20]	; (8023984 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802396e:	61ab      	str	r3, [r5, #24]
 8023970:	4b07      	ldr	r3, [pc, #28]	; (8023990 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023972:	61eb      	str	r3, [r5, #28]
 8023974:	bd38      	pop	{r3, r4, r5, pc}
 8023976:	bf00      	nop
 8023978:	2402af24 	.word	0x2402af24
 802397c:	24000000 	.word	0x24000000
 8023980:	080205a1 	.word	0x080205a1
 8023984:	24000090 	.word	0x24000090
 8023988:	2402af28 	.word	0x2402af28
 802398c:	0802059f 	.word	0x0802059f
 8023990:	24000094 	.word	0x24000094

08023994 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023994:	b510      	push	{r4, lr}
 8023996:	4604      	mov	r4, r0
 8023998:	f7ff ff88 	bl	80238ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802399c:	4620      	mov	r0, r4
 802399e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239a2:	f7ff bfbd 	b.w	8023920 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080239a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80239a8:	b538      	push	{r3, r4, r5, lr}
 80239aa:	4c15      	ldr	r4, [pc, #84]	; (8023a00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80239ac:	4605      	mov	r5, r0
 80239ae:	7823      	ldrb	r3, [r4, #0]
 80239b0:	f3bf 8f5b 	dmb	ish
 80239b4:	07da      	lsls	r2, r3, #31
 80239b6:	d40b      	bmi.n	80239d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80239b8:	4620      	mov	r0, r4
 80239ba:	f007 fdc2 	bl	802b542 <__cxa_guard_acquire>
 80239be:	b138      	cbz	r0, 80239d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80239c0:	4620      	mov	r0, r4
 80239c2:	f007 fdca 	bl	802b55a <__cxa_guard_release>
 80239c6:	4a0f      	ldr	r2, [pc, #60]	; (8023a04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80239c8:	490f      	ldr	r1, [pc, #60]	; (8023a08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80239ca:	4810      	ldr	r0, [pc, #64]	; (8023a0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80239cc:	f007 fdb2 	bl	802b534 <__aeabi_atexit>
 80239d0:	4c0f      	ldr	r4, [pc, #60]	; (8023a10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80239d2:	7823      	ldrb	r3, [r4, #0]
 80239d4:	f3bf 8f5b 	dmb	ish
 80239d8:	07db      	lsls	r3, r3, #31
 80239da:	d40b      	bmi.n	80239f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80239dc:	4620      	mov	r0, r4
 80239de:	f007 fdb0 	bl	802b542 <__cxa_guard_acquire>
 80239e2:	b138      	cbz	r0, 80239f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80239e4:	4620      	mov	r0, r4
 80239e6:	f007 fdb8 	bl	802b55a <__cxa_guard_release>
 80239ea:	4a06      	ldr	r2, [pc, #24]	; (8023a04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80239ec:	4909      	ldr	r1, [pc, #36]	; (8023a14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80239ee:	480a      	ldr	r0, [pc, #40]	; (8023a18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80239f0:	f007 fda0 	bl	802b534 <__aeabi_atexit>
 80239f4:	4b05      	ldr	r3, [pc, #20]	; (8023a0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80239f6:	632b      	str	r3, [r5, #48]	; 0x30
 80239f8:	4b07      	ldr	r3, [pc, #28]	; (8023a18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80239fa:	636b      	str	r3, [r5, #52]	; 0x34
 80239fc:	bd38      	pop	{r3, r4, r5, pc}
 80239fe:	bf00      	nop
 8023a00:	2402af5c 	.word	0x2402af5c
 8023a04:	24000000 	.word	0x24000000
 8023a08:	08020595 	.word	0x08020595
 8023a0c:	240000c8 	.word	0x240000c8
 8023a10:	2402af60 	.word	0x2402af60
 8023a14:	08020593 	.word	0x08020593
 8023a18:	240000cc 	.word	0x240000cc

08023a1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023a1c:	b538      	push	{r3, r4, r5, lr}
 8023a1e:	4c15      	ldr	r4, [pc, #84]	; (8023a74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023a20:	4605      	mov	r5, r0
 8023a22:	7823      	ldrb	r3, [r4, #0]
 8023a24:	f3bf 8f5b 	dmb	ish
 8023a28:	07da      	lsls	r2, r3, #31
 8023a2a:	d40b      	bmi.n	8023a44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023a2c:	4620      	mov	r0, r4
 8023a2e:	f007 fd88 	bl	802b542 <__cxa_guard_acquire>
 8023a32:	b138      	cbz	r0, 8023a44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023a34:	4620      	mov	r0, r4
 8023a36:	f007 fd90 	bl	802b55a <__cxa_guard_release>
 8023a3a:	4a0f      	ldr	r2, [pc, #60]	; (8023a78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023a3c:	490f      	ldr	r1, [pc, #60]	; (8023a7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023a3e:	4810      	ldr	r0, [pc, #64]	; (8023a80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023a40:	f007 fd78 	bl	802b534 <__aeabi_atexit>
 8023a44:	4c0f      	ldr	r4, [pc, #60]	; (8023a84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8023a46:	7823      	ldrb	r3, [r4, #0]
 8023a48:	f3bf 8f5b 	dmb	ish
 8023a4c:	07db      	lsls	r3, r3, #31
 8023a4e:	d40b      	bmi.n	8023a68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023a50:	4620      	mov	r0, r4
 8023a52:	f007 fd76 	bl	802b542 <__cxa_guard_acquire>
 8023a56:	b138      	cbz	r0, 8023a68 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023a58:	4620      	mov	r0, r4
 8023a5a:	f007 fd7e 	bl	802b55a <__cxa_guard_release>
 8023a5e:	4a06      	ldr	r2, [pc, #24]	; (8023a78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023a60:	4909      	ldr	r1, [pc, #36]	; (8023a88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023a62:	480a      	ldr	r0, [pc, #40]	; (8023a8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023a64:	f007 fd66 	bl	802b534 <__aeabi_atexit>
 8023a68:	4b05      	ldr	r3, [pc, #20]	; (8023a80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023a6a:	62ab      	str	r3, [r5, #40]	; 0x28
 8023a6c:	4b07      	ldr	r3, [pc, #28]	; (8023a8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023a6e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023a70:	bd38      	pop	{r3, r4, r5, pc}
 8023a72:	bf00      	nop
 8023a74:	2402af2c 	.word	0x2402af2c
 8023a78:	24000000 	.word	0x24000000
 8023a7c:	08020599 	.word	0x08020599
 8023a80:	24000098 	.word	0x24000098
 8023a84:	2402af30 	.word	0x2402af30
 8023a88:	08020597 	.word	0x08020597
 8023a8c:	2400009c 	.word	0x2400009c

08023a90 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023a90:	b510      	push	{r4, lr}
 8023a92:	4604      	mov	r4, r0
 8023a94:	f7ff ff88 	bl	80239a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023a98:	4620      	mov	r0, r4
 8023a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a9e:	f7ff bfbd 	b.w	8023a1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023aa4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023aa4:	b538      	push	{r3, r4, r5, lr}
 8023aa6:	4c15      	ldr	r4, [pc, #84]	; (8023afc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023aa8:	4605      	mov	r5, r0
 8023aaa:	7823      	ldrb	r3, [r4, #0]
 8023aac:	f3bf 8f5b 	dmb	ish
 8023ab0:	07da      	lsls	r2, r3, #31
 8023ab2:	d40b      	bmi.n	8023acc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023ab4:	4620      	mov	r0, r4
 8023ab6:	f007 fd44 	bl	802b542 <__cxa_guard_acquire>
 8023aba:	b138      	cbz	r0, 8023acc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023abc:	4620      	mov	r0, r4
 8023abe:	f007 fd4c 	bl	802b55a <__cxa_guard_release>
 8023ac2:	4a0f      	ldr	r2, [pc, #60]	; (8023b00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023ac4:	490f      	ldr	r1, [pc, #60]	; (8023b04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8023ac6:	4810      	ldr	r0, [pc, #64]	; (8023b08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023ac8:	f007 fd34 	bl	802b534 <__aeabi_atexit>
 8023acc:	4c0f      	ldr	r4, [pc, #60]	; (8023b0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023ace:	7823      	ldrb	r3, [r4, #0]
 8023ad0:	f3bf 8f5b 	dmb	ish
 8023ad4:	07db      	lsls	r3, r3, #31
 8023ad6:	d40b      	bmi.n	8023af0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023ad8:	4620      	mov	r0, r4
 8023ada:	f007 fd32 	bl	802b542 <__cxa_guard_acquire>
 8023ade:	b138      	cbz	r0, 8023af0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023ae0:	4620      	mov	r0, r4
 8023ae2:	f007 fd3a 	bl	802b55a <__cxa_guard_release>
 8023ae6:	4a06      	ldr	r2, [pc, #24]	; (8023b00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023ae8:	4909      	ldr	r1, [pc, #36]	; (8023b10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023aea:	480a      	ldr	r0, [pc, #40]	; (8023b14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023aec:	f007 fd22 	bl	802b534 <__aeabi_atexit>
 8023af0:	4b05      	ldr	r3, [pc, #20]	; (8023b08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023af2:	652b      	str	r3, [r5, #80]	; 0x50
 8023af4:	4b07      	ldr	r3, [pc, #28]	; (8023b14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023af6:	656b      	str	r3, [r5, #84]	; 0x54
 8023af8:	bd38      	pop	{r3, r4, r5, pc}
 8023afa:	bf00      	nop
 8023afc:	2402af64 	.word	0x2402af64
 8023b00:	24000000 	.word	0x24000000
 8023b04:	08020585 	.word	0x08020585
 8023b08:	240000d0 	.word	0x240000d0
 8023b0c:	2402af68 	.word	0x2402af68
 8023b10:	08020583 	.word	0x08020583
 8023b14:	240000d4 	.word	0x240000d4

08023b18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023b18:	b538      	push	{r3, r4, r5, lr}
 8023b1a:	4c15      	ldr	r4, [pc, #84]	; (8023b70 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023b1c:	4605      	mov	r5, r0
 8023b1e:	7823      	ldrb	r3, [r4, #0]
 8023b20:	f3bf 8f5b 	dmb	ish
 8023b24:	07da      	lsls	r2, r3, #31
 8023b26:	d40b      	bmi.n	8023b40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023b28:	4620      	mov	r0, r4
 8023b2a:	f007 fd0a 	bl	802b542 <__cxa_guard_acquire>
 8023b2e:	b138      	cbz	r0, 8023b40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023b30:	4620      	mov	r0, r4
 8023b32:	f007 fd12 	bl	802b55a <__cxa_guard_release>
 8023b36:	4a0f      	ldr	r2, [pc, #60]	; (8023b74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023b38:	490f      	ldr	r1, [pc, #60]	; (8023b78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8023b3a:	4810      	ldr	r0, [pc, #64]	; (8023b7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023b3c:	f007 fcfa 	bl	802b534 <__aeabi_atexit>
 8023b40:	4c0f      	ldr	r4, [pc, #60]	; (8023b80 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023b42:	7823      	ldrb	r3, [r4, #0]
 8023b44:	f3bf 8f5b 	dmb	ish
 8023b48:	07db      	lsls	r3, r3, #31
 8023b4a:	d40b      	bmi.n	8023b64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023b4c:	4620      	mov	r0, r4
 8023b4e:	f007 fcf8 	bl	802b542 <__cxa_guard_acquire>
 8023b52:	b138      	cbz	r0, 8023b64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023b54:	4620      	mov	r0, r4
 8023b56:	f007 fd00 	bl	802b55a <__cxa_guard_release>
 8023b5a:	4a06      	ldr	r2, [pc, #24]	; (8023b74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023b5c:	4909      	ldr	r1, [pc, #36]	; (8023b84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023b5e:	480a      	ldr	r0, [pc, #40]	; (8023b88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023b60:	f007 fce8 	bl	802b534 <__aeabi_atexit>
 8023b64:	4b05      	ldr	r3, [pc, #20]	; (8023b7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023b66:	64ab      	str	r3, [r5, #72]	; 0x48
 8023b68:	4b07      	ldr	r3, [pc, #28]	; (8023b88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023b6a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023b6c:	bd38      	pop	{r3, r4, r5, pc}
 8023b6e:	bf00      	nop
 8023b70:	2402af6c 	.word	0x2402af6c
 8023b74:	24000000 	.word	0x24000000
 8023b78:	08020589 	.word	0x08020589
 8023b7c:	240000d8 	.word	0x240000d8
 8023b80:	2402af70 	.word	0x2402af70
 8023b84:	08020587 	.word	0x08020587
 8023b88:	240000dc 	.word	0x240000dc

08023b8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023b8c:	b538      	push	{r3, r4, r5, lr}
 8023b8e:	4c15      	ldr	r4, [pc, #84]	; (8023be4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023b90:	4605      	mov	r5, r0
 8023b92:	7823      	ldrb	r3, [r4, #0]
 8023b94:	f3bf 8f5b 	dmb	ish
 8023b98:	07da      	lsls	r2, r3, #31
 8023b9a:	d40b      	bmi.n	8023bb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023b9c:	4620      	mov	r0, r4
 8023b9e:	f007 fcd0 	bl	802b542 <__cxa_guard_acquire>
 8023ba2:	b138      	cbz	r0, 8023bb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023ba4:	4620      	mov	r0, r4
 8023ba6:	f007 fcd8 	bl	802b55a <__cxa_guard_release>
 8023baa:	4a0f      	ldr	r2, [pc, #60]	; (8023be8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023bac:	490f      	ldr	r1, [pc, #60]	; (8023bec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023bae:	4810      	ldr	r0, [pc, #64]	; (8023bf0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023bb0:	f007 fcc0 	bl	802b534 <__aeabi_atexit>
 8023bb4:	4c0f      	ldr	r4, [pc, #60]	; (8023bf4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8023bb6:	7823      	ldrb	r3, [r4, #0]
 8023bb8:	f3bf 8f5b 	dmb	ish
 8023bbc:	07db      	lsls	r3, r3, #31
 8023bbe:	d40b      	bmi.n	8023bd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023bc0:	4620      	mov	r0, r4
 8023bc2:	f007 fcbe 	bl	802b542 <__cxa_guard_acquire>
 8023bc6:	b138      	cbz	r0, 8023bd8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023bc8:	4620      	mov	r0, r4
 8023bca:	f007 fcc6 	bl	802b55a <__cxa_guard_release>
 8023bce:	4a06      	ldr	r2, [pc, #24]	; (8023be8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023bd0:	4909      	ldr	r1, [pc, #36]	; (8023bf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023bd2:	480a      	ldr	r0, [pc, #40]	; (8023bfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023bd4:	f007 fcae 	bl	802b534 <__aeabi_atexit>
 8023bd8:	4b05      	ldr	r3, [pc, #20]	; (8023bf0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023bda:	642b      	str	r3, [r5, #64]	; 0x40
 8023bdc:	4b07      	ldr	r3, [pc, #28]	; (8023bfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023bde:	646b      	str	r3, [r5, #68]	; 0x44
 8023be0:	bd38      	pop	{r3, r4, r5, pc}
 8023be2:	bf00      	nop
 8023be4:	2402af34 	.word	0x2402af34
 8023be8:	24000000 	.word	0x24000000
 8023bec:	0802058d 	.word	0x0802058d
 8023bf0:	240000a0 	.word	0x240000a0
 8023bf4:	2402af38 	.word	0x2402af38
 8023bf8:	0802058b 	.word	0x0802058b
 8023bfc:	240000a4 	.word	0x240000a4

08023c00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023c00:	b538      	push	{r3, r4, r5, lr}
 8023c02:	4c15      	ldr	r4, [pc, #84]	; (8023c58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023c04:	4605      	mov	r5, r0
 8023c06:	7823      	ldrb	r3, [r4, #0]
 8023c08:	f3bf 8f5b 	dmb	ish
 8023c0c:	07da      	lsls	r2, r3, #31
 8023c0e:	d40b      	bmi.n	8023c28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023c10:	4620      	mov	r0, r4
 8023c12:	f007 fc96 	bl	802b542 <__cxa_guard_acquire>
 8023c16:	b138      	cbz	r0, 8023c28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023c18:	4620      	mov	r0, r4
 8023c1a:	f007 fc9e 	bl	802b55a <__cxa_guard_release>
 8023c1e:	4a0f      	ldr	r2, [pc, #60]	; (8023c5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023c20:	490f      	ldr	r1, [pc, #60]	; (8023c60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023c22:	4810      	ldr	r0, [pc, #64]	; (8023c64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023c24:	f007 fc86 	bl	802b534 <__aeabi_atexit>
 8023c28:	4c0f      	ldr	r4, [pc, #60]	; (8023c68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8023c2a:	7823      	ldrb	r3, [r4, #0]
 8023c2c:	f3bf 8f5b 	dmb	ish
 8023c30:	07db      	lsls	r3, r3, #31
 8023c32:	d40b      	bmi.n	8023c4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023c34:	4620      	mov	r0, r4
 8023c36:	f007 fc84 	bl	802b542 <__cxa_guard_acquire>
 8023c3a:	b138      	cbz	r0, 8023c4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023c3c:	4620      	mov	r0, r4
 8023c3e:	f007 fc8c 	bl	802b55a <__cxa_guard_release>
 8023c42:	4a06      	ldr	r2, [pc, #24]	; (8023c5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023c44:	4909      	ldr	r1, [pc, #36]	; (8023c6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8023c46:	480a      	ldr	r0, [pc, #40]	; (8023c70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023c48:	f007 fc74 	bl	802b534 <__aeabi_atexit>
 8023c4c:	4b05      	ldr	r3, [pc, #20]	; (8023c64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023c4e:	63ab      	str	r3, [r5, #56]	; 0x38
 8023c50:	4b07      	ldr	r3, [pc, #28]	; (8023c70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023c52:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023c54:	bd38      	pop	{r3, r4, r5, pc}
 8023c56:	bf00      	nop
 8023c58:	2402af54 	.word	0x2402af54
 8023c5c:	24000000 	.word	0x24000000
 8023c60:	08020591 	.word	0x08020591
 8023c64:	240000c0 	.word	0x240000c0
 8023c68:	2402af58 	.word	0x2402af58
 8023c6c:	0802058f 	.word	0x0802058f
 8023c70:	240000c4 	.word	0x240000c4

08023c74 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023c74:	b510      	push	{r4, lr}
 8023c76:	4604      	mov	r4, r0
 8023c78:	f7ff ff14 	bl	8023aa4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023c7c:	4620      	mov	r0, r4
 8023c7e:	f7ff ff85 	bl	8023b8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023c82:	4620      	mov	r0, r4
 8023c84:	f7ff ff48 	bl	8023b18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8023c88:	4620      	mov	r0, r4
 8023c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c8e:	f7ff bfb7 	b.w	8023c00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023c94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023c94:	b538      	push	{r3, r4, r5, lr}
 8023c96:	4c15      	ldr	r4, [pc, #84]	; (8023cec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023c98:	4605      	mov	r5, r0
 8023c9a:	7823      	ldrb	r3, [r4, #0]
 8023c9c:	f3bf 8f5b 	dmb	ish
 8023ca0:	07da      	lsls	r2, r3, #31
 8023ca2:	d40b      	bmi.n	8023cbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023ca4:	4620      	mov	r0, r4
 8023ca6:	f007 fc4c 	bl	802b542 <__cxa_guard_acquire>
 8023caa:	b138      	cbz	r0, 8023cbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023cac:	4620      	mov	r0, r4
 8023cae:	f007 fc54 	bl	802b55a <__cxa_guard_release>
 8023cb2:	4a0f      	ldr	r2, [pc, #60]	; (8023cf0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023cb4:	490f      	ldr	r1, [pc, #60]	; (8023cf4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023cb6:	4810      	ldr	r0, [pc, #64]	; (8023cf8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023cb8:	f007 fc3c 	bl	802b534 <__aeabi_atexit>
 8023cbc:	4c0f      	ldr	r4, [pc, #60]	; (8023cfc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023cbe:	7823      	ldrb	r3, [r4, #0]
 8023cc0:	f3bf 8f5b 	dmb	ish
 8023cc4:	07db      	lsls	r3, r3, #31
 8023cc6:	d40b      	bmi.n	8023ce0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023cc8:	4620      	mov	r0, r4
 8023cca:	f007 fc3a 	bl	802b542 <__cxa_guard_acquire>
 8023cce:	b138      	cbz	r0, 8023ce0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023cd0:	4620      	mov	r0, r4
 8023cd2:	f007 fc42 	bl	802b55a <__cxa_guard_release>
 8023cd6:	4a06      	ldr	r2, [pc, #24]	; (8023cf0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023cd8:	4909      	ldr	r1, [pc, #36]	; (8023d00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023cda:	480a      	ldr	r0, [pc, #40]	; (8023d04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023cdc:	f007 fc2a 	bl	802b534 <__aeabi_atexit>
 8023ce0:	4b05      	ldr	r3, [pc, #20]	; (8023cf8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023ce2:	662b      	str	r3, [r5, #96]	; 0x60
 8023ce4:	4b07      	ldr	r3, [pc, #28]	; (8023d04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023ce6:	666b      	str	r3, [r5, #100]	; 0x64
 8023ce8:	bd38      	pop	{r3, r4, r5, pc}
 8023cea:	bf00      	nop
 8023cec:	2402af3c 	.word	0x2402af3c
 8023cf0:	24000000 	.word	0x24000000
 8023cf4:	0802057d 	.word	0x0802057d
 8023cf8:	240000a8 	.word	0x240000a8
 8023cfc:	2402af40 	.word	0x2402af40
 8023d00:	0802057b 	.word	0x0802057b
 8023d04:	240000ac 	.word	0x240000ac

08023d08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023d08:	b538      	push	{r3, r4, r5, lr}
 8023d0a:	4c15      	ldr	r4, [pc, #84]	; (8023d60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023d0c:	4605      	mov	r5, r0
 8023d0e:	7823      	ldrb	r3, [r4, #0]
 8023d10:	f3bf 8f5b 	dmb	ish
 8023d14:	07da      	lsls	r2, r3, #31
 8023d16:	d40b      	bmi.n	8023d30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023d18:	4620      	mov	r0, r4
 8023d1a:	f007 fc12 	bl	802b542 <__cxa_guard_acquire>
 8023d1e:	b138      	cbz	r0, 8023d30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023d20:	4620      	mov	r0, r4
 8023d22:	f007 fc1a 	bl	802b55a <__cxa_guard_release>
 8023d26:	4a0f      	ldr	r2, [pc, #60]	; (8023d64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023d28:	490f      	ldr	r1, [pc, #60]	; (8023d68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023d2a:	4810      	ldr	r0, [pc, #64]	; (8023d6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023d2c:	f007 fc02 	bl	802b534 <__aeabi_atexit>
 8023d30:	4c0f      	ldr	r4, [pc, #60]	; (8023d70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023d32:	7823      	ldrb	r3, [r4, #0]
 8023d34:	f3bf 8f5b 	dmb	ish
 8023d38:	07db      	lsls	r3, r3, #31
 8023d3a:	d40b      	bmi.n	8023d54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023d3c:	4620      	mov	r0, r4
 8023d3e:	f007 fc00 	bl	802b542 <__cxa_guard_acquire>
 8023d42:	b138      	cbz	r0, 8023d54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023d44:	4620      	mov	r0, r4
 8023d46:	f007 fc08 	bl	802b55a <__cxa_guard_release>
 8023d4a:	4a06      	ldr	r2, [pc, #24]	; (8023d64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023d4c:	4909      	ldr	r1, [pc, #36]	; (8023d74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023d4e:	480a      	ldr	r0, [pc, #40]	; (8023d78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023d50:	f007 fbf0 	bl	802b534 <__aeabi_atexit>
 8023d54:	4b05      	ldr	r3, [pc, #20]	; (8023d6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023d56:	65ab      	str	r3, [r5, #88]	; 0x58
 8023d58:	4b07      	ldr	r3, [pc, #28]	; (8023d78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023d5a:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023d5c:	bd38      	pop	{r3, r4, r5, pc}
 8023d5e:	bf00      	nop
 8023d60:	2402af14 	.word	0x2402af14
 8023d64:	24000000 	.word	0x24000000
 8023d68:	08020581 	.word	0x08020581
 8023d6c:	24000080 	.word	0x24000080
 8023d70:	2402af18 	.word	0x2402af18
 8023d74:	0802057f 	.word	0x0802057f
 8023d78:	24000084 	.word	0x24000084

08023d7c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023d7c:	b510      	push	{r4, lr}
 8023d7e:	4604      	mov	r4, r0
 8023d80:	f7ff ff88 	bl	8023c94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023d84:	4620      	mov	r0, r4
 8023d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d8a:	f7ff bfbd 	b.w	8023d08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023d90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023d90:	b538      	push	{r3, r4, r5, lr}
 8023d92:	4c15      	ldr	r4, [pc, #84]	; (8023de8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023d94:	4605      	mov	r5, r0
 8023d96:	7823      	ldrb	r3, [r4, #0]
 8023d98:	f3bf 8f5b 	dmb	ish
 8023d9c:	07da      	lsls	r2, r3, #31
 8023d9e:	d40b      	bmi.n	8023db8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023da0:	4620      	mov	r0, r4
 8023da2:	f007 fbce 	bl	802b542 <__cxa_guard_acquire>
 8023da6:	b138      	cbz	r0, 8023db8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023da8:	4620      	mov	r0, r4
 8023daa:	f007 fbd6 	bl	802b55a <__cxa_guard_release>
 8023dae:	4a0f      	ldr	r2, [pc, #60]	; (8023dec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023db0:	490f      	ldr	r1, [pc, #60]	; (8023df0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023db2:	4810      	ldr	r0, [pc, #64]	; (8023df4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023db4:	f007 fbbe 	bl	802b534 <__aeabi_atexit>
 8023db8:	4c0f      	ldr	r4, [pc, #60]	; (8023df8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023dba:	7823      	ldrb	r3, [r4, #0]
 8023dbc:	f3bf 8f5b 	dmb	ish
 8023dc0:	07db      	lsls	r3, r3, #31
 8023dc2:	d40b      	bmi.n	8023ddc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023dc4:	4620      	mov	r0, r4
 8023dc6:	f007 fbbc 	bl	802b542 <__cxa_guard_acquire>
 8023dca:	b138      	cbz	r0, 8023ddc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023dcc:	4620      	mov	r0, r4
 8023dce:	f007 fbc4 	bl	802b55a <__cxa_guard_release>
 8023dd2:	4a06      	ldr	r2, [pc, #24]	; (8023dec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023dd4:	4909      	ldr	r1, [pc, #36]	; (8023dfc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023dd6:	480a      	ldr	r0, [pc, #40]	; (8023e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023dd8:	f007 fbac 	bl	802b534 <__aeabi_atexit>
 8023ddc:	4b05      	ldr	r3, [pc, #20]	; (8023df4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023dde:	672b      	str	r3, [r5, #112]	; 0x70
 8023de0:	4b07      	ldr	r3, [pc, #28]	; (8023e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023de2:	676b      	str	r3, [r5, #116]	; 0x74
 8023de4:	bd38      	pop	{r3, r4, r5, pc}
 8023de6:	bf00      	nop
 8023de8:	2402af0c 	.word	0x2402af0c
 8023dec:	24000000 	.word	0x24000000
 8023df0:	08020575 	.word	0x08020575
 8023df4:	24000078 	.word	0x24000078
 8023df8:	2402af10 	.word	0x2402af10
 8023dfc:	08020573 	.word	0x08020573
 8023e00:	2400007c 	.word	0x2400007c

08023e04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023e04:	b538      	push	{r3, r4, r5, lr}
 8023e06:	4c15      	ldr	r4, [pc, #84]	; (8023e5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023e08:	4605      	mov	r5, r0
 8023e0a:	7823      	ldrb	r3, [r4, #0]
 8023e0c:	f3bf 8f5b 	dmb	ish
 8023e10:	07da      	lsls	r2, r3, #31
 8023e12:	d40b      	bmi.n	8023e2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023e14:	4620      	mov	r0, r4
 8023e16:	f007 fb94 	bl	802b542 <__cxa_guard_acquire>
 8023e1a:	b138      	cbz	r0, 8023e2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023e1c:	4620      	mov	r0, r4
 8023e1e:	f007 fb9c 	bl	802b55a <__cxa_guard_release>
 8023e22:	4a0f      	ldr	r2, [pc, #60]	; (8023e60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023e24:	490f      	ldr	r1, [pc, #60]	; (8023e64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023e26:	4810      	ldr	r0, [pc, #64]	; (8023e68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023e28:	f007 fb84 	bl	802b534 <__aeabi_atexit>
 8023e2c:	4c0f      	ldr	r4, [pc, #60]	; (8023e6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023e2e:	7823      	ldrb	r3, [r4, #0]
 8023e30:	f3bf 8f5b 	dmb	ish
 8023e34:	07db      	lsls	r3, r3, #31
 8023e36:	d40b      	bmi.n	8023e50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023e38:	4620      	mov	r0, r4
 8023e3a:	f007 fb82 	bl	802b542 <__cxa_guard_acquire>
 8023e3e:	b138      	cbz	r0, 8023e50 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023e40:	4620      	mov	r0, r4
 8023e42:	f007 fb8a 	bl	802b55a <__cxa_guard_release>
 8023e46:	4a06      	ldr	r2, [pc, #24]	; (8023e60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023e48:	4909      	ldr	r1, [pc, #36]	; (8023e70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023e4a:	480a      	ldr	r0, [pc, #40]	; (8023e74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023e4c:	f007 fb72 	bl	802b534 <__aeabi_atexit>
 8023e50:	4b05      	ldr	r3, [pc, #20]	; (8023e68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023e52:	66ab      	str	r3, [r5, #104]	; 0x68
 8023e54:	4b07      	ldr	r3, [pc, #28]	; (8023e74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023e56:	66eb      	str	r3, [r5, #108]	; 0x6c
 8023e58:	bd38      	pop	{r3, r4, r5, pc}
 8023e5a:	bf00      	nop
 8023e5c:	2402af04 	.word	0x2402af04
 8023e60:	24000000 	.word	0x24000000
 8023e64:	08020579 	.word	0x08020579
 8023e68:	24000070 	.word	0x24000070
 8023e6c:	2402af08 	.word	0x2402af08
 8023e70:	08020577 	.word	0x08020577
 8023e74:	24000074 	.word	0x24000074

08023e78 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023e78:	b510      	push	{r4, lr}
 8023e7a:	4604      	mov	r4, r0
 8023e7c:	f7ff ff88 	bl	8023d90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023e80:	4620      	mov	r0, r4
 8023e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023e86:	f7ff bfbd 	b.w	8023e04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023e8a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023e8a:	b510      	push	{r4, lr}
 8023e8c:	4604      	mov	r4, r0
 8023e8e:	f7ff fff3 	bl	8023e78 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023e92:	4620      	mov	r0, r4
 8023e94:	f7ff ff72 	bl	8023d7c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023e98:	4620      	mov	r0, r4
 8023e9a:	f7ff fdf9 	bl	8023a90 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023e9e:	4620      	mov	r0, r4
 8023ea0:	f7ff fcfa 	bl	8023898 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023ea4:	4620      	mov	r0, r4
 8023ea6:	f7ff fd75 	bl	8023994 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023eaa:	4620      	mov	r0, r4
 8023eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023eb0:	f7ff bee0 	b.w	8023c74 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023eb4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8023eb4:	b538      	push	{r3, r4, r5, lr}
 8023eb6:	4c0b      	ldr	r4, [pc, #44]	; (8023ee4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8023eb8:	4605      	mov	r5, r0
 8023eba:	7823      	ldrb	r3, [r4, #0]
 8023ebc:	f3bf 8f5b 	dmb	ish
 8023ec0:	07db      	lsls	r3, r3, #31
 8023ec2:	d40b      	bmi.n	8023edc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8023ec4:	4620      	mov	r0, r4
 8023ec6:	f007 fb3c 	bl	802b542 <__cxa_guard_acquire>
 8023eca:	b138      	cbz	r0, 8023edc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8023ecc:	4620      	mov	r0, r4
 8023ece:	f007 fb44 	bl	802b55a <__cxa_guard_release>
 8023ed2:	4a05      	ldr	r2, [pc, #20]	; (8023ee8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8023ed4:	4905      	ldr	r1, [pc, #20]	; (8023eec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023ed6:	4806      	ldr	r0, [pc, #24]	; (8023ef0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023ed8:	f007 fb2c 	bl	802b534 <__aeabi_atexit>
 8023edc:	4b04      	ldr	r3, [pc, #16]	; (8023ef0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8023ede:	67ab      	str	r3, [r5, #120]	; 0x78
 8023ee0:	bd38      	pop	{r3, r4, r5, pc}
 8023ee2:	bf00      	nop
 8023ee4:	2402aef8 	.word	0x2402aef8
 8023ee8:	24000000 	.word	0x24000000
 8023eec:	08020571 	.word	0x08020571
 8023ef0:	24000068 	.word	0x24000068

08023ef4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8023ef4:	b538      	push	{r3, r4, r5, lr}
 8023ef6:	4c0b      	ldr	r4, [pc, #44]	; (8023f24 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8023ef8:	4605      	mov	r5, r0
 8023efa:	7823      	ldrb	r3, [r4, #0]
 8023efc:	f3bf 8f5b 	dmb	ish
 8023f00:	07db      	lsls	r3, r3, #31
 8023f02:	d40b      	bmi.n	8023f1c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8023f04:	4620      	mov	r0, r4
 8023f06:	f007 fb1c 	bl	802b542 <__cxa_guard_acquire>
 8023f0a:	b138      	cbz	r0, 8023f1c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8023f0c:	4620      	mov	r0, r4
 8023f0e:	f007 fb24 	bl	802b55a <__cxa_guard_release>
 8023f12:	4a05      	ldr	r2, [pc, #20]	; (8023f28 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8023f14:	4905      	ldr	r1, [pc, #20]	; (8023f2c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8023f16:	4806      	ldr	r0, [pc, #24]	; (8023f30 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023f18:	f007 fb0c 	bl	802b534 <__aeabi_atexit>
 8023f1c:	4b04      	ldr	r3, [pc, #16]	; (8023f30 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023f1e:	67eb      	str	r3, [r5, #124]	; 0x7c
 8023f20:	bd38      	pop	{r3, r4, r5, pc}
 8023f22:	bf00      	nop
 8023f24:	2402aefc 	.word	0x2402aefc
 8023f28:	24000000 	.word	0x24000000
 8023f2c:	0802056f 	.word	0x0802056f
 8023f30:	2400006c 	.word	0x2400006c

08023f34 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8023f34:	b570      	push	{r4, r5, r6, lr}
 8023f36:	4d0d      	ldr	r5, [pc, #52]	; (8023f6c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023f38:	4606      	mov	r6, r0
 8023f3a:	4c0d      	ldr	r4, [pc, #52]	; (8023f70 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023f3c:	782b      	ldrb	r3, [r5, #0]
 8023f3e:	f3bf 8f5b 	dmb	ish
 8023f42:	f013 0f01 	tst.w	r3, #1
 8023f46:	d10d      	bne.n	8023f64 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023f48:	4628      	mov	r0, r5
 8023f4a:	f007 fafa 	bl	802b542 <__cxa_guard_acquire>
 8023f4e:	b148      	cbz	r0, 8023f64 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023f50:	4b08      	ldr	r3, [pc, #32]	; (8023f74 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023f52:	4628      	mov	r0, r5
 8023f54:	6023      	str	r3, [r4, #0]
 8023f56:	f007 fb00 	bl	802b55a <__cxa_guard_release>
 8023f5a:	4a07      	ldr	r2, [pc, #28]	; (8023f78 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023f5c:	4620      	mov	r0, r4
 8023f5e:	4907      	ldr	r1, [pc, #28]	; (8023f7c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8023f60:	f007 fae8 	bl	802b534 <__aeabi_atexit>
 8023f64:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 8023f68:	bd70      	pop	{r4, r5, r6, pc}
 8023f6a:	bf00      	nop
 8023f6c:	2402af00 	.word	0x2402af00
 8023f70:	2402af74 	.word	0x2402af74
 8023f74:	0803018c 	.word	0x0803018c
 8023f78:	24000000 	.word	0x24000000
 8023f7c:	0802056d 	.word	0x0802056d

08023f80 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8023f80:	b510      	push	{r4, lr}
 8023f82:	4604      	mov	r4, r0
 8023f84:	f7ff ff96 	bl	8023eb4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8023f88:	4620      	mov	r0, r4
 8023f8a:	f7ff ffb3 	bl	8023ef4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8023f8e:	4620      	mov	r0, r4
 8023f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f94:	f7ff bfce 	b.w	8023f34 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08023f98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f9c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8023fa0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8023fa4:	2d00      	cmp	r5, #0
 8023fa6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8023faa:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023fae:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8023fb2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023fb6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8023fba:	eb02 0a0c 	add.w	sl, r2, ip
 8023fbe:	8808      	ldrh	r0, [r1, #0]
 8023fc0:	f2c0 80b0 	blt.w	8024124 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023fc4:	45ab      	cmp	fp, r5
 8023fc6:	f340 80ad 	ble.w	8024124 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023fca:	2c00      	cmp	r4, #0
 8023fcc:	f2c0 80a8 	blt.w	8024120 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023fd0:	45a6      	cmp	lr, r4
 8023fd2:	f340 80a5 	ble.w	8024120 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023fd6:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023fda:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023fde:	1c62      	adds	r2, r4, #1
 8023fe0:	f100 80a3 	bmi.w	802412a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023fe4:	4596      	cmp	lr, r2
 8023fe6:	f340 80a0 	ble.w	802412a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023fea:	f1b9 0f00 	cmp.w	r9, #0
 8023fee:	f000 809c 	beq.w	802412a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023ff2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023ff6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023ffa:	3501      	adds	r5, #1
 8023ffc:	f100 8099 	bmi.w	8024132 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024000:	45ab      	cmp	fp, r5
 8024002:	f340 8096 	ble.w	8024132 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024006:	2f00      	cmp	r7, #0
 8024008:	f000 8093 	beq.w	8024132 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 802400c:	2c00      	cmp	r4, #0
 802400e:	f2c0 808e 	blt.w	802412e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024012:	45a6      	cmp	lr, r4
 8024014:	f340 808b 	ble.w	802412e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024018:	f81a 200e 	ldrb.w	r2, [sl, lr]
 802401c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8024020:	3401      	adds	r4, #1
 8024022:	f100 8089 	bmi.w	8024138 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024026:	45a6      	cmp	lr, r4
 8024028:	f340 8086 	ble.w	8024138 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 802402c:	f1b9 0f00 	cmp.w	r9, #0
 8024030:	f000 8082 	beq.w	8024138 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024034:	44d6      	add	lr, sl
 8024036:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802403a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802403e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8024042:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8024046:	fb19 fe07 	smulbb	lr, r9, r7
 802404a:	f1c7 0210 	rsb	r2, r7, #16
 802404e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024052:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8024056:	eba2 0209 	sub.w	r2, r2, r9
 802405a:	ea44 0808 	orr.w	r8, r4, r8
 802405e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8024062:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024066:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802406a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802406e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8024072:	ea44 0c0c 	orr.w	ip, r4, ip
 8024076:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802407a:	fb04 f40c 	mul.w	r4, r4, ip
 802407e:	fb02 4808 	mla	r8, r2, r8, r4
 8024082:	041a      	lsls	r2, r3, #16
 8024084:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024088:	b2b4      	uxth	r4, r6
 802408a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802408e:	43f6      	mvns	r6, r6
 8024090:	4313      	orrs	r3, r2
 8024092:	042a      	lsls	r2, r5, #16
 8024094:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024098:	b2f6      	uxtb	r6, r6
 802409a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802409e:	fb0e 8303 	mla	r3, lr, r3, r8
 80240a2:	432a      	orrs	r2, r5
 80240a4:	fb07 3202 	mla	r2, r7, r2, r3
 80240a8:	10c7      	asrs	r7, r0, #3
 80240aa:	0d53      	lsrs	r3, r2, #21
 80240ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80240b0:	0952      	lsrs	r2, r2, #5
 80240b2:	fb17 f706 	smulbb	r7, r7, r6
 80240b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80240ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80240be:	431a      	orrs	r2, r3
 80240c0:	b293      	uxth	r3, r2
 80240c2:	1202      	asrs	r2, r0, #8
 80240c4:	121d      	asrs	r5, r3, #8
 80240c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80240ca:	00c0      	lsls	r0, r0, #3
 80240cc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80240d0:	fb12 f206 	smulbb	r2, r2, r6
 80240d4:	b2c0      	uxtb	r0, r0
 80240d6:	fb05 2504 	mla	r5, r5, r4, r2
 80240da:	10da      	asrs	r2, r3, #3
 80240dc:	fb10 f006 	smulbb	r0, r0, r6
 80240e0:	00db      	lsls	r3, r3, #3
 80240e2:	b2ad      	uxth	r5, r5
 80240e4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80240e8:	b2db      	uxtb	r3, r3
 80240ea:	fb02 7204 	mla	r2, r2, r4, r7
 80240ee:	fb03 0004 	mla	r0, r3, r4, r0
 80240f2:	1c6b      	adds	r3, r5, #1
 80240f4:	b292      	uxth	r2, r2
 80240f6:	b280      	uxth	r0, r0
 80240f8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80240fc:	1c43      	adds	r3, r0, #1
 80240fe:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024102:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024106:	1c50      	adds	r0, r2, #1
 8024108:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802410c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024110:	0952      	lsrs	r2, r2, #5
 8024112:	432b      	orrs	r3, r5
 8024114:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024118:	4313      	orrs	r3, r2
 802411a:	800b      	strh	r3, [r1, #0]
 802411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024120:	4680      	mov	r8, r0
 8024122:	e75c      	b.n	8023fde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8024124:	4684      	mov	ip, r0
 8024126:	4680      	mov	r8, r0
 8024128:	e767      	b.n	8023ffa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802412a:	4684      	mov	ip, r0
 802412c:	e765      	b.n	8023ffa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802412e:	4605      	mov	r5, r0
 8024130:	e776      	b.n	8024020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8024132:	4603      	mov	r3, r0
 8024134:	4605      	mov	r5, r0
 8024136:	e782      	b.n	802403e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024138:	4603      	mov	r3, r0
 802413a:	e780      	b.n	802403e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0802413c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024140:	b099      	sub	sp, #100	; 0x64
 8024142:	9215      	str	r2, [sp, #84]	; 0x54
 8024144:	9309      	str	r3, [sp, #36]	; 0x24
 8024146:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024148:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 802414c:	9016      	str	r0, [sp, #88]	; 0x58
 802414e:	930d      	str	r3, [sp, #52]	; 0x34
 8024150:	6850      	ldr	r0, [r2, #4]
 8024152:	910c      	str	r1, [sp, #48]	; 0x30
 8024154:	6812      	ldr	r2, [r2, #0]
 8024156:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802415a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 802415e:	fb00 1303 	mla	r3, r0, r3, r1
 8024162:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024166:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024168:	681b      	ldr	r3, [r3, #0]
 802416a:	930b      	str	r3, [sp, #44]	; 0x2c
 802416c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802416e:	685e      	ldr	r6, [r3, #4]
 8024170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024172:	3604      	adds	r6, #4
 8024174:	43db      	mvns	r3, r3
 8024176:	b2db      	uxtb	r3, r3
 8024178:	930a      	str	r3, [sp, #40]	; 0x28
 802417a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802417c:	2b00      	cmp	r3, #0
 802417e:	dc03      	bgt.n	8024188 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024182:	2b00      	cmp	r3, #0
 8024184:	f340 8225 	ble.w	80245d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024188:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802418a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802418e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024192:	1e48      	subs	r0, r1, #1
 8024194:	1e57      	subs	r7, r2, #1
 8024196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024198:	2b00      	cmp	r3, #0
 802419a:	f340 80e3 	ble.w	8024364 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802419e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80241a2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80241a6:	d406      	bmi.n	80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80241a8:	4584      	cmp	ip, r0
 80241aa:	da04      	bge.n	80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	db02      	blt.n	80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80241b0:	42bb      	cmp	r3, r7
 80241b2:	f2c0 80d8 	blt.w	8024366 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80241b6:	f11c 0c01 	adds.w	ip, ip, #1
 80241ba:	f100 80c9 	bmi.w	8024350 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80241be:	4561      	cmp	r1, ip
 80241c0:	f2c0 80c6 	blt.w	8024350 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80241c4:	3301      	adds	r3, #1
 80241c6:	f100 80c3 	bmi.w	8024350 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80241ca:	429a      	cmp	r2, r3
 80241cc:	f2c0 80c0 	blt.w	8024350 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80241d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80241d4:	4647      	mov	r7, r8
 80241d6:	f1bb 0f00 	cmp.w	fp, #0
 80241da:	f340 80e3 	ble.w	80243a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80241de:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80241e0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80241e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80241e6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80241ea:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80241ee:	ea5f 422a 	movs.w	r2, sl, asr #16
 80241f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80241f6:	689b      	ldr	r3, [r3, #8]
 80241f8:	f100 8121 	bmi.w	802443e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80241fc:	f103 39ff 	add.w	r9, r3, #4294967295
 8024200:	454a      	cmp	r2, r9
 8024202:	f280 811c 	bge.w	802443e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024206:	f1bc 0f00 	cmp.w	ip, #0
 802420a:	f2c0 8118 	blt.w	802443e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802420e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024212:	45cc      	cmp	ip, r9
 8024214:	f280 8113 	bge.w	802443e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024218:	b21b      	sxth	r3, r3
 802421a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802421c:	fb0c 2203 	mla	r2, ip, r3, r2
 8024220:	eb04 0902 	add.w	r9, r4, r2
 8024224:	5ca2      	ldrb	r2, [r4, r2]
 8024226:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802422a:	2800      	cmp	r0, #0
 802422c:	f000 80fe 	beq.w	802442c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8024230:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024234:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024238:	9211      	str	r2, [sp, #68]	; 0x44
 802423a:	b151      	cbz	r1, 8024252 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802423c:	eb09 0203 	add.w	r2, r9, r3
 8024240:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024244:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024248:	930f      	str	r3, [sp, #60]	; 0x3c
 802424a:	7853      	ldrb	r3, [r2, #1]
 802424c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024250:	9312      	str	r3, [sp, #72]	; 0x48
 8024252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024254:	fb10 f201 	smulbb	r2, r0, r1
 8024258:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802425a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802425e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024262:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024266:	10d2      	asrs	r2, r2, #3
 8024268:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802426c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024270:	ea4c 0c03 	orr.w	ip, ip, r3
 8024274:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024276:	041b      	lsls	r3, r3, #16
 8024278:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802427c:	4323      	orrs	r3, r4
 802427e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024280:	4353      	muls	r3, r2
 8024282:	fb09 330c 	mla	r3, r9, ip, r3
 8024286:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802428a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802428e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024292:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024296:	f1c1 0c10 	rsb	ip, r1, #16
 802429a:	ebac 0c00 	sub.w	ip, ip, r0
 802429e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80242a2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80242a6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80242aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80242ac:	0418      	lsls	r0, r3, #16
 80242ae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80242b2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80242b6:	4318      	orrs	r0, r3
 80242b8:	fb02 c200 	mla	r2, r2, r0, ip
 80242bc:	8838      	ldrh	r0, [r7, #0]
 80242be:	0d53      	lsrs	r3, r2, #21
 80242c0:	0952      	lsrs	r2, r2, #5
 80242c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80242c6:	1201      	asrs	r1, r0, #8
 80242c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80242cc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80242d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80242d4:	00c0      	lsls	r0, r0, #3
 80242d6:	431a      	orrs	r2, r3
 80242d8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80242dc:	fb11 f104 	smulbb	r1, r1, r4
 80242e0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80242e4:	b292      	uxth	r2, r2
 80242e6:	fb1e fe04 	smulbb	lr, lr, r4
 80242ea:	b2c0      	uxtb	r0, r0
 80242ec:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80242f0:	fb10 f004 	smulbb	r0, r0, r4
 80242f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80242f8:	fb0c 1c03 	mla	ip, ip, r3, r1
 80242fc:	10d1      	asrs	r1, r2, #3
 80242fe:	00d2      	lsls	r2, r2, #3
 8024300:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024304:	fa1f fc8c 	uxth.w	ip, ip
 8024308:	b2d2      	uxtb	r2, r2
 802430a:	fb01 e103 	mla	r1, r1, r3, lr
 802430e:	fb02 0303 	mla	r3, r2, r3, r0
 8024312:	b289      	uxth	r1, r1
 8024314:	b29a      	uxth	r2, r3
 8024316:	f10c 0301 	add.w	r3, ip, #1
 802431a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802431e:	1c53      	adds	r3, r2, #1
 8024320:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024324:	1c4a      	adds	r2, r1, #1
 8024326:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802432a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802432e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024332:	0949      	lsrs	r1, r1, #5
 8024334:	ea43 030c 	orr.w	r3, r3, ip
 8024338:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802433c:	430b      	orrs	r3, r1
 802433e:	803b      	strh	r3, [r7, #0]
 8024340:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024342:	3702      	adds	r7, #2
 8024344:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024348:	449a      	add	sl, r3
 802434a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802434c:	441d      	add	r5, r3
 802434e:	e742      	b.n	80241d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024350:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024352:	f108 0802 	add.w	r8, r8, #2
 8024356:	449a      	add	sl, r3
 8024358:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802435a:	441d      	add	r5, r3
 802435c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802435e:	3b01      	subs	r3, #1
 8024360:	9309      	str	r3, [sp, #36]	; 0x24
 8024362:	e718      	b.n	8024196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024364:	d023      	beq.n	80243ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8024366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024368:	9825      	ldr	r0, [sp, #148]	; 0x94
 802436a:	3b01      	subs	r3, #1
 802436c:	fb00 a003 	mla	r0, r0, r3, sl
 8024370:	1400      	asrs	r0, r0, #16
 8024372:	f53f af2d 	bmi.w	80241d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024376:	3901      	subs	r1, #1
 8024378:	4288      	cmp	r0, r1
 802437a:	f6bf af29 	bge.w	80241d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802437e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024380:	fb01 5303 	mla	r3, r1, r3, r5
 8024384:	141b      	asrs	r3, r3, #16
 8024386:	f53f af23 	bmi.w	80241d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802438a:	3a01      	subs	r2, #1
 802438c:	4293      	cmp	r3, r2
 802438e:	f6bf af1f 	bge.w	80241d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024392:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024396:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802439a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802439e:	f1be 0f00 	cmp.w	lr, #0
 80243a2:	dc6c      	bgt.n	802447e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80243a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80243aa:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80243ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80243b0:	2b00      	cmp	r3, #0
 80243b2:	f340 810e 	ble.w	80245d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80243b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80243ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80243bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80243c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80243c4:	eef0 6a62 	vmov.f32	s13, s5
 80243c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80243cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80243d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243d4:	ee16 aa90 	vmov	sl, s13
 80243d8:	eef0 6a43 	vmov.f32	s13, s6
 80243dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243e0:	ee16 5a90 	vmov	r5, s13
 80243e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80243e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80243ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80243f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80243f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80243f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80243fc:	ee12 2a90 	vmov	r2, s5
 8024400:	eef0 2a47 	vmov.f32	s5, s14
 8024404:	fb92 f3f3 	sdiv	r3, r2, r3
 8024408:	ee13 2a10 	vmov	r2, s6
 802440c:	9325      	str	r3, [sp, #148]	; 0x94
 802440e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024410:	eeb0 3a67 	vmov.f32	s6, s15
 8024414:	fb92 f3f3 	sdiv	r3, r2, r3
 8024418:	9326      	str	r3, [sp, #152]	; 0x98
 802441a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802441c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802441e:	3b01      	subs	r3, #1
 8024420:	930c      	str	r3, [sp, #48]	; 0x30
 8024422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024424:	bf08      	it	eq
 8024426:	4613      	moveq	r3, r2
 8024428:	9309      	str	r3, [sp, #36]	; 0x24
 802442a:	e6a6      	b.n	802417a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802442c:	2900      	cmp	r1, #0
 802442e:	f43f af10 	beq.w	8024252 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024432:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024436:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802443a:	930f      	str	r3, [sp, #60]	; 0x3c
 802443c:	e709      	b.n	8024252 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802443e:	f112 0901 	adds.w	r9, r2, #1
 8024442:	f53f af7d 	bmi.w	8024340 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024446:	454b      	cmp	r3, r9
 8024448:	f6ff af7a 	blt.w	8024340 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802444c:	f11c 0901 	adds.w	r9, ip, #1
 8024450:	f53f af76 	bmi.w	8024340 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024454:	45ce      	cmp	lr, r9
 8024456:	f6ff af73 	blt.w	8024340 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802445a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802445c:	b21b      	sxth	r3, r3
 802445e:	9202      	str	r2, [sp, #8]
 8024460:	fa0f f28e 	sxth.w	r2, lr
 8024464:	9300      	str	r3, [sp, #0]
 8024466:	4633      	mov	r3, r6
 8024468:	9201      	str	r2, [sp, #4]
 802446a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802446c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024470:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024474:	4639      	mov	r1, r7
 8024476:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024478:	f7ff fd8e 	bl	8023f98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802447c:	e760      	b.n	8024340 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802447e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024480:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024484:	1429      	asrs	r1, r5, #16
 8024486:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024488:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802448c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024490:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024494:	fb03 2101 	mla	r1, r3, r1, r2
 8024498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802449a:	440a      	add	r2, r1
 802449c:	5c61      	ldrb	r1, [r4, r1]
 802449e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80244a2:	f1bc 0f00 	cmp.w	ip, #0
 80244a6:	f000 808c 	beq.w	80245c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80244aa:	7857      	ldrb	r7, [r2, #1]
 80244ac:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80244b0:	9413      	str	r4, [sp, #76]	; 0x4c
 80244b2:	b140      	cbz	r0, 80244c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244b4:	18d7      	adds	r7, r2, r3
 80244b6:	5cd3      	ldrb	r3, [r2, r3]
 80244b8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80244bc:	9310      	str	r3, [sp, #64]	; 0x40
 80244be:	787b      	ldrb	r3, [r7, #1]
 80244c0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80244c4:	9314      	str	r3, [sp, #80]	; 0x50
 80244c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80244c8:	fb1c f200 	smulbb	r2, ip, r0
 80244cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80244ce:	f10e 3eff 	add.w	lr, lr, #4294967295
 80244d2:	041f      	lsls	r7, r3, #16
 80244d4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80244d8:	10d2      	asrs	r2, r2, #3
 80244da:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80244de:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80244e2:	431f      	orrs	r7, r3
 80244e4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80244e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80244ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80244ec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80244ee:	041b      	lsls	r3, r3, #16
 80244f0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80244f4:	ea43 030b 	orr.w	r3, r3, fp
 80244f8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80244fc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024500:	4353      	muls	r3, r2
 8024502:	fb04 3707 	mla	r7, r4, r7, r3
 8024506:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802450a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802450c:	ea43 0b01 	orr.w	fp, r3, r1
 8024510:	f1c0 0110 	rsb	r1, r0, #16
 8024514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024516:	eba1 0c0c 	sub.w	ip, r1, ip
 802451a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802451e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024522:	fb0c 770b 	mla	r7, ip, fp, r7
 8024526:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802452a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802452e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024532:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024536:	fb02 770c 	mla	r7, r2, ip, r7
 802453a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802453c:	0d79      	lsrs	r1, r7, #21
 802453e:	8812      	ldrh	r2, [r2, #0]
 8024540:	097f      	lsrs	r7, r7, #5
 8024542:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024546:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802454a:	430f      	orrs	r7, r1
 802454c:	1211      	asrs	r1, r2, #8
 802454e:	b2bb      	uxth	r3, r7
 8024550:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024554:	10d7      	asrs	r7, r2, #3
 8024556:	fb11 f104 	smulbb	r1, r1, r4
 802455a:	1218      	asrs	r0, r3, #8
 802455c:	00d2      	lsls	r2, r2, #3
 802455e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024562:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024566:	fb17 f704 	smulbb	r7, r7, r4
 802456a:	b2d2      	uxtb	r2, r2
 802456c:	fb00 1009 	mla	r0, r0, r9, r1
 8024570:	10d9      	asrs	r1, r3, #3
 8024572:	fb12 f204 	smulbb	r2, r2, r4
 8024576:	00db      	lsls	r3, r3, #3
 8024578:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802457c:	b280      	uxth	r0, r0
 802457e:	b2db      	uxtb	r3, r3
 8024580:	fb01 7109 	mla	r1, r1, r9, r7
 8024584:	fb03 2309 	mla	r3, r3, r9, r2
 8024588:	1c42      	adds	r2, r0, #1
 802458a:	b289      	uxth	r1, r1
 802458c:	b29b      	uxth	r3, r3
 802458e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024592:	1c4f      	adds	r7, r1, #1
 8024594:	1c5a      	adds	r2, r3, #1
 8024596:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802459a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802459e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80245a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80245a4:	0949      	lsrs	r1, r1, #5
 80245a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80245aa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80245ae:	4310      	orrs	r0, r2
 80245b0:	4308      	orrs	r0, r1
 80245b2:	f823 0b02 	strh.w	r0, [r3], #2
 80245b6:	930e      	str	r3, [sp, #56]	; 0x38
 80245b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80245ba:	449a      	add	sl, r3
 80245bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80245be:	441d      	add	r5, r3
 80245c0:	e6ed      	b.n	802439e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80245c2:	2800      	cmp	r0, #0
 80245c4:	f43f af7f 	beq.w	80244c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80245c8:	5cd3      	ldrb	r3, [r2, r3]
 80245ca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80245ce:	9310      	str	r3, [sp, #64]	; 0x40
 80245d0:	e779      	b.n	80244c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80245d2:	b019      	add	sp, #100	; 0x64
 80245d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080245d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80245d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245dc:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 80245e0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80245e4:	f1b8 0f00 	cmp.w	r8, #0
 80245e8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80245ec:	fb08 470e 	mla	r7, r8, lr, r4
 80245f0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80245f4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80245f8:	eb02 0907 	add.w	r9, r2, r7
 80245fc:	8808      	ldrh	r0, [r1, #0]
 80245fe:	db67      	blt.n	80246d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024600:	45c2      	cmp	sl, r8
 8024602:	dd65      	ble.n	80246d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024604:	2c00      	cmp	r4, #0
 8024606:	db61      	blt.n	80246cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024608:	45a6      	cmp	lr, r4
 802460a:	dd5f      	ble.n	80246cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802460c:	5dd2      	ldrb	r2, [r2, r7]
 802460e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024612:	1c62      	adds	r2, r4, #1
 8024614:	d45f      	bmi.n	80246d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024616:	4596      	cmp	lr, r2
 8024618:	dd5d      	ble.n	80246d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802461a:	2d00      	cmp	r5, #0
 802461c:	d05b      	beq.n	80246d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802461e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024622:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024626:	f118 0801 	adds.w	r8, r8, #1
 802462a:	d458      	bmi.n	80246de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802462c:	45c2      	cmp	sl, r8
 802462e:	dd56      	ble.n	80246de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024630:	2e00      	cmp	r6, #0
 8024632:	d054      	beq.n	80246de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024634:	2c00      	cmp	r4, #0
 8024636:	db50      	blt.n	80246da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024638:	45a6      	cmp	lr, r4
 802463a:	dd4e      	ble.n	80246da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802463c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8024640:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024644:	3401      	adds	r4, #1
 8024646:	d407      	bmi.n	8024658 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024648:	45a6      	cmp	lr, r4
 802464a:	dd05      	ble.n	8024658 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802464c:	b125      	cbz	r5, 8024658 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802464e:	44ce      	add	lr, r9
 8024650:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024654:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024658:	fb15 f406 	smulbb	r4, r5, r6
 802465c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8024660:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8024664:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024668:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802466c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8024670:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024674:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024678:	ea43 0c0c 	orr.w	ip, r3, ip
 802467c:	f1c6 0310 	rsb	r3, r6, #16
 8024680:	ea4e 0707 	orr.w	r7, lr, r7
 8024684:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8024688:	1b5b      	subs	r3, r3, r5
 802468a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802468e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024692:	437d      	muls	r5, r7
 8024694:	fb03 5c0c 	mla	ip, r3, ip, r5
 8024698:	0403      	lsls	r3, r0, #16
 802469a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802469e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80246a2:	4318      	orrs	r0, r3
 80246a4:	0413      	lsls	r3, r2, #16
 80246a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80246aa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80246ae:	fb04 c000 	mla	r0, r4, r0, ip
 80246b2:	4313      	orrs	r3, r2
 80246b4:	fb06 0003 	mla	r0, r6, r3, r0
 80246b8:	0d43      	lsrs	r3, r0, #21
 80246ba:	0940      	lsrs	r0, r0, #5
 80246bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80246c0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80246c4:	4318      	orrs	r0, r3
 80246c6:	8008      	strh	r0, [r1, #0]
 80246c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80246cc:	4684      	mov	ip, r0
 80246ce:	e7a0      	b.n	8024612 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80246d0:	4607      	mov	r7, r0
 80246d2:	4684      	mov	ip, r0
 80246d4:	e7a7      	b.n	8024626 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80246d6:	4607      	mov	r7, r0
 80246d8:	e7a5      	b.n	8024626 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80246da:	4602      	mov	r2, r0
 80246dc:	e7b2      	b.n	8024644 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80246de:	4602      	mov	r2, r0
 80246e0:	e7ba      	b.n	8024658 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080246e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80246e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246e6:	b093      	sub	sp, #76	; 0x4c
 80246e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80246ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80246ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80246f0:	9010      	str	r0, [sp, #64]	; 0x40
 80246f2:	9108      	str	r1, [sp, #32]
 80246f4:	6850      	ldr	r0, [r2, #4]
 80246f6:	9306      	str	r3, [sp, #24]
 80246f8:	6812      	ldr	r2, [r2, #0]
 80246fa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80246fe:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8024702:	fb00 1303 	mla	r3, r0, r3, r1
 8024706:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802470a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802470c:	681b      	ldr	r3, [r3, #0]
 802470e:	9307      	str	r3, [sp, #28]
 8024710:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024712:	685f      	ldr	r7, [r3, #4]
 8024714:	3704      	adds	r7, #4
 8024716:	9b08      	ldr	r3, [sp, #32]
 8024718:	2b00      	cmp	r3, #0
 802471a:	dc03      	bgt.n	8024724 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802471c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802471e:	2b00      	cmp	r3, #0
 8024720:	f340 81b2 	ble.w	8024a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024724:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024726:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802472a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802472e:	1e48      	subs	r0, r1, #1
 8024730:	f102 3cff 	add.w	ip, r2, #4294967295
 8024734:	9b06      	ldr	r3, [sp, #24]
 8024736:	2b00      	cmp	r3, #0
 8024738:	f340 80a9 	ble.w	802488e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802473c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024740:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024744:	d406      	bmi.n	8024754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024746:	4586      	cmp	lr, r0
 8024748:	da04      	bge.n	8024754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802474a:	2b00      	cmp	r3, #0
 802474c:	db02      	blt.n	8024754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802474e:	4563      	cmp	r3, ip
 8024750:	f2c0 809e 	blt.w	8024890 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024754:	f11e 0e01 	adds.w	lr, lr, #1
 8024758:	f100 808f 	bmi.w	802487a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802475c:	4571      	cmp	r1, lr
 802475e:	f2c0 808c 	blt.w	802487a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024762:	3301      	adds	r3, #1
 8024764:	f100 8089 	bmi.w	802487a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024768:	429a      	cmp	r2, r3
 802476a:	f2c0 8086 	blt.w	802487a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802476e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024772:	46c8      	mov	r8, r9
 8024774:	f1bb 0f00 	cmp.w	fp, #0
 8024778:	f340 80a6 	ble.w	80248c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802477c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802477e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024782:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024784:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024788:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802478c:	1422      	asrs	r2, r4, #16
 802478e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024792:	689b      	ldr	r3, [r3, #8]
 8024794:	f100 80e3 	bmi.w	802495e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8024798:	f103 3aff 	add.w	sl, r3, #4294967295
 802479c:	4552      	cmp	r2, sl
 802479e:	f280 80de 	bge.w	802495e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80247a2:	f1bc 0f00 	cmp.w	ip, #0
 80247a6:	f2c0 80da 	blt.w	802495e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80247aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80247ae:	45d4      	cmp	ip, sl
 80247b0:	f280 80d5 	bge.w	802495e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80247b4:	b21b      	sxth	r3, r3
 80247b6:	9d07      	ldr	r5, [sp, #28]
 80247b8:	fb0c 2203 	mla	r2, ip, r3, r2
 80247bc:	eb05 0a02 	add.w	sl, r5, r2
 80247c0:	5caa      	ldrb	r2, [r5, r2]
 80247c2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80247c6:	2800      	cmp	r0, #0
 80247c8:	f000 80c0 	beq.w	802494c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80247cc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80247d0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80247d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80247d6:	b151      	cbz	r1, 80247ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80247d8:	eb0a 0203 	add.w	r2, sl, r3
 80247dc:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80247e0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80247e4:	9309      	str	r3, [sp, #36]	; 0x24
 80247e6:	7853      	ldrb	r3, [r2, #1]
 80247e8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80247ec:	930c      	str	r3, [sp, #48]	; 0x30
 80247ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80247f0:	fb10 f201 	smulbb	r2, r0, r1
 80247f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80247f6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80247fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80247fe:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024802:	10d2      	asrs	r2, r2, #3
 8024804:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024808:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802480c:	ea4c 0c03 	orr.w	ip, ip, r3
 8024810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024812:	041b      	lsls	r3, r3, #16
 8024814:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024818:	432b      	orrs	r3, r5
 802481a:	4353      	muls	r3, r2
 802481c:	fb0a 330c 	mla	r3, sl, ip, r3
 8024820:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024824:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024828:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802482c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024830:	f1c1 0c10 	rsb	ip, r1, #16
 8024834:	ebac 0c00 	sub.w	ip, ip, r0
 8024838:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802483c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024840:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024846:	0418      	lsls	r0, r3, #16
 8024848:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802484c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024850:	4318      	orrs	r0, r3
 8024852:	fb02 c200 	mla	r2, r2, r0, ip
 8024856:	0d53      	lsrs	r3, r2, #21
 8024858:	0952      	lsrs	r2, r2, #5
 802485a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802485e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024862:	431a      	orrs	r2, r3
 8024864:	f8a8 2000 	strh.w	r2, [r8]
 8024868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802486a:	f108 0802 	add.w	r8, r8, #2
 802486e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024872:	441c      	add	r4, r3
 8024874:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024876:	441e      	add	r6, r3
 8024878:	e77c      	b.n	8024774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802487a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802487c:	f109 0902 	add.w	r9, r9, #2
 8024880:	441c      	add	r4, r3
 8024882:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024884:	441e      	add	r6, r3
 8024886:	9b06      	ldr	r3, [sp, #24]
 8024888:	3b01      	subs	r3, #1
 802488a:	9306      	str	r3, [sp, #24]
 802488c:	e752      	b.n	8024734 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802488e:	d020      	beq.n	80248d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8024890:	9b06      	ldr	r3, [sp, #24]
 8024892:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024894:	3b01      	subs	r3, #1
 8024896:	fb00 4003 	mla	r0, r0, r3, r4
 802489a:	1400      	asrs	r0, r0, #16
 802489c:	f53f af67 	bmi.w	802476e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80248a0:	3901      	subs	r1, #1
 80248a2:	4288      	cmp	r0, r1
 80248a4:	f6bf af63 	bge.w	802476e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80248a8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80248aa:	fb01 6303 	mla	r3, r1, r3, r6
 80248ae:	141b      	asrs	r3, r3, #16
 80248b0:	f53f af5d 	bmi.w	802476e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80248b4:	3a01      	subs	r2, #1
 80248b6:	4293      	cmp	r3, r2
 80248b8:	f6bf af59 	bge.w	802476e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80248bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80248c0:	46ca      	mov	sl, r9
 80248c2:	f1b8 0f00 	cmp.w	r8, #0
 80248c6:	dc67      	bgt.n	8024998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80248c8:	9b06      	ldr	r3, [sp, #24]
 80248ca:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80248ce:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80248d2:	9b08      	ldr	r3, [sp, #32]
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	f340 80d7 	ble.w	8024a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80248da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80248de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80248e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80248e4:	eeb0 6a62 	vmov.f32	s12, s5
 80248e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80248ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80248f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80248f4:	ee16 4a10 	vmov	r4, s12
 80248f8:	eeb0 6a43 	vmov.f32	s12, s6
 80248fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024900:	ee16 6a10 	vmov	r6, s12
 8024904:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024908:	ee61 7a27 	vmul.f32	s15, s2, s15
 802490c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024910:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024914:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024918:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802491c:	ee12 2a90 	vmov	r2, s5
 8024920:	eef0 2a47 	vmov.f32	s5, s14
 8024924:	fb92 f3f3 	sdiv	r3, r2, r3
 8024928:	ee13 2a10 	vmov	r2, s6
 802492c:	931f      	str	r3, [sp, #124]	; 0x7c
 802492e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024930:	eeb0 3a67 	vmov.f32	s6, s15
 8024934:	fb92 f3f3 	sdiv	r3, r2, r3
 8024938:	9320      	str	r3, [sp, #128]	; 0x80
 802493a:	9b08      	ldr	r3, [sp, #32]
 802493c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802493e:	3b01      	subs	r3, #1
 8024940:	9308      	str	r3, [sp, #32]
 8024942:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024944:	bf08      	it	eq
 8024946:	4613      	moveq	r3, r2
 8024948:	9306      	str	r3, [sp, #24]
 802494a:	e6e4      	b.n	8024716 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802494c:	2900      	cmp	r1, #0
 802494e:	f43f af4e 	beq.w	80247ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8024952:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024956:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802495a:	9309      	str	r3, [sp, #36]	; 0x24
 802495c:	e747      	b.n	80247ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802495e:	f112 0a01 	adds.w	sl, r2, #1
 8024962:	d481      	bmi.n	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024964:	4553      	cmp	r3, sl
 8024966:	f6ff af7f 	blt.w	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802496a:	f11c 0a01 	adds.w	sl, ip, #1
 802496e:	f53f af7b 	bmi.w	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024972:	45d6      	cmp	lr, sl
 8024974:	f6ff af78 	blt.w	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024978:	b21b      	sxth	r3, r3
 802497a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802497e:	fa0f f28e 	sxth.w	r2, lr
 8024982:	9300      	str	r3, [sp, #0]
 8024984:	463b      	mov	r3, r7
 8024986:	9201      	str	r2, [sp, #4]
 8024988:	9a07      	ldr	r2, [sp, #28]
 802498a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802498e:	4641      	mov	r1, r8
 8024990:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024992:	f7ff fe21 	bl	80245d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8024996:	e767      	b.n	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024998:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802499a:	1422      	asrs	r2, r4, #16
 802499c:	1431      	asrs	r1, r6, #16
 802499e:	9d07      	ldr	r5, [sp, #28]
 80249a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80249a4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80249a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80249ac:	fb03 2101 	mla	r1, r3, r1, r2
 80249b0:	9a07      	ldr	r2, [sp, #28]
 80249b2:	440a      	add	r2, r1
 80249b4:	5c69      	ldrb	r1, [r5, r1]
 80249b6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80249ba:	f1be 0f00 	cmp.w	lr, #0
 80249be:	d05c      	beq.n	8024a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80249c0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80249c4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80249c8:	950d      	str	r5, [sp, #52]	; 0x34
 80249ca:	b150      	cbz	r0, 80249e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80249cc:	eb02 0c03 	add.w	ip, r2, r3
 80249d0:	5cd3      	ldrb	r3, [r2, r3]
 80249d2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80249d6:	930a      	str	r3, [sp, #40]	; 0x28
 80249d8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80249dc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80249e0:	930e      	str	r3, [sp, #56]	; 0x38
 80249e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80249e4:	fb1e f200 	smulbb	r2, lr, r0
 80249e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80249ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80249ee:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80249f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80249f6:	10d2      	asrs	r2, r2, #3
 80249f8:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80249fc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024a00:	ea4c 0c03 	orr.w	ip, ip, r3
 8024a04:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024a08:	9311      	str	r3, [sp, #68]	; 0x44
 8024a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024a0c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a0e:	041b      	lsls	r3, r3, #16
 8024a10:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024a14:	ea43 030b 	orr.w	r3, r3, fp
 8024a18:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024a1c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024a20:	4353      	muls	r3, r2
 8024a22:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024a26:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024a2a:	ea43 0b01 	orr.w	fp, r3, r1
 8024a2e:	f1c0 0110 	rsb	r1, r0, #16
 8024a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a34:	eba1 0e0e 	sub.w	lr, r1, lr
 8024a38:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8024a3c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024a40:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024a44:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8024a48:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8024a4c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024a50:	ea4b 0e0e 	orr.w	lr, fp, lr
 8024a54:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024a58:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8024a5c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024a60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a64:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024a68:	ea43 0c0c 	orr.w	ip, r3, ip
 8024a6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024a6e:	441c      	add	r4, r3
 8024a70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024a72:	f82a cb02 	strh.w	ip, [sl], #2
 8024a76:	441e      	add	r6, r3
 8024a78:	e723      	b.n	80248c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8024a7a:	2800      	cmp	r0, #0
 8024a7c:	d0b1      	beq.n	80249e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024a7e:	5cd3      	ldrb	r3, [r2, r3]
 8024a80:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024a84:	930a      	str	r3, [sp, #40]	; 0x28
 8024a86:	e7ac      	b.n	80249e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024a88:	b013      	add	sp, #76	; 0x4c
 8024a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8024a8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a92:	880d      	ldrh	r5, [r1, #0]
 8024a94:	b087      	sub	sp, #28
 8024a96:	10ef      	asrs	r7, r5, #3
 8024a98:	9103      	str	r1, [sp, #12]
 8024a9a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8024a9e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8024aa2:	00ed      	lsls	r5, r5, #3
 8024aa4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024aa8:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8024aac:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024ab0:	b2ed      	uxtb	r5, r5
 8024ab2:	9701      	str	r7, [sp, #4]
 8024ab4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8024ab8:	9502      	str	r5, [sp, #8]
 8024aba:	9d01      	ldr	r5, [sp, #4]
 8024abc:	9902      	ldr	r1, [sp, #8]
 8024abe:	022d      	lsls	r5, r5, #8
 8024ac0:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024ac4:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8024ac8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8024acc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8024ad0:	430d      	orrs	r5, r1
 8024ad2:	fb06 0709 	mla	r7, r6, r9, r0
 8024ad6:	2e00      	cmp	r6, #0
 8024ad8:	9505      	str	r5, [sp, #20]
 8024ada:	eb02 0c07 	add.w	ip, r2, r7
 8024ade:	f2c0 80b6 	blt.w	8024c4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024ae2:	45b3      	cmp	fp, r6
 8024ae4:	f340 80b3 	ble.w	8024c4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8024ae8:	2800      	cmp	r0, #0
 8024aea:	f2c0 80ae 	blt.w	8024c4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024aee:	4581      	cmp	r9, r0
 8024af0:	f340 80ab 	ble.w	8024c4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024af4:	5dd7      	ldrb	r7, [r2, r7]
 8024af6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024afa:	441f      	add	r7, r3
 8024afc:	1c42      	adds	r2, r0, #1
 8024afe:	f100 80a9 	bmi.w	8024c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024b02:	4591      	cmp	r9, r2
 8024b04:	f340 80a6 	ble.w	8024c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024b08:	2c00      	cmp	r4, #0
 8024b0a:	f000 80a3 	beq.w	8024c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024b0e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024b16:	441d      	add	r5, r3
 8024b18:	3601      	adds	r6, #1
 8024b1a:	f100 809f 	bmi.w	8024c5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024b1e:	45b3      	cmp	fp, r6
 8024b20:	f340 809c 	ble.w	8024c5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024b24:	f1be 0f00 	cmp.w	lr, #0
 8024b28:	f000 8098 	beq.w	8024c5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024b2c:	2800      	cmp	r0, #0
 8024b2e:	f2c0 8093 	blt.w	8024c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024b32:	4581      	cmp	r9, r0
 8024b34:	f340 8090 	ble.w	8024c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024b38:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8024b3c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024b40:	441e      	add	r6, r3
 8024b42:	3001      	adds	r0, #1
 8024b44:	f100 808d 	bmi.w	8024c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024b48:	4581      	cmp	r9, r0
 8024b4a:	f340 808a 	ble.w	8024c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024b4e:	2c00      	cmp	r4, #0
 8024b50:	f000 8087 	beq.w	8024c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024b54:	44e1      	add	r9, ip
 8024b56:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024b5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b5e:	4413      	add	r3, r2
 8024b60:	b2a4      	uxth	r4, r4
 8024b62:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024b66:	fa1f fe8e 	uxth.w	lr, lr
 8024b6a:	9901      	ldr	r1, [sp, #4]
 8024b6c:	fb04 fb0e 	mul.w	fp, r4, lr
 8024b70:	0124      	lsls	r4, r4, #4
 8024b72:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024b76:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8024b7a:	eba4 040b 	sub.w	r4, r4, fp
 8024b7e:	fa1f f08e 	uxth.w	r0, lr
 8024b82:	b2a2      	uxth	r2, r4
 8024b84:	78ac      	ldrb	r4, [r5, #2]
 8024b86:	eba9 0900 	sub.w	r9, r9, r0
 8024b8a:	fa1f fe88 	uxth.w	lr, r8
 8024b8e:	4354      	muls	r4, r2
 8024b90:	ea6f 0808 	mvn.w	r8, r8
 8024b94:	fa1f f989 	uxth.w	r9, r9
 8024b98:	fa5f f888 	uxtb.w	r8, r8
 8024b9c:	fb09 440c 	mla	r4, r9, ip, r4
 8024ba0:	f896 c002 	ldrb.w	ip, [r6, #2]
 8024ba4:	fb1a fa08 	smulbb	sl, sl, r8
 8024ba8:	fb00 440c 	mla	r4, r0, ip, r4
 8024bac:	f893 c002 	ldrb.w	ip, [r3, #2]
 8024bb0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024bb4:	787c      	ldrb	r4, [r7, #1]
 8024bb6:	783f      	ldrb	r7, [r7, #0]
 8024bb8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024bbc:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024bc0:	f895 a001 	ldrb.w	sl, [r5, #1]
 8024bc4:	782d      	ldrb	r5, [r5, #0]
 8024bc6:	fb02 fa0a 	mul.w	sl, r2, sl
 8024bca:	fa1f fc8c 	uxth.w	ip, ip
 8024bce:	436a      	muls	r2, r5
 8024bd0:	7835      	ldrb	r5, [r6, #0]
 8024bd2:	fb09 aa04 	mla	sl, r9, r4, sl
 8024bd6:	7874      	ldrb	r4, [r6, #1]
 8024bd8:	fb09 2207 	mla	r2, r9, r7, r2
 8024bdc:	fb00 aa04 	mla	sl, r0, r4, sl
 8024be0:	785c      	ldrb	r4, [r3, #1]
 8024be2:	fb00 2005 	mla	r0, r0, r5, r2
 8024be6:	781b      	ldrb	r3, [r3, #0]
 8024be8:	fb0b a404 	mla	r4, fp, r4, sl
 8024bec:	fb11 fa08 	smulbb	sl, r1, r8
 8024bf0:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024bf4:	9b02      	ldr	r3, [sp, #8]
 8024bf6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024bfa:	fb13 f808 	smulbb	r8, r3, r8
 8024bfe:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024c02:	fb04 a40e 	mla	r4, r4, lr, sl
 8024c06:	f10c 0301 	add.w	r3, ip, #1
 8024c0a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8024c0e:	b2a4      	uxth	r4, r4
 8024c10:	fa1f fe8e 	uxth.w	lr, lr
 8024c14:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024c18:	f104 0a01 	add.w	sl, r4, #1
 8024c1c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8024c20:	f10e 0c01 	add.w	ip, lr, #1
 8024c24:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024c28:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024c2c:	0964      	lsrs	r4, r4, #5
 8024c2e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024c32:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8024c3a:	9b03      	ldr	r3, [sp, #12]
 8024c3c:	ea4c 0c04 	orr.w	ip, ip, r4
 8024c40:	f8a3 c000 	strh.w	ip, [r3]
 8024c44:	b007      	add	sp, #28
 8024c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c4a:	af05      	add	r7, sp, #20
 8024c4c:	e756      	b.n	8024afc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8024c4e:	ad05      	add	r5, sp, #20
 8024c50:	462f      	mov	r7, r5
 8024c52:	e761      	b.n	8024b18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024c54:	ad05      	add	r5, sp, #20
 8024c56:	e75f      	b.n	8024b18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024c58:	ae05      	add	r6, sp, #20
 8024c5a:	e772      	b.n	8024b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8024c5c:	ab05      	add	r3, sp, #20
 8024c5e:	461e      	mov	r6, r3
 8024c60:	e77e      	b.n	8024b60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8024c62:	ab05      	add	r3, sp, #20
 8024c64:	e77c      	b.n	8024b60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08024c66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c6a:	b095      	sub	sp, #84	; 0x54
 8024c6c:	9212      	str	r2, [sp, #72]	; 0x48
 8024c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8024c70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024c72:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8024c76:	9013      	str	r0, [sp, #76]	; 0x4c
 8024c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c7a:	6850      	ldr	r0, [r2, #4]
 8024c7c:	910e      	str	r1, [sp, #56]	; 0x38
 8024c7e:	6812      	ldr	r2, [r2, #0]
 8024c80:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8024c84:	fb00 1303 	mla	r3, r0, r3, r1
 8024c88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024c8c:	930a      	str	r3, [sp, #40]	; 0x28
 8024c8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	930d      	str	r3, [sp, #52]	; 0x34
 8024c94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024c96:	685c      	ldr	r4, [r3, #4]
 8024c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024c9a:	3404      	adds	r4, #4
 8024c9c:	43db      	mvns	r3, r3
 8024c9e:	b2db      	uxtb	r3, r3
 8024ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8024ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024ca4:	2b00      	cmp	r3, #0
 8024ca6:	dc03      	bgt.n	8024cb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024caa:	2b00      	cmp	r3, #0
 8024cac:	f340 8255 	ble.w	802515a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024cb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024cb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cba:	1e48      	subs	r0, r1, #1
 8024cbc:	1e55      	subs	r5, r2, #1
 8024cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cc0:	2b00      	cmp	r3, #0
 8024cc2:	f340 80f9 	ble.w	8024eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8024cc6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8024cc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cca:	1436      	asrs	r6, r6, #16
 8024ccc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024cd0:	d406      	bmi.n	8024ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cd2:	4286      	cmp	r6, r0
 8024cd4:	da04      	bge.n	8024ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	db02      	blt.n	8024ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cda:	42ab      	cmp	r3, r5
 8024cdc:	f2c0 80ed 	blt.w	8024eba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024ce0:	3601      	adds	r6, #1
 8024ce2:	f100 80da 	bmi.w	8024e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024ce6:	42b1      	cmp	r1, r6
 8024ce8:	f2c0 80d7 	blt.w	8024e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024cec:	3301      	adds	r3, #1
 8024cee:	f100 80d4 	bmi.w	8024e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024cf2:	429a      	cmp	r2, r3
 8024cf4:	f2c0 80d1 	blt.w	8024e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cfa:	9311      	str	r3, [sp, #68]	; 0x44
 8024cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024cfe:	930c      	str	r3, [sp, #48]	; 0x30
 8024d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	f340 80fa 	ble.w	8024efc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024d08:	9826      	ldr	r0, [sp, #152]	; 0x98
 8024d0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024d0e:	68c6      	ldr	r6, [r0, #12]
 8024d10:	141d      	asrs	r5, r3, #16
 8024d12:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024d14:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024d18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024d1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024d1c:	1400      	asrs	r0, r0, #16
 8024d1e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024d22:	6892      	ldr	r2, [r2, #8]
 8024d24:	f100 813e 	bmi.w	8024fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024d28:	1e57      	subs	r7, r2, #1
 8024d2a:	42b8      	cmp	r0, r7
 8024d2c:	f280 813a 	bge.w	8024fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024d30:	2d00      	cmp	r5, #0
 8024d32:	f2c0 8137 	blt.w	8024fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024d36:	1e77      	subs	r7, r6, #1
 8024d38:	42bd      	cmp	r5, r7
 8024d3a:	f280 8133 	bge.w	8024fa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024d3e:	b212      	sxth	r2, r2
 8024d40:	fb05 0002 	mla	r0, r5, r2, r0
 8024d44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024d46:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024d4a:	182e      	adds	r6, r5, r0
 8024d4c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024d50:	eb04 050a 	add.w	r5, r4, sl
 8024d54:	2b00      	cmp	r3, #0
 8024d56:	f000 8117 	beq.w	8024f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024d5a:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024d5e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024d62:	44a4      	add	ip, r4
 8024d64:	2900      	cmp	r1, #0
 8024d66:	f000 8117 	beq.w	8024f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024d6a:	18b0      	adds	r0, r6, r2
 8024d6c:	5cb2      	ldrb	r2, [r6, r2]
 8024d6e:	7840      	ldrb	r0, [r0, #1]
 8024d70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d78:	4422      	add	r2, r4
 8024d7a:	4420      	add	r0, r4
 8024d7c:	b29b      	uxth	r3, r3
 8024d7e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024d82:	b289      	uxth	r1, r1
 8024d84:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024d88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024d8a:	fb03 f901 	mul.w	r9, r3, r1
 8024d8e:	011b      	lsls	r3, r3, #4
 8024d90:	f8b6 e000 	ldrh.w	lr, [r6]
 8024d94:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024d98:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8024d9c:	eba3 0309 	sub.w	r3, r3, r9
 8024da0:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8024da4:	b289      	uxth	r1, r1
 8024da6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024daa:	b29b      	uxth	r3, r3
 8024dac:	eba8 0801 	sub.w	r8, r8, r1
 8024db0:	435f      	muls	r7, r3
 8024db2:	fa1f f888 	uxth.w	r8, r8
 8024db6:	9310      	str	r3, [sp, #64]	; 0x40
 8024db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024dba:	fb08 770b 	mla	r7, r8, fp, r7
 8024dbe:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024dc2:	fb01 770b 	mla	r7, r1, fp, r7
 8024dc6:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024dca:	fb09 770b 	mla	r7, r9, fp, r7
 8024dce:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024dd2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024dd6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024dda:	fb1b fb03 	smulbb	fp, fp, r3
 8024dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024de0:	fb07 b706 	mla	r7, r7, r6, fp
 8024de4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024de8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024dec:	f89c c000 	ldrb.w	ip, [ip]
 8024df0:	b2bf      	uxth	r7, r7
 8024df2:	435d      	muls	r5, r3
 8024df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024df6:	fb08 550b 	mla	r5, r8, fp, r5
 8024dfa:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024dfe:	fb01 550b 	mla	r5, r1, fp, r5
 8024e02:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024e06:	fb09 550b 	mla	r5, r9, fp, r5
 8024e0a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024e0e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024e12:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024e16:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024e1a:	fa5f fe8e 	uxtb.w	lr, lr
 8024e1e:	fb1b fb03 	smulbb	fp, fp, r3
 8024e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024e24:	fb03 f30c 	mul.w	r3, r3, ip
 8024e28:	f892 c000 	ldrb.w	ip, [r2]
 8024e2c:	fb05 b506 	mla	r5, r5, r6, fp
 8024e30:	fb08 330a 	mla	r3, r8, sl, r3
 8024e34:	b2ad      	uxth	r5, r5
 8024e36:	fb01 330c 	mla	r3, r1, ip, r3
 8024e3a:	f890 c000 	ldrb.w	ip, [r0]
 8024e3e:	f105 0b01 	add.w	fp, r5, #1
 8024e42:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e48:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024e4c:	fb1e fe03 	smulbb	lr, lr, r3
 8024e50:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024e54:	1c7b      	adds	r3, r7, #1
 8024e56:	096d      	lsrs	r5, r5, #5
 8024e58:	fb0c e606 	mla	r6, ip, r6, lr
 8024e5c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024e60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024e64:	b2b6      	uxth	r6, r6
 8024e66:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8024e6a:	1c77      	adds	r7, r6, #1
 8024e6c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024e70:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024e74:	431f      	orrs	r7, r3
 8024e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e78:	433d      	orrs	r5, r7
 8024e7a:	801d      	strh	r5, [r3, #0]
 8024e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024e80:	3302      	adds	r3, #2
 8024e82:	930c      	str	r3, [sp, #48]	; 0x30
 8024e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024e86:	4413      	add	r3, r2
 8024e88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024e8a:	931f      	str	r3, [sp, #124]	; 0x7c
 8024e8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e8e:	4413      	add	r3, r2
 8024e90:	9320      	str	r3, [sp, #128]	; 0x80
 8024e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e94:	3b01      	subs	r3, #1
 8024e96:	9311      	str	r3, [sp, #68]	; 0x44
 8024e98:	e732      	b.n	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024e9c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024e9e:	4433      	add	r3, r6
 8024ea0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8024ea2:	931f      	str	r3, [sp, #124]	; 0x7c
 8024ea4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024ea6:	4433      	add	r3, r6
 8024ea8:	9320      	str	r3, [sp, #128]	; 0x80
 8024eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024eac:	3b01      	subs	r3, #1
 8024eae:	9309      	str	r3, [sp, #36]	; 0x24
 8024eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024eb2:	3302      	adds	r3, #2
 8024eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8024eb6:	e702      	b.n	8024cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024eb8:	d027      	beq.n	8024f0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ebc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8024ebe:	3b01      	subs	r3, #1
 8024ec0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024ec2:	fb00 5003 	mla	r0, r0, r3, r5
 8024ec6:	1400      	asrs	r0, r0, #16
 8024ec8:	f53f af16 	bmi.w	8024cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024ecc:	3901      	subs	r1, #1
 8024ece:	4288      	cmp	r0, r1
 8024ed0:	f6bf af12 	bge.w	8024cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024ed4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8024ed6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024ed8:	fb01 0303 	mla	r3, r1, r3, r0
 8024edc:	141b      	asrs	r3, r3, #16
 8024ede:	f53f af0b 	bmi.w	8024cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024ee2:	3a01      	subs	r2, #1
 8024ee4:	4293      	cmp	r3, r2
 8024ee6:	f6bf af07 	bge.w	8024cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024eec:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8024ef0:	9311      	str	r3, [sp, #68]	; 0x44
 8024ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ef4:	930c      	str	r3, [sp, #48]	; 0x30
 8024ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	dc70      	bgt.n	8024fde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024f04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f08:	930a      	str	r3, [sp, #40]	; 0x28
 8024f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	f340 8124 	ble.w	802515a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024f12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024f16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f18:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024f1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024f20:	eef0 6a62 	vmov.f32	s13, s5
 8024f24:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024f28:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024f2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f30:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8024f34:	eef0 6a43 	vmov.f32	s13, s6
 8024f38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f3c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8024f40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f58:	ee12 2a90 	vmov	r2, s5
 8024f5c:	eef0 2a47 	vmov.f32	s5, s14
 8024f60:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f64:	ee13 2a10 	vmov	r2, s6
 8024f68:	9321      	str	r3, [sp, #132]	; 0x84
 8024f6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f6c:	eeb0 3a67 	vmov.f32	s6, s15
 8024f70:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f74:	9322      	str	r3, [sp, #136]	; 0x88
 8024f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024f7a:	3b01      	subs	r3, #1
 8024f7c:	930e      	str	r3, [sp, #56]	; 0x38
 8024f7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f80:	bf08      	it	eq
 8024f82:	4613      	moveq	r3, r2
 8024f84:	9309      	str	r3, [sp, #36]	; 0x24
 8024f86:	e68c      	b.n	8024ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024f88:	b149      	cbz	r1, 8024f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024f8a:	5cb2      	ldrb	r2, [r6, r2]
 8024f8c:	4628      	mov	r0, r5
 8024f8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f92:	4422      	add	r2, r4
 8024f94:	46ac      	mov	ip, r5
 8024f96:	e6f1      	b.n	8024d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024f98:	4628      	mov	r0, r5
 8024f9a:	462a      	mov	r2, r5
 8024f9c:	e6ee      	b.n	8024d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024f9e:	4628      	mov	r0, r5
 8024fa0:	462a      	mov	r2, r5
 8024fa2:	e7f7      	b.n	8024f94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024fa4:	1c47      	adds	r7, r0, #1
 8024fa6:	f53f af69 	bmi.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024faa:	42ba      	cmp	r2, r7
 8024fac:	f6ff af66 	blt.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024fb0:	1c6f      	adds	r7, r5, #1
 8024fb2:	f53f af63 	bmi.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024fb6:	42be      	cmp	r6, r7
 8024fb8:	f6ff af60 	blt.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024fbc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024fbe:	b236      	sxth	r6, r6
 8024fc0:	b212      	sxth	r2, r2
 8024fc2:	9002      	str	r0, [sp, #8]
 8024fc4:	9601      	str	r6, [sp, #4]
 8024fc6:	9200      	str	r2, [sp, #0]
 8024fc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024fca:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024fce:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024fd2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8024fd6:	4623      	mov	r3, r4
 8024fd8:	f7ff fd59 	bl	8024a8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024fdc:	e74e      	b.n	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024fde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024fe0:	9820      	ldr	r0, [sp, #128]	; 0x80
 8024fe2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024fe6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024fe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024fea:	1400      	asrs	r0, r0, #16
 8024fec:	142d      	asrs	r5, r5, #16
 8024fee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024ff0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024ff4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024ff8:	fb02 5000 	mla	r0, r2, r0, r5
 8024ffc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024ffe:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025002:	182e      	adds	r6, r5, r0
 8025004:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025008:	eb04 0509 	add.w	r5, r4, r9
 802500c:	2b00      	cmp	r3, #0
 802500e:	f000 8096 	beq.w	802513e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025012:	7877      	ldrb	r7, [r6, #1]
 8025014:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025018:	4427      	add	r7, r4
 802501a:	2900      	cmp	r1, #0
 802501c:	f000 8097 	beq.w	802514e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8025020:	18b0      	adds	r0, r6, r2
 8025022:	5cb2      	ldrb	r2, [r6, r2]
 8025024:	7840      	ldrb	r0, [r0, #1]
 8025026:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802502a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802502e:	4422      	add	r2, r4
 8025030:	4420      	add	r0, r4
 8025032:	b29b      	uxth	r3, r3
 8025034:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025036:	b289      	uxth	r1, r1
 8025038:	f895 b002 	ldrb.w	fp, [r5, #2]
 802503c:	f8b6 c000 	ldrh.w	ip, [r6]
 8025040:	fb03 f801 	mul.w	r8, r3, r1
 8025044:	011b      	lsls	r3, r3, #4
 8025046:	78be      	ldrb	r6, [r7, #2]
 8025048:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802504c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025050:	eba3 0308 	sub.w	r3, r3, r8
 8025054:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025058:	b289      	uxth	r1, r1
 802505a:	b29b      	uxth	r3, r3
 802505c:	ebae 0e01 	sub.w	lr, lr, r1
 8025060:	435e      	muls	r6, r3
 8025062:	fa1f fe8e 	uxth.w	lr, lr
 8025066:	9310      	str	r3, [sp, #64]	; 0x40
 8025068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802506a:	fb0e 660b 	mla	r6, lr, fp, r6
 802506e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025072:	fb01 660b 	mla	r6, r1, fp, r6
 8025076:	f890 b002 	ldrb.w	fp, [r0, #2]
 802507a:	fb08 660b 	mla	r6, r8, fp, r6
 802507e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025082:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025086:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802508a:	fb1b fb03 	smulbb	fp, fp, r3
 802508e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025090:	fb06 b60a 	mla	r6, r6, sl, fp
 8025094:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025098:	787d      	ldrb	r5, [r7, #1]
 802509a:	783f      	ldrb	r7, [r7, #0]
 802509c:	b2b6      	uxth	r6, r6
 802509e:	435d      	muls	r5, r3
 80250a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250a2:	fb0e 550b 	mla	r5, lr, fp, r5
 80250a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80250aa:	fb01 550b 	mla	r5, r1, fp, r5
 80250ae:	f890 b001 	ldrb.w	fp, [r0, #1]
 80250b2:	fb08 550b 	mla	r5, r8, fp, r5
 80250b6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80250ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80250be:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80250c2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80250c6:	fa5f fc8c 	uxtb.w	ip, ip
 80250ca:	fb1b fb03 	smulbb	fp, fp, r3
 80250ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80250d0:	437b      	muls	r3, r7
 80250d2:	7817      	ldrb	r7, [r2, #0]
 80250d4:	fb05 b50a 	mla	r5, r5, sl, fp
 80250d8:	fb0e 3309 	mla	r3, lr, r9, r3
 80250dc:	b2ad      	uxth	r5, r5
 80250de:	fb01 3307 	mla	r3, r1, r7, r3
 80250e2:	7807      	ldrb	r7, [r0, #0]
 80250e4:	f105 0b01 	add.w	fp, r5, #1
 80250e8:	fb08 3707 	mla	r7, r8, r7, r3
 80250ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250ee:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80250f2:	fb1c fc03 	smulbb	ip, ip, r3
 80250f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80250fa:	1c73      	adds	r3, r6, #1
 80250fc:	096d      	lsrs	r5, r5, #5
 80250fe:	fb07 c70a 	mla	r7, r7, sl, ip
 8025102:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025106:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802510a:	b2bf      	uxth	r7, r7
 802510c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802510e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8025112:	1c7a      	adds	r2, r7, #1
 8025114:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025118:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802511c:	4316      	orrs	r6, r2
 802511e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025120:	432e      	orrs	r6, r5
 8025122:	f823 6b02 	strh.w	r6, [r3], #2
 8025126:	930c      	str	r3, [sp, #48]	; 0x30
 8025128:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802512a:	4413      	add	r3, r2
 802512c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802512e:	931f      	str	r3, [sp, #124]	; 0x7c
 8025130:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025132:	4413      	add	r3, r2
 8025134:	9320      	str	r3, [sp, #128]	; 0x80
 8025136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025138:	3b01      	subs	r3, #1
 802513a:	9311      	str	r3, [sp, #68]	; 0x44
 802513c:	e6db      	b.n	8024ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802513e:	b149      	cbz	r1, 8025154 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025140:	5cb2      	ldrb	r2, [r6, r2]
 8025142:	4628      	mov	r0, r5
 8025144:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025148:	4422      	add	r2, r4
 802514a:	462f      	mov	r7, r5
 802514c:	e771      	b.n	8025032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802514e:	4628      	mov	r0, r5
 8025150:	462a      	mov	r2, r5
 8025152:	e76e      	b.n	8025032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025154:	4628      	mov	r0, r5
 8025156:	462a      	mov	r2, r5
 8025158:	e7f7      	b.n	802514a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802515a:	b015      	add	sp, #84	; 0x54
 802515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025160 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025164:	880f      	ldrh	r7, [r1, #0]
 8025166:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802516a:	023c      	lsls	r4, r7, #8
 802516c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025170:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025174:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8025178:	017c      	lsls	r4, r7, #5
 802517a:	00ff      	lsls	r7, r7, #3
 802517c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8025180:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8025184:	b2ff      	uxtb	r7, r7
 8025186:	ea4b 0404 	orr.w	r4, fp, r4
 802518a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 802518e:	4327      	orrs	r7, r4
 8025190:	fb05 ca0e 	mla	sl, r5, lr, ip
 8025194:	2d00      	cmp	r5, #0
 8025196:	9701      	str	r7, [sp, #4]
 8025198:	eb02 080a 	add.w	r8, r2, sl
 802519c:	db7e      	blt.n	802529c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802519e:	45a9      	cmp	r9, r5
 80251a0:	dd7c      	ble.n	802529c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80251a2:	f1bc 0f00 	cmp.w	ip, #0
 80251a6:	db77      	blt.n	8025298 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80251a8:	45e6      	cmp	lr, ip
 80251aa:	dd75      	ble.n	8025298 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80251ac:	f812 700a 	ldrb.w	r7, [r2, sl]
 80251b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80251b4:	441f      	add	r7, r3
 80251b6:	f11c 0201 	adds.w	r2, ip, #1
 80251ba:	d472      	bmi.n	80252a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80251bc:	4596      	cmp	lr, r2
 80251be:	dd70      	ble.n	80252a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80251c0:	2800      	cmp	r0, #0
 80251c2:	d06e      	beq.n	80252a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80251c4:	f898 4001 	ldrb.w	r4, [r8, #1]
 80251c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80251cc:	441c      	add	r4, r3
 80251ce:	3501      	adds	r5, #1
 80251d0:	d46b      	bmi.n	80252aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80251d2:	45a9      	cmp	r9, r5
 80251d4:	dd69      	ble.n	80252aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80251d6:	2e00      	cmp	r6, #0
 80251d8:	d067      	beq.n	80252aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80251da:	f1bc 0f00 	cmp.w	ip, #0
 80251de:	db62      	blt.n	80252a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80251e0:	45e6      	cmp	lr, ip
 80251e2:	dd60      	ble.n	80252a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80251e4:	f818 500e 	ldrb.w	r5, [r8, lr]
 80251e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80251ec:	441d      	add	r5, r3
 80251ee:	f11c 0201 	adds.w	r2, ip, #1
 80251f2:	d45d      	bmi.n	80252b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80251f4:	4596      	cmp	lr, r2
 80251f6:	dd5b      	ble.n	80252b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80251f8:	2800      	cmp	r0, #0
 80251fa:	d059      	beq.n	80252b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80251fc:	44c6      	add	lr, r8
 80251fe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025202:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025206:	4413      	add	r3, r2
 8025208:	b280      	uxth	r0, r0
 802520a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802520e:	b2b2      	uxth	r2, r6
 8025210:	f897 9000 	ldrb.w	r9, [r7]
 8025214:	787f      	ldrb	r7, [r7, #1]
 8025216:	fb00 f602 	mul.w	r6, r0, r2
 802521a:	0100      	lsls	r0, r0, #4
 802521c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025220:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8025224:	1b80      	subs	r0, r0, r6
 8025226:	fa1f fc82 	uxth.w	ip, r2
 802522a:	b282      	uxth	r2, r0
 802522c:	78a0      	ldrb	r0, [r4, #2]
 802522e:	eba8 080c 	sub.w	r8, r8, ip
 8025232:	4350      	muls	r0, r2
 8025234:	fa1f f888 	uxth.w	r8, r8
 8025238:	fb08 0e0e 	mla	lr, r8, lr, r0
 802523c:	78a8      	ldrb	r0, [r5, #2]
 802523e:	fb0c e000 	mla	r0, ip, r0, lr
 8025242:	f893 e002 	ldrb.w	lr, [r3, #2]
 8025246:	fb06 0e0e 	mla	lr, r6, lr, r0
 802524a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802524e:	f894 e000 	ldrb.w	lr, [r4]
 8025252:	fb02 fe0e 	mul.w	lr, r2, lr
 8025256:	fb08 e909 	mla	r9, r8, r9, lr
 802525a:	f895 e000 	ldrb.w	lr, [r5]
 802525e:	fb0c 990e 	mla	r9, ip, lr, r9
 8025262:	f893 e000 	ldrb.w	lr, [r3]
 8025266:	785b      	ldrb	r3, [r3, #1]
 8025268:	fb06 9e0e 	mla	lr, r6, lr, r9
 802526c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025270:	ea4e 0e00 	orr.w	lr, lr, r0
 8025274:	7860      	ldrb	r0, [r4, #1]
 8025276:	4350      	muls	r0, r2
 8025278:	786a      	ldrb	r2, [r5, #1]
 802527a:	fb08 0007 	mla	r0, r8, r7, r0
 802527e:	fb0c 0202 	mla	r2, ip, r2, r0
 8025282:	fb06 2303 	mla	r3, r6, r3, r2
 8025286:	095b      	lsrs	r3, r3, #5
 8025288:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802528c:	ea4e 0303 	orr.w	r3, lr, r3
 8025290:	800b      	strh	r3, [r1, #0]
 8025292:	b003      	add	sp, #12
 8025294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025298:	af01      	add	r7, sp, #4
 802529a:	e78c      	b.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 802529c:	ac01      	add	r4, sp, #4
 802529e:	4627      	mov	r7, r4
 80252a0:	e795      	b.n	80251ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80252a2:	ac01      	add	r4, sp, #4
 80252a4:	e793      	b.n	80251ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80252a6:	ad01      	add	r5, sp, #4
 80252a8:	e7a1      	b.n	80251ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80252aa:	ab01      	add	r3, sp, #4
 80252ac:	461d      	mov	r5, r3
 80252ae:	e7ab      	b.n	8025208 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80252b0:	ab01      	add	r3, sp, #4
 80252b2:	e7a9      	b.n	8025208 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

080252b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80252b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252b8:	b08f      	sub	sp, #60	; 0x3c
 80252ba:	920c      	str	r2, [sp, #48]	; 0x30
 80252bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80252be:	900d      	str	r0, [sp, #52]	; 0x34
 80252c0:	910a      	str	r1, [sp, #40]	; 0x28
 80252c2:	6850      	ldr	r0, [r2, #4]
 80252c4:	9306      	str	r3, [sp, #24]
 80252c6:	6812      	ldr	r2, [r2, #0]
 80252c8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80252cc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 80252d0:	fb00 1303 	mla	r3, r0, r3, r1
 80252d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80252d8:	9307      	str	r3, [sp, #28]
 80252da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252dc:	681b      	ldr	r3, [r3, #0]
 80252de:	9308      	str	r3, [sp, #32]
 80252e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252e2:	685c      	ldr	r4, [r3, #4]
 80252e4:	3404      	adds	r4, #4
 80252e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	dc03      	bgt.n	80252f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80252ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252ee:	2b00      	cmp	r3, #0
 80252f0:	f340 81d5 	ble.w	802569e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80252f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80252fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80252fe:	1e48      	subs	r0, r1, #1
 8025300:	1e56      	subs	r6, r2, #1
 8025302:	9b06      	ldr	r3, [sp, #24]
 8025304:	2b00      	cmp	r3, #0
 8025306:	f340 80b6 	ble.w	8025476 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802530a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802530e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025312:	d406      	bmi.n	8025322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025314:	4287      	cmp	r7, r0
 8025316:	da04      	bge.n	8025322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025318:	2b00      	cmp	r3, #0
 802531a:	db02      	blt.n	8025322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802531c:	42b3      	cmp	r3, r6
 802531e:	f2c0 80ab 	blt.w	8025478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8025322:	3701      	adds	r7, #1
 8025324:	f100 809c 	bmi.w	8025460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025328:	42b9      	cmp	r1, r7
 802532a:	f2c0 8099 	blt.w	8025460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802532e:	3301      	adds	r3, #1
 8025330:	f100 8096 	bmi.w	8025460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025334:	429a      	cmp	r2, r3
 8025336:	f2c0 8093 	blt.w	8025460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802533a:	9b06      	ldr	r3, [sp, #24]
 802533c:	930b      	str	r3, [sp, #44]	; 0x2c
 802533e:	9b07      	ldr	r3, [sp, #28]
 8025340:	9309      	str	r3, [sp, #36]	; 0x24
 8025342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025344:	2b00      	cmp	r3, #0
 8025346:	f340 80b4 	ble.w	80254b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802534a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802534c:	142e      	asrs	r6, r5, #16
 802534e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025350:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025354:	68c7      	ldr	r7, [r0, #12]
 8025356:	ea5f 402b 	movs.w	r0, fp, asr #16
 802535a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802535e:	6892      	ldr	r2, [r2, #8]
 8025360:	f100 80fb 	bmi.w	802555a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8025364:	f102 3cff 	add.w	ip, r2, #4294967295
 8025368:	4560      	cmp	r0, ip
 802536a:	f280 80f6 	bge.w	802555a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802536e:	2e00      	cmp	r6, #0
 8025370:	f2c0 80f3 	blt.w	802555a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8025374:	f107 3cff 	add.w	ip, r7, #4294967295
 8025378:	4566      	cmp	r6, ip
 802537a:	f280 80ee 	bge.w	802555a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802537e:	b212      	sxth	r2, r2
 8025380:	fb06 0002 	mla	r0, r6, r2, r0
 8025384:	9e08      	ldr	r6, [sp, #32]
 8025386:	1837      	adds	r7, r6, r0
 8025388:	5c30      	ldrb	r0, [r6, r0]
 802538a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802538e:	eb04 0c08 	add.w	ip, r4, r8
 8025392:	2b00      	cmp	r3, #0
 8025394:	f000 80d3 	beq.w	802553e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025398:	787e      	ldrb	r6, [r7, #1]
 802539a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802539e:	4426      	add	r6, r4
 80253a0:	2900      	cmp	r1, #0
 80253a2:	f000 80d4 	beq.w	802554e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80253a6:	18b8      	adds	r0, r7, r2
 80253a8:	5cba      	ldrb	r2, [r7, r2]
 80253aa:	7840      	ldrb	r0, [r0, #1]
 80253ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80253b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80253b4:	4422      	add	r2, r4
 80253b6:	4420      	add	r0, r4
 80253b8:	b29b      	uxth	r3, r3
 80253ba:	78b7      	ldrb	r7, [r6, #2]
 80253bc:	b289      	uxth	r1, r1
 80253be:	f89c a002 	ldrb.w	sl, [ip, #2]
 80253c2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80253c6:	fb03 f901 	mul.w	r9, r3, r1
 80253ca:	011b      	lsls	r3, r3, #4
 80253cc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80253d0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80253d4:	eba3 0309 	sub.w	r3, r3, r9
 80253d8:	b289      	uxth	r1, r1
 80253da:	b29b      	uxth	r3, r3
 80253dc:	ebae 0e01 	sub.w	lr, lr, r1
 80253e0:	435f      	muls	r7, r3
 80253e2:	fa1f fe8e 	uxth.w	lr, lr
 80253e6:	fb0e 770a 	mla	r7, lr, sl, r7
 80253ea:	f892 a002 	ldrb.w	sl, [r2, #2]
 80253ee:	fb01 770a 	mla	r7, r1, sl, r7
 80253f2:	f890 a002 	ldrb.w	sl, [r0, #2]
 80253f6:	fb09 7a0a 	mla	sl, r9, sl, r7
 80253fa:	f814 7008 	ldrb.w	r7, [r4, r8]
 80253fe:	f896 8000 	ldrb.w	r8, [r6]
 8025402:	7876      	ldrb	r6, [r6, #1]
 8025404:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025408:	fb03 f808 	mul.w	r8, r3, r8
 802540c:	4373      	muls	r3, r6
 802540e:	fb0e 8807 	mla	r8, lr, r7, r8
 8025412:	7817      	ldrb	r7, [r2, #0]
 8025414:	fb0e 330c 	mla	r3, lr, ip, r3
 8025418:	fb01 8807 	mla	r8, r1, r7, r8
 802541c:	7807      	ldrb	r7, [r0, #0]
 802541e:	fb09 8707 	mla	r7, r9, r7, r8
 8025422:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025426:	ea47 070a 	orr.w	r7, r7, sl
 802542a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802542e:	fb01 310a 	mla	r1, r1, sl, r3
 8025432:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025438:	fb09 1a0a 	mla	sl, r9, sl, r1
 802543c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025440:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025444:	ea47 070a 	orr.w	r7, r7, sl
 8025448:	801f      	strh	r7, [r3, #0]
 802544a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802544c:	3302      	adds	r3, #2
 802544e:	9309      	str	r3, [sp, #36]	; 0x24
 8025450:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025452:	449b      	add	fp, r3
 8025454:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025456:	441d      	add	r5, r3
 8025458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802545a:	3b01      	subs	r3, #1
 802545c:	930b      	str	r3, [sp, #44]	; 0x2c
 802545e:	e770      	b.n	8025342 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025460:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025462:	449b      	add	fp, r3
 8025464:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025466:	441d      	add	r5, r3
 8025468:	9b06      	ldr	r3, [sp, #24]
 802546a:	3b01      	subs	r3, #1
 802546c:	9306      	str	r3, [sp, #24]
 802546e:	9b07      	ldr	r3, [sp, #28]
 8025470:	3302      	adds	r3, #2
 8025472:	9307      	str	r3, [sp, #28]
 8025474:	e745      	b.n	8025302 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8025476:	d023      	beq.n	80254c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025478:	9b06      	ldr	r3, [sp, #24]
 802547a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802547c:	3b01      	subs	r3, #1
 802547e:	fb00 b003 	mla	r0, r0, r3, fp
 8025482:	1400      	asrs	r0, r0, #16
 8025484:	f53f af59 	bmi.w	802533a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025488:	3901      	subs	r1, #1
 802548a:	4288      	cmp	r0, r1
 802548c:	f6bf af55 	bge.w	802533a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025490:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025492:	fb01 5303 	mla	r3, r1, r3, r5
 8025496:	141b      	asrs	r3, r3, #16
 8025498:	f53f af4f 	bmi.w	802533a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802549c:	3a01      	subs	r2, #1
 802549e:	4293      	cmp	r3, r2
 80254a0:	f6bf af4b 	bge.w	802533a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80254a4:	9b06      	ldr	r3, [sp, #24]
 80254a6:	9309      	str	r3, [sp, #36]	; 0x24
 80254a8:	9b07      	ldr	r3, [sp, #28]
 80254aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80254ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254ae:	2b00      	cmp	r3, #0
 80254b0:	dc70      	bgt.n	8025594 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80254b2:	9b06      	ldr	r3, [sp, #24]
 80254b4:	9a07      	ldr	r2, [sp, #28]
 80254b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80254ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80254be:	9307      	str	r3, [sp, #28]
 80254c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80254c2:	2b00      	cmp	r3, #0
 80254c4:	f340 80eb 	ble.w	802569e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80254c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80254cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80254ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80254d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80254d6:	eef0 6a62 	vmov.f32	s13, s5
 80254da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80254de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80254e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80254e6:	ee16 ba90 	vmov	fp, s13
 80254ea:	eef0 6a43 	vmov.f32	s13, s6
 80254ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80254f2:	ee16 5a90 	vmov	r5, s13
 80254f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80254fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80254fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025502:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025506:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802550a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802550e:	ee12 2a90 	vmov	r2, s5
 8025512:	eef0 2a47 	vmov.f32	s5, s14
 8025516:	fb92 f3f3 	sdiv	r3, r2, r3
 802551a:	ee13 2a10 	vmov	r2, s6
 802551e:	931b      	str	r3, [sp, #108]	; 0x6c
 8025520:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025522:	eeb0 3a67 	vmov.f32	s6, s15
 8025526:	fb92 f3f3 	sdiv	r3, r2, r3
 802552a:	931c      	str	r3, [sp, #112]	; 0x70
 802552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802552e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025530:	3b01      	subs	r3, #1
 8025532:	930a      	str	r3, [sp, #40]	; 0x28
 8025534:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025536:	bf08      	it	eq
 8025538:	4613      	moveq	r3, r2
 802553a:	9306      	str	r3, [sp, #24]
 802553c:	e6d3      	b.n	80252e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802553e:	b149      	cbz	r1, 8025554 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8025540:	5cba      	ldrb	r2, [r7, r2]
 8025542:	4660      	mov	r0, ip
 8025544:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025548:	4422      	add	r2, r4
 802554a:	4666      	mov	r6, ip
 802554c:	e734      	b.n	80253b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802554e:	4660      	mov	r0, ip
 8025550:	4662      	mov	r2, ip
 8025552:	e731      	b.n	80253b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8025554:	4660      	mov	r0, ip
 8025556:	4662      	mov	r2, ip
 8025558:	e7f7      	b.n	802554a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802555a:	f110 0c01 	adds.w	ip, r0, #1
 802555e:	f53f af74 	bmi.w	802544a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025562:	4562      	cmp	r2, ip
 8025564:	f6ff af71 	blt.w	802544a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025568:	f116 0c01 	adds.w	ip, r6, #1
 802556c:	f53f af6d 	bmi.w	802544a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025570:	4567      	cmp	r7, ip
 8025572:	f6ff af6a 	blt.w	802544a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025576:	b23f      	sxth	r7, r7
 8025578:	b212      	sxth	r2, r2
 802557a:	9701      	str	r7, [sp, #4]
 802557c:	9200      	str	r2, [sp, #0]
 802557e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025582:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025586:	4623      	mov	r3, r4
 8025588:	980d      	ldr	r0, [sp, #52]	; 0x34
 802558a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802558e:	f7ff fde7 	bl	8025160 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025592:	e75a      	b.n	802544a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025594:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025596:	ea4f 462b 	mov.w	r6, fp, asr #16
 802559a:	1428      	asrs	r0, r5, #16
 802559c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80255a0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80255a4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80255a8:	fb02 6000 	mla	r0, r2, r0, r6
 80255ac:	9e08      	ldr	r6, [sp, #32]
 80255ae:	f816 8000 	ldrb.w	r8, [r6, r0]
 80255b2:	1837      	adds	r7, r6, r0
 80255b4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80255b8:	eb04 0c08 	add.w	ip, r4, r8
 80255bc:	2b00      	cmp	r3, #0
 80255be:	d060      	beq.n	8025682 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80255c0:	787e      	ldrb	r6, [r7, #1]
 80255c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80255c6:	4426      	add	r6, r4
 80255c8:	2900      	cmp	r1, #0
 80255ca:	d062      	beq.n	8025692 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80255cc:	18b8      	adds	r0, r7, r2
 80255ce:	5cba      	ldrb	r2, [r7, r2]
 80255d0:	7840      	ldrb	r0, [r0, #1]
 80255d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80255d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80255da:	4422      	add	r2, r4
 80255dc:	4420      	add	r0, r4
 80255de:	b29b      	uxth	r3, r3
 80255e0:	78b7      	ldrb	r7, [r6, #2]
 80255e2:	b289      	uxth	r1, r1
 80255e4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80255e8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80255ec:	fb03 f901 	mul.w	r9, r3, r1
 80255f0:	011b      	lsls	r3, r3, #4
 80255f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80255f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80255fa:	eba3 0309 	sub.w	r3, r3, r9
 80255fe:	b289      	uxth	r1, r1
 8025600:	b29b      	uxth	r3, r3
 8025602:	ebae 0e01 	sub.w	lr, lr, r1
 8025606:	435f      	muls	r7, r3
 8025608:	fa1f fe8e 	uxth.w	lr, lr
 802560c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025610:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025614:	fb01 770a 	mla	r7, r1, sl, r7
 8025618:	f890 a002 	ldrb.w	sl, [r0, #2]
 802561c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025620:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025624:	f896 8000 	ldrb.w	r8, [r6]
 8025628:	7876      	ldrb	r6, [r6, #1]
 802562a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 802562e:	fb03 f808 	mul.w	r8, r3, r8
 8025632:	4373      	muls	r3, r6
 8025634:	7856      	ldrb	r6, [r2, #1]
 8025636:	fb0e 8807 	mla	r8, lr, r7, r8
 802563a:	7817      	ldrb	r7, [r2, #0]
 802563c:	fb0e 330c 	mla	r3, lr, ip, r3
 8025640:	fb01 8807 	mla	r8, r1, r7, r8
 8025644:	7807      	ldrb	r7, [r0, #0]
 8025646:	fb01 3306 	mla	r3, r1, r6, r3
 802564a:	fb09 8707 	mla	r7, r9, r7, r8
 802564e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025652:	ea47 070a 	orr.w	r7, r7, sl
 8025656:	f890 a001 	ldrb.w	sl, [r0, #1]
 802565a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802565e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025660:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025664:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025668:	ea47 070a 	orr.w	r7, r7, sl
 802566c:	f823 7b02 	strh.w	r7, [r3], #2
 8025670:	930b      	str	r3, [sp, #44]	; 0x2c
 8025672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025674:	449b      	add	fp, r3
 8025676:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025678:	441d      	add	r5, r3
 802567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802567c:	3b01      	subs	r3, #1
 802567e:	9309      	str	r3, [sp, #36]	; 0x24
 8025680:	e714      	b.n	80254ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8025682:	b149      	cbz	r1, 8025698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025684:	5cba      	ldrb	r2, [r7, r2]
 8025686:	4660      	mov	r0, ip
 8025688:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802568c:	4422      	add	r2, r4
 802568e:	4666      	mov	r6, ip
 8025690:	e7a5      	b.n	80255de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025692:	4660      	mov	r0, ip
 8025694:	4662      	mov	r2, ip
 8025696:	e7a2      	b.n	80255de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025698:	4660      	mov	r0, ip
 802569a:	4662      	mov	r2, ip
 802569c:	e7f7      	b.n	802568e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 802569e:	b00f      	add	sp, #60	; 0x3c
 80256a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080256a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80256a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256a8:	b085      	sub	sp, #20
 80256aa:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80256ae:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80256b2:	9102      	str	r1, [sp, #8]
 80256b4:	2c00      	cmp	r4, #0
 80256b6:	fb04 710c 	mla	r1, r4, ip, r7
 80256ba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80256be:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80256c2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80256c6:	eb02 0e01 	add.w	lr, r2, r1
 80256ca:	f2c0 8122 	blt.w	8025912 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80256ce:	45a0      	cmp	r8, r4
 80256d0:	f340 811f 	ble.w	8025912 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80256d4:	2f00      	cmp	r7, #0
 80256d6:	f2c0 811a 	blt.w	802590e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80256da:	45bc      	cmp	ip, r7
 80256dc:	f340 8117 	ble.w	802590e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80256e0:	5c52      	ldrb	r2, [r2, r1]
 80256e2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80256e6:	1c7a      	adds	r2, r7, #1
 80256e8:	f100 8116 	bmi.w	8025918 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80256ec:	4594      	cmp	ip, r2
 80256ee:	f340 8113 	ble.w	8025918 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80256f2:	2e00      	cmp	r6, #0
 80256f4:	f000 8112 	beq.w	802591c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80256f8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80256fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025700:	3401      	adds	r4, #1
 8025702:	f100 810f 	bmi.w	8025924 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025706:	45a0      	cmp	r8, r4
 8025708:	f340 810c 	ble.w	8025924 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802570c:	2800      	cmp	r0, #0
 802570e:	f000 810c 	beq.w	802592a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025712:	2f00      	cmp	r7, #0
 8025714:	f2c0 8104 	blt.w	8025920 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025718:	45bc      	cmp	ip, r7
 802571a:	f340 8101 	ble.w	8025920 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802571e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025722:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025726:	3701      	adds	r7, #1
 8025728:	f100 8102 	bmi.w	8025930 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802572c:	45bc      	cmp	ip, r7
 802572e:	f340 80ff 	ble.w	8025930 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025732:	2e00      	cmp	r6, #0
 8025734:	f000 80fe 	beq.w	8025934 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8025738:	44f4      	add	ip, lr
 802573a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802573e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025742:	b2b6      	uxth	r6, r6
 8025744:	b280      	uxth	r0, r0
 8025746:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802574a:	fb00 fe06 	mul.w	lr, r0, r6
 802574e:	0136      	lsls	r6, r6, #4
 8025750:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025754:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025758:	eba6 070e 	sub.w	r7, r6, lr
 802575c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025760:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025764:	b280      	uxth	r0, r0
 8025766:	b2bf      	uxth	r7, r7
 8025768:	1a1b      	subs	r3, r3, r0
 802576a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802576e:	fb0a f607 	mul.w	r6, sl, r7
 8025772:	b29b      	uxth	r3, r3
 8025774:	fb0b 6603 	mla	r6, fp, r3, r6
 8025778:	fb00 6609 	mla	r6, r0, r9, r6
 802577c:	fb0e 6608 	mla	r6, lr, r8, r6
 8025780:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025784:	9600      	str	r6, [sp, #0]
 8025786:	2e00      	cmp	r6, #0
 8025788:	f000 80be 	beq.w	8025908 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802578c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025790:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025794:	9e02      	ldr	r6, [sp, #8]
 8025796:	fb0b fc0c 	mul.w	ip, fp, ip
 802579a:	fb0b f505 	mul.w	r5, fp, r5
 802579e:	8836      	ldrh	r6, [r6, #0]
 80257a0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80257a4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80257a8:	9501      	str	r5, [sp, #4]
 80257aa:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80257ae:	44dc      	add	ip, fp
 80257b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257b4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80257b8:	9503      	str	r5, [sp, #12]
 80257ba:	9d01      	ldr	r5, [sp, #4]
 80257bc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80257c0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80257c4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80257c8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80257cc:	fb0a fc0c 	mul.w	ip, sl, ip
 80257d0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80257d4:	fb0a fa01 	mul.w	sl, sl, r1
 80257d8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80257dc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80257e0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80257e4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80257e8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80257ec:	4465      	add	r5, ip
 80257ee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80257f2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80257f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257fa:	fb09 fc0c 	mul.w	ip, r9, ip
 80257fe:	0a2d      	lsrs	r5, r5, #8
 8025800:	fb09 f904 	mul.w	r9, r9, r4
 8025804:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025808:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802580c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025810:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8025814:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025818:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802581c:	437d      	muls	r5, r7
 802581e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025822:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8025826:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802582a:	4461      	add	r1, ip
 802582c:	fb08 f404 	mul.w	r4, r8, r4
 8025830:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025834:	fb08 f802 	mul.w	r8, r8, r2
 8025838:	0a09      	lsrs	r1, r1, #8
 802583a:	0a22      	lsrs	r2, r4, #8
 802583c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8025840:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025844:	fb07 f70a 	mul.w	r7, r7, sl
 8025848:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802584c:	4414      	add	r4, r2
 802584e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025852:	0a24      	lsrs	r4, r4, #8
 8025854:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025858:	9a03      	ldr	r2, [sp, #12]
 802585a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802585e:	fb02 5503 	mla	r5, r2, r3, r5
 8025862:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025866:	9a00      	ldr	r2, [sp, #0]
 8025868:	fb04 540e 	mla	r4, r4, lr, r5
 802586c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025870:	1235      	asrs	r5, r6, #8
 8025872:	fb01 4100 	mla	r1, r1, r0, r4
 8025876:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802587a:	0a09      	lsrs	r1, r1, #8
 802587c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8025880:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8025884:	fb03 7101 	mla	r1, r3, r1, r7
 8025888:	fb0e 1e08 	mla	lr, lr, r8, r1
 802588c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8025890:	fb00 e101 	mla	r1, r0, r1, lr
 8025894:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8025898:	b287      	uxth	r7, r0
 802589a:	0a09      	lsrs	r1, r1, #8
 802589c:	437a      	muls	r2, r7
 802589e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80258a2:	1c53      	adds	r3, r2, #1
 80258a4:	4321      	orrs	r1, r4
 80258a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80258aa:	0c0a      	lsrs	r2, r1, #16
 80258ac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80258b0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80258b4:	b2c8      	uxtb	r0, r1
 80258b6:	fb12 f207 	smulbb	r2, r2, r7
 80258ba:	fb14 f407 	smulbb	r4, r4, r7
 80258be:	b2db      	uxtb	r3, r3
 80258c0:	fb10 f007 	smulbb	r0, r0, r7
 80258c4:	fb05 2503 	mla	r5, r5, r3, r2
 80258c8:	10f2      	asrs	r2, r6, #3
 80258ca:	00f6      	lsls	r6, r6, #3
 80258cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80258d0:	b2ad      	uxth	r5, r5
 80258d2:	b2f6      	uxtb	r6, r6
 80258d4:	fb02 4203 	mla	r2, r2, r3, r4
 80258d8:	fb06 0303 	mla	r3, r6, r3, r0
 80258dc:	b294      	uxth	r4, r2
 80258de:	b299      	uxth	r1, r3
 80258e0:	1c6b      	adds	r3, r5, #1
 80258e2:	1c62      	adds	r2, r4, #1
 80258e4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80258e8:	1c4b      	adds	r3, r1, #1
 80258ea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80258ee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80258f2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80258f6:	0952      	lsrs	r2, r2, #5
 80258f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80258fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025900:	432b      	orrs	r3, r5
 8025902:	4313      	orrs	r3, r2
 8025904:	9a02      	ldr	r2, [sp, #8]
 8025906:	8013      	strh	r3, [r2, #0]
 8025908:	b005      	add	sp, #20
 802590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802590e:	2500      	movs	r5, #0
 8025910:	e6e9      	b.n	80256e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025912:	2100      	movs	r1, #0
 8025914:	460d      	mov	r5, r1
 8025916:	e6f3      	b.n	8025700 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025918:	2100      	movs	r1, #0
 802591a:	e6f1      	b.n	8025700 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802591c:	4631      	mov	r1, r6
 802591e:	e6ef      	b.n	8025700 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025920:	2400      	movs	r4, #0
 8025922:	e700      	b.n	8025726 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8025924:	2200      	movs	r2, #0
 8025926:	4614      	mov	r4, r2
 8025928:	e70b      	b.n	8025742 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802592a:	4602      	mov	r2, r0
 802592c:	4604      	mov	r4, r0
 802592e:	e708      	b.n	8025742 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025930:	2200      	movs	r2, #0
 8025932:	e706      	b.n	8025742 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025934:	4632      	mov	r2, r6
 8025936:	e704      	b.n	8025742 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08025938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802593c:	b09f      	sub	sp, #124	; 0x7c
 802593e:	921b      	str	r2, [sp, #108]	; 0x6c
 8025940:	9309      	str	r3, [sp, #36]	; 0x24
 8025942:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025944:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025948:	901d      	str	r0, [sp, #116]	; 0x74
 802594a:	931c      	str	r3, [sp, #112]	; 0x70
 802594c:	6850      	ldr	r0, [r2, #4]
 802594e:	9119      	str	r1, [sp, #100]	; 0x64
 8025950:	6812      	ldr	r2, [r2, #0]
 8025952:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8025954:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025958:	fb00 1303 	mla	r3, r0, r3, r1
 802595c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025960:	930c      	str	r3, [sp, #48]	; 0x30
 8025962:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025964:	681b      	ldr	r3, [r3, #0]
 8025966:	9312      	str	r3, [sp, #72]	; 0x48
 8025968:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802596a:	685e      	ldr	r6, [r3, #4]
 802596c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025970:	3604      	adds	r6, #4
 8025972:	930d      	str	r3, [sp, #52]	; 0x34
 8025974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025976:	2b00      	cmp	r3, #0
 8025978:	dc03      	bgt.n	8025982 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802597a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802597c:	2b00      	cmp	r3, #0
 802597e:	f340 8387 	ble.w	8026090 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025982:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025984:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025988:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802598c:	1e48      	subs	r0, r1, #1
 802598e:	1e57      	subs	r7, r2, #1
 8025990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025992:	2b00      	cmp	r3, #0
 8025994:	f340 8194 	ble.w	8025cc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8025998:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802599a:	142b      	asrs	r3, r5, #16
 802599c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80259a0:	d406      	bmi.n	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259a2:	4584      	cmp	ip, r0
 80259a4:	da04      	bge.n	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	db02      	blt.n	80259b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259aa:	42bb      	cmp	r3, r7
 80259ac:	f2c0 8189 	blt.w	8025cc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80259b0:	f11c 0c01 	adds.w	ip, ip, #1
 80259b4:	f100 8177 	bmi.w	8025ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80259b8:	4561      	cmp	r1, ip
 80259ba:	f2c0 8174 	blt.w	8025ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80259be:	3301      	adds	r3, #1
 80259c0:	f100 8171 	bmi.w	8025ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80259c4:	429a      	cmp	r2, r3
 80259c6:	f2c0 816e 	blt.w	8025ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80259ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80259ce:	931a      	str	r3, [sp, #104]	; 0x68
 80259d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80259d2:	2b00      	cmp	r3, #0
 80259d4:	f340 8193 	ble.w	8025cfe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80259d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80259da:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80259de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80259e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80259e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80259e8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80259ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80259ee:	141b      	asrs	r3, r3, #16
 80259f0:	f100 81d6 	bmi.w	8025da0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80259f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80259f8:	4543      	cmp	r3, r8
 80259fa:	f280 81d1 	bge.w	8025da0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80259fe:	f1bc 0f00 	cmp.w	ip, #0
 8025a02:	f2c0 81cd 	blt.w	8025da0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025a06:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025a0a:	45c4      	cmp	ip, r8
 8025a0c:	f280 81c8 	bge.w	8025da0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025a10:	b200      	sxth	r0, r0
 8025a12:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025a14:	fb0c 3300 	mla	r3, ip, r0, r3
 8025a18:	eb04 0803 	add.w	r8, r4, r3
 8025a1c:	5ce3      	ldrb	r3, [r4, r3]
 8025a1e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025a22:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025a26:	2a00      	cmp	r2, #0
 8025a28:	f000 81af 	beq.w	8025d8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025a2c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025a30:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025a34:	940e      	str	r4, [sp, #56]	; 0x38
 8025a36:	0e24      	lsrs	r4, r4, #24
 8025a38:	9415      	str	r4, [sp, #84]	; 0x54
 8025a3a:	b179      	cbz	r1, 8025a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025a3c:	eb08 0c00 	add.w	ip, r8, r0
 8025a40:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025a44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025a48:	900a      	str	r0, [sp, #40]	; 0x28
 8025a4a:	0e00      	lsrs	r0, r0, #24
 8025a4c:	9013      	str	r0, [sp, #76]	; 0x4c
 8025a4e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025a52:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025a56:	900f      	str	r0, [sp, #60]	; 0x3c
 8025a58:	0e00      	lsrs	r0, r0, #24
 8025a5a:	9016      	str	r0, [sp, #88]	; 0x58
 8025a5c:	b292      	uxth	r2, r2
 8025a5e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025a60:	b289      	uxth	r1, r1
 8025a62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025a64:	fb02 f901 	mul.w	r9, r2, r1
 8025a68:	0112      	lsls	r2, r2, #4
 8025a6a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025a6e:	eba2 0809 	sub.w	r8, r2, r9
 8025a72:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025a76:	b289      	uxth	r1, r1
 8025a78:	fa1f f888 	uxth.w	r8, r8
 8025a7c:	1a52      	subs	r2, r2, r1
 8025a7e:	fb08 f000 	mul.w	r0, r8, r0
 8025a82:	b292      	uxth	r2, r2
 8025a84:	fb02 000e 	mla	r0, r2, lr, r0
 8025a88:	fb01 0004 	mla	r0, r1, r4, r0
 8025a8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025a8e:	fb09 0004 	mla	r0, r9, r4, r0
 8025a92:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025a96:	2800      	cmp	r0, #0
 8025a98:	f000 80fa 	beq.w	8025c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025a9c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025aa0:	d01b      	beq.n	8025ada <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025aa2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025aaa:	fb0e fa0a 	mul.w	sl, lr, sl
 8025aae:	fb0e fe03 	mul.w	lr, lr, r3
 8025ab2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025ab6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025aba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025abe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ac2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025ac6:	4453      	add	r3, sl
 8025ac8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025acc:	0a1b      	lsrs	r3, r3, #8
 8025ace:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025ad2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ad6:	ea43 030c 	orr.w	r3, r3, ip
 8025ada:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025adc:	2cff      	cmp	r4, #255	; 0xff
 8025ade:	d021      	beq.n	8025b24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025ae0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025ae2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025ae6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025ae8:	fb04 fb0b 	mul.w	fp, r4, fp
 8025aec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025aee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025af2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025af4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025af8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025afc:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b04:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025b08:	44de      	add	lr, fp
 8025b0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025b0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b1e:	ea4e 040a 	orr.w	r4, lr, sl
 8025b22:	940e      	str	r4, [sp, #56]	; 0x38
 8025b24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025b26:	2cff      	cmp	r4, #255	; 0xff
 8025b28:	d021      	beq.n	8025b6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8025b2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025b2c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025b30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025b32:	fb04 fb0b 	mul.w	fp, r4, fp
 8025b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025b38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025b3c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025b3e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025b42:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b46:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025b52:	44de      	add	lr, fp
 8025b54:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025b58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b68:	ea4e 040a 	orr.w	r4, lr, sl
 8025b6c:	940a      	str	r4, [sp, #40]	; 0x28
 8025b6e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025b70:	2cff      	cmp	r4, #255	; 0xff
 8025b72:	d021      	beq.n	8025bb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8025b74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025b76:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025b7a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025b7c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025b80:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025b82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025b86:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025b88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025b8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b90:	fb04 fa0a 	mul.w	sl, r4, sl
 8025b94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025b98:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025b9c:	44de      	add	lr, fp
 8025b9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025ba2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ba6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025baa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025bae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025bb2:	ea4e 040a 	orr.w	r4, lr, sl
 8025bb6:	940f      	str	r4, [sp, #60]	; 0x3c
 8025bb8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025bba:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025bbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bc2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025bc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025bc8:	fb08 fc0c 	mul.w	ip, r8, ip
 8025bcc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025bd0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025bd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025bd6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025bda:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025bde:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025be0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025be4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025be8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025bea:	fb08 f80e 	mul.w	r8, r8, lr
 8025bee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bf2:	fb02 8303 	mla	r3, r2, r3, r8
 8025bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025bf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025bfc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025c02:	fb01 330a 	mla	r3, r1, sl, r3
 8025c06:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025c0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025c0c:	fb09 3901 	mla	r9, r9, r1, r3
 8025c10:	883b      	ldrh	r3, [r7, #0]
 8025c12:	4342      	muls	r2, r0
 8025c14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025c18:	1c50      	adds	r0, r2, #1
 8025c1a:	1219      	asrs	r1, r3, #8
 8025c1c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025c20:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025c24:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025c28:	ea4c 0c09 	orr.w	ip, ip, r9
 8025c2c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025c30:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025c34:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025c38:	b2c0      	uxtb	r0, r0
 8025c3a:	fb12 f204 	smulbb	r2, r2, r4
 8025c3e:	fa5f fc8c 	uxtb.w	ip, ip
 8025c42:	fb1e fe04 	smulbb	lr, lr, r4
 8025c46:	fb01 2100 	mla	r1, r1, r0, r2
 8025c4a:	10da      	asrs	r2, r3, #3
 8025c4c:	fb1c fc04 	smulbb	ip, ip, r4
 8025c50:	00db      	lsls	r3, r3, #3
 8025c52:	b289      	uxth	r1, r1
 8025c54:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025c58:	b2db      	uxtb	r3, r3
 8025c5a:	fb02 e200 	mla	r2, r2, r0, lr
 8025c5e:	fb03 c300 	mla	r3, r3, r0, ip
 8025c62:	b292      	uxth	r2, r2
 8025c64:	fa1f fc83 	uxth.w	ip, r3
 8025c68:	1c4b      	adds	r3, r1, #1
 8025c6a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025c6e:	f10c 0301 	add.w	r3, ip, #1
 8025c72:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025c76:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025c7a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025c7e:	430b      	orrs	r3, r1
 8025c80:	1c51      	adds	r1, r2, #1
 8025c82:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025c86:	0952      	lsrs	r2, r2, #5
 8025c88:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c8c:	4313      	orrs	r3, r2
 8025c8e:	803b      	strh	r3, [r7, #0]
 8025c90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025c92:	3702      	adds	r7, #2
 8025c94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025c96:	441a      	add	r2, r3
 8025c98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c9a:	441d      	add	r5, r3
 8025c9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025c9e:	9229      	str	r2, [sp, #164]	; 0xa4
 8025ca0:	3b01      	subs	r3, #1
 8025ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8025ca4:	e694      	b.n	80259d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025ca6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025ca8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025caa:	441c      	add	r4, r3
 8025cac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025cae:	441d      	add	r5, r3
 8025cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cb2:	9429      	str	r4, [sp, #164]	; 0xa4
 8025cb4:	3b01      	subs	r3, #1
 8025cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8025cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025cba:	3302      	adds	r3, #2
 8025cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8025cbe:	e667      	b.n	8025990 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025cc0:	d024      	beq.n	8025d0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cc4:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025cc6:	3b01      	subs	r3, #1
 8025cc8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025cca:	fb00 4003 	mla	r0, r0, r3, r4
 8025cce:	1400      	asrs	r0, r0, #16
 8025cd0:	f53f ae7b 	bmi.w	80259ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025cd4:	3901      	subs	r1, #1
 8025cd6:	4288      	cmp	r0, r1
 8025cd8:	f6bf ae77 	bge.w	80259ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025cdc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025cde:	fb01 5303 	mla	r3, r1, r3, r5
 8025ce2:	141b      	asrs	r3, r3, #16
 8025ce4:	f53f ae71 	bmi.w	80259ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ce8:	3a01      	subs	r2, #1
 8025cea:	4293      	cmp	r3, r2
 8025cec:	f6bf ae6d 	bge.w	80259ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025cf0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025cf4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8025cf8:	f1bb 0f00 	cmp.w	fp, #0
 8025cfc:	dc70      	bgt.n	8025de0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d00:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d06:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8025d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025d0e:	2b00      	cmp	r3, #0
 8025d10:	f340 81be 	ble.w	8026090 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025d18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025d1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025d22:	eef0 6a62 	vmov.f32	s13, s5
 8025d26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d32:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025d36:	eef0 6a43 	vmov.f32	s13, s6
 8025d3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d3e:	ee16 5a90 	vmov	r5, s13
 8025d42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025d46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025d4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025d4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025d52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025d56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025d5a:	ee12 2a90 	vmov	r2, s5
 8025d5e:	eef0 2a47 	vmov.f32	s5, s14
 8025d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d66:	ee13 2a10 	vmov	r2, s6
 8025d6a:	932b      	str	r3, [sp, #172]	; 0xac
 8025d6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d6e:	eeb0 3a67 	vmov.f32	s6, s15
 8025d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d76:	932c      	str	r3, [sp, #176]	; 0xb0
 8025d78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025d7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025d7c:	3b01      	subs	r3, #1
 8025d7e:	9319      	str	r3, [sp, #100]	; 0x64
 8025d80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d82:	bf08      	it	eq
 8025d84:	4613      	moveq	r3, r2
 8025d86:	9309      	str	r3, [sp, #36]	; 0x24
 8025d88:	e5f4      	b.n	8025974 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025d8a:	2900      	cmp	r1, #0
 8025d8c:	f43f ae66 	beq.w	8025a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025d90:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025d94:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025d98:	900a      	str	r0, [sp, #40]	; 0x28
 8025d9a:	0e00      	lsrs	r0, r0, #24
 8025d9c:	9013      	str	r0, [sp, #76]	; 0x4c
 8025d9e:	e65d      	b.n	8025a5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025da0:	f113 0801 	adds.w	r8, r3, #1
 8025da4:	f53f af74 	bmi.w	8025c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025da8:	4540      	cmp	r0, r8
 8025daa:	f6ff af71 	blt.w	8025c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025dae:	f11c 0801 	adds.w	r8, ip, #1
 8025db2:	f53f af6d 	bmi.w	8025c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025db6:	45c6      	cmp	lr, r8
 8025db8:	f6ff af6a 	blt.w	8025c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025dbc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025dbe:	b200      	sxth	r0, r0
 8025dc0:	9302      	str	r3, [sp, #8]
 8025dc2:	fa0f f38e 	sxth.w	r3, lr
 8025dc6:	9000      	str	r0, [sp, #0]
 8025dc8:	9301      	str	r3, [sp, #4]
 8025dca:	4633      	mov	r3, r6
 8025dcc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8025dce:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025dd2:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025dd6:	4639      	mov	r1, r7
 8025dd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025dda:	f7ff fc63 	bl	80256a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025dde:	e757      	b.n	8025c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025de0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025de2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025de6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8025de8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025dec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025dee:	1427      	asrs	r7, r4, #16
 8025df0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025df2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025df6:	142b      	asrs	r3, r5, #16
 8025df8:	fb01 7303 	mla	r3, r1, r3, r7
 8025dfc:	18e7      	adds	r7, r4, r3
 8025dfe:	5ce3      	ldrb	r3, [r4, r3]
 8025e00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025e04:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025e08:	2a00      	cmp	r2, #0
 8025e0a:	f000 8137 	beq.w	802607c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025e0e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025e12:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025e16:	9410      	str	r4, [sp, #64]	; 0x40
 8025e18:	0e24      	lsrs	r4, r4, #24
 8025e1a:	9417      	str	r4, [sp, #92]	; 0x5c
 8025e1c:	b170      	cbz	r0, 8025e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025e1e:	eb07 0e01 	add.w	lr, r7, r1
 8025e22:	5c79      	ldrb	r1, [r7, r1]
 8025e24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025e28:	910b      	str	r1, [sp, #44]	; 0x2c
 8025e2a:	0e09      	lsrs	r1, r1, #24
 8025e2c:	9114      	str	r1, [sp, #80]	; 0x50
 8025e2e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025e32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025e36:	9111      	str	r1, [sp, #68]	; 0x44
 8025e38:	0e09      	lsrs	r1, r1, #24
 8025e3a:	9118      	str	r1, [sp, #96]	; 0x60
 8025e3c:	b292      	uxth	r2, r2
 8025e3e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025e40:	b280      	uxth	r0, r0
 8025e42:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025e44:	fb02 f800 	mul.w	r8, r2, r0
 8025e48:	0112      	lsls	r2, r2, #4
 8025e4a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025e4e:	eba2 0e08 	sub.w	lr, r2, r8
 8025e52:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025e56:	b280      	uxth	r0, r0
 8025e58:	fa1f fe8e 	uxth.w	lr, lr
 8025e5c:	1a12      	subs	r2, r2, r0
 8025e5e:	fb0e f101 	mul.w	r1, lr, r1
 8025e62:	b292      	uxth	r2, r2
 8025e64:	fb02 110c 	mla	r1, r2, ip, r1
 8025e68:	fb00 1104 	mla	r1, r0, r4, r1
 8025e6c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025e6e:	fb08 1104 	mla	r1, r8, r4, r1
 8025e72:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025e76:	2900      	cmp	r1, #0
 8025e78:	f000 80f5 	beq.w	8026066 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025e7c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025e80:	d019      	beq.n	8025eb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025e82:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025e86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e8a:	fb0c fa0a 	mul.w	sl, ip, sl
 8025e8e:	fb0c fc03 	mul.w	ip, ip, r3
 8025e92:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e96:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e9a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025e9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ea2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025ea6:	4453      	add	r3, sl
 8025ea8:	0a3f      	lsrs	r7, r7, #8
 8025eaa:	0a1b      	lsrs	r3, r3, #8
 8025eac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025eb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025eb4:	433b      	orrs	r3, r7
 8025eb6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025eb8:	2cff      	cmp	r4, #255	; 0xff
 8025eba:	d020      	beq.n	8025efe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025ebc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ebe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025ec2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ec4:	4367      	muls	r7, r4
 8025ec6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025ec8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ecc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ed0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ed2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025ed6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025eda:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ede:	44bc      	add	ip, r7
 8025ee0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025ee4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ee8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025eec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ef0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ef4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025ef8:	ea4c 040a 	orr.w	r4, ip, sl
 8025efc:	9410      	str	r4, [sp, #64]	; 0x40
 8025efe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025f00:	2cff      	cmp	r4, #255	; 0xff
 8025f02:	d020      	beq.n	8025f46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025f04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025f06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025f0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025f0c:	4367      	muls	r7, r4
 8025f0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025f10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025f14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025f18:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025f1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025f1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f22:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f26:	44bc      	add	ip, r7
 8025f28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025f2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025f34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f40:	ea4c 040a 	orr.w	r4, ip, sl
 8025f44:	940b      	str	r4, [sp, #44]	; 0x2c
 8025f46:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025f48:	2cff      	cmp	r4, #255	; 0xff
 8025f4a:	d020      	beq.n	8025f8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025f4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025f4e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025f52:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025f54:	4367      	muls	r7, r4
 8025f56:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025f58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025f5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025f60:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025f62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025f66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f6e:	44bc      	add	ip, r7
 8025f70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025f74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025f7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f88:	ea4c 040a 	orr.w	r4, ip, sl
 8025f8c:	9411      	str	r4, [sp, #68]	; 0x44
 8025f8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f90:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025f98:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025f9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025f9e:	fb0e f707 	mul.w	r7, lr, r7
 8025fa2:	fb02 770c 	mla	r7, r2, ip, r7
 8025fa6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025faa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025fac:	fb00 770c 	mla	r7, r0, ip, r7
 8025fb0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025fb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025fb6:	fb08 770c 	mla	r7, r8, ip, r7
 8025fba:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025fbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025fc0:	fb0e fe0c 	mul.w	lr, lr, ip
 8025fc4:	0a3f      	lsrs	r7, r7, #8
 8025fc6:	fb02 e303 	mla	r3, r2, r3, lr
 8025fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025fcc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025fd0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025fd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025fd6:	fb00 330a 	mla	r3, r0, sl, r3
 8025fda:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025fde:	f8b9 0000 	ldrh.w	r0, [r9]
 8025fe2:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025fe8:	1202      	asrs	r2, r0, #8
 8025fea:	434b      	muls	r3, r1
 8025fec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ff0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025ff4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025ff8:	1c59      	adds	r1, r3, #1
 8025ffa:	ea47 070c 	orr.w	r7, r7, ip
 8025ffe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026002:	0c3b      	lsrs	r3, r7, #16
 8026004:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026008:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802600c:	b2ff      	uxtb	r7, r7
 802600e:	fb13 f304 	smulbb	r3, r3, r4
 8026012:	b2c9      	uxtb	r1, r1
 8026014:	fb1c fc04 	smulbb	ip, ip, r4
 8026018:	fb02 3201 	mla	r2, r2, r1, r3
 802601c:	10c3      	asrs	r3, r0, #3
 802601e:	fb17 f704 	smulbb	r7, r7, r4
 8026022:	00c0      	lsls	r0, r0, #3
 8026024:	b292      	uxth	r2, r2
 8026026:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802602a:	b2c0      	uxtb	r0, r0
 802602c:	fb03 c301 	mla	r3, r3, r1, ip
 8026030:	f102 0c01 	add.w	ip, r2, #1
 8026034:	fb00 7001 	mla	r0, r0, r1, r7
 8026038:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802603c:	b280      	uxth	r0, r0
 802603e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8026042:	b29b      	uxth	r3, r3
 8026044:	1c42      	adds	r2, r0, #1
 8026046:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802604a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802604e:	ea42 020c 	orr.w	r2, r2, ip
 8026052:	f103 0c01 	add.w	ip, r3, #1
 8026056:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802605a:	095b      	lsrs	r3, r3, #5
 802605c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026060:	431a      	orrs	r2, r3
 8026062:	f8a9 2000 	strh.w	r2, [r9]
 8026066:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026068:	f109 0902 	add.w	r9, r9, #2
 802606c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802606e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026072:	441a      	add	r2, r3
 8026074:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026076:	9229      	str	r2, [sp, #164]	; 0xa4
 8026078:	441d      	add	r5, r3
 802607a:	e63d      	b.n	8025cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802607c:	2800      	cmp	r0, #0
 802607e:	f43f aedd 	beq.w	8025e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026082:	5c79      	ldrb	r1, [r7, r1]
 8026084:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026088:	910b      	str	r1, [sp, #44]	; 0x2c
 802608a:	0e09      	lsrs	r1, r1, #24
 802608c:	9114      	str	r1, [sp, #80]	; 0x50
 802608e:	e6d5      	b.n	8025e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026090:	b01f      	add	sp, #124	; 0x7c
 8026092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026096 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802609a:	b089      	sub	sp, #36	; 0x24
 802609c:	9101      	str	r1, [sp, #4]
 802609e:	9801      	ldr	r0, [sp, #4]
 80260a0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80260a4:	8800      	ldrh	r0, [r0, #0]
 80260a6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 80260aa:	1206      	asrs	r6, r0, #8
 80260ac:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80260b0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80260b4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80260b8:	9602      	str	r6, [sp, #8]
 80260ba:	10c6      	asrs	r6, r0, #3
 80260bc:	00c0      	lsls	r0, r0, #3
 80260be:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80260c2:	b2c0      	uxtb	r0, r0
 80260c4:	9603      	str	r6, [sp, #12]
 80260c6:	9004      	str	r0, [sp, #16]
 80260c8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80260cc:	fb07 100c 	mla	r0, r7, ip, r1
 80260d0:	2f00      	cmp	r7, #0
 80260d2:	eb02 0e00 	add.w	lr, r2, r0
 80260d6:	f2c0 810a 	blt.w	80262ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80260da:	45b8      	cmp	r8, r7
 80260dc:	f340 8107 	ble.w	80262ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80260e0:	2900      	cmp	r1, #0
 80260e2:	f2c0 8102 	blt.w	80262ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80260e6:	458c      	cmp	ip, r1
 80260e8:	f340 80ff 	ble.w	80262ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80260ec:	5c12      	ldrb	r2, [r2, r0]
 80260ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80260f2:	1c4a      	adds	r2, r1, #1
 80260f4:	f100 80fe 	bmi.w	80262f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80260f8:	4594      	cmp	ip, r2
 80260fa:	f340 80fb 	ble.w	80262f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80260fe:	2d00      	cmp	r5, #0
 8026100:	f000 80fa 	beq.w	80262f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8026104:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026108:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802610c:	3701      	adds	r7, #1
 802610e:	f100 80f7 	bmi.w	8026300 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026112:	45b8      	cmp	r8, r7
 8026114:	f340 80f4 	ble.w	8026300 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026118:	2c00      	cmp	r4, #0
 802611a:	f000 80f4 	beq.w	8026306 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802611e:	2900      	cmp	r1, #0
 8026120:	eb0e 020c 	add.w	r2, lr, ip
 8026124:	f2c0 80ea 	blt.w	80262fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026128:	458c      	cmp	ip, r1
 802612a:	f340 80e7 	ble.w	80262fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802612e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8026132:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8026136:	3101      	adds	r1, #1
 8026138:	f100 80e8 	bmi.w	802630c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802613c:	458c      	cmp	ip, r1
 802613e:	f340 80e5 	ble.w	802630c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026142:	2d00      	cmp	r5, #0
 8026144:	f000 80e4 	beq.w	8026310 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8026148:	7852      	ldrb	r2, [r2, #1]
 802614a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802614e:	0e0b      	lsrs	r3, r1, #24
 8026150:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026154:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026158:	9300      	str	r3, [sp, #0]
 802615a:	b2a4      	uxth	r4, r4
 802615c:	b2ab      	uxth	r3, r5
 802615e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8026162:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026166:	fb03 f904 	mul.w	r9, r3, r4
 802616a:	011b      	lsls	r3, r3, #4
 802616c:	fb0a f505 	mul.w	r5, sl, r5
 8026170:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8026174:	eba3 0e09 	sub.w	lr, r3, r9
 8026178:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 802617c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8026180:	0a28      	lsrs	r0, r5, #8
 8026182:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8026186:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802618a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802618e:	fb0a f303 	mul.w	r3, sl, r3
 8026192:	fb08 f707 	mul.w	r7, r8, r7
 8026196:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 802619a:	4405      	add	r5, r0
 802619c:	fb08 fc0c 	mul.w	ip, r8, ip
 80261a0:	b2a4      	uxth	r4, r4
 80261a2:	0a2d      	lsrs	r5, r5, #8
 80261a4:	fa1f fe8e 	uxth.w	lr, lr
 80261a8:	1b12      	subs	r2, r2, r4
 80261aa:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80261ae:	b292      	uxth	r2, r2
 80261b0:	9005      	str	r0, [sp, #20]
 80261b2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80261b6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80261ba:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80261be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80261c2:	0a1b      	lsrs	r3, r3, #8
 80261c4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80261c8:	9306      	str	r3, [sp, #24]
 80261ca:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80261ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80261d2:	4460      	add	r0, ip
 80261d4:	fb0b f303 	mul.w	r3, fp, r3
 80261d8:	fb0b f606 	mul.w	r6, fp, r6
 80261dc:	0a00      	lsrs	r0, r0, #8
 80261de:	0a1d      	lsrs	r5, r3, #8
 80261e0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80261e4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80261e8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80261ec:	441d      	add	r5, r3
 80261ee:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80261f2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80261f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80261fa:	0a2d      	lsrs	r5, r5, #8
 80261fc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026200:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8026204:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026208:	0a36      	lsrs	r6, r6, #8
 802620a:	0a1b      	lsrs	r3, r3, #8
 802620c:	fb05 f50e 	mul.w	r5, r5, lr
 8026210:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026214:	9307      	str	r3, [sp, #28]
 8026216:	0e0b      	lsrs	r3, r1, #24
 8026218:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802621c:	fb0e f606 	mul.w	r6, lr, r6
 8026220:	435f      	muls	r7, r3
 8026222:	4359      	muls	r1, r3
 8026224:	9b05      	ldr	r3, [sp, #20]
 8026226:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802622a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802622e:	fb03 5502 	mla	r5, r3, r2, r5
 8026232:	9b06      	ldr	r3, [sp, #24]
 8026234:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026238:	fb0e fe0b 	mul.w	lr, lr, fp
 802623c:	44bc      	add	ip, r7
 802623e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8026242:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026246:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802624a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802624e:	0a09      	lsrs	r1, r1, #8
 8026250:	fb0c 5509 	mla	r5, ip, r9, r5
 8026254:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026258:	fb00 5504 	mla	r5, r0, r4, r5
 802625c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026260:	9b07      	ldr	r3, [sp, #28]
 8026262:	fb02 6000 	mla	r0, r2, r0, r6
 8026266:	0a2d      	lsrs	r5, r5, #8
 8026268:	fb02 e20a 	mla	r2, r2, sl, lr
 802626c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026270:	fb09 0001 	mla	r0, r9, r1, r0
 8026274:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026278:	fb04 0003 	mla	r0, r4, r3, r0
 802627c:	9b00      	ldr	r3, [sp, #0]
 802627e:	fb04 2408 	mla	r4, r4, r8, r2
 8026282:	9a04      	ldr	r2, [sp, #16]
 8026284:	0a00      	lsrs	r0, r0, #8
 8026286:	fb09 4903 	mla	r9, r9, r3, r4
 802628a:	9b02      	ldr	r3, [sp, #8]
 802628c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026290:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026294:	4305      	orrs	r5, r0
 8026296:	fa5f f989 	uxtb.w	r9, r9
 802629a:	fb03 f109 	mul.w	r1, r3, r9
 802629e:	9b03      	ldr	r3, [sp, #12]
 80262a0:	fb03 f309 	mul.w	r3, r3, r9
 80262a4:	fb02 f909 	mul.w	r9, r2, r9
 80262a8:	1c4a      	adds	r2, r1, #1
 80262aa:	1c58      	adds	r0, r3, #1
 80262ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80262b0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80262b4:	0c2a      	lsrs	r2, r5, #16
 80262b6:	0a2b      	lsrs	r3, r5, #8
 80262b8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80262bc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80262c0:	0212      	lsls	r2, r2, #8
 80262c2:	00db      	lsls	r3, r3, #3
 80262c4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80262c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80262cc:	4313      	orrs	r3, r2
 80262ce:	f109 0201 	add.w	r2, r9, #1
 80262d2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80262d6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80262da:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80262de:	431d      	orrs	r5, r3
 80262e0:	9b01      	ldr	r3, [sp, #4]
 80262e2:	801d      	strh	r5, [r3, #0]
 80262e4:	b009      	add	sp, #36	; 0x24
 80262e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262ea:	2000      	movs	r0, #0
 80262ec:	e701      	b.n	80260f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80262ee:	2600      	movs	r6, #0
 80262f0:	4630      	mov	r0, r6
 80262f2:	e70b      	b.n	802610c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80262f4:	2600      	movs	r6, #0
 80262f6:	e709      	b.n	802610c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80262f8:	462e      	mov	r6, r5
 80262fa:	e707      	b.n	802610c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80262fc:	2700      	movs	r7, #0
 80262fe:	e71a      	b.n	8026136 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8026300:	2100      	movs	r1, #0
 8026302:	460f      	mov	r7, r1
 8026304:	e723      	b.n	802614e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026306:	4621      	mov	r1, r4
 8026308:	4627      	mov	r7, r4
 802630a:	e720      	b.n	802614e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802630c:	2100      	movs	r1, #0
 802630e:	e71e      	b.n	802614e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026310:	4629      	mov	r1, r5
 8026312:	e71c      	b.n	802614e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08026314 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026318:	b09b      	sub	sp, #108	; 0x6c
 802631a:	9218      	str	r2, [sp, #96]	; 0x60
 802631c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802631e:	9019      	str	r0, [sp, #100]	; 0x64
 8026320:	9116      	str	r1, [sp, #88]	; 0x58
 8026322:	6850      	ldr	r0, [r2, #4]
 8026324:	9307      	str	r3, [sp, #28]
 8026326:	6812      	ldr	r2, [r2, #0]
 8026328:	9d26      	ldr	r5, [sp, #152]	; 0x98
 802632a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802632e:	fb00 1303 	mla	r3, r0, r3, r1
 8026332:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026336:	930a      	str	r3, [sp, #40]	; 0x28
 8026338:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802633a:	681b      	ldr	r3, [r3, #0]
 802633c:	930f      	str	r3, [sp, #60]	; 0x3c
 802633e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026340:	685e      	ldr	r6, [r3, #4]
 8026342:	3604      	adds	r6, #4
 8026344:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026346:	2b00      	cmp	r3, #0
 8026348:	dc03      	bgt.n	8026352 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802634a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802634c:	2b00      	cmp	r3, #0
 802634e:	f340 8373 	ble.w	8026a38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026352:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026354:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026358:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802635c:	1e48      	subs	r0, r1, #1
 802635e:	1e57      	subs	r7, r2, #1
 8026360:	9b07      	ldr	r3, [sp, #28]
 8026362:	2b00      	cmp	r3, #0
 8026364:	f340 818f 	ble.w	8026686 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026368:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802636a:	142b      	asrs	r3, r5, #16
 802636c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026370:	d406      	bmi.n	8026380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026372:	4584      	cmp	ip, r0
 8026374:	da04      	bge.n	8026380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026376:	2b00      	cmp	r3, #0
 8026378:	db02      	blt.n	8026380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802637a:	42bb      	cmp	r3, r7
 802637c:	f2c0 8184 	blt.w	8026688 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026380:	f11c 0c01 	adds.w	ip, ip, #1
 8026384:	f100 8172 	bmi.w	802666c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026388:	4561      	cmp	r1, ip
 802638a:	f2c0 816f 	blt.w	802666c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802638e:	3301      	adds	r3, #1
 8026390:	f100 816c 	bmi.w	802666c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026394:	429a      	cmp	r2, r3
 8026396:	f2c0 8169 	blt.w	802666c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802639a:	9b07      	ldr	r3, [sp, #28]
 802639c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802639e:	9317      	str	r3, [sp, #92]	; 0x5c
 80263a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80263a2:	2b00      	cmp	r3, #0
 80263a4:	f340 818e 	ble.w	80266c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80263a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80263aa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80263ae:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80263b2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80263b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80263b8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80263bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80263be:	141b      	asrs	r3, r3, #16
 80263c0:	f100 81d1 	bmi.w	8026766 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80263c4:	f101 38ff 	add.w	r8, r1, #4294967295
 80263c8:	4543      	cmp	r3, r8
 80263ca:	f280 81cc 	bge.w	8026766 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80263ce:	f1bc 0f00 	cmp.w	ip, #0
 80263d2:	f2c0 81c8 	blt.w	8026766 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80263d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80263da:	45c4      	cmp	ip, r8
 80263dc:	f280 81c3 	bge.w	8026766 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80263e0:	b209      	sxth	r1, r1
 80263e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263e4:	fb0c 3301 	mla	r3, ip, r1, r3
 80263e8:	eb04 0803 	add.w	r8, r4, r3
 80263ec:	5ce3      	ldrb	r3, [r4, r3]
 80263ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80263f2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80263f6:	2a00      	cmp	r2, #0
 80263f8:	f000 81aa 	beq.w	8026750 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80263fc:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026400:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026404:	940b      	str	r4, [sp, #44]	; 0x2c
 8026406:	0e24      	lsrs	r4, r4, #24
 8026408:	9412      	str	r4, [sp, #72]	; 0x48
 802640a:	b178      	cbz	r0, 802642c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802640c:	eb08 0c01 	add.w	ip, r8, r1
 8026410:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026414:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026418:	9108      	str	r1, [sp, #32]
 802641a:	0e09      	lsrs	r1, r1, #24
 802641c:	9110      	str	r1, [sp, #64]	; 0x40
 802641e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026422:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026426:	910c      	str	r1, [sp, #48]	; 0x30
 8026428:	0e09      	lsrs	r1, r1, #24
 802642a:	9113      	str	r1, [sp, #76]	; 0x4c
 802642c:	b292      	uxth	r2, r2
 802642e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026430:	b280      	uxth	r0, r0
 8026432:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026434:	fb02 f900 	mul.w	r9, r2, r0
 8026438:	0112      	lsls	r2, r2, #4
 802643a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802643e:	eba2 0809 	sub.w	r8, r2, r9
 8026442:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026446:	b280      	uxth	r0, r0
 8026448:	fa1f f888 	uxth.w	r8, r8
 802644c:	1a12      	subs	r2, r2, r0
 802644e:	fb08 f101 	mul.w	r1, r8, r1
 8026452:	b292      	uxth	r2, r2
 8026454:	fb02 110e 	mla	r1, r2, lr, r1
 8026458:	fb00 1104 	mla	r1, r0, r4, r1
 802645c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802645e:	fb09 1104 	mla	r1, r9, r4, r1
 8026462:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026466:	2900      	cmp	r1, #0
 8026468:	f000 80f5 	beq.w	8026656 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802646c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026470:	d01b      	beq.n	80264aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026472:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802647a:	fb0e fa0a 	mul.w	sl, lr, sl
 802647e:	fb0e fe03 	mul.w	lr, lr, r3
 8026482:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026486:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802648a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802648e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026492:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026496:	4453      	add	r3, sl
 8026498:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802649c:	0a1b      	lsrs	r3, r3, #8
 802649e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80264a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80264a6:	ea43 030c 	orr.w	r3, r3, ip
 80264aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80264ac:	2cff      	cmp	r4, #255	; 0xff
 80264ae:	d021      	beq.n	80264f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80264b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80264b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80264b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80264b8:	fb04 fb0b 	mul.w	fp, r4, fp
 80264bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80264be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80264c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80264c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80264c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80264cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80264d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80264d8:	44de      	add	lr, fp
 80264da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80264de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80264ee:	ea4e 040a 	orr.w	r4, lr, sl
 80264f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80264f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80264f6:	2cff      	cmp	r4, #255	; 0xff
 80264f8:	d021      	beq.n	802653e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80264fa:	9c08      	ldr	r4, [sp, #32]
 80264fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026500:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026502:	fb04 fb0b 	mul.w	fp, r4, fp
 8026506:	9c08      	ldr	r4, [sp, #32]
 8026508:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802650c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802650e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026512:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026516:	fb04 fa0a 	mul.w	sl, r4, sl
 802651a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802651e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026522:	44de      	add	lr, fp
 8026524:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026528:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802652c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026530:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026534:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026538:	ea4e 040a 	orr.w	r4, lr, sl
 802653c:	9408      	str	r4, [sp, #32]
 802653e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026540:	2cff      	cmp	r4, #255	; 0xff
 8026542:	d021      	beq.n	8026588 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026544:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026546:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802654a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802654c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026550:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026552:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026556:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026558:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802655c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026560:	fb04 fa0a 	mul.w	sl, r4, sl
 8026564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026568:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802656c:	44de      	add	lr, fp
 802656e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026572:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026576:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802657a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802657e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026582:	ea4e 040a 	orr.w	r4, lr, sl
 8026586:	940c      	str	r4, [sp, #48]	; 0x30
 8026588:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802658a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802658e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026592:	43c9      	mvns	r1, r1
 8026594:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026598:	9c08      	ldr	r4, [sp, #32]
 802659a:	fb08 fc0c 	mul.w	ip, r8, ip
 802659e:	fb02 cc0e 	mla	ip, r2, lr, ip
 80265a2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80265a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80265a8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80265ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80265b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80265b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80265b6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80265ba:	fb08 f80e 	mul.w	r8, r8, lr
 80265be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265c2:	fa5f fe81 	uxtb.w	lr, r1
 80265c6:	fb02 8303 	mla	r3, r2, r3, r8
 80265ca:	9a08      	ldr	r2, [sp, #32]
 80265cc:	f8b7 8000 	ldrh.w	r8, [r7]
 80265d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80265d4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80265d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80265da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80265de:	fb00 330a 	mla	r3, r0, sl, r3
 80265e2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80265e6:	ea4f 2228 	mov.w	r2, r8, asr #8
 80265ea:	fb09 3900 	mla	r9, r9, r0, r3
 80265ee:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80265f2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80265f6:	b2c9      	uxtb	r1, r1
 80265f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80265fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026600:	fb02 f20e 	mul.w	r2, r2, lr
 8026604:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026608:	fb00 f00e 	mul.w	r0, r0, lr
 802660c:	1c53      	adds	r3, r2, #1
 802660e:	fb01 f10e 	mul.w	r1, r1, lr
 8026612:	ea4c 0c09 	orr.w	ip, ip, r9
 8026616:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802661a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802661e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026622:	4a60      	ldr	r2, [pc, #384]	; (80267a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8026624:	b2db      	uxtb	r3, r3
 8026626:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802662a:	1c43      	adds	r3, r0, #1
 802662c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026630:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026634:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026638:	00db      	lsls	r3, r3, #3
 802663a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802663e:	4313      	orrs	r3, r2
 8026640:	1c4a      	adds	r2, r1, #1
 8026642:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026646:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802664a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802664e:	ea4c 0c03 	orr.w	ip, ip, r3
 8026652:	f8a7 c000 	strh.w	ip, [r7]
 8026656:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026658:	3702      	adds	r7, #2
 802665a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802665c:	441a      	add	r2, r3
 802665e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026660:	441d      	add	r5, r3
 8026662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026664:	9225      	str	r2, [sp, #148]	; 0x94
 8026666:	3b01      	subs	r3, #1
 8026668:	9317      	str	r3, [sp, #92]	; 0x5c
 802666a:	e699      	b.n	80263a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802666c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802666e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026670:	441c      	add	r4, r3
 8026672:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026674:	441d      	add	r5, r3
 8026676:	9b07      	ldr	r3, [sp, #28]
 8026678:	9425      	str	r4, [sp, #148]	; 0x94
 802667a:	3b01      	subs	r3, #1
 802667c:	9307      	str	r3, [sp, #28]
 802667e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026680:	3302      	adds	r3, #2
 8026682:	930a      	str	r3, [sp, #40]	; 0x28
 8026684:	e66c      	b.n	8026360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026686:	d024      	beq.n	80266d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026688:	9b07      	ldr	r3, [sp, #28]
 802668a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802668c:	3b01      	subs	r3, #1
 802668e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026690:	fb00 4003 	mla	r0, r0, r3, r4
 8026694:	1400      	asrs	r0, r0, #16
 8026696:	f53f ae80 	bmi.w	802639a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802669a:	3901      	subs	r1, #1
 802669c:	4288      	cmp	r0, r1
 802669e:	f6bf ae7c 	bge.w	802639a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80266a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80266a4:	fb01 5303 	mla	r3, r1, r3, r5
 80266a8:	141b      	asrs	r3, r3, #16
 80266aa:	f53f ae76 	bmi.w	802639a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80266ae:	3a01      	subs	r2, #1
 80266b0:	4293      	cmp	r3, r2
 80266b2:	f6bf ae72 	bge.w	802639a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80266b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80266ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80266be:	f1bb 0f00 	cmp.w	fp, #0
 80266c2:	dc71      	bgt.n	80267a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80266c4:	9b07      	ldr	r3, [sp, #28]
 80266c6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80266ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80266cc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80266d0:	930a      	str	r3, [sp, #40]	; 0x28
 80266d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80266d4:	2b00      	cmp	r3, #0
 80266d6:	f340 81af 	ble.w	8026a38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80266da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80266de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80266e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80266e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266e8:	eef0 6a62 	vmov.f32	s13, s5
 80266ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80266f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266f8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80266fc:	eef0 6a43 	vmov.f32	s13, s6
 8026700:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026704:	ee16 5a90 	vmov	r5, s13
 8026708:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802670c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026710:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026714:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026718:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802671c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026720:	ee12 2a90 	vmov	r2, s5
 8026724:	eef0 2a47 	vmov.f32	s5, s14
 8026728:	fb92 f3f3 	sdiv	r3, r2, r3
 802672c:	ee13 2a10 	vmov	r2, s6
 8026730:	9327      	str	r3, [sp, #156]	; 0x9c
 8026732:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026734:	eeb0 3a67 	vmov.f32	s6, s15
 8026738:	fb92 f3f3 	sdiv	r3, r2, r3
 802673c:	9328      	str	r3, [sp, #160]	; 0xa0
 802673e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026740:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026742:	3b01      	subs	r3, #1
 8026744:	9316      	str	r3, [sp, #88]	; 0x58
 8026746:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026748:	bf08      	it	eq
 802674a:	4613      	moveq	r3, r2
 802674c:	9307      	str	r3, [sp, #28]
 802674e:	e5f9      	b.n	8026344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8026750:	2800      	cmp	r0, #0
 8026752:	f43f ae6b 	beq.w	802642c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026756:	f818 1001 	ldrb.w	r1, [r8, r1]
 802675a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802675e:	9108      	str	r1, [sp, #32]
 8026760:	0e09      	lsrs	r1, r1, #24
 8026762:	9110      	str	r1, [sp, #64]	; 0x40
 8026764:	e662      	b.n	802642c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026766:	f113 0801 	adds.w	r8, r3, #1
 802676a:	f53f af74 	bmi.w	8026656 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802676e:	4541      	cmp	r1, r8
 8026770:	f6ff af71 	blt.w	8026656 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026774:	f11c 0801 	adds.w	r8, ip, #1
 8026778:	f53f af6d 	bmi.w	8026656 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802677c:	45c6      	cmp	lr, r8
 802677e:	f6ff af6a 	blt.w	8026656 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026782:	b209      	sxth	r1, r1
 8026784:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026788:	fa0f f38e 	sxth.w	r3, lr
 802678c:	9100      	str	r1, [sp, #0]
 802678e:	4639      	mov	r1, r7
 8026790:	9301      	str	r3, [sp, #4]
 8026792:	4633      	mov	r3, r6
 8026794:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802679a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802679c:	f7ff fc7b 	bl	8026096 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80267a0:	e759      	b.n	8026656 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80267a2:	bf00      	nop
 80267a4:	fffff800 	.word	0xfffff800
 80267a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80267aa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80267ae:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80267b0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80267b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80267b6:	1427      	asrs	r7, r4, #16
 80267b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80267ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80267be:	142b      	asrs	r3, r5, #16
 80267c0:	fb01 7303 	mla	r3, r1, r3, r7
 80267c4:	18e7      	adds	r7, r4, r3
 80267c6:	5ce3      	ldrb	r3, [r4, r3]
 80267c8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80267cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80267d0:	2a00      	cmp	r2, #0
 80267d2:	f000 8127 	beq.w	8026a24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80267d6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80267da:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80267de:	940d      	str	r4, [sp, #52]	; 0x34
 80267e0:	0e24      	lsrs	r4, r4, #24
 80267e2:	9414      	str	r4, [sp, #80]	; 0x50
 80267e4:	b170      	cbz	r0, 8026804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80267e6:	eb07 0e01 	add.w	lr, r7, r1
 80267ea:	5c79      	ldrb	r1, [r7, r1]
 80267ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267f0:	9109      	str	r1, [sp, #36]	; 0x24
 80267f2:	0e09      	lsrs	r1, r1, #24
 80267f4:	9111      	str	r1, [sp, #68]	; 0x44
 80267f6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80267fa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267fe:	910e      	str	r1, [sp, #56]	; 0x38
 8026800:	0e09      	lsrs	r1, r1, #24
 8026802:	9115      	str	r1, [sp, #84]	; 0x54
 8026804:	b292      	uxth	r2, r2
 8026806:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026808:	b280      	uxth	r0, r0
 802680a:	fb02 f800 	mul.w	r8, r2, r0
 802680e:	0112      	lsls	r2, r2, #4
 8026810:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026814:	eba2 0e08 	sub.w	lr, r2, r8
 8026818:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802681c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802681e:	b280      	uxth	r0, r0
 8026820:	fa1f fe8e 	uxth.w	lr, lr
 8026824:	1a09      	subs	r1, r1, r0
 8026826:	fb0e f202 	mul.w	r2, lr, r2
 802682a:	b289      	uxth	r1, r1
 802682c:	fb01 220c 	mla	r2, r1, ip, r2
 8026830:	fb00 2204 	mla	r2, r0, r4, r2
 8026834:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026836:	fb08 2204 	mla	r2, r8, r4, r2
 802683a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802683e:	2a00      	cmp	r2, #0
 8026840:	f000 80e5 	beq.w	8026a0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8026844:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026848:	d019      	beq.n	802687e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802684a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802684e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026852:	fb0c fa0a 	mul.w	sl, ip, sl
 8026856:	fb0c fc03 	mul.w	ip, ip, r3
 802685a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802685e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026862:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026866:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802686a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802686e:	4453      	add	r3, sl
 8026870:	0a3f      	lsrs	r7, r7, #8
 8026872:	0a1b      	lsrs	r3, r3, #8
 8026874:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026878:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802687c:	433b      	orrs	r3, r7
 802687e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026880:	2cff      	cmp	r4, #255	; 0xff
 8026882:	d020      	beq.n	80268c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8026884:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026886:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802688a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802688c:	4367      	muls	r7, r4
 802688e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026890:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026894:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026898:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802689a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802689e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80268a6:	44bc      	add	ip, r7
 80268a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80268ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80268b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268c0:	ea4c 040a 	orr.w	r4, ip, sl
 80268c4:	940d      	str	r4, [sp, #52]	; 0x34
 80268c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80268c8:	2cff      	cmp	r4, #255	; 0xff
 80268ca:	d020      	beq.n	802690e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80268cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80268ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80268d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80268d4:	4367      	muls	r7, r4
 80268d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80268d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80268dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80268e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80268e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80268e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80268ee:	44bc      	add	ip, r7
 80268f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80268f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80268fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026904:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026908:	ea4c 040a 	orr.w	r4, ip, sl
 802690c:	9409      	str	r4, [sp, #36]	; 0x24
 802690e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026910:	2cff      	cmp	r4, #255	; 0xff
 8026912:	d020      	beq.n	8026956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8026914:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026916:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802691a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802691c:	4367      	muls	r7, r4
 802691e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026920:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026924:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026928:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802692a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802692e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026932:	fb04 fa0a 	mul.w	sl, r4, sl
 8026936:	44bc      	add	ip, r7
 8026938:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802693c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026940:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026944:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026948:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802694c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026950:	ea4c 040a 	orr.w	r4, ip, sl
 8026954:	940e      	str	r4, [sp, #56]	; 0x38
 8026956:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026958:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802695c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026960:	43d2      	mvns	r2, r2
 8026962:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026966:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026968:	b2d2      	uxtb	r2, r2
 802696a:	fb0e f707 	mul.w	r7, lr, r7
 802696e:	fb01 770c 	mla	r7, r1, ip, r7
 8026972:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026976:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026978:	fb00 770c 	mla	r7, r0, ip, r7
 802697c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026980:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026982:	fb08 770c 	mla	r7, r8, ip, r7
 8026986:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802698a:	fb0e fe0c 	mul.w	lr, lr, ip
 802698e:	0a3f      	lsrs	r7, r7, #8
 8026990:	fb01 e303 	mla	r3, r1, r3, lr
 8026994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026996:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802699a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802699e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80269a0:	fb00 330a 	mla	r3, r0, sl, r3
 80269a4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80269a8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80269ac:	f8b9 3000 	ldrh.w	r3, [r9]
 80269b0:	1218      	asrs	r0, r3, #8
 80269b2:	10d9      	asrs	r1, r3, #3
 80269b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80269b8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80269bc:	00db      	lsls	r3, r3, #3
 80269be:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80269c2:	4350      	muls	r0, r2
 80269c4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80269c8:	b2db      	uxtb	r3, r3
 80269ca:	4351      	muls	r1, r2
 80269cc:	ea47 070c 	orr.w	r7, r7, ip
 80269d0:	4353      	muls	r3, r2
 80269d2:	1c42      	adds	r2, r0, #1
 80269d4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80269d8:	0c3a      	lsrs	r2, r7, #16
 80269da:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80269de:	4a18      	ldr	r2, [pc, #96]	; (8026a40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80269e0:	b2c0      	uxtb	r0, r0
 80269e2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80269e6:	1c4a      	adds	r2, r1, #1
 80269e8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80269ec:	0a3a      	lsrs	r2, r7, #8
 80269ee:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80269f2:	00c9      	lsls	r1, r1, #3
 80269f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80269f8:	4301      	orrs	r1, r0
 80269fa:	1c58      	adds	r0, r3, #1
 80269fc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026a00:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026a04:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026a08:	4308      	orrs	r0, r1
 8026a0a:	f8a9 0000 	strh.w	r0, [r9]
 8026a0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026a10:	f109 0902 	add.w	r9, r9, #2
 8026a14:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026a16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026a1a:	441a      	add	r2, r3
 8026a1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a1e:	9225      	str	r2, [sp, #148]	; 0x94
 8026a20:	441d      	add	r5, r3
 8026a22:	e64c      	b.n	80266be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026a24:	2800      	cmp	r0, #0
 8026a26:	f43f aeed 	beq.w	8026804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026a2a:	5c79      	ldrb	r1, [r7, r1]
 8026a2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026a30:	9109      	str	r1, [sp, #36]	; 0x24
 8026a32:	0e09      	lsrs	r1, r1, #24
 8026a34:	9111      	str	r1, [sp, #68]	; 0x44
 8026a36:	e6e5      	b.n	8026804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026a38:	b01b      	add	sp, #108	; 0x6c
 8026a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a3e:	bf00      	nop
 8026a40:	fffff800 	.word	0xfffff800

08026a44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8026a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a48:	b085      	sub	sp, #20
 8026a4a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8026a4e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026a52:	2800      	cmp	r0, #0
 8026a54:	9103      	str	r1, [sp, #12]
 8026a56:	fb00 7406 	mla	r4, r0, r6, r7
 8026a5a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8026a5e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8026a62:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8026a66:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8026a6a:	eb03 0904 	add.w	r9, r3, r4
 8026a6e:	9501      	str	r5, [sp, #4]
 8026a70:	f2c0 8150 	blt.w	8026d14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026a74:	4583      	cmp	fp, r0
 8026a76:	f340 814d 	ble.w	8026d14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026a7a:	2f00      	cmp	r7, #0
 8026a7c:	f2c0 8146 	blt.w	8026d0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026a80:	42be      	cmp	r6, r7
 8026a82:	f340 8143 	ble.w	8026d0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026a86:	f813 c004 	ldrb.w	ip, [r3, r4]
 8026a8a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8026a8e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8026a92:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026a96:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8026a9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a9e:	4355      	muls	r5, r2
 8026aa0:	fb0c f203 	mul.w	r2, ip, r3
 8026aa4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8026aa8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8026aac:	441d      	add	r5, r3
 8026aae:	f102 0320 	add.w	r3, r2, #32
 8026ab2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026ab6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026aba:	0a1b      	lsrs	r3, r3, #8
 8026abc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ac0:	431c      	orrs	r4, r3
 8026ac2:	1c7b      	adds	r3, r7, #1
 8026ac4:	f100 812b 	bmi.w	8026d1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026ac8:	429e      	cmp	r6, r3
 8026aca:	f340 8128 	ble.w	8026d1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8026ace:	2900      	cmp	r1, #0
 8026ad0:	f000 8128 	beq.w	8026d24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8026ad4:	9a01      	ldr	r2, [sp, #4]
 8026ad6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026ada:	8855      	ldrh	r5, [r2, #2]
 8026adc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026ae0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8026ae4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026ae8:	fb08 f802 	mul.w	r8, r8, r2
 8026aec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026af0:	435d      	muls	r5, r3
 8026af2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026af6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026afa:	44d0      	add	r8, sl
 8026afc:	f105 0a20 	add.w	sl, r5, #32
 8026b00:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026b04:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026b08:	0a2d      	lsrs	r5, r5, #8
 8026b0a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026b0e:	432a      	orrs	r2, r5
 8026b10:	3001      	adds	r0, #1
 8026b12:	f100 810d 	bmi.w	8026d30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026b16:	4583      	cmp	fp, r0
 8026b18:	f340 810a 	ble.w	8026d30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026b1c:	f1be 0f00 	cmp.w	lr, #0
 8026b20:	f000 810b 	beq.w	8026d3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8026b24:	2f00      	cmp	r7, #0
 8026b26:	f2c0 8100 	blt.w	8026d2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026b2a:	42be      	cmp	r6, r7
 8026b2c:	f340 80fd 	ble.w	8026d2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026b30:	9801      	ldr	r0, [sp, #4]
 8026b32:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026b36:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026b3a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8026b3e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026b42:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026b46:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8026b4a:	fb0a fa00 	mul.w	sl, sl, r0
 8026b4e:	fb05 f808 	mul.w	r8, r5, r8
 8026b52:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026b56:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8026b5a:	4482      	add	sl, r0
 8026b5c:	f108 0020 	add.w	r0, r8, #32
 8026b60:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026b64:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026b68:	0a00      	lsrs	r0, r0, #8
 8026b6a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b6e:	ea4b 0b00 	orr.w	fp, fp, r0
 8026b72:	3701      	adds	r7, #1
 8026b74:	f100 80e6 	bmi.w	8026d44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026b78:	42be      	cmp	r6, r7
 8026b7a:	f340 80e3 	ble.w	8026d44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026b7e:	2900      	cmp	r1, #0
 8026b80:	f000 80e3 	beq.w	8026d4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026b84:	3601      	adds	r6, #1
 8026b86:	9801      	ldr	r0, [sp, #4]
 8026b88:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026b8c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026b90:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8026b94:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8026b98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026b9c:	fb09 f906 	mul.w	r9, r9, r6
 8026ba0:	fb07 f800 	mul.w	r8, r7, r0
 8026ba4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8026ba8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026bac:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8026bb0:	44d1      	add	r9, sl
 8026bb2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8026bb6:	f108 0020 	add.w	r0, r8, #32
 8026bba:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026bbe:	0a00      	lsrs	r0, r0, #8
 8026bc0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026bc4:	4330      	orrs	r0, r6
 8026bc6:	b28e      	uxth	r6, r1
 8026bc8:	fa1f f98e 	uxth.w	r9, lr
 8026bcc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026bd0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8026bd4:	fb06 f809 	mul.w	r8, r6, r9
 8026bd8:	0136      	lsls	r6, r6, #4
 8026bda:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026bde:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026be2:	9601      	str	r6, [sp, #4]
 8026be4:	ea4a 0404 	orr.w	r4, sl, r4
 8026be8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026bec:	fa1f f689 	uxth.w	r6, r9
 8026bf0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026bf4:	fb11 f90e 	smulbb	r9, r1, lr
 8026bf8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026bfc:	9602      	str	r6, [sp, #8]
 8026bfe:	4626      	mov	r6, r4
 8026c00:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026c04:	f1ce 0410 	rsb	r4, lr, #16
 8026c08:	ea4a 0202 	orr.w	r2, sl, r2
 8026c0c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026c10:	1a64      	subs	r4, r4, r1
 8026c12:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026c16:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026c1e:	434a      	muls	r2, r1
 8026c20:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026c24:	ea4a 0000 	orr.w	r0, sl, r0
 8026c28:	9903      	ldr	r1, [sp, #12]
 8026c2a:	fb04 2406 	mla	r4, r4, r6, r2
 8026c2e:	9e02      	ldr	r6, [sp, #8]
 8026c30:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026c34:	fb09 4200 	mla	r2, r9, r0, r4
 8026c38:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026c3c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026c40:	8808      	ldrh	r0, [r1, #0]
 8026c42:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026c46:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8026c4a:	ea44 0b0b 	orr.w	fp, r4, fp
 8026c4e:	9c01      	ldr	r4, [sp, #4]
 8026c50:	b289      	uxth	r1, r1
 8026c52:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8026c56:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026c5a:	1ba4      	subs	r4, r4, r6
 8026c5c:	9e01      	ldr	r6, [sp, #4]
 8026c5e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026c62:	eba6 0608 	sub.w	r6, r6, r8
 8026c66:	b2a4      	uxth	r4, r4
 8026c68:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026c6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c70:	b2b6      	uxth	r6, r6
 8026c72:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026c76:	4373      	muls	r3, r6
 8026c78:	ea42 0e0e 	orr.w	lr, r2, lr
 8026c7c:	fb0c 3304 	mla	r3, ip, r4, r3
 8026c80:	9c02      	ldr	r4, [sp, #8]
 8026c82:	fa1f f28e 	uxth.w	r2, lr
 8026c86:	fb04 3505 	mla	r5, r4, r5, r3
 8026c8a:	10d4      	asrs	r4, r2, #3
 8026c8c:	fb08 5707 	mla	r7, r8, r7, r5
 8026c90:	1215      	asrs	r5, r2, #8
 8026c92:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8026c96:	00d2      	lsls	r2, r2, #3
 8026c98:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026c9c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026ca0:	b2d2      	uxtb	r2, r2
 8026ca2:	434f      	muls	r7, r1
 8026ca4:	1c7b      	adds	r3, r7, #1
 8026ca6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8026caa:	1203      	asrs	r3, r0, #8
 8026cac:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026cb0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026cb4:	b2ff      	uxtb	r7, r7
 8026cb6:	fb13 f307 	smulbb	r3, r3, r7
 8026cba:	fb05 3501 	mla	r5, r5, r1, r3
 8026cbe:	10c3      	asrs	r3, r0, #3
 8026cc0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026cc4:	b2ad      	uxth	r5, r5
 8026cc6:	fb13 f307 	smulbb	r3, r3, r7
 8026cca:	fb04 3401 	mla	r4, r4, r1, r3
 8026cce:	00c3      	lsls	r3, r0, #3
 8026cd0:	b2db      	uxtb	r3, r3
 8026cd2:	b2a4      	uxth	r4, r4
 8026cd4:	fb13 f307 	smulbb	r3, r3, r7
 8026cd8:	fb02 3101 	mla	r1, r2, r1, r3
 8026cdc:	1c6b      	adds	r3, r5, #1
 8026cde:	1c62      	adds	r2, r4, #1
 8026ce0:	b289      	uxth	r1, r1
 8026ce2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026ce6:	1c4b      	adds	r3, r1, #1
 8026ce8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026cec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026cf0:	9a03      	ldr	r2, [sp, #12]
 8026cf2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026cf6:	0964      	lsrs	r4, r4, #5
 8026cf8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026cfc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8026d00:	432b      	orrs	r3, r5
 8026d02:	4323      	orrs	r3, r4
 8026d04:	8013      	strh	r3, [r2, #0]
 8026d06:	b005      	add	sp, #20
 8026d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d0c:	f04f 0c00 	mov.w	ip, #0
 8026d10:	4664      	mov	r4, ip
 8026d12:	e6d6      	b.n	8026ac2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8026d14:	2300      	movs	r3, #0
 8026d16:	469c      	mov	ip, r3
 8026d18:	461a      	mov	r2, r3
 8026d1a:	461c      	mov	r4, r3
 8026d1c:	e6f8      	b.n	8026b10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026d1e:	2300      	movs	r3, #0
 8026d20:	461a      	mov	r2, r3
 8026d22:	e6f5      	b.n	8026b10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026d24:	460b      	mov	r3, r1
 8026d26:	460a      	mov	r2, r1
 8026d28:	e6f2      	b.n	8026b10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026d2a:	2500      	movs	r5, #0
 8026d2c:	46ab      	mov	fp, r5
 8026d2e:	e720      	b.n	8026b72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8026d30:	2700      	movs	r7, #0
 8026d32:	463d      	mov	r5, r7
 8026d34:	4638      	mov	r0, r7
 8026d36:	46bb      	mov	fp, r7
 8026d38:	e745      	b.n	8026bc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026d3a:	4677      	mov	r7, lr
 8026d3c:	4675      	mov	r5, lr
 8026d3e:	4670      	mov	r0, lr
 8026d40:	46f3      	mov	fp, lr
 8026d42:	e740      	b.n	8026bc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026d44:	2700      	movs	r7, #0
 8026d46:	4638      	mov	r0, r7
 8026d48:	e73d      	b.n	8026bc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026d4a:	460f      	mov	r7, r1
 8026d4c:	4608      	mov	r0, r1
 8026d4e:	e73a      	b.n	8026bc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08026d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d54:	b097      	sub	sp, #92	; 0x5c
 8026d56:	9214      	str	r2, [sp, #80]	; 0x50
 8026d58:	9308      	str	r3, [sp, #32]
 8026d5a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8026d5c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8026d60:	9015      	str	r0, [sp, #84]	; 0x54
 8026d62:	9312      	str	r3, [sp, #72]	; 0x48
 8026d64:	6850      	ldr	r0, [r2, #4]
 8026d66:	9111      	str	r1, [sp, #68]	; 0x44
 8026d68:	6812      	ldr	r2, [r2, #0]
 8026d6a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8026d6e:	fb00 1303 	mla	r3, r0, r3, r1
 8026d72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026d76:	9309      	str	r3, [sp, #36]	; 0x24
 8026d78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d7a:	681b      	ldr	r3, [r3, #0]
 8026d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8026d7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d80:	685b      	ldr	r3, [r3, #4]
 8026d82:	930c      	str	r3, [sp, #48]	; 0x30
 8026d84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8026d88:	930a      	str	r3, [sp, #40]	; 0x28
 8026d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026d8c:	2b00      	cmp	r3, #0
 8026d8e:	dc03      	bgt.n	8026d98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	f340 83cd 	ble.w	8027532 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8026d98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026da2:	1e48      	subs	r0, r1, #1
 8026da4:	1e55      	subs	r5, r2, #1
 8026da6:	9b08      	ldr	r3, [sp, #32]
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	f340 81a5 	ble.w	80270f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8026dae:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8026db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026db2:	1436      	asrs	r6, r6, #16
 8026db4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026db8:	d406      	bmi.n	8026dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026dba:	4286      	cmp	r6, r0
 8026dbc:	da04      	bge.n	8026dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026dbe:	2b00      	cmp	r3, #0
 8026dc0:	db02      	blt.n	8026dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026dc2:	42ab      	cmp	r3, r5
 8026dc4:	f2c0 8199 	blt.w	80270fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026dc8:	3601      	adds	r6, #1
 8026dca:	f100 8186 	bmi.w	80270da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026dce:	42b1      	cmp	r1, r6
 8026dd0:	f2c0 8183 	blt.w	80270da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026dd4:	3301      	adds	r3, #1
 8026dd6:	f100 8180 	bmi.w	80270da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026dda:	429a      	cmp	r2, r3
 8026ddc:	f2c0 817d 	blt.w	80270da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026de0:	9b08      	ldr	r3, [sp, #32]
 8026de2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026de6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026de8:	9313      	str	r3, [sp, #76]	; 0x4c
 8026dea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026dec:	2b00      	cmp	r3, #0
 8026dee:	f340 81a6 	ble.w	802713e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026df4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8026df6:	1418      	asrs	r0, r3, #16
 8026df8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026dfa:	142d      	asrs	r5, r5, #16
 8026dfc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026e02:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026e06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026e08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026e0c:	f100 81fa 	bmi.w	8027204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026e10:	f102 3eff 	add.w	lr, r2, #4294967295
 8026e14:	4575      	cmp	r5, lr
 8026e16:	f280 81f5 	bge.w	8027204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026e1a:	2800      	cmp	r0, #0
 8026e1c:	f2c0 81f2 	blt.w	8027204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026e20:	f103 3eff 	add.w	lr, r3, #4294967295
 8026e24:	4570      	cmp	r0, lr
 8026e26:	f280 81ed 	bge.w	8027204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026e2a:	b212      	sxth	r2, r2
 8026e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026e2e:	fa1f fe81 	uxth.w	lr, r1
 8026e32:	fb00 5002 	mla	r0, r0, r2, r5
 8026e36:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026e3a:	eb03 0a00 	add.w	sl, r3, r0
 8026e3e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026e42:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026e46:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026e4a:	b29b      	uxth	r3, r3
 8026e4c:	f1bc 0f00 	cmp.w	ip, #0
 8026e50:	f000 81bb 	beq.w	80271ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8026e54:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026e58:	eb0a 0b02 	add.w	fp, sl, r2
 8026e5c:	fa1f fa8c 	uxth.w	sl, ip
 8026e60:	940d      	str	r4, [sp, #52]	; 0x34
 8026e62:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e66:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026e6a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026e6e:	eba5 050e 	sub.w	r5, r5, lr
 8026e72:	940e      	str	r4, [sp, #56]	; 0x38
 8026e74:	fa1f fa8a 	uxth.w	sl, sl
 8026e78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026e7a:	b2ad      	uxth	r5, r5
 8026e7c:	eba3 030a 	sub.w	r3, r3, sl
 8026e80:	fb08 f505 	mul.w	r5, r8, r5
 8026e84:	b29b      	uxth	r3, r3
 8026e86:	fb09 5303 	mla	r3, r9, r3, r5
 8026e8a:	fb0a 3304 	mla	r3, sl, r4, r3
 8026e8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026e90:	fb0e 3304 	mla	r3, lr, r4, r3
 8026e94:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	f000 8111 	beq.w	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026e9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ea0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026ea4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026ea8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026eac:	f000 8192 	beq.w	80271d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026eb0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026eb4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026eb8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026ebc:	fb0a fe0e 	mul.w	lr, sl, lr
 8026ec0:	fb09 f000 	mul.w	r0, r9, r0
 8026ec4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026ec8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026ecc:	f100 0b20 	add.w	fp, r0, #32
 8026ed0:	44ce      	add	lr, r9
 8026ed2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026ed6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026eda:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026ede:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026ee2:	ea4e 0909 	orr.w	r9, lr, r9
 8026ee6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026eea:	8868      	ldrh	r0, [r5, #2]
 8026eec:	d019      	beq.n	8026f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026eee:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026ef2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026ef6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026efa:	fb0a fe0e 	mul.w	lr, sl, lr
 8026efe:	fb08 f800 	mul.w	r8, r8, r0
 8026f02:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026f06:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026f0a:	f108 0b20 	add.w	fp, r8, #32
 8026f0e:	4486      	add	lr, r0
 8026f10:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026f14:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026f18:	0a00      	lsrs	r0, r0, #8
 8026f1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026f1e:	ea4e 0000 	orr.w	r0, lr, r0
 8026f22:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026f26:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026f2a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026f2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026f32:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026f36:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026f3a:	ea4e 0909 	orr.w	r9, lr, r9
 8026f3e:	ea4a 0000 	orr.w	r0, sl, r0
 8026f42:	f1bc 0f00 	cmp.w	ip, #0
 8026f46:	f000 8147 	beq.w	80271d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8026f4a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026f4e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026f50:	3a01      	subs	r2, #1
 8026f52:	2cff      	cmp	r4, #255	; 0xff
 8026f54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026f58:	f102 0202 	add.w	r2, r2, #2
 8026f5c:	eb05 0e02 	add.w	lr, r5, r2
 8026f60:	5aaa      	ldrh	r2, [r5, r2]
 8026f62:	d018      	beq.n	8026f96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026f64:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026f68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f6c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026f70:	fb04 fa02 	mul.w	sl, r4, r2
 8026f74:	fb08 f805 	mul.w	r8, r8, r5
 8026f78:	f10a 0520 	add.w	r5, sl, #32
 8026f7c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026f80:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026f84:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026f88:	4442      	add	r2, r8
 8026f8a:	0a2d      	lsrs	r5, r5, #8
 8026f8c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026f90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026f94:	432a      	orrs	r2, r5
 8026f96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026f98:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026f9c:	2cff      	cmp	r4, #255	; 0xff
 8026f9e:	d01a      	beq.n	8026fd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8026fa0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026fa4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026fa8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026fac:	fb04 fa05 	mul.w	sl, r4, r5
 8026fb0:	fb08 f80e 	mul.w	r8, r8, lr
 8026fb4:	f10a 0e20 	add.w	lr, sl, #32
 8026fb8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026fbc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026fc0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026fc4:	4445      	add	r5, r8
 8026fc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026fca:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026fce:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026fd2:	ea45 050e 	orr.w	r5, r5, lr
 8026fd6:	fb1c fe01 	smulbb	lr, ip, r1
 8026fda:	f1cc 0810 	rsb	r8, ip, #16
 8026fde:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026fe2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026fe6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026fea:	eba8 0801 	sub.w	r8, r8, r1
 8026fee:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026ff2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ff6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026ffa:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026ffe:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027002:	ea4a 0202 	orr.w	r2, sl, r2
 8027006:	4341      	muls	r1, r0
 8027008:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802700c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027010:	fb09 1108 	mla	r1, r9, r8, r1
 8027014:	ea4b 0505 	orr.w	r5, fp, r5
 8027018:	fb0c 1102 	mla	r1, ip, r2, r1
 802701c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027020:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027024:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027028:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802702c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027030:	ea42 0e0e 	orr.w	lr, r2, lr
 8027034:	fa1f f28e 	uxth.w	r2, lr
 8027038:	2bff      	cmp	r3, #255	; 0xff
 802703a:	d103      	bne.n	8027044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802703c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802703e:	29ff      	cmp	r1, #255	; 0xff
 8027040:	f000 80de 	beq.w	8027200 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027046:	1215      	asrs	r5, r2, #8
 8027048:	8838      	ldrh	r0, [r7, #0]
 802704a:	434b      	muls	r3, r1
 802704c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027050:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027052:	f103 0c01 	add.w	ip, r3, #1
 8027056:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802705a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802705e:	fa5f fc83 	uxtb.w	ip, r3
 8027062:	1203      	asrs	r3, r0, #8
 8027064:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027068:	fb13 f30c 	smulbb	r3, r3, ip
 802706c:	fb05 3501 	mla	r5, r5, r1, r3
 8027070:	10c3      	asrs	r3, r0, #3
 8027072:	10d1      	asrs	r1, r2, #3
 8027074:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027078:	00d2      	lsls	r2, r2, #3
 802707a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802707e:	b2ad      	uxth	r5, r5
 8027080:	fb13 f30c 	smulbb	r3, r3, ip
 8027084:	b2d2      	uxtb	r2, r2
 8027086:	fb01 3104 	mla	r1, r1, r4, r3
 802708a:	00c3      	lsls	r3, r0, #3
 802708c:	b2db      	uxtb	r3, r3
 802708e:	b289      	uxth	r1, r1
 8027090:	fb13 f30c 	smulbb	r3, r3, ip
 8027094:	fb02 3304 	mla	r3, r2, r4, r3
 8027098:	b29a      	uxth	r2, r3
 802709a:	1c6b      	adds	r3, r5, #1
 802709c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80270a0:	1c53      	adds	r3, r2, #1
 80270a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80270a6:	1c4a      	adds	r2, r1, #1
 80270a8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80270ac:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80270b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80270b4:	0949      	lsrs	r1, r1, #5
 80270b6:	432b      	orrs	r3, r5
 80270b8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80270bc:	430b      	orrs	r3, r1
 80270be:	803b      	strh	r3, [r7, #0]
 80270c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80270c2:	3702      	adds	r7, #2
 80270c4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80270c6:	4413      	add	r3, r2
 80270c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80270ca:	9321      	str	r3, [sp, #132]	; 0x84
 80270cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80270ce:	441a      	add	r2, r3
 80270d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80270d2:	3b01      	subs	r3, #1
 80270d4:	9222      	str	r2, [sp, #136]	; 0x88
 80270d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80270d8:	e687      	b.n	8026dea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80270da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80270dc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80270de:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80270e0:	4433      	add	r3, r6
 80270e2:	9321      	str	r3, [sp, #132]	; 0x84
 80270e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80270e6:	441c      	add	r4, r3
 80270e8:	9b08      	ldr	r3, [sp, #32]
 80270ea:	3b01      	subs	r3, #1
 80270ec:	9422      	str	r4, [sp, #136]	; 0x88
 80270ee:	9308      	str	r3, [sp, #32]
 80270f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270f2:	3302      	adds	r3, #2
 80270f4:	9309      	str	r3, [sp, #36]	; 0x24
 80270f6:	e656      	b.n	8026da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80270f8:	d028      	beq.n	802714c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80270fa:	9b08      	ldr	r3, [sp, #32]
 80270fc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80270fe:	3b01      	subs	r3, #1
 8027100:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8027102:	fb00 5003 	mla	r0, r0, r3, r5
 8027106:	1400      	asrs	r0, r0, #16
 8027108:	f53f ae6a 	bmi.w	8026de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802710c:	3901      	subs	r1, #1
 802710e:	4288      	cmp	r0, r1
 8027110:	f6bf ae66 	bge.w	8026de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027114:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027116:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027118:	fb01 0303 	mla	r3, r1, r3, r0
 802711c:	141b      	asrs	r3, r3, #16
 802711e:	f53f ae5f 	bmi.w	8026de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027122:	3a01      	subs	r2, #1
 8027124:	4293      	cmp	r3, r2
 8027126:	f6bf ae5b 	bge.w	8026de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802712a:	9b08      	ldr	r3, [sp, #32]
 802712c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027130:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027134:	9313      	str	r3, [sp, #76]	; 0x4c
 8027136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027138:	2b00      	cmp	r3, #0
 802713a:	f300 8082 	bgt.w	8027242 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802713e:	9b08      	ldr	r3, [sp, #32]
 8027140:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027146:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802714a:	9309      	str	r3, [sp, #36]	; 0x24
 802714c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802714e:	2b00      	cmp	r3, #0
 8027150:	f340 81ef 	ble.w	8027532 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8027154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027158:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802715a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802715e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027162:	eef0 6a62 	vmov.f32	s13, s5
 8027166:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802716a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802716e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027172:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8027176:	eef0 6a43 	vmov.f32	s13, s6
 802717a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802717e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8027182:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027186:	ee61 7a27 	vmul.f32	s15, s2, s15
 802718a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802718e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027192:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027196:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802719a:	ee12 2a90 	vmov	r2, s5
 802719e:	eef0 2a47 	vmov.f32	s5, s14
 80271a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80271a6:	ee13 2a10 	vmov	r2, s6
 80271aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80271ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80271ae:	eeb0 3a67 	vmov.f32	s6, s15
 80271b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80271b6:	9324      	str	r3, [sp, #144]	; 0x90
 80271b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80271ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80271bc:	3b01      	subs	r3, #1
 80271be:	9311      	str	r3, [sp, #68]	; 0x44
 80271c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80271c2:	bf08      	it	eq
 80271c4:	4613      	moveq	r3, r2
 80271c6:	9308      	str	r3, [sp, #32]
 80271c8:	e5df      	b.n	8026d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80271ca:	fb08 f505 	mul.w	r5, r8, r5
 80271ce:	fb09 5303 	mla	r3, r9, r3, r5
 80271d2:	e65f      	b.n	8026e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80271d4:	4681      	mov	r9, r0
 80271d6:	e686      	b.n	8026ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80271d8:	f1c1 0210 	rsb	r2, r1, #16
 80271dc:	4341      	muls	r1, r0
 80271de:	fb09 1902 	mla	r9, r9, r2, r1
 80271e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80271e6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80271ea:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80271ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80271f2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80271f6:	ea42 0909 	orr.w	r9, r2, r9
 80271fa:	fa1f f289 	uxth.w	r2, r9
 80271fe:	e71b      	b.n	8027038 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8027200:	803a      	strh	r2, [r7, #0]
 8027202:	e75d      	b.n	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027204:	f115 0e01 	adds.w	lr, r5, #1
 8027208:	f53f af5a 	bmi.w	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802720c:	4572      	cmp	r2, lr
 802720e:	f6ff af57 	blt.w	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027212:	f110 0e01 	adds.w	lr, r0, #1
 8027216:	f53f af53 	bmi.w	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802721a:	4573      	cmp	r3, lr
 802721c:	f6ff af50 	blt.w	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027220:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027222:	b21b      	sxth	r3, r3
 8027224:	b212      	sxth	r2, r2
 8027226:	9502      	str	r5, [sp, #8]
 8027228:	9301      	str	r3, [sp, #4]
 802722a:	9200      	str	r2, [sp, #0]
 802722c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027230:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027234:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027238:	4639      	mov	r1, r7
 802723a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802723c:	f7ff fc02 	bl	8026a44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027240:	e73e      	b.n	80270c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027244:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802724a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802724e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027250:	fa1f fc82 	uxth.w	ip, r2
 8027254:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802725a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802725e:	141f      	asrs	r7, r3, #16
 8027260:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027262:	141b      	asrs	r3, r3, #16
 8027264:	fb01 3707 	mla	r7, r1, r7, r3
 8027268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802726a:	eb03 0a07 	add.w	sl, r3, r7
 802726e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027272:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027276:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802727a:	b29b      	uxth	r3, r3
 802727c:	2d00      	cmp	r5, #0
 802727e:	f000 813d 	beq.w	80274fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8027282:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027286:	eb0a 0b01 	add.w	fp, sl, r1
 802728a:	fa1f fa85 	uxth.w	sl, r5
 802728e:	940f      	str	r4, [sp, #60]	; 0x3c
 8027290:	fb0a fc0c 	mul.w	ip, sl, ip
 8027294:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027298:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802729c:	eba0 000c 	sub.w	r0, r0, ip
 80272a0:	9410      	str	r4, [sp, #64]	; 0x40
 80272a2:	fa1f fa8a 	uxth.w	sl, sl
 80272a6:	b280      	uxth	r0, r0
 80272a8:	eba3 030a 	sub.w	r3, r3, sl
 80272ac:	fb08 f000 	mul.w	r0, r8, r0
 80272b0:	b29b      	uxth	r3, r3
 80272b2:	fb09 0303 	mla	r3, r9, r3, r0
 80272b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80272b8:	fb0a 3300 	mla	r3, sl, r0, r3
 80272bc:	fb0c 3304 	mla	r3, ip, r4, r3
 80272c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80272c4:	2b00      	cmp	r3, #0
 80272c6:	f000 810b 	beq.w	80274e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 80272ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80272cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80272d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80272d2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80272d6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80272da:	f000 8114 	beq.w	8027506 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80272de:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80272e2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80272e6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80272ea:	fb0a fc0c 	mul.w	ip, sl, ip
 80272ee:	fb09 f707 	mul.w	r7, r9, r7
 80272f2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80272f6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80272fa:	f107 0b20 	add.w	fp, r7, #32
 80272fe:	44cc      	add	ip, r9
 8027300:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027304:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027308:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802730c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027310:	ea4c 0909 	orr.w	r9, ip, r9
 8027314:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027318:	8847      	ldrh	r7, [r0, #2]
 802731a:	d019      	beq.n	8027350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 802731c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027320:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027324:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027328:	fb0a fc0c 	mul.w	ip, sl, ip
 802732c:	fb08 f807 	mul.w	r8, r8, r7
 8027330:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027334:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027338:	f108 0b20 	add.w	fp, r8, #32
 802733c:	44bc      	add	ip, r7
 802733e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027342:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027346:	0a3f      	lsrs	r7, r7, #8
 8027348:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802734c:	ea4c 0707 	orr.w	r7, ip, r7
 8027350:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027354:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027358:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802735c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027360:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027364:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027368:	ea4c 0909 	orr.w	r9, ip, r9
 802736c:	ea4a 0707 	orr.w	r7, sl, r7
 8027370:	2d00      	cmp	r5, #0
 8027372:	f000 80ca 	beq.w	802750a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8027376:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802737a:	3901      	subs	r1, #1
 802737c:	0049      	lsls	r1, r1, #1
 802737e:	3102      	adds	r1, #2
 8027380:	eb00 0c01 	add.w	ip, r0, r1
 8027384:	5a41      	ldrh	r1, [r0, r1]
 8027386:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027388:	28ff      	cmp	r0, #255	; 0xff
 802738a:	d019      	beq.n	80273c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802738c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027390:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027392:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027396:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802739a:	fb04 fa01 	mul.w	sl, r4, r1
 802739e:	fb08 f800 	mul.w	r8, r8, r0
 80273a2:	f10a 0020 	add.w	r0, sl, #32
 80273a6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80273aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80273ae:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80273b2:	4441      	add	r1, r8
 80273b4:	0a00      	lsrs	r0, r0, #8
 80273b6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80273ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80273be:	4301      	orrs	r1, r0
 80273c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80273c2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80273c6:	2cff      	cmp	r4, #255	; 0xff
 80273c8:	d01a      	beq.n	8027400 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 80273ca:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80273ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80273d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80273d6:	fb04 fa00 	mul.w	sl, r4, r0
 80273da:	fb08 f80c 	mul.w	r8, r8, ip
 80273de:	f10a 0c20 	add.w	ip, sl, #32
 80273e2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80273e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80273ea:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80273ee:	4440      	add	r0, r8
 80273f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273f4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80273f8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80273fc:	ea40 000c 	orr.w	r0, r0, ip
 8027400:	fb15 fc02 	smulbb	ip, r5, r2
 8027404:	f1c5 0810 	rsb	r8, r5, #16
 8027408:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802740c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027410:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027414:	eba8 0802 	sub.w	r8, r8, r2
 8027418:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802741c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027420:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027424:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027428:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802742c:	ea4a 0101 	orr.w	r1, sl, r1
 8027430:	437a      	muls	r2, r7
 8027432:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027436:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802743a:	fb09 2208 	mla	r2, r9, r8, r2
 802743e:	ea4b 0000 	orr.w	r0, fp, r0
 8027442:	fb05 2201 	mla	r2, r5, r1, r2
 8027446:	fb0c 2200 	mla	r2, ip, r0, r2
 802744a:	0d57      	lsrs	r7, r2, #21
 802744c:	0952      	lsrs	r2, r2, #5
 802744e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027452:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027456:	433a      	orrs	r2, r7
 8027458:	2bff      	cmp	r3, #255	; 0xff
 802745a:	b292      	uxth	r2, r2
 802745c:	d102      	bne.n	8027464 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802745e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027460:	29ff      	cmp	r1, #255	; 0xff
 8027462:	d063      	beq.n	802752c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8027464:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027466:	1215      	asrs	r5, r2, #8
 8027468:	f8be 1000 	ldrh.w	r1, [lr]
 802746c:	4343      	muls	r3, r0
 802746e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027470:	10cf      	asrs	r7, r1, #3
 8027472:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027476:	1c58      	adds	r0, r3, #1
 8027478:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802747c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027480:	1208      	asrs	r0, r1, #8
 8027482:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027486:	00c9      	lsls	r1, r1, #3
 8027488:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802748c:	b2db      	uxtb	r3, r3
 802748e:	b2c9      	uxtb	r1, r1
 8027490:	fb10 f003 	smulbb	r0, r0, r3
 8027494:	fb11 f103 	smulbb	r1, r1, r3
 8027498:	fb05 0504 	mla	r5, r5, r4, r0
 802749c:	10d0      	asrs	r0, r2, #3
 802749e:	fb17 f703 	smulbb	r7, r7, r3
 80274a2:	00d2      	lsls	r2, r2, #3
 80274a4:	b2ad      	uxth	r5, r5
 80274a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80274aa:	b2d2      	uxtb	r2, r2
 80274ac:	fb00 7004 	mla	r0, r0, r4, r7
 80274b0:	1c6b      	adds	r3, r5, #1
 80274b2:	fb02 1204 	mla	r2, r2, r4, r1
 80274b6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80274ba:	b292      	uxth	r2, r2
 80274bc:	b280      	uxth	r0, r0
 80274be:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80274c2:	1c57      	adds	r7, r2, #1
 80274c4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80274c8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80274cc:	433d      	orrs	r5, r7
 80274ce:	1c47      	adds	r7, r0, #1
 80274d0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80274d4:	097f      	lsrs	r7, r7, #5
 80274d6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80274da:	433d      	orrs	r5, r7
 80274dc:	f8ae 5000 	strh.w	r5, [lr]
 80274e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80274e2:	f10e 0e02 	add.w	lr, lr, #2
 80274e6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80274e8:	4413      	add	r3, r2
 80274ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80274ec:	9321      	str	r3, [sp, #132]	; 0x84
 80274ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80274f0:	441a      	add	r2, r3
 80274f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80274f4:	3b01      	subs	r3, #1
 80274f6:	9222      	str	r2, [sp, #136]	; 0x88
 80274f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80274fa:	e61c      	b.n	8027136 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80274fc:	fb08 f000 	mul.w	r0, r8, r0
 8027500:	fb09 0303 	mla	r3, r9, r3, r0
 8027504:	e6dc      	b.n	80272c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027506:	46b9      	mov	r9, r7
 8027508:	e704      	b.n	8027314 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802750a:	f1c2 0110 	rsb	r1, r2, #16
 802750e:	437a      	muls	r2, r7
 8027510:	fb09 2901 	mla	r9, r9, r1, r2
 8027514:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027518:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802751c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027520:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027524:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027528:	4302      	orrs	r2, r0
 802752a:	e795      	b.n	8027458 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 802752c:	f8ae 2000 	strh.w	r2, [lr]
 8027530:	e7d6      	b.n	80274e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8027532:	b017      	add	sp, #92	; 0x5c
 8027534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027538 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802753c:	b085      	sub	sp, #20
 802753e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8027542:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027546:	2800      	cmp	r0, #0
 8027548:	9103      	str	r1, [sp, #12]
 802754a:	fb00 7406 	mla	r4, r0, r6, r7
 802754e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8027552:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8027556:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802755a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802755e:	eb02 0904 	add.w	r9, r2, r4
 8027562:	9501      	str	r5, [sp, #4]
 8027564:	f2c0 8141 	blt.w	80277ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8027568:	4583      	cmp	fp, r0
 802756a:	f340 813e 	ble.w	80277ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802756e:	2f00      	cmp	r7, #0
 8027570:	f2c0 8137 	blt.w	80277e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027574:	42be      	cmp	r6, r7
 8027576:	f340 8134 	ble.w	80277e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802757a:	f812 c004 	ldrb.w	ip, [r2, r4]
 802757e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8027582:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8027586:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802758a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802758e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027592:	4355      	muls	r5, r2
 8027594:	fb0c f203 	mul.w	r2, ip, r3
 8027598:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802759c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80275a0:	441d      	add	r5, r3
 80275a2:	f102 0320 	add.w	r3, r2, #32
 80275a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80275aa:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80275ae:	0a1b      	lsrs	r3, r3, #8
 80275b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80275b4:	431c      	orrs	r4, r3
 80275b6:	1c7b      	adds	r3, r7, #1
 80275b8:	f100 811c 	bmi.w	80277f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80275bc:	429e      	cmp	r6, r3
 80275be:	f340 8119 	ble.w	80277f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80275c2:	2900      	cmp	r1, #0
 80275c4:	f000 8119 	beq.w	80277fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80275c8:	9a01      	ldr	r2, [sp, #4]
 80275ca:	f899 3001 	ldrb.w	r3, [r9, #1]
 80275ce:	8855      	ldrh	r5, [r2, #2]
 80275d0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80275d4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80275d8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80275dc:	fb08 f802 	mul.w	r8, r8, r2
 80275e0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80275e4:	435d      	muls	r5, r3
 80275e6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80275ea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80275ee:	44d0      	add	r8, sl
 80275f0:	f105 0a20 	add.w	sl, r5, #32
 80275f4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80275f8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80275fc:	0a2d      	lsrs	r5, r5, #8
 80275fe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027602:	432a      	orrs	r2, r5
 8027604:	3001      	adds	r0, #1
 8027606:	f100 80fe 	bmi.w	8027806 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802760a:	4583      	cmp	fp, r0
 802760c:	f340 80fb 	ble.w	8027806 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027610:	f1be 0f00 	cmp.w	lr, #0
 8027614:	f000 80fc 	beq.w	8027810 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8027618:	2f00      	cmp	r7, #0
 802761a:	f2c0 80f1 	blt.w	8027800 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802761e:	42be      	cmp	r6, r7
 8027620:	f340 80ee 	ble.w	8027800 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027624:	9801      	ldr	r0, [sp, #4]
 8027626:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802762a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802762e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8027632:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027636:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802763a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802763e:	fb0a fa00 	mul.w	sl, sl, r0
 8027642:	fb05 f808 	mul.w	r8, r5, r8
 8027646:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802764a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802764e:	4482      	add	sl, r0
 8027650:	f108 0020 	add.w	r0, r8, #32
 8027654:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027658:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802765c:	0a00      	lsrs	r0, r0, #8
 802765e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027662:	ea4b 0b00 	orr.w	fp, fp, r0
 8027666:	3701      	adds	r7, #1
 8027668:	f100 80d7 	bmi.w	802781a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802766c:	42be      	cmp	r6, r7
 802766e:	f340 80d4 	ble.w	802781a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027672:	2900      	cmp	r1, #0
 8027674:	f000 80d4 	beq.w	8027820 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8027678:	3601      	adds	r6, #1
 802767a:	9801      	ldr	r0, [sp, #4]
 802767c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027680:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027684:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027688:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802768c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027690:	fb09 f906 	mul.w	r9, r9, r6
 8027694:	fb07 f800 	mul.w	r8, r7, r0
 8027698:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802769c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80276a0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80276a4:	44d1      	add	r9, sl
 80276a6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80276aa:	f108 0020 	add.w	r0, r8, #32
 80276ae:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80276b2:	0a00      	lsrs	r0, r0, #8
 80276b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80276b8:	4330      	orrs	r0, r6
 80276ba:	b28e      	uxth	r6, r1
 80276bc:	fa1f f98e 	uxth.w	r9, lr
 80276c0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80276c4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80276c8:	fb06 f809 	mul.w	r8, r6, r9
 80276cc:	0136      	lsls	r6, r6, #4
 80276ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80276d2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80276d6:	9601      	str	r6, [sp, #4]
 80276d8:	ea4a 0404 	orr.w	r4, sl, r4
 80276dc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80276e0:	fa1f f689 	uxth.w	r6, r9
 80276e4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80276e8:	fb11 f90e 	smulbb	r9, r1, lr
 80276ec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80276f0:	9602      	str	r6, [sp, #8]
 80276f2:	4626      	mov	r6, r4
 80276f4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80276f8:	f1ce 0410 	rsb	r4, lr, #16
 80276fc:	ea4a 0202 	orr.w	r2, sl, r2
 8027700:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027704:	1a64      	subs	r4, r4, r1
 8027706:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802770a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802770e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027712:	434a      	muls	r2, r1
 8027714:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027718:	ea4a 0000 	orr.w	r0, sl, r0
 802771c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027720:	fb04 2406 	mla	r4, r4, r6, r2
 8027724:	9903      	ldr	r1, [sp, #12]
 8027726:	fb09 4200 	mla	r2, r9, r0, r4
 802772a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802772e:	9801      	ldr	r0, [sp, #4]
 8027730:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027734:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027738:	8809      	ldrh	r1, [r1, #0]
 802773a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802773e:	ea44 0b0b 	orr.w	fp, r4, fp
 8027742:	9c02      	ldr	r4, [sp, #8]
 8027744:	1b00      	subs	r0, r0, r4
 8027746:	9c01      	ldr	r4, [sp, #4]
 8027748:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802774c:	eba4 0608 	sub.w	r6, r4, r8
 8027750:	b280      	uxth	r0, r0
 8027752:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027756:	b2b6      	uxth	r6, r6
 8027758:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802775c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027760:	4373      	muls	r3, r6
 8027762:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027766:	fb0c 3300 	mla	r3, ip, r0, r3
 802776a:	9802      	ldr	r0, [sp, #8]
 802776c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027770:	fb00 3505 	mla	r5, r0, r5, r3
 8027774:	120b      	asrs	r3, r1, #8
 8027776:	10c8      	asrs	r0, r1, #3
 8027778:	fb08 5707 	mla	r7, r8, r7, r5
 802777c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027780:	00c9      	lsls	r1, r1, #3
 8027782:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027786:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802778a:	fa1f f28e 	uxth.w	r2, lr
 802778e:	b2c9      	uxtb	r1, r1
 8027790:	b2ff      	uxtb	r7, r7
 8027792:	437b      	muls	r3, r7
 8027794:	4378      	muls	r0, r7
 8027796:	434f      	muls	r7, r1
 8027798:	1c59      	adds	r1, r3, #1
 802779a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802779e:	1213      	asrs	r3, r2, #8
 80277a0:	f023 0307 	bic.w	r3, r3, #7
 80277a4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80277a8:	1c41      	adds	r1, r0, #1
 80277aa:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80277ae:	10d1      	asrs	r1, r2, #3
 80277b0:	021b      	lsls	r3, r3, #8
 80277b2:	f021 0103 	bic.w	r1, r1, #3
 80277b6:	00d2      	lsls	r2, r2, #3
 80277b8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80277bc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80277c0:	00c9      	lsls	r1, r1, #3
 80277c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80277c6:	430b      	orrs	r3, r1
 80277c8:	1c79      	adds	r1, r7, #1
 80277ca:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80277ce:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80277d2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80277d6:	431a      	orrs	r2, r3
 80277d8:	9b03      	ldr	r3, [sp, #12]
 80277da:	801a      	strh	r2, [r3, #0]
 80277dc:	b005      	add	sp, #20
 80277de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277e2:	f04f 0c00 	mov.w	ip, #0
 80277e6:	4664      	mov	r4, ip
 80277e8:	e6e5      	b.n	80275b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80277ea:	2300      	movs	r3, #0
 80277ec:	469c      	mov	ip, r3
 80277ee:	461a      	mov	r2, r3
 80277f0:	461c      	mov	r4, r3
 80277f2:	e707      	b.n	8027604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80277f4:	2300      	movs	r3, #0
 80277f6:	461a      	mov	r2, r3
 80277f8:	e704      	b.n	8027604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80277fa:	460b      	mov	r3, r1
 80277fc:	460a      	mov	r2, r1
 80277fe:	e701      	b.n	8027604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027800:	2500      	movs	r5, #0
 8027802:	46ab      	mov	fp, r5
 8027804:	e72f      	b.n	8027666 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027806:	2700      	movs	r7, #0
 8027808:	463d      	mov	r5, r7
 802780a:	4638      	mov	r0, r7
 802780c:	46bb      	mov	fp, r7
 802780e:	e754      	b.n	80276ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027810:	4677      	mov	r7, lr
 8027812:	4675      	mov	r5, lr
 8027814:	4670      	mov	r0, lr
 8027816:	46f3      	mov	fp, lr
 8027818:	e74f      	b.n	80276ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802781a:	2700      	movs	r7, #0
 802781c:	4638      	mov	r0, r7
 802781e:	e74c      	b.n	80276ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027820:	460f      	mov	r7, r1
 8027822:	4608      	mov	r0, r1
 8027824:	e749      	b.n	80276ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08027828 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802782c:	b093      	sub	sp, #76	; 0x4c
 802782e:	9210      	str	r2, [sp, #64]	; 0x40
 8027830:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027832:	9011      	str	r0, [sp, #68]	; 0x44
 8027834:	910e      	str	r1, [sp, #56]	; 0x38
 8027836:	6850      	ldr	r0, [r2, #4]
 8027838:	9306      	str	r3, [sp, #24]
 802783a:	6812      	ldr	r2, [r2, #0]
 802783c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027840:	fb00 1303 	mla	r3, r0, r3, r1
 8027844:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027848:	9307      	str	r3, [sp, #28]
 802784a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802784c:	681b      	ldr	r3, [r3, #0]
 802784e:	9308      	str	r3, [sp, #32]
 8027850:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027852:	685b      	ldr	r3, [r3, #4]
 8027854:	9309      	str	r3, [sp, #36]	; 0x24
 8027856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027858:	2b00      	cmp	r3, #0
 802785a:	dc03      	bgt.n	8027864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802785c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802785e:	2b00      	cmp	r3, #0
 8027860:	f340 83b6 	ble.w	8027fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027864:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027866:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802786a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802786e:	1e48      	subs	r0, r1, #1
 8027870:	1e55      	subs	r5, r2, #1
 8027872:	9b06      	ldr	r3, [sp, #24]
 8027874:	2b00      	cmp	r3, #0
 8027876:	f340 8165 	ble.w	8027b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802787a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 802787c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802787e:	1436      	asrs	r6, r6, #16
 8027880:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027884:	d406      	bmi.n	8027894 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027886:	4286      	cmp	r6, r0
 8027888:	da04      	bge.n	8027894 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802788a:	2b00      	cmp	r3, #0
 802788c:	db02      	blt.n	8027894 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802788e:	42ab      	cmp	r3, r5
 8027890:	f2c0 8159 	blt.w	8027b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8027894:	3601      	adds	r6, #1
 8027896:	f100 8146 	bmi.w	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802789a:	42b1      	cmp	r1, r6
 802789c:	f2c0 8143 	blt.w	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80278a0:	3301      	adds	r3, #1
 80278a2:	f100 8140 	bmi.w	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80278a6:	429a      	cmp	r2, r3
 80278a8:	f2c0 813d 	blt.w	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80278ac:	9b06      	ldr	r3, [sp, #24]
 80278ae:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80278b2:	9f07      	ldr	r7, [sp, #28]
 80278b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80278b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80278b8:	2b00      	cmp	r3, #0
 80278ba:	f340 8166 	ble.w	8027b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80278c0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80278c2:	1418      	asrs	r0, r3, #16
 80278c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80278c6:	142d      	asrs	r5, r5, #16
 80278c8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80278cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80278ce:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80278d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80278d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80278d8:	f100 81f0 	bmi.w	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80278dc:	f102 3eff 	add.w	lr, r2, #4294967295
 80278e0:	4575      	cmp	r5, lr
 80278e2:	f280 81eb 	bge.w	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80278e6:	2800      	cmp	r0, #0
 80278e8:	f2c0 81e8 	blt.w	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80278ec:	f103 3eff 	add.w	lr, r3, #4294967295
 80278f0:	4570      	cmp	r0, lr
 80278f2:	f280 81e3 	bge.w	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80278f6:	b212      	sxth	r2, r2
 80278f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278fa:	fa1f fe81 	uxth.w	lr, r1
 80278fe:	fb00 5002 	mla	r0, r0, r2, r5
 8027902:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027906:	eb03 0a00 	add.w	sl, r3, r0
 802790a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802790e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027912:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027916:	b29b      	uxth	r3, r3
 8027918:	f1bc 0f00 	cmp.w	ip, #0
 802791c:	f000 817b 	beq.w	8027c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027920:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027924:	eb0a 0b02 	add.w	fp, sl, r2
 8027928:	fa1f fa8c 	uxth.w	sl, ip
 802792c:	940a      	str	r4, [sp, #40]	; 0x28
 802792e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027932:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027936:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802793a:	eba5 050e 	sub.w	r5, r5, lr
 802793e:	940b      	str	r4, [sp, #44]	; 0x2c
 8027940:	fa1f fa8a 	uxth.w	sl, sl
 8027944:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027946:	b2ad      	uxth	r5, r5
 8027948:	eba3 030a 	sub.w	r3, r3, sl
 802794c:	fb08 f505 	mul.w	r5, r8, r5
 8027950:	b29b      	uxth	r3, r3
 8027952:	fb09 5303 	mla	r3, r9, r3, r5
 8027956:	fb0a 3304 	mla	r3, sl, r4, r3
 802795a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802795c:	fb0e 3304 	mla	r3, lr, r4, r3
 8027960:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027964:	2b00      	cmp	r3, #0
 8027966:	f000 80d1 	beq.w	8027b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802796a:	9c08      	ldr	r4, [sp, #32]
 802796c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027970:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027974:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027978:	f000 8152 	beq.w	8027c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802797c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027980:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027984:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027988:	fb0a fe0e 	mul.w	lr, sl, lr
 802798c:	fb09 f000 	mul.w	r0, r9, r0
 8027990:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027994:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027998:	f100 0b20 	add.w	fp, r0, #32
 802799c:	44ce      	add	lr, r9
 802799e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80279a2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80279a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80279aa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80279ae:	ea4e 0909 	orr.w	r9, lr, r9
 80279b2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80279b6:	8868      	ldrh	r0, [r5, #2]
 80279b8:	d019      	beq.n	80279ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80279ba:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80279be:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80279c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80279c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80279ca:	fb08 f800 	mul.w	r8, r8, r0
 80279ce:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80279d2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80279d6:	f108 0b20 	add.w	fp, r8, #32
 80279da:	4486      	add	lr, r0
 80279dc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80279e0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80279e4:	0a00      	lsrs	r0, r0, #8
 80279e6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80279ea:	ea4e 0000 	orr.w	r0, lr, r0
 80279ee:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80279f2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80279f6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80279fa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80279fe:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027a02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a06:	ea4e 0909 	orr.w	r9, lr, r9
 8027a0a:	ea4a 0000 	orr.w	r0, sl, r0
 8027a0e:	f1bc 0f00 	cmp.w	ip, #0
 8027a12:	f000 8107 	beq.w	8027c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8027a16:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027a1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027a1c:	3a01      	subs	r2, #1
 8027a1e:	2cff      	cmp	r4, #255	; 0xff
 8027a20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027a24:	f102 0202 	add.w	r2, r2, #2
 8027a28:	eb05 0e02 	add.w	lr, r5, r2
 8027a2c:	5aaa      	ldrh	r2, [r5, r2]
 8027a2e:	d018      	beq.n	8027a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8027a30:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027a34:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a38:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a3c:	fb04 fa02 	mul.w	sl, r4, r2
 8027a40:	fb08 f805 	mul.w	r8, r8, r5
 8027a44:	f10a 0520 	add.w	r5, sl, #32
 8027a48:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027a4c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027a50:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027a54:	4442      	add	r2, r8
 8027a56:	0a2d      	lsrs	r5, r5, #8
 8027a58:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027a5c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027a60:	432a      	orrs	r2, r5
 8027a62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027a64:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027a68:	2cff      	cmp	r4, #255	; 0xff
 8027a6a:	d01a      	beq.n	8027aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8027a6c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027a70:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027a74:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a78:	fb04 fa05 	mul.w	sl, r4, r5
 8027a7c:	fb08 f80e 	mul.w	r8, r8, lr
 8027a80:	f10a 0e20 	add.w	lr, sl, #32
 8027a84:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027a88:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027a8c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027a90:	4445      	add	r5, r8
 8027a92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a96:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027a9a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027a9e:	ea45 050e 	orr.w	r5, r5, lr
 8027aa2:	fb1c fe01 	smulbb	lr, ip, r1
 8027aa6:	f1cc 0810 	rsb	r8, ip, #16
 8027aaa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027aae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027ab2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027ab6:	eba8 0801 	sub.w	r8, r8, r1
 8027aba:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027abe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ac2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027ac6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027aca:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027ace:	ea4a 0202 	orr.w	r2, sl, r2
 8027ad2:	4341      	muls	r1, r0
 8027ad4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027ad8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027adc:	fb09 1108 	mla	r1, r9, r8, r1
 8027ae0:	ea4b 0505 	orr.w	r5, fp, r5
 8027ae4:	fb0c 1102 	mla	r1, ip, r2, r1
 8027ae8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027aec:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027af0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027af4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027af8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027afc:	ea42 0e0e 	orr.w	lr, r2, lr
 8027b00:	fa1f f28e 	uxth.w	r2, lr
 8027b04:	2bff      	cmp	r3, #255	; 0xff
 8027b06:	f040 80a1 	bne.w	8027c4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8027b0a:	803a      	strh	r2, [r7, #0]
 8027b0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027b0e:	3702      	adds	r7, #2
 8027b10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027b12:	4413      	add	r3, r2
 8027b14:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027b16:	931d      	str	r3, [sp, #116]	; 0x74
 8027b18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b1a:	441a      	add	r2, r3
 8027b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b1e:	3b01      	subs	r3, #1
 8027b20:	921e      	str	r2, [sp, #120]	; 0x78
 8027b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8027b24:	e6c7      	b.n	80278b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027b28:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8027b2a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8027b2c:	4433      	add	r3, r6
 8027b2e:	931d      	str	r3, [sp, #116]	; 0x74
 8027b30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b32:	441c      	add	r4, r3
 8027b34:	9b06      	ldr	r3, [sp, #24]
 8027b36:	3b01      	subs	r3, #1
 8027b38:	941e      	str	r4, [sp, #120]	; 0x78
 8027b3a:	9306      	str	r3, [sp, #24]
 8027b3c:	9b07      	ldr	r3, [sp, #28]
 8027b3e:	3302      	adds	r3, #2
 8027b40:	9307      	str	r3, [sp, #28]
 8027b42:	e696      	b.n	8027872 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027b44:	d028      	beq.n	8027b98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027b46:	9b06      	ldr	r3, [sp, #24]
 8027b48:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027b4a:	3b01      	subs	r3, #1
 8027b4c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8027b4e:	fb00 5003 	mla	r0, r0, r3, r5
 8027b52:	1400      	asrs	r0, r0, #16
 8027b54:	f53f aeaa 	bmi.w	80278ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027b58:	3901      	subs	r1, #1
 8027b5a:	4288      	cmp	r0, r1
 8027b5c:	f6bf aea6 	bge.w	80278ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027b60:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027b62:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027b64:	fb01 0303 	mla	r3, r1, r3, r0
 8027b68:	141b      	asrs	r3, r3, #16
 8027b6a:	f53f ae9f 	bmi.w	80278ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027b6e:	3a01      	subs	r2, #1
 8027b70:	4293      	cmp	r3, r2
 8027b72:	f6bf ae9b 	bge.w	80278ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027b76:	9b06      	ldr	r3, [sp, #24]
 8027b78:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027b7c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8027b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b84:	2b00      	cmp	r3, #0
 8027b86:	f300 80b6 	bgt.w	8027cf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8027b8a:	9b06      	ldr	r3, [sp, #24]
 8027b8c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027b90:	9b07      	ldr	r3, [sp, #28]
 8027b92:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027b96:	9307      	str	r3, [sp, #28]
 8027b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027b9a:	2b00      	cmp	r3, #0
 8027b9c:	f340 8218 	ble.w	8027fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ba4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027ba6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027baa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027bae:	eef0 6a62 	vmov.f32	s13, s5
 8027bb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027bb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027bba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027bbe:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8027bc2:	eef0 6a43 	vmov.f32	s13, s6
 8027bc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027bca:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8027bce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027bd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027bd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027bda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027bde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027be2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027be6:	ee12 2a90 	vmov	r2, s5
 8027bea:	eef0 2a47 	vmov.f32	s5, s14
 8027bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8027bf2:	ee13 2a10 	vmov	r2, s6
 8027bf6:	931f      	str	r3, [sp, #124]	; 0x7c
 8027bf8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027bfa:	eeb0 3a67 	vmov.f32	s6, s15
 8027bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027c02:	9320      	str	r3, [sp, #128]	; 0x80
 8027c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027c08:	3b01      	subs	r3, #1
 8027c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8027c0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027c0e:	bf08      	it	eq
 8027c10:	4613      	moveq	r3, r2
 8027c12:	9306      	str	r3, [sp, #24]
 8027c14:	e61f      	b.n	8027856 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027c16:	fb08 f505 	mul.w	r5, r8, r5
 8027c1a:	fb09 5303 	mla	r3, r9, r3, r5
 8027c1e:	e69f      	b.n	8027960 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027c20:	4681      	mov	r9, r0
 8027c22:	e6c6      	b.n	80279b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027c24:	f1c1 0210 	rsb	r2, r1, #16
 8027c28:	4341      	muls	r1, r0
 8027c2a:	fb09 1902 	mla	r9, r9, r2, r1
 8027c2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027c32:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027c36:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027c3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027c3e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027c42:	ea42 0909 	orr.w	r9, r2, r9
 8027c46:	fa1f f289 	uxth.w	r2, r9
 8027c4a:	e75b      	b.n	8027b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8027c4c:	f8b7 c000 	ldrh.w	ip, [r7]
 8027c50:	43db      	mvns	r3, r3
 8027c52:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027c56:	fa5f fe83 	uxtb.w	lr, r3
 8027c5a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027c5e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027c62:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027c66:	fb00 f00e 	mul.w	r0, r0, lr
 8027c6a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027c6e:	b2db      	uxtb	r3, r3
 8027c70:	1c41      	adds	r1, r0, #1
 8027c72:	fb05 f50e 	mul.w	r5, r5, lr
 8027c76:	fb03 f30e 	mul.w	r3, r3, lr
 8027c7a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027c7e:	1211      	asrs	r1, r2, #8
 8027c80:	f021 0107 	bic.w	r1, r1, #7
 8027c84:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027c88:	48d3      	ldr	r0, [pc, #844]	; (8027fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8027c8a:	b2c9      	uxtb	r1, r1
 8027c8c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027c90:	1c69      	adds	r1, r5, #1
 8027c92:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027c96:	10d1      	asrs	r1, r2, #3
 8027c98:	00d2      	lsls	r2, r2, #3
 8027c9a:	f021 0103 	bic.w	r1, r1, #3
 8027c9e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027ca2:	00c9      	lsls	r1, r1, #3
 8027ca4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027ca8:	4301      	orrs	r1, r0
 8027caa:	1c58      	adds	r0, r3, #1
 8027cac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027cb0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027cb4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027cb8:	430a      	orrs	r2, r1
 8027cba:	e726      	b.n	8027b0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8027cbc:	f115 0e01 	adds.w	lr, r5, #1
 8027cc0:	f53f af24 	bmi.w	8027b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027cc4:	4572      	cmp	r2, lr
 8027cc6:	f6ff af21 	blt.w	8027b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027cca:	f110 0e01 	adds.w	lr, r0, #1
 8027cce:	f53f af1d 	bmi.w	8027b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027cd2:	4573      	cmp	r3, lr
 8027cd4:	f6ff af1a 	blt.w	8027b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027cd8:	b21b      	sxth	r3, r3
 8027cda:	b212      	sxth	r2, r2
 8027cdc:	9301      	str	r3, [sp, #4]
 8027cde:	9200      	str	r2, [sp, #0]
 8027ce0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027ce4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027ce8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8027cec:	4639      	mov	r1, r7
 8027cee:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027cf0:	f7ff fc22 	bl	8027538 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027cf4:	e70a      	b.n	8027b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027cf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027cf8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027cfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027cfe:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027d02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d04:	fa1f fc82 	uxth.w	ip, r2
 8027d08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027d0e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027d12:	141f      	asrs	r7, r3, #16
 8027d14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027d16:	141b      	asrs	r3, r3, #16
 8027d18:	fb01 3707 	mla	r7, r1, r7, r3
 8027d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d1e:	eb03 0a07 	add.w	sl, r3, r7
 8027d22:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027d26:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027d2a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027d2e:	b29b      	uxth	r3, r3
 8027d30:	2d00      	cmp	r5, #0
 8027d32:	f000 80fe 	beq.w	8027f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027d36:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027d3a:	eb0a 0b01 	add.w	fp, sl, r1
 8027d3e:	fa1f fa85 	uxth.w	sl, r5
 8027d42:	940c      	str	r4, [sp, #48]	; 0x30
 8027d44:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d48:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027d4c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027d50:	eba0 000c 	sub.w	r0, r0, ip
 8027d54:	940d      	str	r4, [sp, #52]	; 0x34
 8027d56:	fa1f fa8a 	uxth.w	sl, sl
 8027d5a:	b280      	uxth	r0, r0
 8027d5c:	eba3 030a 	sub.w	r3, r3, sl
 8027d60:	fb08 f000 	mul.w	r0, r8, r0
 8027d64:	b29b      	uxth	r3, r3
 8027d66:	fb09 0303 	mla	r3, r9, r3, r0
 8027d6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027d6c:	fb0a 3300 	mla	r3, sl, r0, r3
 8027d70:	fb0c 3304 	mla	r3, ip, r4, r3
 8027d74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	f000 80cc 	beq.w	8027f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8027d7e:	9808      	ldr	r0, [sp, #32]
 8027d80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027d84:	9c08      	ldr	r4, [sp, #32]
 8027d86:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027d8a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027d8e:	f000 80d5 	beq.w	8027f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8027d92:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027d96:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027d9a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d9e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027da2:	fb09 f707 	mul.w	r7, r9, r7
 8027da6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027daa:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027dae:	f107 0b20 	add.w	fp, r7, #32
 8027db2:	44cc      	add	ip, r9
 8027db4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027db8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027dbc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027dc0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027dc4:	ea4c 0909 	orr.w	r9, ip, r9
 8027dc8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027dcc:	8847      	ldrh	r7, [r0, #2]
 8027dce:	d019      	beq.n	8027e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8027dd0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027dd4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027dd8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027ddc:	fb0a fc0c 	mul.w	ip, sl, ip
 8027de0:	fb08 f807 	mul.w	r8, r8, r7
 8027de4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027de8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027dec:	f108 0b20 	add.w	fp, r8, #32
 8027df0:	44bc      	add	ip, r7
 8027df2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027df6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027dfa:	0a3f      	lsrs	r7, r7, #8
 8027dfc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e00:	ea4c 0707 	orr.w	r7, ip, r7
 8027e04:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027e08:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027e0c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027e10:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027e14:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027e18:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027e1c:	ea4c 0909 	orr.w	r9, ip, r9
 8027e20:	ea4a 0707 	orr.w	r7, sl, r7
 8027e24:	2d00      	cmp	r5, #0
 8027e26:	f000 808b 	beq.w	8027f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8027e2a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027e2e:	3901      	subs	r1, #1
 8027e30:	0049      	lsls	r1, r1, #1
 8027e32:	3102      	adds	r1, #2
 8027e34:	eb00 0c01 	add.w	ip, r0, r1
 8027e38:	5a41      	ldrh	r1, [r0, r1]
 8027e3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027e3c:	28ff      	cmp	r0, #255	; 0xff
 8027e3e:	d019      	beq.n	8027e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8027e40:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027e44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027e46:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027e4a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027e4e:	fb04 fa01 	mul.w	sl, r4, r1
 8027e52:	fb08 f800 	mul.w	r8, r8, r0
 8027e56:	f10a 0020 	add.w	r0, sl, #32
 8027e5a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027e5e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027e62:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027e66:	4441      	add	r1, r8
 8027e68:	0a00      	lsrs	r0, r0, #8
 8027e6a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027e6e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027e72:	4301      	orrs	r1, r0
 8027e74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027e76:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027e7a:	2cff      	cmp	r4, #255	; 0xff
 8027e7c:	d01a      	beq.n	8027eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8027e7e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027e82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027e86:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027e8a:	fb04 fa00 	mul.w	sl, r4, r0
 8027e8e:	fb08 f80c 	mul.w	r8, r8, ip
 8027e92:	f10a 0c20 	add.w	ip, sl, #32
 8027e96:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027e9a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027e9e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027ea2:	4440      	add	r0, r8
 8027ea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ea8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027eac:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027eb0:	ea40 000c 	orr.w	r0, r0, ip
 8027eb4:	fb15 fc02 	smulbb	ip, r5, r2
 8027eb8:	f1c5 0810 	rsb	r8, r5, #16
 8027ebc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027ec0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027ec4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027ec8:	eba8 0802 	sub.w	r8, r8, r2
 8027ecc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027ed0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ed4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027ed8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027edc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027ee0:	ea4a 0101 	orr.w	r1, sl, r1
 8027ee4:	437a      	muls	r2, r7
 8027ee6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027eea:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027eee:	fb09 2208 	mla	r2, r9, r8, r2
 8027ef2:	ea4b 0000 	orr.w	r0, fp, r0
 8027ef6:	fb05 2201 	mla	r2, r5, r1, r2
 8027efa:	fb0c 2200 	mla	r2, ip, r0, r2
 8027efe:	0d57      	lsrs	r7, r2, #21
 8027f00:	0952      	lsrs	r2, r2, #5
 8027f02:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027f06:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027f0a:	433a      	orrs	r2, r7
 8027f0c:	2bff      	cmp	r3, #255	; 0xff
 8027f0e:	b292      	uxth	r2, r2
 8027f10:	d127      	bne.n	8027f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8027f12:	f8ae 2000 	strh.w	r2, [lr]
 8027f16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027f18:	f10e 0e02 	add.w	lr, lr, #2
 8027f1c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8027f1e:	4413      	add	r3, r2
 8027f20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027f22:	931d      	str	r3, [sp, #116]	; 0x74
 8027f24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027f26:	441a      	add	r2, r3
 8027f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027f2a:	3b01      	subs	r3, #1
 8027f2c:	921e      	str	r2, [sp, #120]	; 0x78
 8027f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027f30:	e627      	b.n	8027b82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027f32:	fb08 f000 	mul.w	r0, r8, r0
 8027f36:	fb09 0303 	mla	r3, r9, r3, r0
 8027f3a:	e71b      	b.n	8027d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8027f3c:	46b9      	mov	r9, r7
 8027f3e:	e743      	b.n	8027dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8027f40:	f1c2 0110 	rsb	r1, r2, #16
 8027f44:	437a      	muls	r2, r7
 8027f46:	fb09 2901 	mla	r9, r9, r1, r2
 8027f4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027f4e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027f52:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027f56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027f5a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027f5e:	4302      	orrs	r2, r0
 8027f60:	e7d4      	b.n	8027f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8027f62:	f8be 7000 	ldrh.w	r7, [lr]
 8027f66:	43db      	mvns	r3, r3
 8027f68:	4c1b      	ldr	r4, [pc, #108]	; (8027fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8027f6a:	1238      	asrs	r0, r7, #8
 8027f6c:	fa5f fc83 	uxtb.w	ip, r3
 8027f70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027f74:	10fd      	asrs	r5, r7, #3
 8027f76:	00fb      	lsls	r3, r7, #3
 8027f78:	fb00 f00c 	mul.w	r0, r0, ip
 8027f7c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027f80:	b2db      	uxtb	r3, r3
 8027f82:	fb05 f10c 	mul.w	r1, r5, ip
 8027f86:	1c45      	adds	r5, r0, #1
 8027f88:	fb03 f30c 	mul.w	r3, r3, ip
 8027f8c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027f90:	1215      	asrs	r5, r2, #8
 8027f92:	f025 0507 	bic.w	r5, r5, #7
 8027f96:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027f9a:	1c4d      	adds	r5, r1, #1
 8027f9c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027fa0:	10d1      	asrs	r1, r2, #3
 8027fa2:	b2c0      	uxtb	r0, r0
 8027fa4:	f021 0103 	bic.w	r1, r1, #3
 8027fa8:	00d2      	lsls	r2, r2, #3
 8027faa:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027fae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027fb2:	00c9      	lsls	r1, r1, #3
 8027fb4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027fb8:	4308      	orrs	r0, r1
 8027fba:	1c59      	adds	r1, r3, #1
 8027fbc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027fc0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027fc4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027fc8:	4318      	orrs	r0, r3
 8027fca:	f8ae 0000 	strh.w	r0, [lr]
 8027fce:	e7a2      	b.n	8027f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8027fd0:	b013      	add	sp, #76	; 0x4c
 8027fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fd6:	bf00      	nop
 8027fd8:	fffff800 	.word	0xfffff800

08027fdc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027fe0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8027fe4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027fe8:	fb05 4c03 	mla	ip, r5, r3, r4
 8027fec:	2d00      	cmp	r5, #0
 8027fee:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8027ff2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027ff6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027ffa:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8027ffe:	8808      	ldrh	r0, [r1, #0]
 8028000:	f2c0 80a7 	blt.w	8028152 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028004:	45aa      	cmp	sl, r5
 8028006:	f340 80a4 	ble.w	8028152 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802800a:	2c00      	cmp	r4, #0
 802800c:	f2c0 809f 	blt.w	802814e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028010:	42a3      	cmp	r3, r4
 8028012:	f340 809c 	ble.w	802814e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028016:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802801a:	1c62      	adds	r2, r4, #1
 802801c:	f100 809c 	bmi.w	8028158 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028020:	4293      	cmp	r3, r2
 8028022:	f340 8099 	ble.w	8028158 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028026:	f1b9 0f00 	cmp.w	r9, #0
 802802a:	f000 8095 	beq.w	8028158 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802802e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8028032:	3501      	adds	r5, #1
 8028034:	f100 8094 	bmi.w	8028160 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028038:	45aa      	cmp	sl, r5
 802803a:	f340 8091 	ble.w	8028160 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802803e:	2f00      	cmp	r7, #0
 8028040:	f000 808e 	beq.w	8028160 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028044:	2c00      	cmp	r4, #0
 8028046:	f2c0 8089 	blt.w	802815c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802804a:	42a3      	cmp	r3, r4
 802804c:	f340 8086 	ble.w	802815c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028050:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8028054:	3401      	adds	r4, #1
 8028056:	f100 8086 	bmi.w	8028166 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802805a:	42a3      	cmp	r3, r4
 802805c:	f340 8083 	ble.w	8028166 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028060:	f1b9 0f00 	cmp.w	r9, #0
 8028064:	d07f      	beq.n	8028166 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028066:	3301      	adds	r3, #1
 8028068:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802806c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8028070:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8028074:	fb19 fe07 	smulbb	lr, r9, r7
 8028078:	f1c7 0210 	rsb	r2, r7, #16
 802807c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028080:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8028084:	eba2 0209 	sub.w	r2, r2, r9
 8028088:	ea44 0808 	orr.w	r8, r4, r8
 802808c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8028090:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028094:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8028098:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802809c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80280a0:	ea44 0c0c 	orr.w	ip, r4, ip
 80280a4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80280a8:	fb04 f40c 	mul.w	r4, r4, ip
 80280ac:	fb02 4808 	mla	r8, r2, r8, r4
 80280b0:	041a      	lsls	r2, r3, #16
 80280b2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80280b6:	b2b4      	uxth	r4, r6
 80280b8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80280bc:	43f6      	mvns	r6, r6
 80280be:	4313      	orrs	r3, r2
 80280c0:	042a      	lsls	r2, r5, #16
 80280c2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80280c6:	b2f6      	uxtb	r6, r6
 80280c8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80280cc:	fb0e 8303 	mla	r3, lr, r3, r8
 80280d0:	432a      	orrs	r2, r5
 80280d2:	fb07 3202 	mla	r2, r7, r2, r3
 80280d6:	10c7      	asrs	r7, r0, #3
 80280d8:	0d53      	lsrs	r3, r2, #21
 80280da:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80280de:	0952      	lsrs	r2, r2, #5
 80280e0:	fb17 f706 	smulbb	r7, r7, r6
 80280e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280e8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80280ec:	431a      	orrs	r2, r3
 80280ee:	b293      	uxth	r3, r2
 80280f0:	1202      	asrs	r2, r0, #8
 80280f2:	121d      	asrs	r5, r3, #8
 80280f4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80280f8:	00c0      	lsls	r0, r0, #3
 80280fa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80280fe:	fb12 f206 	smulbb	r2, r2, r6
 8028102:	b2c0      	uxtb	r0, r0
 8028104:	fb05 2504 	mla	r5, r5, r4, r2
 8028108:	10da      	asrs	r2, r3, #3
 802810a:	fb10 f006 	smulbb	r0, r0, r6
 802810e:	00db      	lsls	r3, r3, #3
 8028110:	b2ad      	uxth	r5, r5
 8028112:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028116:	b2db      	uxtb	r3, r3
 8028118:	fb02 7204 	mla	r2, r2, r4, r7
 802811c:	fb03 0004 	mla	r0, r3, r4, r0
 8028120:	1c6b      	adds	r3, r5, #1
 8028122:	b292      	uxth	r2, r2
 8028124:	b280      	uxth	r0, r0
 8028126:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802812a:	1c43      	adds	r3, r0, #1
 802812c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028130:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028134:	1c50      	adds	r0, r2, #1
 8028136:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802813a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802813e:	0952      	lsrs	r2, r2, #5
 8028140:	432b      	orrs	r3, r5
 8028142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028146:	4313      	orrs	r3, r2
 8028148:	800b      	strh	r3, [r1, #0]
 802814a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802814e:	4680      	mov	r8, r0
 8028150:	e763      	b.n	802801a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8028152:	4684      	mov	ip, r0
 8028154:	4680      	mov	r8, r0
 8028156:	e76c      	b.n	8028032 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028158:	4684      	mov	ip, r0
 802815a:	e76a      	b.n	8028032 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802815c:	4605      	mov	r5, r0
 802815e:	e779      	b.n	8028054 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8028160:	4603      	mov	r3, r0
 8028162:	4605      	mov	r5, r0
 8028164:	e782      	b.n	802806c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8028166:	4603      	mov	r3, r0
 8028168:	e780      	b.n	802806c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802816a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802816a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802816e:	b093      	sub	sp, #76	; 0x4c
 8028170:	461d      	mov	r5, r3
 8028172:	9210      	str	r2, [sp, #64]	; 0x40
 8028174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028176:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802817a:	910a      	str	r1, [sp, #40]	; 0x28
 802817c:	920b      	str	r2, [sp, #44]	; 0x2c
 802817e:	6859      	ldr	r1, [r3, #4]
 8028180:	681b      	ldr	r3, [r3, #0]
 8028182:	9011      	str	r0, [sp, #68]	; 0x44
 8028184:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8028188:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802818c:	fb01 2707 	mla	r7, r1, r7, r2
 8028190:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028194:	9307      	str	r3, [sp, #28]
 8028196:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028198:	681b      	ldr	r3, [r3, #0]
 802819a:	9309      	str	r3, [sp, #36]	; 0x24
 802819c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802819e:	43db      	mvns	r3, r3
 80281a0:	b2db      	uxtb	r3, r3
 80281a2:	9308      	str	r3, [sp, #32]
 80281a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80281a6:	2b00      	cmp	r3, #0
 80281a8:	dc03      	bgt.n	80281b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80281aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80281ac:	2b00      	cmp	r3, #0
 80281ae:	f340 8205 	ble.w	80285bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80281b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80281b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80281bc:	1e48      	subs	r0, r1, #1
 80281be:	f102 3cff 	add.w	ip, r2, #4294967295
 80281c2:	2d00      	cmp	r5, #0
 80281c4:	f340 80da 	ble.w	802837c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80281c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80281cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80281d0:	d406      	bmi.n	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80281d2:	4586      	cmp	lr, r0
 80281d4:	da04      	bge.n	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80281d6:	2b00      	cmp	r3, #0
 80281d8:	db02      	blt.n	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80281da:	4563      	cmp	r3, ip
 80281dc:	f2c0 80cf 	blt.w	802837e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80281e0:	f11e 0e01 	adds.w	lr, lr, #1
 80281e4:	f100 80c1 	bmi.w	802836a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80281e8:	4571      	cmp	r1, lr
 80281ea:	f2c0 80be 	blt.w	802836a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80281ee:	3301      	adds	r3, #1
 80281f0:	f100 80bb 	bmi.w	802836a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80281f4:	429a      	cmp	r2, r3
 80281f6:	f2c0 80b8 	blt.w	802836a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80281fa:	46a9      	mov	r9, r5
 80281fc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028200:	f1b9 0f00 	cmp.w	r9, #0
 8028204:	f340 80d8 	ble.w	80283b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8028208:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802820a:	1421      	asrs	r1, r4, #16
 802820c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028210:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028214:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028218:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802821c:	f100 8112 	bmi.w	8028444 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8028220:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028224:	4551      	cmp	r1, sl
 8028226:	f280 810d 	bge.w	8028444 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802822a:	2800      	cmp	r0, #0
 802822c:	f2c0 810a 	blt.w	8028444 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8028230:	f103 3aff 	add.w	sl, r3, #4294967295
 8028234:	4550      	cmp	r0, sl
 8028236:	f280 8105 	bge.w	8028444 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802823a:	fa0f f38e 	sxth.w	r3, lr
 802823e:	fb00 1103 	mla	r1, r0, r3, r1
 8028242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028244:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028248:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802824c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028250:	f1bc 0f00 	cmp.w	ip, #0
 8028254:	d007      	beq.n	8028266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8028256:	005b      	lsls	r3, r3, #1
 8028258:	eb0a 0003 	add.w	r0, sl, r3
 802825c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028260:	930c      	str	r3, [sp, #48]	; 0x30
 8028262:	8843      	ldrh	r3, [r0, #2]
 8028264:	930d      	str	r3, [sp, #52]	; 0x34
 8028266:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802826a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802826e:	fb12 f30c 	smulbb	r3, r2, ip
 8028272:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028276:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802827a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802827e:	10db      	asrs	r3, r3, #3
 8028280:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028284:	ea40 000e 	orr.w	r0, r0, lr
 8028288:	f1cc 0e10 	rsb	lr, ip, #16
 802828c:	ea4a 0101 	orr.w	r1, sl, r1
 8028290:	9f08      	ldr	r7, [sp, #32]
 8028292:	ebae 0e02 	sub.w	lr, lr, r2
 8028296:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802829a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802829e:	4351      	muls	r1, r2
 80282a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80282a2:	fb0e 1e00 	mla	lr, lr, r0, r1
 80282a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80282a8:	0410      	lsls	r0, r2, #16
 80282aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80282ae:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80282b2:	4310      	orrs	r0, r2
 80282b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80282b6:	0412      	lsls	r2, r2, #16
 80282b8:	fb03 e000 	mla	r0, r3, r0, lr
 80282bc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80282c0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80282c4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80282c8:	ea42 020e 	orr.w	r2, r2, lr
 80282cc:	fb03 0302 	mla	r3, r3, r2, r0
 80282d0:	f8b8 0000 	ldrh.w	r0, [r8]
 80282d4:	0d5a      	lsrs	r2, r3, #21
 80282d6:	095b      	lsrs	r3, r3, #5
 80282d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80282dc:	1201      	asrs	r1, r0, #8
 80282de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80282e2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80282e6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80282ea:	00c0      	lsls	r0, r0, #3
 80282ec:	4313      	orrs	r3, r2
 80282ee:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80282f2:	fb11 f107 	smulbb	r1, r1, r7
 80282f6:	b2c0      	uxtb	r0, r0
 80282f8:	b29b      	uxth	r3, r3
 80282fa:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80282fe:	fb10 f007 	smulbb	r0, r0, r7
 8028302:	fb1e fe07 	smulbb	lr, lr, r7
 8028306:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802830a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802830e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028312:	10d9      	asrs	r1, r3, #3
 8028314:	00db      	lsls	r3, r3, #3
 8028316:	fa1f fc8c 	uxth.w	ip, ip
 802831a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802831e:	b2db      	uxtb	r3, r3
 8028320:	fb01 e102 	mla	r1, r1, r2, lr
 8028324:	fb03 0302 	mla	r3, r3, r2, r0
 8028328:	b289      	uxth	r1, r1
 802832a:	b29a      	uxth	r2, r3
 802832c:	f10c 0301 	add.w	r3, ip, #1
 8028330:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028334:	1c53      	adds	r3, r2, #1
 8028336:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802833a:	1c4a      	adds	r2, r1, #1
 802833c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028340:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028344:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028348:	0949      	lsrs	r1, r1, #5
 802834a:	ea43 030c 	orr.w	r3, r3, ip
 802834e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028352:	430b      	orrs	r3, r1
 8028354:	f8a8 3000 	strh.w	r3, [r8]
 8028358:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802835a:	f108 0802 	add.w	r8, r8, #2
 802835e:	f109 39ff 	add.w	r9, r9, #4294967295
 8028362:	441c      	add	r4, r3
 8028364:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028366:	441e      	add	r6, r3
 8028368:	e74a      	b.n	8028200 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802836a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802836c:	3d01      	subs	r5, #1
 802836e:	441c      	add	r4, r3
 8028370:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028372:	441e      	add	r6, r3
 8028374:	9b07      	ldr	r3, [sp, #28]
 8028376:	3302      	adds	r3, #2
 8028378:	9307      	str	r3, [sp, #28]
 802837a:	e722      	b.n	80281c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802837c:	d022      	beq.n	80283c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802837e:	1e6b      	subs	r3, r5, #1
 8028380:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028382:	fb00 4003 	mla	r0, r0, r3, r4
 8028386:	1400      	asrs	r0, r0, #16
 8028388:	f53f af37 	bmi.w	80281fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802838c:	3901      	subs	r1, #1
 802838e:	4288      	cmp	r0, r1
 8028390:	f6bf af33 	bge.w	80281fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028394:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028396:	fb01 6303 	mla	r3, r1, r3, r6
 802839a:	141b      	asrs	r3, r3, #16
 802839c:	f53f af2d 	bmi.w	80281fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80283a0:	3a01      	subs	r2, #1
 80283a2:	4293      	cmp	r3, r2
 80283a4:	f6bf af29 	bge.w	80281fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80283a8:	46a8      	mov	r8, r5
 80283aa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80283ae:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80283b2:	f1b8 0f00 	cmp.w	r8, #0
 80283b6:	dc60      	bgt.n	802847a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80283b8:	9b07      	ldr	r3, [sp, #28]
 80283ba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80283be:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80283c2:	9307      	str	r3, [sp, #28]
 80283c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80283c6:	2b00      	cmp	r3, #0
 80283c8:	f340 80f8 	ble.w	80285bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80283cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80283d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80283d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80283d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80283da:	eef0 6a62 	vmov.f32	s13, s5
 80283de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80283e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80283e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283ea:	ee16 4a90 	vmov	r4, s13
 80283ee:	eef0 6a43 	vmov.f32	s13, s6
 80283f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283f6:	ee16 6a90 	vmov	r6, s13
 80283fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80283fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028402:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802840a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802840e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028412:	ee12 2a90 	vmov	r2, s5
 8028416:	eef0 2a47 	vmov.f32	s5, s14
 802841a:	fb92 f3f3 	sdiv	r3, r2, r3
 802841e:	ee13 2a10 	vmov	r2, s6
 8028422:	931f      	str	r3, [sp, #124]	; 0x7c
 8028424:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028426:	eeb0 3a67 	vmov.f32	s6, s15
 802842a:	fb92 f3f3 	sdiv	r3, r2, r3
 802842e:	9320      	str	r3, [sp, #128]	; 0x80
 8028430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028432:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028434:	3b01      	subs	r3, #1
 8028436:	930a      	str	r3, [sp, #40]	; 0x28
 8028438:	bf08      	it	eq
 802843a:	4615      	moveq	r5, r2
 802843c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802843e:	bf18      	it	ne
 8028440:	461d      	movne	r5, r3
 8028442:	e6af      	b.n	80281a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028444:	f111 0a01 	adds.w	sl, r1, #1
 8028448:	d486      	bmi.n	8028358 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802844a:	45d6      	cmp	lr, sl
 802844c:	db84      	blt.n	8028358 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802844e:	f110 0a01 	adds.w	sl, r0, #1
 8028452:	d481      	bmi.n	8028358 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028454:	4553      	cmp	r3, sl
 8028456:	f6ff af7f 	blt.w	8028358 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802845a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802845c:	b21b      	sxth	r3, r3
 802845e:	9101      	str	r1, [sp, #4]
 8028460:	4641      	mov	r1, r8
 8028462:	9300      	str	r3, [sp, #0]
 8028464:	fa0f f38e 	sxth.w	r3, lr
 8028468:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802846c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028472:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028474:	f7ff fdb2 	bl	8027fdc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028478:	e76e      	b.n	8028358 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802847a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802847c:	1430      	asrs	r0, r6, #16
 802847e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028480:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028484:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028488:	1423      	asrs	r3, r4, #16
 802848a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802848e:	fb01 3000 	mla	r0, r1, r0, r3
 8028492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028494:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028498:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802849c:	8858      	ldrh	r0, [r3, #2]
 802849e:	f1be 0f00 	cmp.w	lr, #0
 80284a2:	d00b      	beq.n	80284bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80284a4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80284a8:	3901      	subs	r1, #1
 80284aa:	0049      	lsls	r1, r1, #1
 80284ac:	3102      	adds	r1, #2
 80284ae:	eb03 0b01 	add.w	fp, r3, r1
 80284b2:	5a5b      	ldrh	r3, [r3, r1]
 80284b4:	930e      	str	r3, [sp, #56]	; 0x38
 80284b6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80284ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80284bc:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80284c0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80284c4:	fb12 f30e 	smulbb	r3, r2, lr
 80284c8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80284cc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80284d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80284d4:	10db      	asrs	r3, r3, #3
 80284d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80284da:	ea41 010c 	orr.w	r1, r1, ip
 80284de:	f1ce 0c10 	rsb	ip, lr, #16
 80284e2:	ea4b 0000 	orr.w	r0, fp, r0
 80284e6:	9f08      	ldr	r7, [sp, #32]
 80284e8:	ebac 0c02 	sub.w	ip, ip, r2
 80284ec:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80284f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80284f4:	4350      	muls	r0, r2
 80284f6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80284fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80284fc:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028500:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028502:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028506:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802850a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802850c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028510:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028514:	0412      	lsls	r2, r2, #16
 8028516:	ea4b 0101 	orr.w	r1, fp, r1
 802851a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802851e:	fb03 c101 	mla	r1, r3, r1, ip
 8028522:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028526:	4302      	orrs	r2, r0
 8028528:	fb03 1202 	mla	r2, r3, r2, r1
 802852c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028530:	0952      	lsrs	r2, r2, #5
 8028532:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028536:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802853a:	f8b9 2000 	ldrh.w	r2, [r9]
 802853e:	ea4b 0303 	orr.w	r3, fp, r3
 8028542:	1211      	asrs	r1, r2, #8
 8028544:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8028548:	b29b      	uxth	r3, r3
 802854a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802854e:	00d2      	lsls	r2, r2, #3
 8028550:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028554:	fb11 f107 	smulbb	r1, r1, r7
 8028558:	1218      	asrs	r0, r3, #8
 802855a:	fb1c fc07 	smulbb	ip, ip, r7
 802855e:	b2d2      	uxtb	r2, r2
 8028560:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028564:	fb12 f207 	smulbb	r2, r2, r7
 8028568:	fb00 100a 	mla	r0, r0, sl, r1
 802856c:	10d9      	asrs	r1, r3, #3
 802856e:	00db      	lsls	r3, r3, #3
 8028570:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028574:	b280      	uxth	r0, r0
 8028576:	b2db      	uxtb	r3, r3
 8028578:	fb01 c10a 	mla	r1, r1, sl, ip
 802857c:	fb03 230a 	mla	r3, r3, sl, r2
 8028580:	1c42      	adds	r2, r0, #1
 8028582:	b289      	uxth	r1, r1
 8028584:	b29b      	uxth	r3, r3
 8028586:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802858a:	f101 0c01 	add.w	ip, r1, #1
 802858e:	1c5a      	adds	r2, r3, #1
 8028590:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028594:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028598:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802859c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802859e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80285a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80285a6:	441c      	add	r4, r3
 80285a8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80285ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80285ae:	4310      	orrs	r0, r2
 80285b0:	441e      	add	r6, r3
 80285b2:	ea40 000c 	orr.w	r0, r0, ip
 80285b6:	f829 0b02 	strh.w	r0, [r9], #2
 80285ba:	e6fa      	b.n	80283b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80285bc:	b013      	add	sp, #76	; 0x4c
 80285be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080285c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80285c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80285c6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80285ca:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80285ce:	fb0e 4703 	mla	r7, lr, r3, r4
 80285d2:	f1be 0f00 	cmp.w	lr, #0
 80285d6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80285da:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80285de:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80285e2:	8808      	ldrh	r0, [r1, #0]
 80285e4:	db60      	blt.n	80286a8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80285e6:	45f1      	cmp	r9, lr
 80285e8:	dd5e      	ble.n	80286a8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80285ea:	2c00      	cmp	r4, #0
 80285ec:	db5a      	blt.n	80286a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80285ee:	42a3      	cmp	r3, r4
 80285f0:	dd58      	ble.n	80286a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80285f2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80285f6:	1c62      	adds	r2, r4, #1
 80285f8:	d459      	bmi.n	80286ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80285fa:	4293      	cmp	r3, r2
 80285fc:	dd57      	ble.n	80286ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80285fe:	2d00      	cmp	r5, #0
 8028600:	d055      	beq.n	80286ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028602:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8028606:	f11e 0e01 	adds.w	lr, lr, #1
 802860a:	d454      	bmi.n	80286b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802860c:	45f1      	cmp	r9, lr
 802860e:	dd52      	ble.n	80286b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028610:	2e00      	cmp	r6, #0
 8028612:	d050      	beq.n	80286b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028614:	2c00      	cmp	r4, #0
 8028616:	db4c      	blt.n	80286b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028618:	42a3      	cmp	r3, r4
 802861a:	dd4a      	ble.n	80286b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802861c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8028620:	3401      	adds	r4, #1
 8028622:	d405      	bmi.n	8028630 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028624:	42a3      	cmp	r3, r4
 8028626:	dd03      	ble.n	8028630 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028628:	b115      	cbz	r5, 8028630 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802862a:	3301      	adds	r3, #1
 802862c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8028630:	fb15 f406 	smulbb	r4, r5, r6
 8028634:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8028638:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802863c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028640:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028644:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8028648:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802864c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028650:	ea43 0c0c 	orr.w	ip, r3, ip
 8028654:	f1c6 0310 	rsb	r3, r6, #16
 8028658:	ea4e 0707 	orr.w	r7, lr, r7
 802865c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028660:	1b5b      	subs	r3, r3, r5
 8028662:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8028666:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802866a:	437d      	muls	r5, r7
 802866c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8028670:	0403      	lsls	r3, r0, #16
 8028672:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028676:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802867a:	4318      	orrs	r0, r3
 802867c:	0413      	lsls	r3, r2, #16
 802867e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028682:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8028686:	fb04 c000 	mla	r0, r4, r0, ip
 802868a:	4313      	orrs	r3, r2
 802868c:	fb06 0003 	mla	r0, r6, r3, r0
 8028690:	0d43      	lsrs	r3, r0, #21
 8028692:	0940      	lsrs	r0, r0, #5
 8028694:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028698:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802869c:	4318      	orrs	r0, r3
 802869e:	8008      	strh	r0, [r1, #0]
 80286a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80286a4:	4684      	mov	ip, r0
 80286a6:	e7a6      	b.n	80285f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80286a8:	4607      	mov	r7, r0
 80286aa:	4684      	mov	ip, r0
 80286ac:	e7ab      	b.n	8028606 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80286ae:	4607      	mov	r7, r0
 80286b0:	e7a9      	b.n	8028606 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80286b2:	4602      	mov	r2, r0
 80286b4:	e7b4      	b.n	8028620 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80286b6:	4602      	mov	r2, r0
 80286b8:	e7ba      	b.n	8028630 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080286ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80286ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286be:	b08f      	sub	sp, #60	; 0x3c
 80286c0:	461d      	mov	r5, r3
 80286c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80286c4:	9107      	str	r1, [sp, #28]
 80286c6:	920c      	str	r2, [sp, #48]	; 0x30
 80286c8:	6859      	ldr	r1, [r3, #4]
 80286ca:	681b      	ldr	r3, [r3, #0]
 80286cc:	900d      	str	r0, [sp, #52]	; 0x34
 80286ce:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80286d2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80286d6:	fb01 2707 	mla	r7, r1, r7, r2
 80286da:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80286de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80286e0:	f8d3 8000 	ldr.w	r8, [r3]
 80286e4:	9b07      	ldr	r3, [sp, #28]
 80286e6:	2b00      	cmp	r3, #0
 80286e8:	dc03      	bgt.n	80286f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80286ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80286ec:	2b00      	cmp	r3, #0
 80286ee:	f340 8182 	ble.w	80289f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80286f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80286f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80286fc:	1e48      	subs	r0, r1, #1
 80286fe:	f102 3cff 	add.w	ip, r2, #4294967295
 8028702:	2d00      	cmp	r5, #0
 8028704:	f340 809b 	ble.w	802883e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8028708:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802870c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028710:	d406      	bmi.n	8028720 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028712:	4586      	cmp	lr, r0
 8028714:	da04      	bge.n	8028720 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028716:	2b00      	cmp	r3, #0
 8028718:	db02      	blt.n	8028720 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802871a:	4563      	cmp	r3, ip
 802871c:	f2c0 8090 	blt.w	8028840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028720:	f11e 0e01 	adds.w	lr, lr, #1
 8028724:	f100 8084 	bmi.w	8028830 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028728:	4571      	cmp	r1, lr
 802872a:	f2c0 8081 	blt.w	8028830 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802872e:	3301      	adds	r3, #1
 8028730:	d47e      	bmi.n	8028830 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028732:	429a      	cmp	r2, r3
 8028734:	db7c      	blt.n	8028830 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028736:	46aa      	mov	sl, r5
 8028738:	46b9      	mov	r9, r7
 802873a:	f1ba 0f00 	cmp.w	sl, #0
 802873e:	f340 8099 	ble.w	8028874 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8028742:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028744:	1421      	asrs	r1, r4, #16
 8028746:	ea4f 4026 	mov.w	r0, r6, asr #16
 802874a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802874e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028752:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028756:	f100 80d1 	bmi.w	80288fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802875a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802875e:	4559      	cmp	r1, fp
 8028760:	f280 80cc 	bge.w	80288fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8028764:	2800      	cmp	r0, #0
 8028766:	f2c0 80c9 	blt.w	80288fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802876a:	f103 3bff 	add.w	fp, r3, #4294967295
 802876e:	4558      	cmp	r0, fp
 8028770:	f280 80c4 	bge.w	80288fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8028774:	fa0f fe8e 	sxth.w	lr, lr
 8028778:	fb00 110e 	mla	r1, r0, lr, r1
 802877c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028780:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028784:	8841      	ldrh	r1, [r0, #2]
 8028786:	f1bc 0f00 	cmp.w	ip, #0
 802878a:	d00b      	beq.n	80287a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802878c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8028790:	3b01      	subs	r3, #1
 8028792:	005b      	lsls	r3, r3, #1
 8028794:	3302      	adds	r3, #2
 8028796:	eb00 0e03 	add.w	lr, r0, r3
 802879a:	5ac3      	ldrh	r3, [r0, r3]
 802879c:	9308      	str	r3, [sp, #32]
 802879e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80287a2:	9309      	str	r3, [sp, #36]	; 0x24
 80287a4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80287a8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80287ac:	fb12 f30c 	smulbb	r3, r2, ip
 80287b0:	f1cc 0e10 	rsb	lr, ip, #16
 80287b4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80287b8:	10db      	asrs	r3, r3, #3
 80287ba:	ebae 0e02 	sub.w	lr, lr, r2
 80287be:	ea40 000b 	orr.w	r0, r0, fp
 80287c2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80287c6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80287ca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80287ce:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80287d2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80287d6:	ea4b 0101 	orr.w	r1, fp, r1
 80287da:	4351      	muls	r1, r2
 80287dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80287de:	fb0e 1e00 	mla	lr, lr, r0, r1
 80287e2:	0410      	lsls	r0, r2, #16
 80287e4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80287e8:	9908      	ldr	r1, [sp, #32]
 80287ea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80287ee:	4310      	orrs	r0, r2
 80287f0:	9a08      	ldr	r2, [sp, #32]
 80287f2:	0412      	lsls	r2, r2, #16
 80287f4:	fb03 e000 	mla	r0, r3, r0, lr
 80287f8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80287fc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028800:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028804:	ea42 020e 	orr.w	r2, r2, lr
 8028808:	fb03 0302 	mla	r3, r3, r2, r0
 802880c:	0d5a      	lsrs	r2, r3, #21
 802880e:	095b      	lsrs	r3, r3, #5
 8028810:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028814:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028818:	4313      	orrs	r3, r2
 802881a:	f8a9 3000 	strh.w	r3, [r9]
 802881e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028820:	f109 0902 	add.w	r9, r9, #2
 8028824:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028828:	441c      	add	r4, r3
 802882a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802882c:	441e      	add	r6, r3
 802882e:	e784      	b.n	802873a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8028830:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028832:	3d01      	subs	r5, #1
 8028834:	3702      	adds	r7, #2
 8028836:	441c      	add	r4, r3
 8028838:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802883a:	441e      	add	r6, r3
 802883c:	e761      	b.n	8028702 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802883e:	d01d      	beq.n	802887c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028840:	1e6b      	subs	r3, r5, #1
 8028842:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028844:	fb00 4003 	mla	r0, r0, r3, r4
 8028848:	1400      	asrs	r0, r0, #16
 802884a:	f53f af74 	bmi.w	8028736 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802884e:	3901      	subs	r1, #1
 8028850:	4288      	cmp	r0, r1
 8028852:	f6bf af70 	bge.w	8028736 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028856:	991c      	ldr	r1, [sp, #112]	; 0x70
 8028858:	fb01 6303 	mla	r3, r1, r3, r6
 802885c:	141b      	asrs	r3, r3, #16
 802885e:	f53f af6a 	bmi.w	8028736 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028862:	3a01      	subs	r2, #1
 8028864:	4293      	cmp	r3, r2
 8028866:	f6bf af66 	bge.w	8028736 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802886a:	46a9      	mov	r9, r5
 802886c:	46ba      	mov	sl, r7
 802886e:	f1b9 0f00 	cmp.w	r9, #0
 8028872:	dc5b      	bgt.n	802892c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028874:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028878:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802887c:	9b07      	ldr	r3, [sp, #28]
 802887e:	2b00      	cmp	r3, #0
 8028880:	f340 80b9 	ble.w	80289f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028888:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802888a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802888e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028892:	eef0 6a62 	vmov.f32	s13, s5
 8028896:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802889a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802889e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288a2:	ee16 4a90 	vmov	r4, s13
 80288a6:	eef0 6a43 	vmov.f32	s13, s6
 80288aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288ae:	ee16 6a90 	vmov	r6, s13
 80288b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80288b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80288ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80288be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80288c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80288c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80288ca:	ee12 2a90 	vmov	r2, s5
 80288ce:	eef0 2a47 	vmov.f32	s5, s14
 80288d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80288d6:	ee13 2a10 	vmov	r2, s6
 80288da:	931b      	str	r3, [sp, #108]	; 0x6c
 80288dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80288de:	eeb0 3a67 	vmov.f32	s6, s15
 80288e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80288e6:	931c      	str	r3, [sp, #112]	; 0x70
 80288e8:	9b07      	ldr	r3, [sp, #28]
 80288ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80288ec:	3b01      	subs	r3, #1
 80288ee:	9307      	str	r3, [sp, #28]
 80288f0:	bf08      	it	eq
 80288f2:	4615      	moveq	r5, r2
 80288f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80288f6:	bf18      	it	ne
 80288f8:	461d      	movne	r5, r3
 80288fa:	e6f3      	b.n	80286e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80288fc:	f111 0b01 	adds.w	fp, r1, #1
 8028900:	d48d      	bmi.n	802881e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028902:	45de      	cmp	lr, fp
 8028904:	db8b      	blt.n	802881e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028906:	f110 0b01 	adds.w	fp, r0, #1
 802890a:	d488      	bmi.n	802881e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802890c:	455b      	cmp	r3, fp
 802890e:	db86      	blt.n	802881e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028910:	b21b      	sxth	r3, r3
 8028912:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028916:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802891a:	9300      	str	r3, [sp, #0]
 802891c:	4642      	mov	r2, r8
 802891e:	fa0f f38e 	sxth.w	r3, lr
 8028922:	4649      	mov	r1, r9
 8028924:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028926:	f7ff fe4c 	bl	80285c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802892a:	e778      	b.n	802881e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802892c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802892e:	1420      	asrs	r0, r4, #16
 8028930:	1431      	asrs	r1, r6, #16
 8028932:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802893a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802893e:	fb03 0101 	mla	r1, r3, r1, r0
 8028942:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028946:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802894a:	8841      	ldrh	r1, [r0, #2]
 802894c:	f1be 0f00 	cmp.w	lr, #0
 8028950:	d00b      	beq.n	802896a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8028952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8028956:	3b01      	subs	r3, #1
 8028958:	005b      	lsls	r3, r3, #1
 802895a:	3302      	adds	r3, #2
 802895c:	eb00 0b03 	add.w	fp, r0, r3
 8028960:	5ac3      	ldrh	r3, [r0, r3]
 8028962:	930a      	str	r3, [sp, #40]	; 0x28
 8028964:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028968:	930b      	str	r3, [sp, #44]	; 0x2c
 802896a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802896e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028972:	fb12 f30e 	smulbb	r3, r2, lr
 8028976:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802897a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802897e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028982:	10db      	asrs	r3, r3, #3
 8028984:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028988:	ea40 000c 	orr.w	r0, r0, ip
 802898c:	f1ce 0c10 	rsb	ip, lr, #16
 8028990:	ea4b 0101 	orr.w	r1, fp, r1
 8028994:	f109 39ff 	add.w	r9, r9, #4294967295
 8028998:	ebac 0c02 	sub.w	ip, ip, r2
 802899c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80289a0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80289a4:	4351      	muls	r1, r2
 80289a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80289a8:	fb0c 1c00 	mla	ip, ip, r0, r1
 80289ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80289ae:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80289b2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80289b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80289b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80289bc:	0412      	lsls	r2, r2, #16
 80289be:	ea4b 0000 	orr.w	r0, fp, r0
 80289c2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80289c6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80289ca:	fb03 c000 	mla	r0, r3, r0, ip
 80289ce:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80289d2:	ea42 0b0b 	orr.w	fp, r2, fp
 80289d6:	fb03 000b 	mla	r0, r3, fp, r0
 80289da:	0d43      	lsrs	r3, r0, #21
 80289dc:	0940      	lsrs	r0, r0, #5
 80289de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80289e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80289e6:	4318      	orrs	r0, r3
 80289e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80289ea:	441c      	add	r4, r3
 80289ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80289ee:	f82a 0b02 	strh.w	r0, [sl], #2
 80289f2:	441e      	add	r6, r3
 80289f4:	e73b      	b.n	802886e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80289f6:	b00f      	add	sp, #60	; 0x3c
 80289f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080289fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80289fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a00:	b085      	sub	sp, #20
 8028a02:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8028a06:	9102      	str	r1, [sp, #8]
 8028a08:	2c00      	cmp	r4, #0
 8028a0a:	fb04 7103 	mla	r1, r4, r3, r7
 8028a0e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8028a12:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028a16:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028a1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8028a1e:	f2c0 811b 	blt.w	8028c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028a22:	45a6      	cmp	lr, r4
 8028a24:	f340 8118 	ble.w	8028c58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028a28:	2f00      	cmp	r7, #0
 8028a2a:	f2c0 8113 	blt.w	8028c54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028a2e:	42bb      	cmp	r3, r7
 8028a30:	f340 8110 	ble.w	8028c54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028a34:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8028a38:	1c7a      	adds	r2, r7, #1
 8028a3a:	f100 8110 	bmi.w	8028c5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028a3e:	4293      	cmp	r3, r2
 8028a40:	f340 810d 	ble.w	8028c5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028a44:	2e00      	cmp	r6, #0
 8028a46:	f000 810c 	beq.w	8028c62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8028a4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8028a4e:	3401      	adds	r4, #1
 8028a50:	f100 810b 	bmi.w	8028c6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028a54:	45a6      	cmp	lr, r4
 8028a56:	f340 8108 	ble.w	8028c6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028a5a:	2800      	cmp	r0, #0
 8028a5c:	f000 8108 	beq.w	8028c70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8028a60:	2f00      	cmp	r7, #0
 8028a62:	f2c0 8100 	blt.w	8028c66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028a66:	42bb      	cmp	r3, r7
 8028a68:	f340 80fd 	ble.w	8028c66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028a6c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028a70:	3701      	adds	r7, #1
 8028a72:	f100 8100 	bmi.w	8028c76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028a76:	42bb      	cmp	r3, r7
 8028a78:	f340 80fd 	ble.w	8028c76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028a7c:	2e00      	cmp	r6, #0
 8028a7e:	f000 80fc 	beq.w	8028c7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8028a82:	3301      	adds	r3, #1
 8028a84:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8028a88:	b2b6      	uxth	r6, r6
 8028a8a:	b280      	uxth	r0, r0
 8028a8c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028a90:	fb00 fe06 	mul.w	lr, r0, r6
 8028a94:	0136      	lsls	r6, r6, #4
 8028a96:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8028a9a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8028a9e:	eba6 070e 	sub.w	r7, r6, lr
 8028aa2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028aa6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028aaa:	b280      	uxth	r0, r0
 8028aac:	b2bf      	uxth	r7, r7
 8028aae:	1a1b      	subs	r3, r3, r0
 8028ab0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028ab4:	fb0a f607 	mul.w	r6, sl, r7
 8028ab8:	b29b      	uxth	r3, r3
 8028aba:	fb0b 6603 	mla	r6, fp, r3, r6
 8028abe:	fb00 6609 	mla	r6, r0, r9, r6
 8028ac2:	fb0e 6608 	mla	r6, lr, r8, r6
 8028ac6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028aca:	9600      	str	r6, [sp, #0]
 8028acc:	2e00      	cmp	r6, #0
 8028ace:	f000 80be 	beq.w	8028c4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8028ad2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028ad6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028ada:	9e02      	ldr	r6, [sp, #8]
 8028adc:	fb0b fc0c 	mul.w	ip, fp, ip
 8028ae0:	fb0b f505 	mul.w	r5, fp, r5
 8028ae4:	8836      	ldrh	r6, [r6, #0]
 8028ae6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028aea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028aee:	9501      	str	r5, [sp, #4]
 8028af0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028af4:	44dc      	add	ip, fp
 8028af6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028afa:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8028afe:	9503      	str	r5, [sp, #12]
 8028b00:	9d01      	ldr	r5, [sp, #4]
 8028b02:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028b06:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028b0a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8028b0e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028b12:	fb0a fc0c 	mul.w	ip, sl, ip
 8028b16:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028b1a:	fb0a fa01 	mul.w	sl, sl, r1
 8028b1e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028b22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028b26:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8028b2a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028b2e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028b32:	4465      	add	r5, ip
 8028b34:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028b38:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028b3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b40:	fb09 fc0c 	mul.w	ip, r9, ip
 8028b44:	0a2d      	lsrs	r5, r5, #8
 8028b46:	fb09 f904 	mul.w	r9, r9, r4
 8028b4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b4e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028b52:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028b56:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8028b5a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028b5e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028b62:	437d      	muls	r5, r7
 8028b64:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028b68:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8028b6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028b70:	4461      	add	r1, ip
 8028b72:	fb08 f404 	mul.w	r4, r8, r4
 8028b76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028b7a:	fb08 f802 	mul.w	r8, r8, r2
 8028b7e:	0a09      	lsrs	r1, r1, #8
 8028b80:	0a22      	lsrs	r2, r4, #8
 8028b82:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028b86:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028b8a:	fb07 f70a 	mul.w	r7, r7, sl
 8028b8e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028b92:	4414      	add	r4, r2
 8028b94:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8028b98:	0a24      	lsrs	r4, r4, #8
 8028b9a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028b9e:	9a03      	ldr	r2, [sp, #12]
 8028ba0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028ba4:	fb02 5503 	mla	r5, r2, r3, r5
 8028ba8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028bac:	9a00      	ldr	r2, [sp, #0]
 8028bae:	fb04 540e 	mla	r4, r4, lr, r5
 8028bb2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028bb6:	1235      	asrs	r5, r6, #8
 8028bb8:	fb01 4100 	mla	r1, r1, r0, r4
 8028bbc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028bc0:	0a09      	lsrs	r1, r1, #8
 8028bc2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8028bc6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8028bca:	fb03 7101 	mla	r1, r3, r1, r7
 8028bce:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028bd2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8028bd6:	fb00 e101 	mla	r1, r0, r1, lr
 8028bda:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8028bde:	b287      	uxth	r7, r0
 8028be0:	0a09      	lsrs	r1, r1, #8
 8028be2:	437a      	muls	r2, r7
 8028be4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028be8:	1c53      	adds	r3, r2, #1
 8028bea:	4321      	orrs	r1, r4
 8028bec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028bf0:	0c0a      	lsrs	r2, r1, #16
 8028bf2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028bf6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028bfa:	b2c8      	uxtb	r0, r1
 8028bfc:	fb12 f207 	smulbb	r2, r2, r7
 8028c00:	fb14 f407 	smulbb	r4, r4, r7
 8028c04:	b2db      	uxtb	r3, r3
 8028c06:	fb10 f007 	smulbb	r0, r0, r7
 8028c0a:	fb05 2503 	mla	r5, r5, r3, r2
 8028c0e:	10f2      	asrs	r2, r6, #3
 8028c10:	00f6      	lsls	r6, r6, #3
 8028c12:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c16:	b2ad      	uxth	r5, r5
 8028c18:	b2f6      	uxtb	r6, r6
 8028c1a:	fb02 4203 	mla	r2, r2, r3, r4
 8028c1e:	fb06 0303 	mla	r3, r6, r3, r0
 8028c22:	b294      	uxth	r4, r2
 8028c24:	b299      	uxth	r1, r3
 8028c26:	1c6b      	adds	r3, r5, #1
 8028c28:	1c62      	adds	r2, r4, #1
 8028c2a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028c2e:	1c4b      	adds	r3, r1, #1
 8028c30:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028c34:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028c38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028c3c:	0952      	lsrs	r2, r2, #5
 8028c3e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028c42:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c46:	432b      	orrs	r3, r5
 8028c48:	4313      	orrs	r3, r2
 8028c4a:	9a02      	ldr	r2, [sp, #8]
 8028c4c:	8013      	strh	r3, [r2, #0]
 8028c4e:	b005      	add	sp, #20
 8028c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c54:	2500      	movs	r5, #0
 8028c56:	e6ef      	b.n	8028a38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8028c58:	2100      	movs	r1, #0
 8028c5a:	460d      	mov	r5, r1
 8028c5c:	e6f7      	b.n	8028a4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028c5e:	2100      	movs	r1, #0
 8028c60:	e6f5      	b.n	8028a4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028c62:	4631      	mov	r1, r6
 8028c64:	e6f3      	b.n	8028a4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028c66:	2400      	movs	r4, #0
 8028c68:	e702      	b.n	8028a70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8028c6a:	2200      	movs	r2, #0
 8028c6c:	4614      	mov	r4, r2
 8028c6e:	e70b      	b.n	8028a88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028c70:	4602      	mov	r2, r0
 8028c72:	4604      	mov	r4, r0
 8028c74:	e708      	b.n	8028a88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028c76:	2200      	movs	r2, #0
 8028c78:	e706      	b.n	8028a88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028c7a:	4632      	mov	r2, r6
 8028c7c:	e704      	b.n	8028a88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08028c7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c82:	b09d      	sub	sp, #116	; 0x74
 8028c84:	9219      	str	r2, [sp, #100]	; 0x64
 8028c86:	9307      	str	r3, [sp, #28]
 8028c88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028c8a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8028c8e:	901b      	str	r0, [sp, #108]	; 0x6c
 8028c90:	931a      	str	r3, [sp, #104]	; 0x68
 8028c92:	6850      	ldr	r0, [r2, #4]
 8028c94:	9117      	str	r1, [sp, #92]	; 0x5c
 8028c96:	6812      	ldr	r2, [r2, #0]
 8028c98:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8028c9c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8028ca0:	fb00 1303 	mla	r3, r0, r3, r1
 8028ca4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8028caa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	9310      	str	r3, [sp, #64]	; 0x40
 8028cb0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8028cb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028cb8:	2b00      	cmp	r3, #0
 8028cba:	dc03      	bgt.n	8028cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028cbe:	2b00      	cmp	r3, #0
 8028cc0:	f340 8375 	ble.w	80293ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028cc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028cc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028cca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028cce:	1e48      	subs	r0, r1, #1
 8028cd0:	1e57      	subs	r7, r2, #1
 8028cd2:	9b07      	ldr	r3, [sp, #28]
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	f340 818e 	ble.w	8028ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8028cda:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028cde:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028ce2:	d406      	bmi.n	8028cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028ce4:	4584      	cmp	ip, r0
 8028ce6:	da04      	bge.n	8028cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	db02      	blt.n	8028cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028cec:	42bb      	cmp	r3, r7
 8028cee:	f2c0 8183 	blt.w	8028ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028cf2:	f11c 0c01 	adds.w	ip, ip, #1
 8028cf6:	f100 8173 	bmi.w	8028fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028cfa:	4561      	cmp	r1, ip
 8028cfc:	f2c0 8170 	blt.w	8028fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d00:	3301      	adds	r3, #1
 8028d02:	f100 816d 	bmi.w	8028fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d06:	429a      	cmp	r2, r3
 8028d08:	f2c0 816a 	blt.w	8028fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028d0c:	9b07      	ldr	r3, [sp, #28]
 8028d0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028d10:	9318      	str	r3, [sp, #96]	; 0x60
 8028d12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028d14:	2b00      	cmp	r3, #0
 8028d16:	f340 818c 	ble.w	8029032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8028d1a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8028d1c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028d20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028d22:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028d26:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028d2a:	1422      	asrs	r2, r4, #16
 8028d2c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028d30:	689b      	ldr	r3, [r3, #8]
 8028d32:	f100 81cd 	bmi.w	80290d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8028d3a:	4542      	cmp	r2, r8
 8028d3c:	f280 81c8 	bge.w	80290d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028d40:	f1bc 0f00 	cmp.w	ip, #0
 8028d44:	f2c0 81c4 	blt.w	80290d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028d48:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028d4c:	45c4      	cmp	ip, r8
 8028d4e:	f280 81bf 	bge.w	80290d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028d52:	b21b      	sxth	r3, r3
 8028d54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028d56:	fb0c 2203 	mla	r2, ip, r3, r2
 8028d5a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028d5e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028d62:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028d66:	2800      	cmp	r0, #0
 8028d68:	f000 81a9 	beq.w	80290be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028d6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028d70:	950c      	str	r5, [sp, #48]	; 0x30
 8028d72:	0e2d      	lsrs	r5, r5, #24
 8028d74:	9513      	str	r5, [sp, #76]	; 0x4c
 8028d76:	b181      	cbz	r1, 8028d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028d7c:	3b01      	subs	r3, #1
 8028d7e:	009b      	lsls	r3, r3, #2
 8028d80:	3304      	adds	r3, #4
 8028d82:	eb08 0c03 	add.w	ip, r8, r3
 8028d86:	f858 3003 	ldr.w	r3, [r8, r3]
 8028d8a:	9308      	str	r3, [sp, #32]
 8028d8c:	0e1b      	lsrs	r3, r3, #24
 8028d8e:	9311      	str	r3, [sp, #68]	; 0x44
 8028d90:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028d94:	930d      	str	r3, [sp, #52]	; 0x34
 8028d96:	0e1b      	lsrs	r3, r3, #24
 8028d98:	9314      	str	r3, [sp, #80]	; 0x50
 8028d9a:	b280      	uxth	r0, r0
 8028d9c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028d9e:	b289      	uxth	r1, r1
 8028da0:	fb00 f901 	mul.w	r9, r0, r1
 8028da4:	0100      	lsls	r0, r0, #4
 8028da6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028daa:	eba0 0809 	sub.w	r8, r0, r9
 8028dae:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028db2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028db4:	b289      	uxth	r1, r1
 8028db6:	fa1f f888 	uxth.w	r8, r8
 8028dba:	1a5b      	subs	r3, r3, r1
 8028dbc:	fb08 f000 	mul.w	r0, r8, r0
 8028dc0:	b29b      	uxth	r3, r3
 8028dc2:	fb03 000e 	mla	r0, r3, lr, r0
 8028dc6:	fb01 0005 	mla	r0, r1, r5, r0
 8028dca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028dcc:	fb09 0005 	mla	r0, r9, r5, r0
 8028dd0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028dd4:	2800      	cmp	r0, #0
 8028dd6:	f000 80fa 	beq.w	8028fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028dda:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028dde:	d01b      	beq.n	8028e18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028de0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028de4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028de8:	fb0e fa0a 	mul.w	sl, lr, sl
 8028dec:	fb0e fe02 	mul.w	lr, lr, r2
 8028df0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028df4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028df8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028dfc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028e00:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028e04:	4452      	add	r2, sl
 8028e06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e0a:	0a12      	lsrs	r2, r2, #8
 8028e0c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028e10:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028e14:	ea42 020c 	orr.w	r2, r2, ip
 8028e18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e1a:	2dff      	cmp	r5, #255	; 0xff
 8028e1c:	d021      	beq.n	8028e62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8028e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e20:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028e24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e26:	fb05 fb0b 	mul.w	fp, r5, fp
 8028e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e2c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e30:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e32:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028e36:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e3a:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e42:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028e46:	44de      	add	lr, fp
 8028e48:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028e4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e5c:	ea4e 050a 	orr.w	r5, lr, sl
 8028e60:	950c      	str	r5, [sp, #48]	; 0x30
 8028e62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028e64:	2dff      	cmp	r5, #255	; 0xff
 8028e66:	d021      	beq.n	8028eac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028e68:	9d08      	ldr	r5, [sp, #32]
 8028e6a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028e6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028e70:	fb05 fb0b 	mul.w	fp, r5, fp
 8028e74:	9d08      	ldr	r5, [sp, #32]
 8028e76:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028e7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028e80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e84:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028e90:	44de      	add	lr, fp
 8028e92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028e96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ea2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028ea6:	ea4e 050a 	orr.w	r5, lr, sl
 8028eaa:	9508      	str	r5, [sp, #32]
 8028eac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028eae:	2dff      	cmp	r5, #255	; 0xff
 8028eb0:	d021      	beq.n	8028ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028eb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028eb4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028eb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028eba:	fb05 fb0b 	mul.w	fp, r5, fp
 8028ebe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028ec0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028ec4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028ec6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028eca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028ece:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ed6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028eda:	44de      	add	lr, fp
 8028edc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028ee0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ee4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ee8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028eec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028ef0:	ea4e 050a 	orr.w	r5, lr, sl
 8028ef4:	950d      	str	r5, [sp, #52]	; 0x34
 8028ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028ef8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028efc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028f00:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028f04:	9d08      	ldr	r5, [sp, #32]
 8028f06:	fb08 fc0c 	mul.w	ip, r8, ip
 8028f0a:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028f0e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028f12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028f14:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028f18:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028f1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028f1e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028f22:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028f26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028f28:	fb08 f80e 	mul.w	r8, r8, lr
 8028f2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f30:	fb03 8202 	mla	r2, r3, r2, r8
 8028f34:	9b08      	ldr	r3, [sp, #32]
 8028f36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f3a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028f40:	fb01 220a 	mla	r2, r1, sl, r2
 8028f44:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028f48:	883b      	ldrh	r3, [r7, #0]
 8028f4a:	fb09 2901 	mla	r9, r9, r1, r2
 8028f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028f50:	1219      	asrs	r1, r3, #8
 8028f52:	4342      	muls	r2, r0
 8028f54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028f58:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028f5c:	1c50      	adds	r0, r2, #1
 8028f5e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028f62:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028f66:	ea4c 0c09 	orr.w	ip, ip, r9
 8028f6a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028f6e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028f72:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028f76:	fa5f fc8c 	uxtb.w	ip, ip
 8028f7a:	fb12 f205 	smulbb	r2, r2, r5
 8028f7e:	b2c0      	uxtb	r0, r0
 8028f80:	fb1c fc05 	smulbb	ip, ip, r5
 8028f84:	fb01 2100 	mla	r1, r1, r0, r2
 8028f88:	10da      	asrs	r2, r3, #3
 8028f8a:	fb1e fe05 	smulbb	lr, lr, r5
 8028f8e:	00db      	lsls	r3, r3, #3
 8028f90:	b289      	uxth	r1, r1
 8028f92:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028f96:	b2db      	uxtb	r3, r3
 8028f98:	fb02 e200 	mla	r2, r2, r0, lr
 8028f9c:	fb03 c300 	mla	r3, r3, r0, ip
 8028fa0:	b292      	uxth	r2, r2
 8028fa2:	fa1f fc83 	uxth.w	ip, r3
 8028fa6:	1c4b      	adds	r3, r1, #1
 8028fa8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028fac:	f10c 0301 	add.w	r3, ip, #1
 8028fb0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028fb4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028fb8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028fbc:	430b      	orrs	r3, r1
 8028fbe:	1c51      	adds	r1, r2, #1
 8028fc0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028fc4:	0952      	lsrs	r2, r2, #5
 8028fc6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028fca:	4313      	orrs	r3, r2
 8028fcc:	803b      	strh	r3, [r7, #0]
 8028fce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028fd0:	3702      	adds	r7, #2
 8028fd2:	441c      	add	r4, r3
 8028fd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028fd6:	441e      	add	r6, r3
 8028fd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028fda:	3b01      	subs	r3, #1
 8028fdc:	9318      	str	r3, [sp, #96]	; 0x60
 8028fde:	e698      	b.n	8028d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028fe0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028fe2:	441c      	add	r4, r3
 8028fe4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028fe6:	441e      	add	r6, r3
 8028fe8:	9b07      	ldr	r3, [sp, #28]
 8028fea:	3b01      	subs	r3, #1
 8028fec:	9307      	str	r3, [sp, #28]
 8028fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028ff0:	3302      	adds	r3, #2
 8028ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8028ff4:	e66d      	b.n	8028cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028ff6:	d023      	beq.n	8029040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028ff8:	9b07      	ldr	r3, [sp, #28]
 8028ffa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8028ffc:	3b01      	subs	r3, #1
 8028ffe:	fb00 4003 	mla	r0, r0, r3, r4
 8029002:	1400      	asrs	r0, r0, #16
 8029004:	f53f ae82 	bmi.w	8028d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029008:	3901      	subs	r1, #1
 802900a:	4288      	cmp	r0, r1
 802900c:	f6bf ae7e 	bge.w	8028d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029010:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8029012:	fb01 6303 	mla	r3, r1, r3, r6
 8029016:	141b      	asrs	r3, r3, #16
 8029018:	f53f ae78 	bmi.w	8028d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802901c:	3a01      	subs	r2, #1
 802901e:	4293      	cmp	r3, r2
 8029020:	f6bf ae74 	bge.w	8028d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029024:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029028:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802902c:	f1bb 0f00 	cmp.w	fp, #0
 8029030:	dc6c      	bgt.n	802910c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029032:	9b07      	ldr	r3, [sp, #28]
 8029034:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802903a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802903e:	930a      	str	r3, [sp, #40]	; 0x28
 8029040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029042:	2b00      	cmp	r3, #0
 8029044:	f340 81b3 	ble.w	80293ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802904c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802904e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029052:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029056:	eef0 6a62 	vmov.f32	s13, s5
 802905a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802905e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029066:	ee16 4a90 	vmov	r4, s13
 802906a:	eef0 6a43 	vmov.f32	s13, s6
 802906e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029072:	ee16 6a90 	vmov	r6, s13
 8029076:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802907a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802907e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029082:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029086:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802908a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802908e:	ee12 2a90 	vmov	r2, s5
 8029092:	eef0 2a47 	vmov.f32	s5, s14
 8029096:	fb92 f3f3 	sdiv	r3, r2, r3
 802909a:	ee13 2a10 	vmov	r2, s6
 802909e:	9329      	str	r3, [sp, #164]	; 0xa4
 80290a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80290a2:	eeb0 3a67 	vmov.f32	s6, s15
 80290a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80290aa:	932a      	str	r3, [sp, #168]	; 0xa8
 80290ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80290ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80290b0:	3b01      	subs	r3, #1
 80290b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80290b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80290b6:	bf08      	it	eq
 80290b8:	4613      	moveq	r3, r2
 80290ba:	9307      	str	r3, [sp, #28]
 80290bc:	e5fb      	b.n	8028cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80290be:	2900      	cmp	r1, #0
 80290c0:	f43f ae6b 	beq.w	8028d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80290c4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80290c8:	9308      	str	r3, [sp, #32]
 80290ca:	0e1b      	lsrs	r3, r3, #24
 80290cc:	9311      	str	r3, [sp, #68]	; 0x44
 80290ce:	e664      	b.n	8028d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80290d0:	f112 0801 	adds.w	r8, r2, #1
 80290d4:	f53f af7b 	bmi.w	8028fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80290d8:	4543      	cmp	r3, r8
 80290da:	f6ff af78 	blt.w	8028fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80290de:	f11c 0801 	adds.w	r8, ip, #1
 80290e2:	f53f af74 	bmi.w	8028fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80290e6:	45c6      	cmp	lr, r8
 80290e8:	f6ff af71 	blt.w	8028fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80290ec:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80290ee:	b21b      	sxth	r3, r3
 80290f0:	9201      	str	r2, [sp, #4]
 80290f2:	fa0f f28e 	sxth.w	r2, lr
 80290f6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80290fa:	e9cd c002 	strd	ip, r0, [sp, #8]
 80290fe:	9200      	str	r2, [sp, #0]
 8029100:	4639      	mov	r1, r7
 8029102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029104:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029106:	f7ff fc79 	bl	80289fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802910a:	e760      	b.n	8028fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802910c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802910e:	1427      	asrs	r7, r4, #16
 8029110:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029112:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029116:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802911a:	1433      	asrs	r3, r6, #16
 802911c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029120:	fb01 7303 	mla	r3, r1, r3, r7
 8029124:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029128:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802912c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029130:	2a00      	cmp	r2, #0
 8029132:	f000 8133 	beq.w	802939c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8029136:	687d      	ldr	r5, [r7, #4]
 8029138:	950e      	str	r5, [sp, #56]	; 0x38
 802913a:	0e2d      	lsrs	r5, r5, #24
 802913c:	9515      	str	r5, [sp, #84]	; 0x54
 802913e:	b178      	cbz	r0, 8029160 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029140:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8029144:	3901      	subs	r1, #1
 8029146:	0089      	lsls	r1, r1, #2
 8029148:	3104      	adds	r1, #4
 802914a:	eb07 0e01 	add.w	lr, r7, r1
 802914e:	5879      	ldr	r1, [r7, r1]
 8029150:	9109      	str	r1, [sp, #36]	; 0x24
 8029152:	0e09      	lsrs	r1, r1, #24
 8029154:	9112      	str	r1, [sp, #72]	; 0x48
 8029156:	f8de 1004 	ldr.w	r1, [lr, #4]
 802915a:	910f      	str	r1, [sp, #60]	; 0x3c
 802915c:	0e09      	lsrs	r1, r1, #24
 802915e:	9116      	str	r1, [sp, #88]	; 0x58
 8029160:	b292      	uxth	r2, r2
 8029162:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029164:	b280      	uxth	r0, r0
 8029166:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029168:	fb02 f800 	mul.w	r8, r2, r0
 802916c:	0112      	lsls	r2, r2, #4
 802916e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029172:	eba2 0e08 	sub.w	lr, r2, r8
 8029176:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802917a:	b280      	uxth	r0, r0
 802917c:	fa1f fe8e 	uxth.w	lr, lr
 8029180:	1a12      	subs	r2, r2, r0
 8029182:	fb0e f101 	mul.w	r1, lr, r1
 8029186:	b292      	uxth	r2, r2
 8029188:	fb02 110c 	mla	r1, r2, ip, r1
 802918c:	fb00 1105 	mla	r1, r0, r5, r1
 8029190:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029192:	fb08 1105 	mla	r1, r8, r5, r1
 8029196:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802919a:	2900      	cmp	r1, #0
 802919c:	f000 80f5 	beq.w	802938a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80291a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80291a4:	d019      	beq.n	80291da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80291a6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80291aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80291ae:	fb0c fa0a 	mul.w	sl, ip, sl
 80291b2:	fb0c fc03 	mul.w	ip, ip, r3
 80291b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80291ba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80291be:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80291c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80291c6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80291ca:	4453      	add	r3, sl
 80291cc:	0a3f      	lsrs	r7, r7, #8
 80291ce:	0a1b      	lsrs	r3, r3, #8
 80291d0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80291d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80291d8:	433b      	orrs	r3, r7
 80291da:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80291dc:	2dff      	cmp	r5, #255	; 0xff
 80291de:	d020      	beq.n	8029222 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80291e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80291e2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80291e6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80291e8:	436f      	muls	r7, r5
 80291ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80291ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80291f0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80291f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80291f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80291fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80291fe:	fb05 fa0a 	mul.w	sl, r5, sl
 8029202:	44bc      	add	ip, r7
 8029204:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802920c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029210:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029214:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029218:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802921c:	ea4c 050a 	orr.w	r5, ip, sl
 8029220:	950e      	str	r5, [sp, #56]	; 0x38
 8029222:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029224:	2dff      	cmp	r5, #255	; 0xff
 8029226:	d020      	beq.n	802926a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8029228:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802922a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802922e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029230:	436f      	muls	r7, r5
 8029232:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029234:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029238:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802923c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802923e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029246:	fb05 fa0a 	mul.w	sl, r5, sl
 802924a:	44bc      	add	ip, r7
 802924c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029250:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029254:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029258:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802925c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029260:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029264:	ea4c 050a 	orr.w	r5, ip, sl
 8029268:	9509      	str	r5, [sp, #36]	; 0x24
 802926a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802926c:	2dff      	cmp	r5, #255	; 0xff
 802926e:	d020      	beq.n	80292b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8029270:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029272:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029276:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029278:	436f      	muls	r7, r5
 802927a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802927c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029280:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029284:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029286:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802928a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802928e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029292:	44bc      	add	ip, r7
 8029294:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029298:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802929c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80292a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80292a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80292ac:	ea4c 050a 	orr.w	r5, ip, sl
 80292b0:	950f      	str	r5, [sp, #60]	; 0x3c
 80292b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80292b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80292bc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80292c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80292c2:	fb0e f707 	mul.w	r7, lr, r7
 80292c6:	fb02 770c 	mla	r7, r2, ip, r7
 80292ca:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80292ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80292d0:	fb00 770c 	mla	r7, r0, ip, r7
 80292d4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80292d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292da:	fb08 770c 	mla	r7, r8, ip, r7
 80292de:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80292e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80292e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80292e8:	0a3f      	lsrs	r7, r7, #8
 80292ea:	fb02 e303 	mla	r3, r2, r3, lr
 80292ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80292f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80292f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80292f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80292fa:	fb00 330a 	mla	r3, r0, sl, r3
 80292fe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029302:	f8b9 0000 	ldrh.w	r0, [r9]
 8029306:	fb08 3c0c 	mla	ip, r8, ip, r3
 802930a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802930c:	1202      	asrs	r2, r0, #8
 802930e:	4359      	muls	r1, r3
 8029310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029314:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029318:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802931c:	1c4b      	adds	r3, r1, #1
 802931e:	ea47 070c 	orr.w	r7, r7, ip
 8029322:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029326:	0c3b      	lsrs	r3, r7, #16
 8029328:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802932c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029330:	b2ff      	uxtb	r7, r7
 8029332:	fb13 f305 	smulbb	r3, r3, r5
 8029336:	b2c9      	uxtb	r1, r1
 8029338:	fb17 f705 	smulbb	r7, r7, r5
 802933c:	fb02 3201 	mla	r2, r2, r1, r3
 8029340:	10c3      	asrs	r3, r0, #3
 8029342:	fb1c fc05 	smulbb	ip, ip, r5
 8029346:	00c0      	lsls	r0, r0, #3
 8029348:	b292      	uxth	r2, r2
 802934a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802934e:	b2c0      	uxtb	r0, r0
 8029350:	fb03 c301 	mla	r3, r3, r1, ip
 8029354:	fb00 7001 	mla	r0, r0, r1, r7
 8029358:	1c51      	adds	r1, r2, #1
 802935a:	b29b      	uxth	r3, r3
 802935c:	b280      	uxth	r0, r0
 802935e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029362:	f100 0c01 	add.w	ip, r0, #1
 8029366:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802936a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802936e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029372:	ea4c 0202 	orr.w	r2, ip, r2
 8029376:	f103 0c01 	add.w	ip, r3, #1
 802937a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802937e:	095b      	lsrs	r3, r3, #5
 8029380:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029384:	431a      	orrs	r2, r3
 8029386:	f8a9 2000 	strh.w	r2, [r9]
 802938a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802938c:	f109 0902 	add.w	r9, r9, #2
 8029390:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029394:	441c      	add	r4, r3
 8029396:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029398:	441e      	add	r6, r3
 802939a:	e647      	b.n	802902c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802939c:	2800      	cmp	r0, #0
 802939e:	f43f aedf 	beq.w	8029160 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80293a2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80293a6:	9109      	str	r1, [sp, #36]	; 0x24
 80293a8:	0e09      	lsrs	r1, r1, #24
 80293aa:	9112      	str	r1, [sp, #72]	; 0x48
 80293ac:	e6d8      	b.n	8029160 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80293ae:	b01d      	add	sp, #116	; 0x74
 80293b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80293b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293b8:	b085      	sub	sp, #20
 80293ba:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80293be:	9102      	str	r1, [sp, #8]
 80293c0:	2c00      	cmp	r4, #0
 80293c2:	fb04 7103 	mla	r1, r4, r3, r7
 80293c6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80293ca:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80293ce:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80293d2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80293d6:	f2c0 810c 	blt.w	80295f2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80293da:	45a6      	cmp	lr, r4
 80293dc:	f340 8109 	ble.w	80295f2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80293e0:	2f00      	cmp	r7, #0
 80293e2:	f2c0 8104 	blt.w	80295ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80293e6:	42bb      	cmp	r3, r7
 80293e8:	f340 8101 	ble.w	80295ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80293ec:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80293f0:	1c7a      	adds	r2, r7, #1
 80293f2:	f100 8101 	bmi.w	80295f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80293f6:	4293      	cmp	r3, r2
 80293f8:	f340 80fe 	ble.w	80295f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80293fc:	2e00      	cmp	r6, #0
 80293fe:	f000 80fd 	beq.w	80295fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029402:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029406:	3401      	adds	r4, #1
 8029408:	f100 80fc 	bmi.w	8029604 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802940c:	45a6      	cmp	lr, r4
 802940e:	f340 80f9 	ble.w	8029604 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029412:	2800      	cmp	r0, #0
 8029414:	f000 80f9 	beq.w	802960a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8029418:	2f00      	cmp	r7, #0
 802941a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802941e:	f2c0 80ef 	blt.w	8029600 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029422:	42bb      	cmp	r3, r7
 8029424:	f340 80ec 	ble.w	8029600 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029428:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802942c:	3701      	adds	r7, #1
 802942e:	f100 80ef 	bmi.w	8029610 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029432:	42bb      	cmp	r3, r7
 8029434:	f340 80ec 	ble.w	8029610 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029438:	2e00      	cmp	r6, #0
 802943a:	f000 80eb 	beq.w	8029614 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802943e:	6852      	ldr	r2, [r2, #4]
 8029440:	b2b6      	uxth	r6, r6
 8029442:	b280      	uxth	r0, r0
 8029444:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029448:	fb00 fe06 	mul.w	lr, r0, r6
 802944c:	0136      	lsls	r6, r6, #4
 802944e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029452:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029456:	eba6 070e 	sub.w	r7, r6, lr
 802945a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802945e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029462:	b280      	uxth	r0, r0
 8029464:	b2bf      	uxth	r7, r7
 8029466:	1a1b      	subs	r3, r3, r0
 8029468:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802946c:	fb07 f60a 	mul.w	r6, r7, sl
 8029470:	b29b      	uxth	r3, r3
 8029472:	fb0b 6603 	mla	r6, fp, r3, r6
 8029476:	fb00 6609 	mla	r6, r0, r9, r6
 802947a:	fb0e 6608 	mla	r6, lr, r8, r6
 802947e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029482:	9600      	str	r6, [sp, #0]
 8029484:	2e00      	cmp	r6, #0
 8029486:	f000 80af 	beq.w	80295e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802948a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802948e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8029492:	9e02      	ldr	r6, [sp, #8]
 8029494:	fb0b fc0c 	mul.w	ip, fp, ip
 8029498:	fb0b f505 	mul.w	r5, fp, r5
 802949c:	8836      	ldrh	r6, [r6, #0]
 802949e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80294a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80294a6:	9501      	str	r5, [sp, #4]
 80294a8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80294ac:	44dc      	add	ip, fp
 80294ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80294b2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80294b6:	9503      	str	r5, [sp, #12]
 80294b8:	9d01      	ldr	r5, [sp, #4]
 80294ba:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80294be:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80294c2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80294c6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80294ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80294ce:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80294d2:	fb0a fa01 	mul.w	sl, sl, r1
 80294d6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80294da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80294de:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80294e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80294e6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80294ea:	4465      	add	r5, ip
 80294ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80294f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80294f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80294f8:	fb09 fc0c 	mul.w	ip, r9, ip
 80294fc:	0a2d      	lsrs	r5, r5, #8
 80294fe:	fb09 f904 	mul.w	r9, r9, r4
 8029502:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029506:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802950a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802950e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8029512:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029516:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802951a:	437d      	muls	r5, r7
 802951c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8029520:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8029524:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029528:	4461      	add	r1, ip
 802952a:	fb08 f404 	mul.w	r4, r8, r4
 802952e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029532:	fb08 f802 	mul.w	r8, r8, r2
 8029536:	0a09      	lsrs	r1, r1, #8
 8029538:	0a22      	lsrs	r2, r4, #8
 802953a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802953e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8029542:	fb07 f70a 	mul.w	r7, r7, sl
 8029546:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802954a:	4414      	add	r4, r2
 802954c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8029550:	0a24      	lsrs	r4, r4, #8
 8029552:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029556:	9a03      	ldr	r2, [sp, #12]
 8029558:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802955c:	fb02 5503 	mla	r5, r2, r3, r5
 8029560:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029564:	fb04 540e 	mla	r4, r4, lr, r5
 8029568:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802956c:	fb01 4100 	mla	r1, r1, r0, r4
 8029570:	0a09      	lsrs	r1, r1, #8
 8029572:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8029576:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802957a:	fb03 7101 	mla	r1, r3, r1, r7
 802957e:	9b00      	ldr	r3, [sp, #0]
 8029580:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029584:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8029588:	43da      	mvns	r2, r3
 802958a:	1233      	asrs	r3, r6, #8
 802958c:	fb00 e101 	mla	r1, r0, r1, lr
 8029590:	10f0      	asrs	r0, r6, #3
 8029592:	b2d2      	uxtb	r2, r2
 8029594:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8029598:	0a09      	lsrs	r1, r1, #8
 802959a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802959e:	00f6      	lsls	r6, r6, #3
 80295a0:	4353      	muls	r3, r2
 80295a2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80295a6:	4350      	muls	r0, r2
 80295a8:	b2f6      	uxtb	r6, r6
 80295aa:	4321      	orrs	r1, r4
 80295ac:	4356      	muls	r6, r2
 80295ae:	1c5a      	adds	r2, r3, #1
 80295b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80295b4:	0c0b      	lsrs	r3, r1, #16
 80295b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80295ba:	1c42      	adds	r2, r0, #1
 80295bc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80295c0:	0a0a      	lsrs	r2, r1, #8
 80295c2:	021b      	lsls	r3, r3, #8
 80295c4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80295c8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80295cc:	00d2      	lsls	r2, r2, #3
 80295ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80295d2:	4313      	orrs	r3, r2
 80295d4:	1c72      	adds	r2, r6, #1
 80295d6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80295da:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80295de:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80295e2:	4319      	orrs	r1, r3
 80295e4:	9b02      	ldr	r3, [sp, #8]
 80295e6:	8019      	strh	r1, [r3, #0]
 80295e8:	b005      	add	sp, #20
 80295ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295ee:	2500      	movs	r5, #0
 80295f0:	e6fe      	b.n	80293f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80295f2:	2100      	movs	r1, #0
 80295f4:	460d      	mov	r5, r1
 80295f6:	e706      	b.n	8029406 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80295f8:	2100      	movs	r1, #0
 80295fa:	e704      	b.n	8029406 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80295fc:	4631      	mov	r1, r6
 80295fe:	e702      	b.n	8029406 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029600:	2400      	movs	r4, #0
 8029602:	e713      	b.n	802942c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8029604:	2200      	movs	r2, #0
 8029606:	4614      	mov	r4, r2
 8029608:	e71a      	b.n	8029440 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802960a:	4602      	mov	r2, r0
 802960c:	4604      	mov	r4, r0
 802960e:	e717      	b.n	8029440 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029610:	2200      	movs	r2, #0
 8029612:	e715      	b.n	8029440 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029614:	4632      	mov	r2, r6
 8029616:	e713      	b.n	8029440 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08029618 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802961c:	b09b      	sub	sp, #108	; 0x6c
 802961e:	9218      	str	r2, [sp, #96]	; 0x60
 8029620:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029622:	9019      	str	r0, [sp, #100]	; 0x64
 8029624:	9116      	str	r1, [sp, #88]	; 0x58
 8029626:	6850      	ldr	r0, [r2, #4]
 8029628:	9307      	str	r3, [sp, #28]
 802962a:	6812      	ldr	r2, [r2, #0]
 802962c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029630:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029634:	fb00 1303 	mla	r3, r0, r3, r1
 8029638:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802963c:	930a      	str	r3, [sp, #40]	; 0x28
 802963e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029640:	681b      	ldr	r3, [r3, #0]
 8029642:	930f      	str	r3, [sp, #60]	; 0x3c
 8029644:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029646:	2b00      	cmp	r3, #0
 8029648:	dc03      	bgt.n	8029652 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802964a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802964c:	2b00      	cmp	r3, #0
 802964e:	f340 8387 	ble.w	8029d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029652:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029654:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029658:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802965c:	1e48      	subs	r0, r1, #1
 802965e:	1e57      	subs	r7, r2, #1
 8029660:	9b07      	ldr	r3, [sp, #28]
 8029662:	2b00      	cmp	r3, #0
 8029664:	f340 8166 	ble.w	8029934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8029668:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802966c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029670:	d406      	bmi.n	8029680 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029672:	4584      	cmp	ip, r0
 8029674:	da04      	bge.n	8029680 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029676:	2b00      	cmp	r3, #0
 8029678:	db02      	blt.n	8029680 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802967a:	42bb      	cmp	r3, r7
 802967c:	f2c0 815b 	blt.w	8029936 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029680:	f11c 0c01 	adds.w	ip, ip, #1
 8029684:	f100 814b 	bmi.w	802991e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029688:	4561      	cmp	r1, ip
 802968a:	f2c0 8148 	blt.w	802991e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802968e:	3301      	adds	r3, #1
 8029690:	f100 8145 	bmi.w	802991e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029694:	429a      	cmp	r2, r3
 8029696:	f2c0 8142 	blt.w	802991e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802969a:	9b07      	ldr	r3, [sp, #28]
 802969c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802969e:	9317      	str	r3, [sp, #92]	; 0x5c
 80296a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80296a2:	2b00      	cmp	r3, #0
 80296a4:	f340 8165 	ble.w	8029972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80296a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80296aa:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80296ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80296b0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80296b4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80296b8:	1422      	asrs	r2, r4, #16
 80296ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80296be:	689b      	ldr	r3, [r3, #8]
 80296c0:	f100 81d5 	bmi.w	8029a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80296c4:	f103 38ff 	add.w	r8, r3, #4294967295
 80296c8:	4542      	cmp	r2, r8
 80296ca:	f280 81d0 	bge.w	8029a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80296ce:	f1bc 0f00 	cmp.w	ip, #0
 80296d2:	f2c0 81cc 	blt.w	8029a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80296d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80296da:	45c4      	cmp	ip, r8
 80296dc:	f280 81c7 	bge.w	8029a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80296e0:	b21b      	sxth	r3, r3
 80296e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80296e4:	fb0c 2203 	mla	r2, ip, r3, r2
 80296e8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80296ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80296f0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80296f4:	2900      	cmp	r1, #0
 80296f6:	f000 8182 	beq.w	80299fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80296fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80296fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8029700:	0e2d      	lsrs	r5, r5, #24
 8029702:	9512      	str	r5, [sp, #72]	; 0x48
 8029704:	b180      	cbz	r0, 8029728 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029706:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802970a:	3b01      	subs	r3, #1
 802970c:	009b      	lsls	r3, r3, #2
 802970e:	3304      	adds	r3, #4
 8029710:	eb08 0c03 	add.w	ip, r8, r3
 8029714:	f858 3003 	ldr.w	r3, [r8, r3]
 8029718:	9308      	str	r3, [sp, #32]
 802971a:	0e1b      	lsrs	r3, r3, #24
 802971c:	9310      	str	r3, [sp, #64]	; 0x40
 802971e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029722:	930c      	str	r3, [sp, #48]	; 0x30
 8029724:	0e1b      	lsrs	r3, r3, #24
 8029726:	9313      	str	r3, [sp, #76]	; 0x4c
 8029728:	b289      	uxth	r1, r1
 802972a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802972c:	b280      	uxth	r0, r0
 802972e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029730:	fb01 f900 	mul.w	r9, r1, r0
 8029734:	0109      	lsls	r1, r1, #4
 8029736:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802973a:	eba1 0809 	sub.w	r8, r1, r9
 802973e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8029742:	b280      	uxth	r0, r0
 8029744:	fa1f f888 	uxth.w	r8, r8
 8029748:	1a09      	subs	r1, r1, r0
 802974a:	fb08 f303 	mul.w	r3, r8, r3
 802974e:	b289      	uxth	r1, r1
 8029750:	fb01 330e 	mla	r3, r1, lr, r3
 8029754:	fb00 3305 	mla	r3, r0, r5, r3
 8029758:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802975a:	fb09 3305 	mla	r3, r9, r5, r3
 802975e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029762:	2b00      	cmp	r3, #0
 8029764:	f000 80d2 	beq.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029768:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802976c:	d01b      	beq.n	80297a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802976e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029772:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029776:	fb0e fa0a 	mul.w	sl, lr, sl
 802977a:	fb0e fe02 	mul.w	lr, lr, r2
 802977e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029782:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029786:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802978a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802978e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029792:	4452      	add	r2, sl
 8029794:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029798:	0a12      	lsrs	r2, r2, #8
 802979a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802979e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80297a2:	ea42 020c 	orr.w	r2, r2, ip
 80297a6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80297a8:	2dff      	cmp	r5, #255	; 0xff
 80297aa:	d021      	beq.n	80297f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80297ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80297ae:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80297b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80297b4:	fb05 fb0b 	mul.w	fp, r5, fp
 80297b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80297ba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80297be:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80297c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80297c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80297c8:	fb05 fa0a 	mul.w	sl, r5, sl
 80297cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80297d0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80297d4:	44de      	add	lr, fp
 80297d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80297da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80297de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80297e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80297e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80297ea:	ea4e 050a 	orr.w	r5, lr, sl
 80297ee:	950b      	str	r5, [sp, #44]	; 0x2c
 80297f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80297f2:	2dff      	cmp	r5, #255	; 0xff
 80297f4:	d021      	beq.n	802983a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80297f6:	9d08      	ldr	r5, [sp, #32]
 80297f8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80297fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80297fe:	fb05 fb0b 	mul.w	fp, r5, fp
 8029802:	9d08      	ldr	r5, [sp, #32]
 8029804:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029808:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802980a:	fb05 fa0e 	mul.w	sl, r5, lr
 802980e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029812:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029816:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802981a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802981e:	44de      	add	lr, fp
 8029820:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029824:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029828:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802982c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029830:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029834:	ea4e 050a 	orr.w	r5, lr, sl
 8029838:	9508      	str	r5, [sp, #32]
 802983a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802983c:	2dff      	cmp	r5, #255	; 0xff
 802983e:	d021      	beq.n	8029884 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029840:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029842:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029846:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029848:	fb05 fb0b 	mul.w	fp, r5, fp
 802984c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802984e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029852:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029854:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029858:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802985c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029860:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029864:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029868:	44de      	add	lr, fp
 802986a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802986e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029872:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029876:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802987a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802987e:	ea4e 050a 	orr.w	r5, lr, sl
 8029882:	950c      	str	r5, [sp, #48]	; 0x30
 8029884:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029886:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802988a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802988e:	2bff      	cmp	r3, #255	; 0xff
 8029890:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029894:	9d08      	ldr	r5, [sp, #32]
 8029896:	fb08 fc0c 	mul.w	ip, r8, ip
 802989a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802989e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80298a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80298a4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80298a8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80298ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80298ae:	fb09 cc0e 	mla	ip, r9, lr, ip
 80298b2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80298b6:	fb08 f80e 	mul.w	r8, r8, lr
 80298ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80298be:	fb01 8202 	mla	r2, r1, r2, r8
 80298c2:	9908      	ldr	r1, [sp, #32]
 80298c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80298c8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80298cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80298ce:	fb00 220a 	mla	r2, r0, sl, r2
 80298d2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80298d6:	fb09 2900 	mla	r9, r9, r0, r2
 80298da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80298de:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80298e2:	ea4c 0c09 	orr.w	ip, ip, r9
 80298e6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80298ea:	f040 8091 	bne.w	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80298ee:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80298f2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80298f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80298fa:	f022 0207 	bic.w	r2, r2, #7
 80298fe:	431a      	orrs	r2, r3
 8029900:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029904:	ea4c 0c02 	orr.w	ip, ip, r2
 8029908:	f8a7 c000 	strh.w	ip, [r7]
 802990c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802990e:	3702      	adds	r7, #2
 8029910:	441c      	add	r4, r3
 8029912:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029914:	441e      	add	r6, r3
 8029916:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029918:	3b01      	subs	r3, #1
 802991a:	9317      	str	r3, [sp, #92]	; 0x5c
 802991c:	e6c0      	b.n	80296a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802991e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029920:	441c      	add	r4, r3
 8029922:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029924:	441e      	add	r6, r3
 8029926:	9b07      	ldr	r3, [sp, #28]
 8029928:	3b01      	subs	r3, #1
 802992a:	9307      	str	r3, [sp, #28]
 802992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802992e:	3302      	adds	r3, #2
 8029930:	930a      	str	r3, [sp, #40]	; 0x28
 8029932:	e695      	b.n	8029660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029934:	d024      	beq.n	8029980 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8029936:	9b07      	ldr	r3, [sp, #28]
 8029938:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802993a:	3b01      	subs	r3, #1
 802993c:	fb00 4003 	mla	r0, r0, r3, r4
 8029940:	1400      	asrs	r0, r0, #16
 8029942:	f53f aeaa 	bmi.w	802969a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029946:	3901      	subs	r1, #1
 8029948:	4288      	cmp	r0, r1
 802994a:	f6bf aea6 	bge.w	802969a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802994e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029950:	fb01 6303 	mla	r3, r1, r3, r6
 8029954:	141b      	asrs	r3, r3, #16
 8029956:	f53f aea0 	bmi.w	802969a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802995a:	3a01      	subs	r2, #1
 802995c:	4293      	cmp	r3, r2
 802995e:	f6bf ae9c 	bge.w	802969a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029962:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029966:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802996a:	f1bb 0f00 	cmp.w	fp, #0
 802996e:	f300 809a 	bgt.w	8029aa6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029972:	9b07      	ldr	r3, [sp, #28]
 8029974:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802997a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802997e:	930a      	str	r3, [sp, #40]	; 0x28
 8029980:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029982:	2b00      	cmp	r3, #0
 8029984:	f340 81ec 	ble.w	8029d60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802998c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802998e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029992:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029996:	eef0 6a62 	vmov.f32	s13, s5
 802999a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802999e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80299a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80299a6:	ee16 4a90 	vmov	r4, s13
 80299aa:	eef0 6a43 	vmov.f32	s13, s6
 80299ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80299b2:	ee16 6a90 	vmov	r6, s13
 80299b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80299ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80299be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80299c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80299c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80299ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80299ce:	ee12 2a90 	vmov	r2, s5
 80299d2:	eef0 2a47 	vmov.f32	s5, s14
 80299d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80299da:	ee13 2a10 	vmov	r2, s6
 80299de:	9327      	str	r3, [sp, #156]	; 0x9c
 80299e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80299e2:	eeb0 3a67 	vmov.f32	s6, s15
 80299e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80299ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80299ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80299ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80299f0:	3b01      	subs	r3, #1
 80299f2:	9316      	str	r3, [sp, #88]	; 0x58
 80299f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80299f6:	bf08      	it	eq
 80299f8:	4613      	moveq	r3, r2
 80299fa:	9307      	str	r3, [sp, #28]
 80299fc:	e622      	b.n	8029644 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80299fe:	2800      	cmp	r0, #0
 8029a00:	f43f ae92 	beq.w	8029728 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029a04:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029a08:	9308      	str	r3, [sp, #32]
 8029a0a:	0e1b      	lsrs	r3, r3, #24
 8029a0c:	9310      	str	r3, [sp, #64]	; 0x40
 8029a0e:	e68b      	b.n	8029728 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029a10:	8839      	ldrh	r1, [r7, #0]
 8029a12:	43db      	mvns	r3, r3
 8029a14:	4dd4      	ldr	r5, [pc, #848]	; (8029d68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029a16:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029a1a:	fa5f f883 	uxtb.w	r8, r3
 8029a1e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029a22:	10c8      	asrs	r0, r1, #3
 8029a24:	00cb      	lsls	r3, r1, #3
 8029a26:	fb0e fe08 	mul.w	lr, lr, r8
 8029a2a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029a2e:	b2db      	uxtb	r3, r3
 8029a30:	f10e 0101 	add.w	r1, lr, #1
 8029a34:	fb00 f008 	mul.w	r0, r0, r8
 8029a38:	fb03 f308 	mul.w	r3, r3, r8
 8029a3c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029a40:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029a44:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029a48:	f100 0e01 	add.w	lr, r0, #1
 8029a4c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029a50:	b2c9      	uxtb	r1, r1
 8029a52:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029a56:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029a5a:	00d2      	lsls	r2, r2, #3
 8029a5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029a60:	430a      	orrs	r2, r1
 8029a62:	1c59      	adds	r1, r3, #1
 8029a64:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029a68:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029a6c:	e748      	b.n	8029900 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8029a6e:	f112 0801 	adds.w	r8, r2, #1
 8029a72:	f53f af4b 	bmi.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029a76:	4543      	cmp	r3, r8
 8029a78:	f6ff af48 	blt.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029a7c:	f11c 0801 	adds.w	r8, ip, #1
 8029a80:	f53f af44 	bmi.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029a84:	45c6      	cmp	lr, r8
 8029a86:	f6ff af41 	blt.w	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029a8a:	b21b      	sxth	r3, r3
 8029a8c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029a90:	fa0f f28e 	sxth.w	r2, lr
 8029a94:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029a98:	9200      	str	r2, [sp, #0]
 8029a9a:	4639      	mov	r1, r7
 8029a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029a9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8029aa0:	f7ff fc88 	bl	80293b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029aa4:	e732      	b.n	802990c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029aa6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029aa8:	1421      	asrs	r1, r4, #16
 8029aaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029aac:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029ab0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029ab4:	1433      	asrs	r3, r6, #16
 8029ab6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029aba:	fb07 1303 	mla	r3, r7, r3, r1
 8029abe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029ac0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029ac4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029ac8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029acc:	2a00      	cmp	r2, #0
 8029ace:	f000 8108 	beq.w	8029ce2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8029ad2:	684d      	ldr	r5, [r1, #4]
 8029ad4:	950d      	str	r5, [sp, #52]	; 0x34
 8029ad6:	0e2d      	lsrs	r5, r5, #24
 8029ad8:	9514      	str	r5, [sp, #80]	; 0x50
 8029ada:	b178      	cbz	r0, 8029afc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029adc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8029ae0:	3f01      	subs	r7, #1
 8029ae2:	00bf      	lsls	r7, r7, #2
 8029ae4:	3704      	adds	r7, #4
 8029ae6:	eb01 0e07 	add.w	lr, r1, r7
 8029aea:	59c9      	ldr	r1, [r1, r7]
 8029aec:	9109      	str	r1, [sp, #36]	; 0x24
 8029aee:	0e09      	lsrs	r1, r1, #24
 8029af0:	9111      	str	r1, [sp, #68]	; 0x44
 8029af2:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029af6:	910e      	str	r1, [sp, #56]	; 0x38
 8029af8:	0e09      	lsrs	r1, r1, #24
 8029afa:	9115      	str	r1, [sp, #84]	; 0x54
 8029afc:	b292      	uxth	r2, r2
 8029afe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029b00:	b280      	uxth	r0, r0
 8029b02:	fb02 f900 	mul.w	r9, r2, r0
 8029b06:	0112      	lsls	r2, r2, #4
 8029b08:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029b0c:	eba2 0e09 	sub.w	lr, r2, r9
 8029b10:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029b16:	b280      	uxth	r0, r0
 8029b18:	fa1f fe8e 	uxth.w	lr, lr
 8029b1c:	1a09      	subs	r1, r1, r0
 8029b1e:	fb0e f202 	mul.w	r2, lr, r2
 8029b22:	b289      	uxth	r1, r1
 8029b24:	fb01 220c 	mla	r2, r1, ip, r2
 8029b28:	fb00 2205 	mla	r2, r0, r5, r2
 8029b2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029b2e:	fb09 2205 	mla	r2, r9, r5, r2
 8029b32:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029b36:	2a00      	cmp	r2, #0
 8029b38:	f000 80ca 	beq.w	8029cd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029b3c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029b40:	d019      	beq.n	8029b76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8029b42:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029b4a:	fb0c fa0a 	mul.w	sl, ip, sl
 8029b4e:	fb0c fc03 	mul.w	ip, ip, r3
 8029b52:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029b56:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029b5a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029b5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029b62:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029b66:	4453      	add	r3, sl
 8029b68:	0a3f      	lsrs	r7, r7, #8
 8029b6a:	0a1b      	lsrs	r3, r3, #8
 8029b6c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029b70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029b74:	433b      	orrs	r3, r7
 8029b76:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029b78:	2dff      	cmp	r5, #255	; 0xff
 8029b7a:	d020      	beq.n	8029bbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8029b7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029b7e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029b82:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029b84:	436f      	muls	r7, r5
 8029b86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029b88:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029b8c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029b90:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029b92:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029b96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029b9a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029b9e:	44bc      	add	ip, r7
 8029ba0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029ba4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029ba8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029bac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029bb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029bb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029bb8:	ea4c 050a 	orr.w	r5, ip, sl
 8029bbc:	950d      	str	r5, [sp, #52]	; 0x34
 8029bbe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029bc0:	2dff      	cmp	r5, #255	; 0xff
 8029bc2:	d020      	beq.n	8029c06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029bc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029bc6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029bca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029bcc:	436f      	muls	r7, r5
 8029bce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029bd0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029bd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029bd6:	fb05 fa0c 	mul.w	sl, r5, ip
 8029bda:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029bde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029be2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029be6:	44bc      	add	ip, r7
 8029be8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029bec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029bf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029bf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029bf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029bfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c00:	ea4c 050a 	orr.w	r5, ip, sl
 8029c04:	9509      	str	r5, [sp, #36]	; 0x24
 8029c06:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c08:	2dff      	cmp	r5, #255	; 0xff
 8029c0a:	d020      	beq.n	8029c4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8029c0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029c0e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c12:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c14:	436f      	muls	r7, r5
 8029c16:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029c18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c1c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029c26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c2a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c2e:	44bc      	add	ip, r7
 8029c30:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029c34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029c3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c48:	ea4c 050a 	orr.w	r5, ip, sl
 8029c4c:	950e      	str	r5, [sp, #56]	; 0x38
 8029c4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029c50:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029c58:	2aff      	cmp	r2, #255	; 0xff
 8029c5a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029c60:	fb0e f707 	mul.w	r7, lr, r7
 8029c64:	fb01 770c 	mla	r7, r1, ip, r7
 8029c68:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029c6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029c6e:	fb00 770c 	mla	r7, r0, ip, r7
 8029c72:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029c76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029c78:	fb09 770c 	mla	r7, r9, ip, r7
 8029c7c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029c80:	fb0e fe0c 	mul.w	lr, lr, ip
 8029c84:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029c88:	fb01 e303 	mla	r3, r1, r3, lr
 8029c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029c8e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029c92:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8029c96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8029c98:	fb00 330a 	mla	r3, r0, sl, r3
 8029c9c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8029ca0:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029ca4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029ca8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029cac:	ea47 070c 	orr.w	r7, r7, ip
 8029cb0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029cb4:	d11e      	bne.n	8029cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029cb6:	097a      	lsrs	r2, r7, #5
 8029cb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8029cbc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029cc0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029cc4:	f023 0307 	bic.w	r3, r3, #7
 8029cc8:	4313      	orrs	r3, r2
 8029cca:	431f      	orrs	r7, r3
 8029ccc:	f8a8 7000 	strh.w	r7, [r8]
 8029cd0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029cd2:	f108 0802 	add.w	r8, r8, #2
 8029cd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029cda:	441c      	add	r4, r3
 8029cdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029cde:	441e      	add	r6, r3
 8029ce0:	e643      	b.n	802996a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029ce2:	2800      	cmp	r0, #0
 8029ce4:	f43f af0a 	beq.w	8029afc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029ce8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029cec:	9109      	str	r1, [sp, #36]	; 0x24
 8029cee:	0e09      	lsrs	r1, r1, #24
 8029cf0:	9111      	str	r1, [sp, #68]	; 0x44
 8029cf2:	e703      	b.n	8029afc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029cf4:	f8b8 1000 	ldrh.w	r1, [r8]
 8029cf8:	43d2      	mvns	r2, r2
 8029cfa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029cfe:	fa5f fe82 	uxtb.w	lr, r2
 8029d02:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029d06:	10c8      	asrs	r0, r1, #3
 8029d08:	00ca      	lsls	r2, r1, #3
 8029d0a:	fb0c fc0e 	mul.w	ip, ip, lr
 8029d0e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029d12:	b2d2      	uxtb	r2, r2
 8029d14:	f10c 0101 	add.w	r1, ip, #1
 8029d18:	fb00 f00e 	mul.w	r0, r0, lr
 8029d1c:	fb02 f20e 	mul.w	r2, r2, lr
 8029d20:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029d24:	0c39      	lsrs	r1, r7, #16
 8029d26:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029d2a:	490f      	ldr	r1, [pc, #60]	; (8029d68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029d2c:	fa5f fc8c 	uxtb.w	ip, ip
 8029d30:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029d34:	1c41      	adds	r1, r0, #1
 8029d36:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029d3a:	1c51      	adds	r1, r2, #1
 8029d3c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029d40:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029d44:	00c0      	lsls	r0, r0, #3
 8029d46:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029d4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029d4e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029d52:	ea4c 0c00 	orr.w	ip, ip, r0
 8029d56:	ea47 0c0c 	orr.w	ip, r7, ip
 8029d5a:	f8a8 c000 	strh.w	ip, [r8]
 8029d5e:	e7b7      	b.n	8029cd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029d60:	b01b      	add	sp, #108	; 0x6c
 8029d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d66:	bf00      	nop
 8029d68:	fffff800 	.word	0xfffff800

08029d6c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d70:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8029d74:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029d78:	2d00      	cmp	r5, #0
 8029d7a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029d7e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8029d82:	fb05 0e03 	mla	lr, r5, r3, r0
 8029d86:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8029d8a:	f2c0 808c 	blt.w	8029ea6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029d8e:	45a9      	cmp	r9, r5
 8029d90:	f340 8089 	ble.w	8029ea6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029d94:	2800      	cmp	r0, #0
 8029d96:	f2c0 8084 	blt.w	8029ea2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029d9a:	4580      	cmp	r8, r0
 8029d9c:	f340 8081 	ble.w	8029ea2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029da0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029da4:	f01e 0f01 	tst.w	lr, #1
 8029da8:	5d16      	ldrb	r6, [r2, r4]
 8029daa:	bf0c      	ite	eq
 8029dac:	f006 060f 	andeq.w	r6, r6, #15
 8029db0:	1136      	asrne	r6, r6, #4
 8029db2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029db6:	b2f6      	uxtb	r6, r6
 8029db8:	1c44      	adds	r4, r0, #1
 8029dba:	d477      	bmi.n	8029eac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029dbc:	45a0      	cmp	r8, r4
 8029dbe:	dd75      	ble.n	8029eac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029dc0:	2f00      	cmp	r7, #0
 8029dc2:	d075      	beq.n	8029eb0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8029dc4:	f10e 0a01 	add.w	sl, lr, #1
 8029dc8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029dcc:	f01a 0f01 	tst.w	sl, #1
 8029dd0:	5d14      	ldrb	r4, [r2, r4]
 8029dd2:	bf0c      	ite	eq
 8029dd4:	f004 040f 	andeq.w	r4, r4, #15
 8029dd8:	1124      	asrne	r4, r4, #4
 8029dda:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029dde:	b2e4      	uxtb	r4, r4
 8029de0:	3501      	adds	r5, #1
 8029de2:	d469      	bmi.n	8029eb8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029de4:	45a9      	cmp	r9, r5
 8029de6:	dd67      	ble.n	8029eb8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029de8:	f1bc 0f00 	cmp.w	ip, #0
 8029dec:	d067      	beq.n	8029ebe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8029dee:	2800      	cmp	r0, #0
 8029df0:	db60      	blt.n	8029eb4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029df2:	4580      	cmp	r8, r0
 8029df4:	dd5e      	ble.n	8029eb4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029df6:	eb03 090e 	add.w	r9, r3, lr
 8029dfa:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029dfe:	f019 0f01 	tst.w	r9, #1
 8029e02:	5d55      	ldrb	r5, [r2, r5]
 8029e04:	bf0c      	ite	eq
 8029e06:	f005 050f 	andeq.w	r5, r5, #15
 8029e0a:	112d      	asrne	r5, r5, #4
 8029e0c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029e10:	b2ed      	uxtb	r5, r5
 8029e12:	3001      	adds	r0, #1
 8029e14:	d456      	bmi.n	8029ec4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029e16:	4580      	cmp	r8, r0
 8029e18:	dd54      	ble.n	8029ec4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029e1a:	2f00      	cmp	r7, #0
 8029e1c:	d054      	beq.n	8029ec8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8029e1e:	3301      	adds	r3, #1
 8029e20:	449e      	add	lr, r3
 8029e22:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029e26:	f01e 0f01 	tst.w	lr, #1
 8029e2a:	5cd0      	ldrb	r0, [r2, r3]
 8029e2c:	bf0c      	ite	eq
 8029e2e:	f000 000f 	andeq.w	r0, r0, #15
 8029e32:	1100      	asrne	r0, r0, #4
 8029e34:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029e38:	b2c3      	uxtb	r3, r0
 8029e3a:	b2ba      	uxth	r2, r7
 8029e3c:	fa1f fc8c 	uxth.w	ip, ip
 8029e40:	fb02 f00c 	mul.w	r0, r2, ip
 8029e44:	0112      	lsls	r2, r2, #4
 8029e46:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029e4a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8029e4e:	1a12      	subs	r2, r2, r0
 8029e50:	fa1f fc8c 	uxth.w	ip, ip
 8029e54:	b292      	uxth	r2, r2
 8029e56:	eba7 070c 	sub.w	r7, r7, ip
 8029e5a:	4362      	muls	r2, r4
 8029e5c:	b2bf      	uxth	r7, r7
 8029e5e:	fb06 2207 	mla	r2, r6, r7, r2
 8029e62:	fb0c 2505 	mla	r5, ip, r5, r2
 8029e66:	fb00 5303 	mla	r3, r0, r3, r5
 8029e6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029e6e:	b1b3      	cbz	r3, 8029e9e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029e70:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8029e74:	435a      	muls	r2, r3
 8029e76:	1c53      	adds	r3, r2, #1
 8029e78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029e7c:	4a2d      	ldr	r2, [pc, #180]	; (8029f34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8029e7e:	121b      	asrs	r3, r3, #8
 8029e80:	6812      	ldr	r2, [r2, #0]
 8029e82:	2bff      	cmp	r3, #255	; 0xff
 8029e84:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029e88:	d120      	bne.n	8029ecc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8029e8a:	0950      	lsrs	r0, r2, #5
 8029e8c:	4b2a      	ldr	r3, [pc, #168]	; (8029f38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8029e8e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029e92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029e96:	4033      	ands	r3, r6
 8029e98:	4318      	orrs	r0, r3
 8029e9a:	4302      	orrs	r2, r0
 8029e9c:	800a      	strh	r2, [r1, #0]
 8029e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029ea2:	2600      	movs	r6, #0
 8029ea4:	e788      	b.n	8029db8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029ea6:	2400      	movs	r4, #0
 8029ea8:	4626      	mov	r6, r4
 8029eaa:	e799      	b.n	8029de0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029eac:	2400      	movs	r4, #0
 8029eae:	e797      	b.n	8029de0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029eb0:	463c      	mov	r4, r7
 8029eb2:	e795      	b.n	8029de0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029eb4:	2500      	movs	r5, #0
 8029eb6:	e7ac      	b.n	8029e12 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029eb8:	2300      	movs	r3, #0
 8029eba:	461d      	mov	r5, r3
 8029ebc:	e7bd      	b.n	8029e3a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ebe:	4663      	mov	r3, ip
 8029ec0:	4665      	mov	r5, ip
 8029ec2:	e7ba      	b.n	8029e3a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ec4:	2300      	movs	r3, #0
 8029ec6:	e7b8      	b.n	8029e3a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ec8:	463b      	mov	r3, r7
 8029eca:	e7b6      	b.n	8029e3a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029ecc:	880d      	ldrh	r5, [r1, #0]
 8029ece:	b29f      	uxth	r7, r3
 8029ed0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029ed4:	43db      	mvns	r3, r3
 8029ed6:	122c      	asrs	r4, r5, #8
 8029ed8:	fb10 f007 	smulbb	r0, r0, r7
 8029edc:	b2db      	uxtb	r3, r3
 8029ede:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029ee2:	b2f6      	uxtb	r6, r6
 8029ee4:	b2d2      	uxtb	r2, r2
 8029ee6:	fb04 0403 	mla	r4, r4, r3, r0
 8029eea:	10e8      	asrs	r0, r5, #3
 8029eec:	fb12 f207 	smulbb	r2, r2, r7
 8029ef0:	00ed      	lsls	r5, r5, #3
 8029ef2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029ef6:	b2a4      	uxth	r4, r4
 8029ef8:	fb16 f607 	smulbb	r6, r6, r7
 8029efc:	b2ed      	uxtb	r5, r5
 8029efe:	fb00 6603 	mla	r6, r0, r3, r6
 8029f02:	fb05 2303 	mla	r3, r5, r3, r2
 8029f06:	b2b0      	uxth	r0, r6
 8029f08:	b29a      	uxth	r2, r3
 8029f0a:	1c63      	adds	r3, r4, #1
 8029f0c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029f10:	1c53      	adds	r3, r2, #1
 8029f12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029f16:	1c42      	adds	r2, r0, #1
 8029f18:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029f1c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029f20:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029f24:	0940      	lsrs	r0, r0, #5
 8029f26:	4323      	orrs	r3, r4
 8029f28:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029f2c:	4303      	orrs	r3, r0
 8029f2e:	800b      	strh	r3, [r1, #0]
 8029f30:	e7b5      	b.n	8029e9e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029f32:	bf00      	nop
 8029f34:	2402ae74 	.word	0x2402ae74
 8029f38:	00fff800 	.word	0x00fff800

08029f3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f40:	b097      	sub	sp, #92	; 0x5c
 8029f42:	9214      	str	r2, [sp, #80]	; 0x50
 8029f44:	9309      	str	r3, [sp, #36]	; 0x24
 8029f46:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029f48:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8029f4c:	9015      	str	r0, [sp, #84]	; 0x54
 8029f4e:	910d      	str	r1, [sp, #52]	; 0x34
 8029f50:	6850      	ldr	r0, [r2, #4]
 8029f52:	930f      	str	r3, [sp, #60]	; 0x3c
 8029f54:	6812      	ldr	r2, [r2, #0]
 8029f56:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8029f5a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8029f5e:	fb00 1303 	mla	r3, r0, r3, r1
 8029f62:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029f66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f68:	689b      	ldr	r3, [r3, #8]
 8029f6a:	3301      	adds	r3, #1
 8029f6c:	f023 0301 	bic.w	r3, r3, #1
 8029f70:	930a      	str	r3, [sp, #40]	; 0x28
 8029f72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f74:	681f      	ldr	r7, [r3, #0]
 8029f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029f78:	2b00      	cmp	r3, #0
 8029f7a:	dc03      	bgt.n	8029f84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029f7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029f7e:	2b00      	cmp	r3, #0
 8029f80:	f340 8289 	ble.w	802a496 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8029f84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029f86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029f8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029f8e:	1e48      	subs	r0, r1, #1
 8029f90:	f102 3cff 	add.w	ip, r2, #4294967295
 8029f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f96:	2b00      	cmp	r3, #0
 8029f98:	f340 80c5 	ble.w	802a126 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8029f9c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029fa0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029fa4:	d406      	bmi.n	8029fb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029fa6:	4586      	cmp	lr, r0
 8029fa8:	da04      	bge.n	8029fb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029faa:	2b00      	cmp	r3, #0
 8029fac:	db02      	blt.n	8029fb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029fae:	4563      	cmp	r3, ip
 8029fb0:	f2c0 80ba 	blt.w	802a128 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029fb4:	f11e 0e01 	adds.w	lr, lr, #1
 8029fb8:	f100 80ab 	bmi.w	802a112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029fbc:	4571      	cmp	r1, lr
 8029fbe:	f2c0 80a8 	blt.w	802a112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029fc2:	3301      	adds	r3, #1
 8029fc4:	f100 80a5 	bmi.w	802a112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029fc8:	429a      	cmp	r2, r3
 8029fca:	f2c0 80a2 	blt.w	802a112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8029fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029fd0:	46c8      	mov	r8, r9
 8029fd2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8029fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8029fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029fda:	2b00      	cmp	r3, #0
 8029fdc:	f340 80c4 	ble.w	802a168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8029fe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029fe2:	1430      	asrs	r0, r6, #16
 8029fe4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029fe8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029fec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029ff0:	1423      	asrs	r3, r4, #16
 8029ff2:	f100 814f 	bmi.w	802a294 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029ff6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029ffa:	455b      	cmp	r3, fp
 8029ffc:	f280 814a 	bge.w	802a294 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a000:	2800      	cmp	r0, #0
 802a002:	f2c0 8147 	blt.w	802a294 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a006:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a00a:	4558      	cmp	r0, fp
 802a00c:	f280 8142 	bge.w	802a294 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a012:	fb00 3305 	mla	r3, r0, r5, r3
 802a016:	0858      	lsrs	r0, r3, #1
 802a018:	07dd      	lsls	r5, r3, #31
 802a01a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a01e:	bf54      	ite	pl
 802a020:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a024:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a028:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a02c:	fa5f fc8c 	uxtb.w	ip, ip
 802a030:	2a00      	cmp	r2, #0
 802a032:	f000 80dd 	beq.w	802a1f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802a036:	1c58      	adds	r0, r3, #1
 802a038:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a03c:	07c0      	lsls	r0, r0, #31
 802a03e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a042:	bf54      	ite	pl
 802a044:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a048:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a04c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a050:	fa5f f08e 	uxtb.w	r0, lr
 802a054:	9010      	str	r0, [sp, #64]	; 0x40
 802a056:	b1d9      	cbz	r1, 802a090 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802a058:	4453      	add	r3, sl
 802a05a:	0858      	lsrs	r0, r3, #1
 802a05c:	07dd      	lsls	r5, r3, #31
 802a05e:	f103 0301 	add.w	r3, r3, #1
 802a062:	5c38      	ldrb	r0, [r7, r0]
 802a064:	bf54      	ite	pl
 802a066:	f000 000f 	andpl.w	r0, r0, #15
 802a06a:	1100      	asrmi	r0, r0, #4
 802a06c:	07dd      	lsls	r5, r3, #31
 802a06e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a072:	b2c0      	uxtb	r0, r0
 802a074:	900b      	str	r0, [sp, #44]	; 0x2c
 802a076:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802a07a:	f817 e000 	ldrb.w	lr, [r7, r0]
 802a07e:	bf54      	ite	pl
 802a080:	f00e 030f 	andpl.w	r3, lr, #15
 802a084:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802a088:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a08c:	b2db      	uxtb	r3, r3
 802a08e:	9311      	str	r3, [sp, #68]	; 0x44
 802a090:	b292      	uxth	r2, r2
 802a092:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a094:	b289      	uxth	r1, r1
 802a096:	fb02 f301 	mul.w	r3, r2, r1
 802a09a:	0112      	lsls	r2, r2, #4
 802a09c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a0a0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a0a4:	1ad2      	subs	r2, r2, r3
 802a0a6:	b289      	uxth	r1, r1
 802a0a8:	b292      	uxth	r2, r2
 802a0aa:	1a40      	subs	r0, r0, r1
 802a0ac:	436a      	muls	r2, r5
 802a0ae:	b280      	uxth	r0, r0
 802a0b0:	fb0c 2c00 	mla	ip, ip, r0, r2
 802a0b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a0b6:	fb01 c102 	mla	r1, r1, r2, ip
 802a0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a0bc:	fb03 1302 	mla	r3, r3, r2, r1
 802a0c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a0c4:	b1db      	cbz	r3, 802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a0c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a0c8:	4353      	muls	r3, r2
 802a0ca:	1c5a      	adds	r2, r3, #1
 802a0cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a0d0:	4ac6      	ldr	r2, [pc, #792]	; (802a3ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802a0d2:	121b      	asrs	r3, r3, #8
 802a0d4:	6812      	ldr	r2, [r2, #0]
 802a0d6:	2bff      	cmp	r3, #255	; 0xff
 802a0d8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a0dc:	f040 8099 	bne.w	802a212 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802a0e0:	0953      	lsrs	r3, r2, #5
 802a0e2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a0e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a0ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a0ee:	f02c 0c07 	bic.w	ip, ip, #7
 802a0f2:	ea43 0c0c 	orr.w	ip, r3, ip
 802a0f6:	ea4c 0202 	orr.w	r2, ip, r2
 802a0fa:	f8a8 2000 	strh.w	r2, [r8]
 802a0fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a100:	f108 0802 	add.w	r8, r8, #2
 802a104:	441c      	add	r4, r3
 802a106:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a108:	441e      	add	r6, r3
 802a10a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a10c:	3b01      	subs	r3, #1
 802a10e:	930e      	str	r3, [sp, #56]	; 0x38
 802a110:	e762      	b.n	8029fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a114:	f109 0902 	add.w	r9, r9, #2
 802a118:	441c      	add	r4, r3
 802a11a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a11c:	441e      	add	r6, r3
 802a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a120:	3b01      	subs	r3, #1
 802a122:	9309      	str	r3, [sp, #36]	; 0x24
 802a124:	e736      	b.n	8029f94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a126:	d024      	beq.n	802a172 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a12a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802a12c:	3b01      	subs	r3, #1
 802a12e:	fb00 4003 	mla	r0, r0, r3, r4
 802a132:	1400      	asrs	r0, r0, #16
 802a134:	f53f af4b 	bmi.w	8029fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a138:	3901      	subs	r1, #1
 802a13a:	4288      	cmp	r0, r1
 802a13c:	f6bf af47 	bge.w	8029fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a140:	9924      	ldr	r1, [sp, #144]	; 0x90
 802a142:	fb01 6303 	mla	r3, r1, r3, r6
 802a146:	141b      	asrs	r3, r3, #16
 802a148:	f53f af41 	bmi.w	8029fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a14c:	3a01      	subs	r2, #1
 802a14e:	4293      	cmp	r3, r2
 802a150:	f6bf af3d 	bge.w	8029fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a154:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802a158:	46c8      	mov	r8, r9
 802a15a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802a15e:	930e      	str	r3, [sp, #56]	; 0x38
 802a160:	f1bb 0f00 	cmp.w	fp, #0
 802a164:	f300 80b7 	bgt.w	802a2d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802a168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a16a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a16e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a174:	2b00      	cmp	r3, #0
 802a176:	f340 818e 	ble.w	802a496 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802a17a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a17e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a180:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a184:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a188:	eef0 6a62 	vmov.f32	s13, s5
 802a18c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a190:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a194:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a198:	ee16 4a90 	vmov	r4, s13
 802a19c:	eef0 6a43 	vmov.f32	s13, s6
 802a1a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a1a4:	ee16 6a90 	vmov	r6, s13
 802a1a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a1ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a1b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a1b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a1b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a1bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a1c0:	ee12 2a90 	vmov	r2, s5
 802a1c4:	eef0 2a47 	vmov.f32	s5, s14
 802a1c8:	fb92 f3f3 	sdiv	r3, r2, r3
 802a1cc:	ee13 2a10 	vmov	r2, s6
 802a1d0:	9323      	str	r3, [sp, #140]	; 0x8c
 802a1d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a1d4:	eeb0 3a67 	vmov.f32	s6, s15
 802a1d8:	fb92 f3f3 	sdiv	r3, r2, r3
 802a1dc:	9324      	str	r3, [sp, #144]	; 0x90
 802a1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a1e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a1e2:	3b01      	subs	r3, #1
 802a1e4:	930d      	str	r3, [sp, #52]	; 0x34
 802a1e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a1e8:	bf08      	it	eq
 802a1ea:	4613      	moveq	r3, r2
 802a1ec:	9309      	str	r3, [sp, #36]	; 0x24
 802a1ee:	e6c2      	b.n	8029f76 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a1f0:	2900      	cmp	r1, #0
 802a1f2:	f43f af4d 	beq.w	802a090 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802a1f6:	eb0a 0003 	add.w	r0, sl, r3
 802a1fa:	0843      	lsrs	r3, r0, #1
 802a1fc:	07c0      	lsls	r0, r0, #31
 802a1fe:	5cfb      	ldrb	r3, [r7, r3]
 802a200:	bf54      	ite	pl
 802a202:	f003 030f 	andpl.w	r3, r3, #15
 802a206:	111b      	asrmi	r3, r3, #4
 802a208:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a20c:	b2db      	uxtb	r3, r3
 802a20e:	930b      	str	r3, [sp, #44]	; 0x2c
 802a210:	e73e      	b.n	802a090 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802a212:	f8b8 e000 	ldrh.w	lr, [r8]
 802a216:	fa1f fb83 	uxth.w	fp, r3
 802a21a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a21e:	43db      	mvns	r3, r3
 802a220:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a224:	fb11 f10b 	smulbb	r1, r1, fp
 802a228:	b2db      	uxtb	r3, r3
 802a22a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a22e:	fa5f fc8c 	uxtb.w	ip, ip
 802a232:	b2d2      	uxtb	r2, r2
 802a234:	fb00 1003 	mla	r0, r0, r3, r1
 802a238:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a23c:	fb1c fc0b 	smulbb	ip, ip, fp
 802a240:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a244:	b280      	uxth	r0, r0
 802a246:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a24a:	fb12 fb0b 	smulbb	fp, r2, fp
 802a24e:	fa5f fe8e 	uxtb.w	lr, lr
 802a252:	fb01 cc03 	mla	ip, r1, r3, ip
 802a256:	fb0e bb03 	mla	fp, lr, r3, fp
 802a25a:	1c43      	adds	r3, r0, #1
 802a25c:	fa1f fc8c 	uxth.w	ip, ip
 802a260:	fa1f fb8b 	uxth.w	fp, fp
 802a264:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a268:	f10c 0101 	add.w	r1, ip, #1
 802a26c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802a270:	f10b 0001 	add.w	r0, fp, #1
 802a274:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a278:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a27c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a280:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a284:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a288:	4318      	orrs	r0, r3
 802a28a:	ea40 000c 	orr.w	r0, r0, ip
 802a28e:	f8a8 0000 	strh.w	r0, [r8]
 802a292:	e734      	b.n	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a294:	f113 0b01 	adds.w	fp, r3, #1
 802a298:	f53f af31 	bmi.w	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a29c:	45dc      	cmp	ip, fp
 802a29e:	f6ff af2e 	blt.w	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a2a2:	f110 0b01 	adds.w	fp, r0, #1
 802a2a6:	f53f af2a 	bmi.w	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a2aa:	45de      	cmp	lr, fp
 802a2ac:	f6ff af27 	blt.w	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a2b0:	9302      	str	r3, [sp, #8]
 802a2b2:	fa0f f38e 	sxth.w	r3, lr
 802a2b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a2b8:	9301      	str	r3, [sp, #4]
 802a2ba:	fa0f f38c 	sxth.w	r3, ip
 802a2be:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a2c2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a2c6:	9300      	str	r3, [sp, #0]
 802a2c8:	463a      	mov	r2, r7
 802a2ca:	4653      	mov	r3, sl
 802a2cc:	4641      	mov	r1, r8
 802a2ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 802a2d0:	f7ff fd4c 	bl	8029d6c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a2d4:	e713      	b.n	802a0fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a2d6:	1422      	asrs	r2, r4, #16
 802a2d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a2da:	1433      	asrs	r3, r6, #16
 802a2dc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a2e0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a2e4:	fb05 2303 	mla	r3, r5, r3, r2
 802a2e8:	085a      	lsrs	r2, r3, #1
 802a2ea:	07dd      	lsls	r5, r3, #31
 802a2ec:	5cba      	ldrb	r2, [r7, r2]
 802a2ee:	bf54      	ite	pl
 802a2f0:	f002 020f 	andpl.w	r2, r2, #15
 802a2f4:	1112      	asrmi	r2, r2, #4
 802a2f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a2fa:	b2d2      	uxtb	r2, r2
 802a2fc:	2900      	cmp	r1, #0
 802a2fe:	d077      	beq.n	802a3f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802a300:	f103 0e01 	add.w	lr, r3, #1
 802a304:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a308:	f01e 0f01 	tst.w	lr, #1
 802a30c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a310:	bf0c      	ite	eq
 802a312:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a316:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a31a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a31e:	fa5f f58c 	uxtb.w	r5, ip
 802a322:	9512      	str	r5, [sp, #72]	; 0x48
 802a324:	b308      	cbz	r0, 802a36a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a328:	442b      	add	r3, r5
 802a32a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a32e:	07dd      	lsls	r5, r3, #31
 802a330:	f103 0301 	add.w	r3, r3, #1
 802a334:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a338:	bf54      	ite	pl
 802a33a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a33e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a342:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a346:	fa5f f58c 	uxtb.w	r5, ip
 802a34a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a34e:	950c      	str	r5, [sp, #48]	; 0x30
 802a350:	07dd      	lsls	r5, r3, #31
 802a352:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a356:	bf54      	ite	pl
 802a358:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a35c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a360:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a364:	fa5f f38c 	uxtb.w	r3, ip
 802a368:	9313      	str	r3, [sp, #76]	; 0x4c
 802a36a:	b289      	uxth	r1, r1
 802a36c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a36e:	b280      	uxth	r0, r0
 802a370:	fb01 f300 	mul.w	r3, r1, r0
 802a374:	0109      	lsls	r1, r1, #4
 802a376:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a37a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802a37e:	1ac9      	subs	r1, r1, r3
 802a380:	b280      	uxth	r0, r0
 802a382:	b289      	uxth	r1, r1
 802a384:	ebac 0c00 	sub.w	ip, ip, r0
 802a388:	4369      	muls	r1, r5
 802a38a:	fa1f fc8c 	uxth.w	ip, ip
 802a38e:	fb02 120c 	mla	r2, r2, ip, r1
 802a392:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a394:	fb00 2001 	mla	r0, r0, r1, r2
 802a398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802a39a:	fb03 0302 	mla	r3, r3, r2, r0
 802a39e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a3a2:	b1d3      	cbz	r3, 802a3da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a3a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a3a6:	4353      	muls	r3, r2
 802a3a8:	1c5a      	adds	r2, r3, #1
 802a3aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a3ae:	4a0f      	ldr	r2, [pc, #60]	; (802a3ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802a3b0:	121b      	asrs	r3, r3, #8
 802a3b2:	6812      	ldr	r2, [r2, #0]
 802a3b4:	2bff      	cmp	r3, #255	; 0xff
 802a3b6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a3ba:	d12d      	bne.n	802a418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802a3bc:	0953      	lsrs	r3, r2, #5
 802a3be:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a3c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a3c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a3ca:	f02c 0c07 	bic.w	ip, ip, #7
 802a3ce:	ea43 0c0c 	orr.w	ip, r3, ip
 802a3d2:	ea4c 0202 	orr.w	r2, ip, r2
 802a3d6:	f8a8 2000 	strh.w	r2, [r8]
 802a3da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802a3dc:	f108 0802 	add.w	r8, r8, #2
 802a3e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a3e4:	441c      	add	r4, r3
 802a3e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a3e8:	441e      	add	r6, r3
 802a3ea:	e6b9      	b.n	802a160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802a3ec:	2402ae74 	.word	0x2402ae74
 802a3f0:	2800      	cmp	r0, #0
 802a3f2:	d0ba      	beq.n	802a36a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a3f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a3f6:	442b      	add	r3, r5
 802a3f8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a3fc:	07db      	lsls	r3, r3, #31
 802a3fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a402:	bf54      	ite	pl
 802a404:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a408:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a40c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a410:	fa5f f38c 	uxtb.w	r3, ip
 802a414:	930c      	str	r3, [sp, #48]	; 0x30
 802a416:	e7a8      	b.n	802a36a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802a418:	f8b8 e000 	ldrh.w	lr, [r8]
 802a41c:	fa1f fa83 	uxth.w	sl, r3
 802a420:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a424:	43db      	mvns	r3, r3
 802a426:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a42a:	fb11 f10a 	smulbb	r1, r1, sl
 802a42e:	b2db      	uxtb	r3, r3
 802a430:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a434:	b2d2      	uxtb	r2, r2
 802a436:	fa5f fc8c 	uxtb.w	ip, ip
 802a43a:	fb00 1003 	mla	r0, r0, r3, r1
 802a43e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a442:	fb12 f20a 	smulbb	r2, r2, sl
 802a446:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a44a:	b280      	uxth	r0, r0
 802a44c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a450:	fb1c fc0a 	smulbb	ip, ip, sl
 802a454:	fa5f fe8e 	uxtb.w	lr, lr
 802a458:	fb0e 2203 	mla	r2, lr, r3, r2
 802a45c:	fb01 cc03 	mla	ip, r1, r3, ip
 802a460:	1c43      	adds	r3, r0, #1
 802a462:	b292      	uxth	r2, r2
 802a464:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a468:	1c51      	adds	r1, r2, #1
 802a46a:	fa1f fc8c 	uxth.w	ip, ip
 802a46e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a472:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a476:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a47a:	4308      	orrs	r0, r1
 802a47c:	f10c 0101 	add.w	r1, ip, #1
 802a480:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a484:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a488:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a48c:	ea40 000c 	orr.w	r0, r0, ip
 802a490:	f8a8 0000 	strh.w	r0, [r8]
 802a494:	e7a1      	b.n	802a3da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802a496:	b017      	add	sp, #92	; 0x5c
 802a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a49c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a4a0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802a4a4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a4a8:	2d00      	cmp	r5, #0
 802a4aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a4ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a4b2:	fb05 0e03 	mla	lr, r5, r3, r0
 802a4b6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802a4ba:	f2c0 80b0 	blt.w	802a61e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a4be:	45a9      	cmp	r9, r5
 802a4c0:	f340 80ad 	ble.w	802a61e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a4c4:	2800      	cmp	r0, #0
 802a4c6:	f2c0 80a8 	blt.w	802a61a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a4ca:	4580      	cmp	r8, r0
 802a4cc:	f340 80a5 	ble.w	802a61a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a4d0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a4d4:	f01e 0f01 	tst.w	lr, #1
 802a4d8:	5d16      	ldrb	r6, [r2, r4]
 802a4da:	bf0c      	ite	eq
 802a4dc:	f006 060f 	andeq.w	r6, r6, #15
 802a4e0:	1136      	asrne	r6, r6, #4
 802a4e2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a4e6:	b2f6      	uxtb	r6, r6
 802a4e8:	1c44      	adds	r4, r0, #1
 802a4ea:	f100 809b 	bmi.w	802a624 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a4ee:	45a0      	cmp	r8, r4
 802a4f0:	f340 8098 	ble.w	802a624 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a4f4:	2f00      	cmp	r7, #0
 802a4f6:	f000 8097 	beq.w	802a628 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a4fa:	f10e 0a01 	add.w	sl, lr, #1
 802a4fe:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a502:	f01a 0f01 	tst.w	sl, #1
 802a506:	5d14      	ldrb	r4, [r2, r4]
 802a508:	bf0c      	ite	eq
 802a50a:	f004 040f 	andeq.w	r4, r4, #15
 802a50e:	1124      	asrne	r4, r4, #4
 802a510:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a514:	b2e4      	uxtb	r4, r4
 802a516:	3501      	adds	r5, #1
 802a518:	f100 808a 	bmi.w	802a630 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a51c:	45a9      	cmp	r9, r5
 802a51e:	f340 8087 	ble.w	802a630 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a522:	f1bc 0f00 	cmp.w	ip, #0
 802a526:	f000 8086 	beq.w	802a636 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a52a:	2800      	cmp	r0, #0
 802a52c:	db7e      	blt.n	802a62c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a52e:	4580      	cmp	r8, r0
 802a530:	dd7c      	ble.n	802a62c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a532:	eb03 090e 	add.w	r9, r3, lr
 802a536:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a53a:	f019 0f01 	tst.w	r9, #1
 802a53e:	5d55      	ldrb	r5, [r2, r5]
 802a540:	bf0c      	ite	eq
 802a542:	f005 050f 	andeq.w	r5, r5, #15
 802a546:	112d      	asrne	r5, r5, #4
 802a548:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a54c:	b2ed      	uxtb	r5, r5
 802a54e:	3001      	adds	r0, #1
 802a550:	d474      	bmi.n	802a63c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a552:	4580      	cmp	r8, r0
 802a554:	dd72      	ble.n	802a63c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a556:	2f00      	cmp	r7, #0
 802a558:	d072      	beq.n	802a640 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a55a:	3301      	adds	r3, #1
 802a55c:	449e      	add	lr, r3
 802a55e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a562:	f01e 0f01 	tst.w	lr, #1
 802a566:	5cd0      	ldrb	r0, [r2, r3]
 802a568:	bf0c      	ite	eq
 802a56a:	f000 000f 	andeq.w	r0, r0, #15
 802a56e:	1100      	asrne	r0, r0, #4
 802a570:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a574:	b2c3      	uxtb	r3, r0
 802a576:	b2ba      	uxth	r2, r7
 802a578:	fa1f fc8c 	uxth.w	ip, ip
 802a57c:	fb02 f00c 	mul.w	r0, r2, ip
 802a580:	0112      	lsls	r2, r2, #4
 802a582:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a586:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a58a:	1a12      	subs	r2, r2, r0
 802a58c:	fa1f fc8c 	uxth.w	ip, ip
 802a590:	b292      	uxth	r2, r2
 802a592:	eba7 070c 	sub.w	r7, r7, ip
 802a596:	4362      	muls	r2, r4
 802a598:	b2bf      	uxth	r7, r7
 802a59a:	fb06 2207 	mla	r2, r6, r7, r2
 802a59e:	fb0c 2505 	mla	r5, ip, r5, r2
 802a5a2:	fb00 5303 	mla	r3, r0, r3, r5
 802a5a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a5aa:	b3a3      	cbz	r3, 802a616 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a5ac:	4a25      	ldr	r2, [pc, #148]	; (802a644 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a5ae:	880e      	ldrh	r6, [r1, #0]
 802a5b0:	6815      	ldr	r5, [r2, #0]
 802a5b2:	b29a      	uxth	r2, r3
 802a5b4:	1234      	asrs	r4, r6, #8
 802a5b6:	43db      	mvns	r3, r3
 802a5b8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a5bc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a5c0:	b2db      	uxtb	r3, r3
 802a5c2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a5c6:	fb10 f002 	smulbb	r0, r0, r2
 802a5ca:	b2ed      	uxtb	r5, r5
 802a5cc:	fb17 f702 	smulbb	r7, r7, r2
 802a5d0:	fb04 0403 	mla	r4, r4, r3, r0
 802a5d4:	10f0      	asrs	r0, r6, #3
 802a5d6:	fb15 f202 	smulbb	r2, r5, r2
 802a5da:	00f6      	lsls	r6, r6, #3
 802a5dc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a5e0:	b2a4      	uxth	r4, r4
 802a5e2:	b2f6      	uxtb	r6, r6
 802a5e4:	fb00 7003 	mla	r0, r0, r3, r7
 802a5e8:	fb06 2303 	mla	r3, r6, r3, r2
 802a5ec:	b280      	uxth	r0, r0
 802a5ee:	b29a      	uxth	r2, r3
 802a5f0:	1c63      	adds	r3, r4, #1
 802a5f2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a5f6:	1c53      	adds	r3, r2, #1
 802a5f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a5fc:	1c42      	adds	r2, r0, #1
 802a5fe:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a602:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a606:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a60a:	0940      	lsrs	r0, r0, #5
 802a60c:	4323      	orrs	r3, r4
 802a60e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a612:	4303      	orrs	r3, r0
 802a614:	800b      	strh	r3, [r1, #0]
 802a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a61a:	2600      	movs	r6, #0
 802a61c:	e764      	b.n	802a4e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a61e:	2400      	movs	r4, #0
 802a620:	4626      	mov	r6, r4
 802a622:	e778      	b.n	802a516 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a624:	2400      	movs	r4, #0
 802a626:	e776      	b.n	802a516 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a628:	463c      	mov	r4, r7
 802a62a:	e774      	b.n	802a516 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a62c:	2500      	movs	r5, #0
 802a62e:	e78e      	b.n	802a54e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a630:	2300      	movs	r3, #0
 802a632:	461d      	mov	r5, r3
 802a634:	e79f      	b.n	802a576 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a636:	4663      	mov	r3, ip
 802a638:	4665      	mov	r5, ip
 802a63a:	e79c      	b.n	802a576 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a63c:	2300      	movs	r3, #0
 802a63e:	e79a      	b.n	802a576 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a640:	463b      	mov	r3, r7
 802a642:	e798      	b.n	802a576 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a644:	2402ae74 	.word	0x2402ae74

0802a648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a64c:	b093      	sub	sp, #76	; 0x4c
 802a64e:	461d      	mov	r5, r3
 802a650:	920c      	str	r2, [sp, #48]	; 0x30
 802a652:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802a654:	9011      	str	r0, [sp, #68]	; 0x44
 802a656:	9107      	str	r1, [sp, #28]
 802a658:	6850      	ldr	r0, [r2, #4]
 802a65a:	6812      	ldr	r2, [r2, #0]
 802a65c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802a660:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802a664:	fb00 1303 	mla	r3, r0, r3, r1
 802a668:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a66c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a66e:	689b      	ldr	r3, [r3, #8]
 802a670:	3301      	adds	r3, #1
 802a672:	f023 0301 	bic.w	r3, r3, #1
 802a676:	9306      	str	r3, [sp, #24]
 802a678:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a67a:	681f      	ldr	r7, [r3, #0]
 802a67c:	9b07      	ldr	r3, [sp, #28]
 802a67e:	2b00      	cmp	r3, #0
 802a680:	dc03      	bgt.n	802a68a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a684:	2b00      	cmp	r3, #0
 802a686:	f340 8267 	ble.w	802ab58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a68a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a68c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a690:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a694:	1e48      	subs	r0, r1, #1
 802a696:	f102 3cff 	add.w	ip, r2, #4294967295
 802a69a:	2d00      	cmp	r5, #0
 802a69c:	f340 80b7 	ble.w	802a80e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a6a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a6a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a6a8:	d406      	bmi.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a6aa:	4586      	cmp	lr, r0
 802a6ac:	da04      	bge.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a6ae:	2b00      	cmp	r3, #0
 802a6b0:	db02      	blt.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a6b2:	4563      	cmp	r3, ip
 802a6b4:	f2c0 80ac 	blt.w	802a810 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a6b8:	f11e 0e01 	adds.w	lr, lr, #1
 802a6bc:	f100 809f 	bmi.w	802a7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a6c0:	4571      	cmp	r1, lr
 802a6c2:	f2c0 809c 	blt.w	802a7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a6c6:	3301      	adds	r3, #1
 802a6c8:	f100 8099 	bmi.w	802a7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a6cc:	429a      	cmp	r2, r3
 802a6ce:	f2c0 8096 	blt.w	802a7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a6d2:	46c8      	mov	r8, r9
 802a6d4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a6d8:	9509      	str	r5, [sp, #36]	; 0x24
 802a6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a6dc:	2b00      	cmp	r3, #0
 802a6de:	f340 80b5 	ble.w	802a84c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a6e2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a6e6:	1430      	asrs	r0, r6, #16
 802a6e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a6ec:	9308      	str	r3, [sp, #32]
 802a6ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a6f0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a6f4:	1423      	asrs	r3, r4, #16
 802a6f6:	f100 813f 	bmi.w	802a978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a6fa:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a6fe:	455b      	cmp	r3, fp
 802a700:	f280 813a 	bge.w	802a978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a704:	2800      	cmp	r0, #0
 802a706:	f2c0 8137 	blt.w	802a978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a70a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a70e:	4558      	cmp	r0, fp
 802a710:	f280 8132 	bge.w	802a978 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802a714:	9a06      	ldr	r2, [sp, #24]
 802a716:	fb00 3302 	mla	r3, r0, r2, r3
 802a71a:	0858      	lsrs	r0, r3, #1
 802a71c:	07da      	lsls	r2, r3, #31
 802a71e:	9a08      	ldr	r2, [sp, #32]
 802a720:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a724:	bf54      	ite	pl
 802a726:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a72a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a72e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a732:	fa5f fc8c 	uxtb.w	ip, ip
 802a736:	2a00      	cmp	r2, #0
 802a738:	f000 80cc 	beq.w	802a8d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802a73c:	1c58      	adds	r0, r3, #1
 802a73e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a742:	07c0      	lsls	r0, r0, #31
 802a744:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a748:	bf54      	ite	pl
 802a74a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a74e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a752:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a756:	fa5f fe8e 	uxtb.w	lr, lr
 802a75a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802a75e:	b1b9      	cbz	r1, 802a790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a760:	4453      	add	r3, sl
 802a762:	0858      	lsrs	r0, r3, #1
 802a764:	07da      	lsls	r2, r3, #31
 802a766:	5c38      	ldrb	r0, [r7, r0]
 802a768:	bf54      	ite	pl
 802a76a:	f000 000f 	andpl.w	r0, r0, #15
 802a76e:	1100      	asrmi	r0, r0, #4
 802a770:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a774:	b2c0      	uxtb	r0, r0
 802a776:	900a      	str	r0, [sp, #40]	; 0x28
 802a778:	1c58      	adds	r0, r3, #1
 802a77a:	0843      	lsrs	r3, r0, #1
 802a77c:	07c2      	lsls	r2, r0, #31
 802a77e:	5cfb      	ldrb	r3, [r7, r3]
 802a780:	bf54      	ite	pl
 802a782:	f003 030f 	andpl.w	r3, r3, #15
 802a786:	111b      	asrmi	r3, r3, #4
 802a788:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a78c:	b2db      	uxtb	r3, r3
 802a78e:	930e      	str	r3, [sp, #56]	; 0x38
 802a790:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a794:	b289      	uxth	r1, r1
 802a796:	fb02 f301 	mul.w	r3, r2, r1
 802a79a:	0112      	lsls	r2, r2, #4
 802a79c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a7a0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a7a4:	1ad2      	subs	r2, r2, r3
 802a7a6:	b289      	uxth	r1, r1
 802a7a8:	b292      	uxth	r2, r2
 802a7aa:	1a40      	subs	r0, r0, r1
 802a7ac:	fa1f fe80 	uxth.w	lr, r0
 802a7b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a7b2:	4342      	muls	r2, r0
 802a7b4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a7b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a7ba:	fb01 c102 	mla	r1, r1, r2, ip
 802a7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a7c0:	fb03 1302 	mla	r3, r3, r2, r1
 802a7c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a7c8:	2bff      	cmp	r3, #255	; 0xff
 802a7ca:	f040 8094 	bne.w	802a8f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802a7ce:	4bbf      	ldr	r3, [pc, #764]	; (802aacc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a7d0:	681a      	ldr	r2, [r3, #0]
 802a7d2:	4bbf      	ldr	r3, [pc, #764]	; (802aad0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802a7d4:	0951      	lsrs	r1, r2, #5
 802a7d6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a7da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a7de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a7e2:	430b      	orrs	r3, r1
 802a7e4:	4313      	orrs	r3, r2
 802a7e6:	f8a8 3000 	strh.w	r3, [r8]
 802a7ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a7ec:	f108 0802 	add.w	r8, r8, #2
 802a7f0:	441c      	add	r4, r3
 802a7f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a7f4:	441e      	add	r6, r3
 802a7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a7f8:	3b01      	subs	r3, #1
 802a7fa:	9309      	str	r3, [sp, #36]	; 0x24
 802a7fc:	e76d      	b.n	802a6da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a7fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a800:	3d01      	subs	r5, #1
 802a802:	f109 0902 	add.w	r9, r9, #2
 802a806:	441c      	add	r4, r3
 802a808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a80a:	441e      	add	r6, r3
 802a80c:	e745      	b.n	802a69a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a80e:	d021      	beq.n	802a854 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a810:	1e6b      	subs	r3, r5, #1
 802a812:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802a814:	fb00 4003 	mla	r0, r0, r3, r4
 802a818:	1400      	asrs	r0, r0, #16
 802a81a:	f53f af5a 	bmi.w	802a6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a81e:	3901      	subs	r1, #1
 802a820:	4288      	cmp	r0, r1
 802a822:	f6bf af56 	bge.w	802a6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a826:	9920      	ldr	r1, [sp, #128]	; 0x80
 802a828:	fb01 6303 	mla	r3, r1, r3, r6
 802a82c:	141b      	asrs	r3, r3, #16
 802a82e:	f53f af50 	bmi.w	802a6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a832:	3a01      	subs	r2, #1
 802a834:	4293      	cmp	r3, r2
 802a836:	f6bf af4c 	bge.w	802a6d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a83a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a83e:	46a8      	mov	r8, r5
 802a840:	46ce      	mov	lr, r9
 802a842:	9308      	str	r3, [sp, #32]
 802a844:	f1b8 0f00 	cmp.w	r8, #0
 802a848:	f300 80b6 	bgt.w	802a9b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802a84c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a850:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a854:	9b07      	ldr	r3, [sp, #28]
 802a856:	2b00      	cmp	r3, #0
 802a858:	f340 817e 	ble.w	802ab58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802a85c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a860:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a862:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a866:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a86a:	eef0 6a62 	vmov.f32	s13, s5
 802a86e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a872:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a87a:	ee16 4a90 	vmov	r4, s13
 802a87e:	eef0 6a43 	vmov.f32	s13, s6
 802a882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a886:	ee16 6a90 	vmov	r6, s13
 802a88a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a88e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a892:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a896:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a89a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a89e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a8a2:	ee12 2a90 	vmov	r2, s5
 802a8a6:	eef0 2a47 	vmov.f32	s5, s14
 802a8aa:	fb92 f3f3 	sdiv	r3, r2, r3
 802a8ae:	ee13 2a10 	vmov	r2, s6
 802a8b2:	931f      	str	r3, [sp, #124]	; 0x7c
 802a8b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a8b6:	eeb0 3a67 	vmov.f32	s6, s15
 802a8ba:	fb92 f3f3 	sdiv	r3, r2, r3
 802a8be:	9320      	str	r3, [sp, #128]	; 0x80
 802a8c0:	9b07      	ldr	r3, [sp, #28]
 802a8c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a8c4:	3b01      	subs	r3, #1
 802a8c6:	9307      	str	r3, [sp, #28]
 802a8c8:	bf08      	it	eq
 802a8ca:	4615      	moveq	r5, r2
 802a8cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a8ce:	bf18      	it	ne
 802a8d0:	461d      	movne	r5, r3
 802a8d2:	e6d3      	b.n	802a67c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a8d4:	2900      	cmp	r1, #0
 802a8d6:	f43f af5b 	beq.w	802a790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a8da:	eb0a 0003 	add.w	r0, sl, r3
 802a8de:	0843      	lsrs	r3, r0, #1
 802a8e0:	07c0      	lsls	r0, r0, #31
 802a8e2:	5cfb      	ldrb	r3, [r7, r3]
 802a8e4:	bf54      	ite	pl
 802a8e6:	f003 030f 	andpl.w	r3, r3, #15
 802a8ea:	111b      	asrmi	r3, r3, #4
 802a8ec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a8f0:	b2db      	uxtb	r3, r3
 802a8f2:	930a      	str	r3, [sp, #40]	; 0x28
 802a8f4:	e74c      	b.n	802a790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	f43f af77 	beq.w	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8fc:	4a73      	ldr	r2, [pc, #460]	; (802aacc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a8fe:	fa1f fe83 	uxth.w	lr, r3
 802a902:	f8b8 c000 	ldrh.w	ip, [r8]
 802a906:	43db      	mvns	r3, r3
 802a908:	6810      	ldr	r0, [r2, #0]
 802a90a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a90e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a912:	b2db      	uxtb	r3, r3
 802a914:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a918:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a91c:	fb12 f20e 	smulbb	r2, r2, lr
 802a920:	b2c0      	uxtb	r0, r0
 802a922:	fb1b fb0e 	smulbb	fp, fp, lr
 802a926:	fb01 2103 	mla	r1, r1, r3, r2
 802a92a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a92e:	fb10 fe0e 	smulbb	lr, r0, lr
 802a932:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a936:	b289      	uxth	r1, r1
 802a938:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a93c:	fa5f fc8c 	uxtb.w	ip, ip
 802a940:	fb02 b203 	mla	r2, r2, r3, fp
 802a944:	1c48      	adds	r0, r1, #1
 802a946:	fb0c e303 	mla	r3, ip, r3, lr
 802a94a:	b292      	uxth	r2, r2
 802a94c:	b29b      	uxth	r3, r3
 802a94e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a952:	f102 0b01 	add.w	fp, r2, #1
 802a956:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802a95a:	1c59      	adds	r1, r3, #1
 802a95c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a960:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a964:	0952      	lsrs	r2, r2, #5
 802a966:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a96a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a96e:	4301      	orrs	r1, r0
 802a970:	4311      	orrs	r1, r2
 802a972:	f8a8 1000 	strh.w	r1, [r8]
 802a976:	e738      	b.n	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a978:	f113 0b01 	adds.w	fp, r3, #1
 802a97c:	f53f af35 	bmi.w	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a980:	45dc      	cmp	ip, fp
 802a982:	f6ff af32 	blt.w	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a986:	f110 0b01 	adds.w	fp, r0, #1
 802a98a:	f53f af2e 	bmi.w	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a98e:	45de      	cmp	lr, fp
 802a990:	f6ff af2b 	blt.w	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a994:	9302      	str	r3, [sp, #8]
 802a996:	fa0f f38e 	sxth.w	r3, lr
 802a99a:	9a08      	ldr	r2, [sp, #32]
 802a99c:	9301      	str	r3, [sp, #4]
 802a99e:	fa0f f38c 	sxth.w	r3, ip
 802a9a2:	9105      	str	r1, [sp, #20]
 802a9a4:	4641      	mov	r1, r8
 802a9a6:	9300      	str	r3, [sp, #0]
 802a9a8:	4653      	mov	r3, sl
 802a9aa:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a9ae:	463a      	mov	r2, r7
 802a9b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a9b2:	f7ff fd73 	bl	802a49c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a9b6:	e718      	b.n	802a7ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a9b8:	1422      	asrs	r2, r4, #16
 802a9ba:	9906      	ldr	r1, [sp, #24]
 802a9bc:	1433      	asrs	r3, r6, #16
 802a9be:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a9c2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a9c6:	fb01 2303 	mla	r3, r1, r3, r2
 802a9ca:	085a      	lsrs	r2, r3, #1
 802a9cc:	07d9      	lsls	r1, r3, #31
 802a9ce:	5cba      	ldrb	r2, [r7, r2]
 802a9d0:	bf54      	ite	pl
 802a9d2:	f002 020f 	andpl.w	r2, r2, #15
 802a9d6:	1112      	asrmi	r2, r2, #4
 802a9d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a9dc:	b2d2      	uxtb	r2, r2
 802a9de:	2800      	cmp	r0, #0
 802a9e0:	d063      	beq.n	802aaaa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802a9e2:	f103 0a01 	add.w	sl, r3, #1
 802a9e6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a9ea:	f01a 0f01 	tst.w	sl, #1
 802a9ee:	5c79      	ldrb	r1, [r7, r1]
 802a9f0:	bf0c      	ite	eq
 802a9f2:	f001 010f 	andeq.w	r1, r1, #15
 802a9f6:	1109      	asrne	r1, r1, #4
 802a9f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a9fc:	b2c9      	uxtb	r1, r1
 802a9fe:	910f      	str	r1, [sp, #60]	; 0x3c
 802aa00:	f1bc 0f00 	cmp.w	ip, #0
 802aa04:	d01a      	beq.n	802aa3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802aa06:	9908      	ldr	r1, [sp, #32]
 802aa08:	440b      	add	r3, r1
 802aa0a:	0859      	lsrs	r1, r3, #1
 802aa0c:	f013 0f01 	tst.w	r3, #1
 802aa10:	f103 0301 	add.w	r3, r3, #1
 802aa14:	5c79      	ldrb	r1, [r7, r1]
 802aa16:	bf0c      	ite	eq
 802aa18:	f001 010f 	andeq.w	r1, r1, #15
 802aa1c:	1109      	asrne	r1, r1, #4
 802aa1e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802aa22:	b2c9      	uxtb	r1, r1
 802aa24:	910b      	str	r1, [sp, #44]	; 0x2c
 802aa26:	0859      	lsrs	r1, r3, #1
 802aa28:	07db      	lsls	r3, r3, #31
 802aa2a:	5c79      	ldrb	r1, [r7, r1]
 802aa2c:	bf54      	ite	pl
 802aa2e:	f001 010f 	andpl.w	r1, r1, #15
 802aa32:	1109      	asrmi	r1, r1, #4
 802aa34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802aa38:	b2c9      	uxtb	r1, r1
 802aa3a:	9110      	str	r1, [sp, #64]	; 0x40
 802aa3c:	b280      	uxth	r0, r0
 802aa3e:	fa1f fc8c 	uxth.w	ip, ip
 802aa42:	fb00 f30c 	mul.w	r3, r0, ip
 802aa46:	0100      	lsls	r0, r0, #4
 802aa48:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802aa4c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802aa50:	1ac0      	subs	r0, r0, r3
 802aa52:	fa1f fc8c 	uxth.w	ip, ip
 802aa56:	b280      	uxth	r0, r0
 802aa58:	eba1 010c 	sub.w	r1, r1, ip
 802aa5c:	fa1f fa81 	uxth.w	sl, r1
 802aa60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802aa62:	4348      	muls	r0, r1
 802aa64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802aa66:	fb02 020a 	mla	r2, r2, sl, r0
 802aa6a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802aa6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802aa70:	fb03 c302 	mla	r3, r3, r2, ip
 802aa74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802aa78:	2bff      	cmp	r3, #255	; 0xff
 802aa7a:	d12b      	bne.n	802aad4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802aa7c:	4b13      	ldr	r3, [pc, #76]	; (802aacc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802aa7e:	681a      	ldr	r2, [r3, #0]
 802aa80:	4b13      	ldr	r3, [pc, #76]	; (802aad0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802aa82:	0951      	lsrs	r1, r2, #5
 802aa84:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802aa88:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802aa8c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802aa90:	430b      	orrs	r3, r1
 802aa92:	4313      	orrs	r3, r2
 802aa94:	f8ae 3000 	strh.w	r3, [lr]
 802aa98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802aa9a:	f10e 0e02 	add.w	lr, lr, #2
 802aa9e:	f108 38ff 	add.w	r8, r8, #4294967295
 802aaa2:	441c      	add	r4, r3
 802aaa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802aaa6:	441e      	add	r6, r3
 802aaa8:	e6cc      	b.n	802a844 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802aaaa:	f1bc 0f00 	cmp.w	ip, #0
 802aaae:	d0c5      	beq.n	802aa3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802aab0:	9908      	ldr	r1, [sp, #32]
 802aab2:	440b      	add	r3, r1
 802aab4:	0859      	lsrs	r1, r3, #1
 802aab6:	07db      	lsls	r3, r3, #31
 802aab8:	5c79      	ldrb	r1, [r7, r1]
 802aaba:	bf54      	ite	pl
 802aabc:	f001 010f 	andpl.w	r1, r1, #15
 802aac0:	1109      	asrmi	r1, r1, #4
 802aac2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802aac6:	b2c9      	uxtb	r1, r1
 802aac8:	910b      	str	r1, [sp, #44]	; 0x2c
 802aaca:	e7b7      	b.n	802aa3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802aacc:	2402ae74 	.word	0x2402ae74
 802aad0:	fffff800 	.word	0xfffff800
 802aad4:	2b00      	cmp	r3, #0
 802aad6:	d0df      	beq.n	802aa98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802aad8:	4a21      	ldr	r2, [pc, #132]	; (802ab60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802aada:	fa1f fa83 	uxth.w	sl, r3
 802aade:	f8be c000 	ldrh.w	ip, [lr]
 802aae2:	43db      	mvns	r3, r3
 802aae4:	6810      	ldr	r0, [r2, #0]
 802aae6:	ea4f 212c 	mov.w	r1, ip, asr #8
 802aaea:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802aaee:	b2db      	uxtb	r3, r3
 802aaf0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802aaf4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802aaf8:	fb12 f20a 	smulbb	r2, r2, sl
 802aafc:	b2c0      	uxtb	r0, r0
 802aafe:	fb1b fb0a 	smulbb	fp, fp, sl
 802ab02:	fb01 2103 	mla	r1, r1, r3, r2
 802ab06:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802ab0a:	fb10 f00a 	smulbb	r0, r0, sl
 802ab0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ab12:	b289      	uxth	r1, r1
 802ab14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802ab18:	fa5f fc8c 	uxtb.w	ip, ip
 802ab1c:	fb02 b203 	mla	r2, r2, r3, fp
 802ab20:	fb0c 0003 	mla	r0, ip, r3, r0
 802ab24:	1c4b      	adds	r3, r1, #1
 802ab26:	b292      	uxth	r2, r2
 802ab28:	b280      	uxth	r0, r0
 802ab2a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802ab2e:	f100 0b01 	add.w	fp, r0, #1
 802ab32:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802ab36:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802ab3a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802ab3e:	ea4b 0101 	orr.w	r1, fp, r1
 802ab42:	f102 0b01 	add.w	fp, r2, #1
 802ab46:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802ab4a:	0952      	lsrs	r2, r2, #5
 802ab4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ab50:	4311      	orrs	r1, r2
 802ab52:	f8ae 1000 	strh.w	r1, [lr]
 802ab56:	e79f      	b.n	802aa98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802ab58:	b013      	add	sp, #76	; 0x4c
 802ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab5e:	bf00      	nop
 802ab60:	2402ae74 	.word	0x2402ae74

0802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802ab64:	b570      	push	{r4, r5, r6, lr}
 802ab66:	1208      	asrs	r0, r1, #8
 802ab68:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802ab6c:	b29e      	uxth	r6, r3
 802ab6e:	1213      	asrs	r3, r2, #8
 802ab70:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802ab74:	10cc      	asrs	r4, r1, #3
 802ab76:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802ab7a:	00c9      	lsls	r1, r1, #3
 802ab7c:	fb10 f006 	smulbb	r0, r0, r6
 802ab80:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802ab84:	fb13 f305 	smulbb	r3, r3, r5
 802ab88:	fb14 f406 	smulbb	r4, r4, r6
 802ab8c:	4418      	add	r0, r3
 802ab8e:	10d3      	asrs	r3, r2, #3
 802ab90:	00d2      	lsls	r2, r2, #3
 802ab92:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802ab96:	b280      	uxth	r0, r0
 802ab98:	b2d2      	uxtb	r2, r2
 802ab9a:	fb13 f305 	smulbb	r3, r3, r5
 802ab9e:	fb12 f205 	smulbb	r2, r2, r5
 802aba2:	441c      	add	r4, r3
 802aba4:	b2cb      	uxtb	r3, r1
 802aba6:	fb13 f306 	smulbb	r3, r3, r6
 802abaa:	b2a4      	uxth	r4, r4
 802abac:	4413      	add	r3, r2
 802abae:	1c42      	adds	r2, r0, #1
 802abb0:	b29b      	uxth	r3, r3
 802abb2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802abb6:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 802abba:	1c58      	adds	r0, r3, #1
 802abbc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802abc0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802abc4:	4310      	orrs	r0, r2
 802abc6:	1c62      	adds	r2, r4, #1
 802abc8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802abcc:	0964      	lsrs	r4, r4, #5
 802abce:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802abd2:	4320      	orrs	r0, r4
 802abd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802abd8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802abdc:	b08f      	sub	sp, #60	; 0x3c
 802abde:	461c      	mov	r4, r3
 802abe0:	460d      	mov	r5, r1
 802abe2:	4616      	mov	r6, r2
 802abe4:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802abe8:	9004      	str	r0, [sp, #16]
 802abea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802abec:	2f00      	cmp	r7, #0
 802abee:	f000 80f6 	beq.w	802adde <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 802abf2:	6820      	ldr	r0, [r4, #0]
 802abf4:	aa0a      	add	r2, sp, #40	; 0x28
 802abf6:	6861      	ldr	r1, [r4, #4]
 802abf8:	f04f 0802 	mov.w	r8, #2
 802abfc:	3604      	adds	r6, #4
 802abfe:	c203      	stmia	r2!, {r0, r1}
 802ac00:	6818      	ldr	r0, [r3, #0]
 802ac02:	aa0c      	add	r2, sp, #48	; 0x30
 802ac04:	6859      	ldr	r1, [r3, #4]
 802ac06:	c203      	stmia	r2!, {r0, r1}
 802ac08:	a80a      	add	r0, sp, #40	; 0x28
 802ac0a:	f7ef fd27 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ac0e:	4621      	mov	r1, r4
 802ac10:	a80c      	add	r0, sp, #48	; 0x30
 802ac12:	f7ef fd4b 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ac16:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802ac1a:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802ac1e:	f002 0301 	and.w	r3, r2, #1
 802ac22:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802ac26:	9306      	str	r3, [sp, #24]
 802ac28:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802ac2c:	f003 0101 	and.w	r1, r3, #1
 802ac30:	9105      	str	r1, [sp, #20]
 802ac32:	9805      	ldr	r0, [sp, #20]
 802ac34:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802ac38:	4403      	add	r3, r0
 802ac3a:	fb01 2303 	mla	r3, r1, r3, r2
 802ac3e:	fb93 f3f8 	sdiv	r3, r3, r8
 802ac42:	441d      	add	r5, r3
 802ac44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802ac48:	441a      	add	r2, r3
 802ac4a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802ac4e:	4419      	add	r1, r3
 802ac50:	4b64      	ldr	r3, [pc, #400]	; (802ade4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802ac52:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802ac56:	6818      	ldr	r0, [r3, #0]
 802ac58:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802ac5c:	6803      	ldr	r3, [r0, #0]
 802ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ac60:	4798      	blx	r3
 802ac62:	4a61      	ldr	r2, [pc, #388]	; (802ade8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802ac64:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802ac68:	2fff      	cmp	r7, #255	; 0xff
 802ac6a:	8813      	ldrh	r3, [r2, #0]
 802ac6c:	4611      	mov	r1, r2
 802ac6e:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 802ac72:	fb03 fb0b 	mul.w	fp, r3, fp
 802ac76:	fb03 a404 	mla	r4, r3, r4, sl
 802ac7a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ac7e:	d06b      	beq.n	802ad58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802ac80:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802ac84:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802ac88:	9303      	str	r3, [sp, #12]
 802ac8a:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802ac8e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802ac92:	9b07      	ldr	r3, [sp, #28]
 802ac94:	42a3      	cmp	r3, r4
 802ac96:	f240 809d 	bls.w	802add4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802ac9a:	9b06      	ldr	r3, [sp, #24]
 802ac9c:	2b00      	cmp	r3, #0
 802ac9e:	d039      	beq.n	802ad14 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802aca0:	782b      	ldrb	r3, [r5, #0]
 802aca2:	f105 0801 	add.w	r8, r5, #1
 802aca6:	f109 3bff 	add.w	fp, r9, #4294967295
 802acaa:	8822      	ldrh	r2, [r4, #0]
 802acac:	f003 030f 	and.w	r3, r3, #15
 802acb0:	9804      	ldr	r0, [sp, #16]
 802acb2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802acb6:	9b03      	ldr	r3, [sp, #12]
 802acb8:	9300      	str	r3, [sp, #0]
 802acba:	463b      	mov	r3, r7
 802acbc:	f7ff ff52 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802acc0:	f824 0b02 	strh.w	r0, [r4], #2
 802acc4:	f1bb 0f01 	cmp.w	fp, #1
 802acc8:	46a2      	mov	sl, r4
 802acca:	f104 0404 	add.w	r4, r4, #4
 802acce:	dd24      	ble.n	802ad1a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802acd0:	f898 3000 	ldrb.w	r3, [r8]
 802acd4:	f1ab 0b02 	sub.w	fp, fp, #2
 802acd8:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802acdc:	091b      	lsrs	r3, r3, #4
 802acde:	9804      	ldr	r0, [sp, #16]
 802ace0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ace4:	9b03      	ldr	r3, [sp, #12]
 802ace6:	9300      	str	r3, [sp, #0]
 802ace8:	463b      	mov	r3, r7
 802acea:	f7ff ff3b 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802acee:	f824 0c04 	strh.w	r0, [r4, #-4]
 802acf2:	f818 3b01 	ldrb.w	r3, [r8], #1
 802acf6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802acfa:	f003 030f 	and.w	r3, r3, #15
 802acfe:	9804      	ldr	r0, [sp, #16]
 802ad00:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ad04:	9b03      	ldr	r3, [sp, #12]
 802ad06:	9300      	str	r3, [sp, #0]
 802ad08:	463b      	mov	r3, r7
 802ad0a:	f7ff ff2b 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ad0e:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ad12:	e7d7      	b.n	802acc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802ad14:	46a8      	mov	r8, r5
 802ad16:	46cb      	mov	fp, r9
 802ad18:	e7d4      	b.n	802acc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802ad1a:	d10e      	bne.n	802ad3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802ad1c:	f898 3000 	ldrb.w	r3, [r8]
 802ad20:	f8ba 2000 	ldrh.w	r2, [sl]
 802ad24:	091b      	lsrs	r3, r3, #4
 802ad26:	9804      	ldr	r0, [sp, #16]
 802ad28:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ad2c:	9b03      	ldr	r3, [sp, #12]
 802ad2e:	9300      	str	r3, [sp, #0]
 802ad30:	463b      	mov	r3, r7
 802ad32:	f7ff ff17 	bl	802ab64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ad36:	f82a 0b02 	strh.w	r0, [sl], #2
 802ad3a:	9b08      	ldr	r3, [sp, #32]
 802ad3c:	9a05      	ldr	r2, [sp, #20]
 802ad3e:	881c      	ldrh	r4, [r3, #0]
 802ad40:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802ad44:	eba4 0409 	sub.w	r4, r4, r9
 802ad48:	4413      	add	r3, r2
 802ad4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ad4c:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802ad50:	fb93 f3f2 	sdiv	r3, r3, r2
 802ad54:	441d      	add	r5, r3
 802ad56:	e79c      	b.n	802ac92 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802ad58:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802ad5c:	45a3      	cmp	fp, r4
 802ad5e:	d939      	bls.n	802add4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802ad60:	9b06      	ldr	r3, [sp, #24]
 802ad62:	b1fb      	cbz	r3, 802ada4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 802ad64:	782b      	ldrb	r3, [r5, #0]
 802ad66:	1c6a      	adds	r2, r5, #1
 802ad68:	f109 30ff 	add.w	r0, r9, #4294967295
 802ad6c:	3402      	adds	r4, #2
 802ad6e:	f003 030f 	and.w	r3, r3, #15
 802ad72:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802ad76:	f824 3c02 	strh.w	r3, [r4, #-2]
 802ad7a:	2801      	cmp	r0, #1
 802ad7c:	4623      	mov	r3, r4
 802ad7e:	f104 0404 	add.w	r4, r4, #4
 802ad82:	dd12      	ble.n	802adaa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 802ad84:	7813      	ldrb	r3, [r2, #0]
 802ad86:	3802      	subs	r0, #2
 802ad88:	091b      	lsrs	r3, r3, #4
 802ad8a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802ad8e:	f824 3c04 	strh.w	r3, [r4, #-4]
 802ad92:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ad96:	f003 030f 	and.w	r3, r3, #15
 802ad9a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802ad9e:	f824 3c02 	strh.w	r3, [r4, #-2]
 802ada2:	e7ea      	b.n	802ad7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802ada4:	462a      	mov	r2, r5
 802ada6:	4648      	mov	r0, r9
 802ada8:	e7e7      	b.n	802ad7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802adaa:	d106      	bne.n	802adba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 802adac:	7812      	ldrb	r2, [r2, #0]
 802adae:	3302      	adds	r3, #2
 802adb0:	0912      	lsrs	r2, r2, #4
 802adb2:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802adb6:	f823 2c02 	strh.w	r2, [r3, #-2]
 802adba:	880c      	ldrh	r4, [r1, #0]
 802adbc:	9a05      	ldr	r2, [sp, #20]
 802adbe:	eba4 0409 	sub.w	r4, r4, r9
 802adc2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802adc6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802adca:	4413      	add	r3, r2
 802adcc:	fb93 f3f8 	sdiv	r3, r3, r8
 802add0:	441d      	add	r5, r3
 802add2:	e7c3      	b.n	802ad5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802add4:	4b03      	ldr	r3, [pc, #12]	; (802ade4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802add6:	6818      	ldr	r0, [r3, #0]
 802add8:	6803      	ldr	r3, [r0, #0]
 802adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802addc:	4798      	blx	r3
 802adde:	b00f      	add	sp, #60	; 0x3c
 802ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ade4:	2402ae6c 	.word	0x2402ae6c
 802ade8:	2402ae66 	.word	0x2402ae66

0802adec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802adec:	b5f0      	push	{r4, r5, r6, r7, lr}
 802adee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802adf2:	0a0f      	lsrs	r7, r1, #8
 802adf4:	2dff      	cmp	r5, #255	; 0xff
 802adf6:	d10c      	bne.n	802ae12 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802adf8:	2bff      	cmp	r3, #255	; 0xff
 802adfa:	d10a      	bne.n	802ae12 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802adfc:	0948      	lsrs	r0, r1, #5
 802adfe:	4b25      	ldr	r3, [pc, #148]	; (802ae94 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802ae00:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802ae04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802ae08:	403b      	ands	r3, r7
 802ae0a:	4318      	orrs	r0, r3
 802ae0c:	4308      	orrs	r0, r1
 802ae0e:	b280      	uxth	r0, r0
 802ae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ae12:	fb15 f503 	smulbb	r5, r5, r3
 802ae16:	1214      	asrs	r4, r2, #8
 802ae18:	10d6      	asrs	r6, r2, #3
 802ae1a:	b2ab      	uxth	r3, r5
 802ae1c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802ae20:	00d0      	lsls	r0, r2, #3
 802ae22:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802ae26:	1c5d      	adds	r5, r3, #1
 802ae28:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802ae2c:	b2c0      	uxtb	r0, r0
 802ae2e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802ae32:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802ae36:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802ae3a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802ae3e:	fa1f fc85 	uxth.w	ip, r5
 802ae42:	43ed      	mvns	r5, r5
 802ae44:	fb12 f20c 	smulbb	r2, r2, ip
 802ae48:	b2eb      	uxtb	r3, r5
 802ae4a:	b2fd      	uxtb	r5, r7
 802ae4c:	fb04 2403 	mla	r4, r4, r3, r2
 802ae50:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802ae54:	fb15 f50c 	smulbb	r5, r5, ip
 802ae58:	b2c8      	uxtb	r0, r1
 802ae5a:	b2a4      	uxth	r4, r4
 802ae5c:	fb10 f00c 	smulbb	r0, r0, ip
 802ae60:	fb06 5503 	mla	r5, r6, r3, r5
 802ae64:	fb02 0003 	mla	r0, r2, r3, r0
 802ae68:	b2ad      	uxth	r5, r5
 802ae6a:	b283      	uxth	r3, r0
 802ae6c:	1c60      	adds	r0, r4, #1
 802ae6e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802ae72:	1c58      	adds	r0, r3, #1
 802ae74:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802ae78:	1c6b      	adds	r3, r5, #1
 802ae7a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802ae7e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802ae82:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ae86:	096d      	lsrs	r5, r5, #5
 802ae88:	4320      	orrs	r0, r4
 802ae8a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802ae8e:	4328      	orrs	r0, r5
 802ae90:	e7be      	b.n	802ae10 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802ae92:	bf00      	nop
 802ae94:	00fff800 	.word	0x00fff800

0802ae98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae9c:	461c      	mov	r4, r3
 802ae9e:	b08d      	sub	sp, #52	; 0x34
 802aea0:	460d      	mov	r5, r1
 802aea2:	4616      	mov	r6, r2
 802aea4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802aea6:	4680      	mov	r8, r0
 802aea8:	6861      	ldr	r1, [r4, #4]
 802aeaa:	aa08      	add	r2, sp, #32
 802aeac:	6820      	ldr	r0, [r4, #0]
 802aeae:	f04f 0a02 	mov.w	sl, #2
 802aeb2:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802aeb6:	3604      	adds	r6, #4
 802aeb8:	c203      	stmia	r2!, {r0, r1}
 802aeba:	6818      	ldr	r0, [r3, #0]
 802aebc:	aa0a      	add	r2, sp, #40	; 0x28
 802aebe:	6859      	ldr	r1, [r3, #4]
 802aec0:	c203      	stmia	r2!, {r0, r1}
 802aec2:	a808      	add	r0, sp, #32
 802aec4:	f7ef fbca 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802aec8:	4621      	mov	r1, r4
 802aeca:	a80a      	add	r0, sp, #40	; 0x28
 802aecc:	f7ef fbee 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802aed0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802aed4:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 802aed8:	f002 0301 	and.w	r3, r2, #1
 802aedc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802aee0:	9303      	str	r3, [sp, #12]
 802aee2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802aee6:	f003 0101 	and.w	r1, r3, #1
 802aeea:	9102      	str	r1, [sp, #8]
 802aeec:	9802      	ldr	r0, [sp, #8]
 802aeee:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802aef2:	4403      	add	r3, r0
 802aef4:	fb01 2303 	mla	r3, r1, r3, r2
 802aef8:	fb93 f3fa 	sdiv	r3, r3, sl
 802aefc:	441d      	add	r5, r3
 802aefe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802af02:	441a      	add	r2, r3
 802af04:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802af08:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802af0c:	4419      	add	r1, r3
 802af0e:	4a3e      	ldr	r2, [pc, #248]	; (802b008 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802af10:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 802af14:	6810      	ldr	r0, [r2, #0]
 802af16:	9205      	str	r2, [sp, #20]
 802af18:	6803      	ldr	r3, [r0, #0]
 802af1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802af1c:	4798      	blx	r3
 802af1e:	4b3b      	ldr	r3, [pc, #236]	; (802b00c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802af20:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 802af24:	8819      	ldrh	r1, [r3, #0]
 802af26:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 802af2a:	434f      	muls	r7, r1
 802af2c:	fb01 c404 	mla	r4, r1, r4, ip
 802af30:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802af34:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802af38:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802af3c:	9204      	str	r2, [sp, #16]
 802af3e:	9b04      	ldr	r3, [sp, #16]
 802af40:	429c      	cmp	r4, r3
 802af42:	d258      	bcs.n	802aff6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802af44:	9b03      	ldr	r3, [sp, #12]
 802af46:	2b00      	cmp	r3, #0
 802af48:	d034      	beq.n	802afb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802af4a:	782b      	ldrb	r3, [r5, #0]
 802af4c:	1c6f      	adds	r7, r5, #1
 802af4e:	f003 030f 	and.w	r3, r3, #15
 802af52:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802af56:	0e0b      	lsrs	r3, r1, #24
 802af58:	d006      	beq.n	802af68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802af5a:	8822      	ldrh	r2, [r4, #0]
 802af5c:	4640      	mov	r0, r8
 802af5e:	9300      	str	r3, [sp, #0]
 802af60:	464b      	mov	r3, r9
 802af62:	f7ff ff43 	bl	802adec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802af66:	8020      	strh	r0, [r4, #0]
 802af68:	3402      	adds	r4, #2
 802af6a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802af6e:	f1ba 0f01 	cmp.w	sl, #1
 802af72:	dd22      	ble.n	802afba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802af74:	783b      	ldrb	r3, [r7, #0]
 802af76:	091b      	lsrs	r3, r3, #4
 802af78:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802af7c:	0e0b      	lsrs	r3, r1, #24
 802af7e:	d006      	beq.n	802af8e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802af80:	8822      	ldrh	r2, [r4, #0]
 802af82:	4640      	mov	r0, r8
 802af84:	9300      	str	r3, [sp, #0]
 802af86:	464b      	mov	r3, r9
 802af88:	f7ff ff30 	bl	802adec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802af8c:	8020      	strh	r0, [r4, #0]
 802af8e:	f817 3b01 	ldrb.w	r3, [r7], #1
 802af92:	f003 030f 	and.w	r3, r3, #15
 802af96:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802af9a:	0e0b      	lsrs	r3, r1, #24
 802af9c:	d006      	beq.n	802afac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802af9e:	8862      	ldrh	r2, [r4, #2]
 802afa0:	4640      	mov	r0, r8
 802afa2:	9300      	str	r3, [sp, #0]
 802afa4:	464b      	mov	r3, r9
 802afa6:	f7ff ff21 	bl	802adec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802afaa:	8060      	strh	r0, [r4, #2]
 802afac:	3404      	adds	r4, #4
 802afae:	f1aa 0a02 	sub.w	sl, sl, #2
 802afb2:	e7dc      	b.n	802af6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802afb4:	462f      	mov	r7, r5
 802afb6:	46da      	mov	sl, fp
 802afb8:	e7d9      	b.n	802af6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802afba:	d10d      	bne.n	802afd8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802afbc:	783b      	ldrb	r3, [r7, #0]
 802afbe:	091b      	lsrs	r3, r3, #4
 802afc0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802afc4:	0e0b      	lsrs	r3, r1, #24
 802afc6:	d006      	beq.n	802afd6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802afc8:	8822      	ldrh	r2, [r4, #0]
 802afca:	4640      	mov	r0, r8
 802afcc:	9300      	str	r3, [sp, #0]
 802afce:	464b      	mov	r3, r9
 802afd0:	f7ff ff0c 	bl	802adec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802afd4:	8020      	strh	r0, [r4, #0]
 802afd6:	3402      	adds	r4, #2
 802afd8:	9b06      	ldr	r3, [sp, #24]
 802afda:	9a02      	ldr	r2, [sp, #8]
 802afdc:	881b      	ldrh	r3, [r3, #0]
 802afde:	eba3 030b 	sub.w	r3, r3, fp
 802afe2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802afe6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802afea:	4413      	add	r3, r2
 802afec:	9a07      	ldr	r2, [sp, #28]
 802afee:	fb93 f3f2 	sdiv	r3, r3, r2
 802aff2:	441d      	add	r5, r3
 802aff4:	e7a3      	b.n	802af3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802aff6:	9b05      	ldr	r3, [sp, #20]
 802aff8:	6818      	ldr	r0, [r3, #0]
 802affa:	6803      	ldr	r3, [r0, #0]
 802affc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802affe:	4798      	blx	r3
 802b000:	b00d      	add	sp, #52	; 0x34
 802b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b006:	bf00      	nop
 802b008:	2402ae6c 	.word	0x2402ae6c
 802b00c:	2402ae66 	.word	0x2402ae66

0802b010 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802b010:	b570      	push	{r4, r5, r6, lr}
 802b012:	1214      	asrs	r4, r2, #8
 802b014:	788d      	ldrb	r5, [r1, #2]
 802b016:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802b01a:	10d0      	asrs	r0, r2, #3
 802b01c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b020:	00d2      	lsls	r2, r2, #3
 802b022:	fb15 f503 	smulbb	r5, r5, r3
 802b026:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b02a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802b02e:	b2d2      	uxtb	r2, r2
 802b030:	fb04 5506 	mla	r5, r4, r6, r5
 802b034:	784c      	ldrb	r4, [r1, #1]
 802b036:	7809      	ldrb	r1, [r1, #0]
 802b038:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802b03c:	fb14 f403 	smulbb	r4, r4, r3
 802b040:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802b044:	fb11 f303 	smulbb	r3, r1, r3
 802b048:	b2ad      	uxth	r5, r5
 802b04a:	fb00 4406 	mla	r4, r0, r6, r4
 802b04e:	fb02 3306 	mla	r3, r2, r6, r3
 802b052:	1c68      	adds	r0, r5, #1
 802b054:	b2a4      	uxth	r4, r4
 802b056:	b29b      	uxth	r3, r3
 802b058:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802b05c:	1c62      	adds	r2, r4, #1
 802b05e:	1c58      	adds	r0, r3, #1
 802b060:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802b064:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802b068:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b06c:	0964      	lsrs	r4, r4, #5
 802b06e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b072:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802b076:	4328      	orrs	r0, r5
 802b078:	4320      	orrs	r0, r4
 802b07a:	bd70      	pop	{r4, r5, r6, pc}

0802b07c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b080:	b08f      	sub	sp, #60	; 0x3c
 802b082:	461c      	mov	r4, r3
 802b084:	4682      	mov	sl, r0
 802b086:	460e      	mov	r6, r1
 802b088:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802b08c:	4615      	mov	r5, r2
 802b08e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802b090:	2f00      	cmp	r7, #0
 802b092:	f000 8141 	beq.w	802b318 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802b096:	6820      	ldr	r0, [r4, #0]
 802b098:	aa0a      	add	r2, sp, #40	; 0x28
 802b09a:	6861      	ldr	r1, [r4, #4]
 802b09c:	f04f 0802 	mov.w	r8, #2
 802b0a0:	3504      	adds	r5, #4
 802b0a2:	c203      	stmia	r2!, {r0, r1}
 802b0a4:	6818      	ldr	r0, [r3, #0]
 802b0a6:	aa0c      	add	r2, sp, #48	; 0x30
 802b0a8:	6859      	ldr	r1, [r3, #4]
 802b0aa:	c203      	stmia	r2!, {r0, r1}
 802b0ac:	a80a      	add	r0, sp, #40	; 0x28
 802b0ae:	f7ef fad5 	bl	801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b0b2:	4621      	mov	r1, r4
 802b0b4:	a80c      	add	r0, sp, #48	; 0x30
 802b0b6:	f7ef faf9 	bl	801a6ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b0ba:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802b0be:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802b0c2:	f002 0301 	and.w	r3, r2, #1
 802b0c6:	9306      	str	r3, [sp, #24]
 802b0c8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802b0cc:	f003 0101 	and.w	r1, r3, #1
 802b0d0:	9105      	str	r1, [sp, #20]
 802b0d2:	9805      	ldr	r0, [sp, #20]
 802b0d4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802b0d8:	4403      	add	r3, r0
 802b0da:	fb01 2303 	mla	r3, r1, r3, r2
 802b0de:	fb93 f3f8 	sdiv	r3, r3, r8
 802b0e2:	441e      	add	r6, r3
 802b0e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802b0e8:	441a      	add	r2, r3
 802b0ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802b0ee:	4419      	add	r1, r3
 802b0f0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802b0f4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802b0f8:	9303      	str	r3, [sp, #12]
 802b0fa:	4b89      	ldr	r3, [pc, #548]	; (802b320 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802b0fc:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802b100:	6818      	ldr	r0, [r3, #0]
 802b102:	6803      	ldr	r3, [r0, #0]
 802b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b106:	4798      	blx	r3
 802b108:	4a86      	ldr	r2, [pc, #536]	; (802b324 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802b10a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802b10e:	2fff      	cmp	r7, #255	; 0xff
 802b110:	8813      	ldrh	r3, [r2, #0]
 802b112:	4694      	mov	ip, r2
 802b114:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 802b118:	fb03 9404 	mla	r4, r3, r4, r9
 802b11c:	fb03 f30b 	mul.w	r3, r3, fp
 802b120:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b124:	d071      	beq.n	802b20a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802b126:	43f9      	mvns	r1, r7
 802b128:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802b12c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802b130:	b2c9      	uxtb	r1, r1
 802b132:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802b136:	9104      	str	r1, [sp, #16]
 802b138:	9b07      	ldr	r3, [sp, #28]
 802b13a:	42a3      	cmp	r3, r4
 802b13c:	f240 80e7 	bls.w	802b30e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802b140:	9b06      	ldr	r3, [sp, #24]
 802b142:	2b00      	cmp	r3, #0
 802b144:	d03d      	beq.n	802b1c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802b146:	7831      	ldrb	r1, [r6, #0]
 802b148:	4650      	mov	r0, sl
 802b14a:	9b04      	ldr	r3, [sp, #16]
 802b14c:	f106 0801 	add.w	r8, r6, #1
 802b150:	f001 010f 	and.w	r1, r1, #15
 802b154:	8822      	ldrh	r2, [r4, #0]
 802b156:	9300      	str	r3, [sp, #0]
 802b158:	463b      	mov	r3, r7
 802b15a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b15e:	4429      	add	r1, r5
 802b160:	f7ff ff56 	bl	802b010 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b164:	9b03      	ldr	r3, [sp, #12]
 802b166:	f824 0b02 	strh.w	r0, [r4], #2
 802b16a:	f103 3bff 	add.w	fp, r3, #4294967295
 802b16e:	f1bb 0f01 	cmp.w	fp, #1
 802b172:	46a1      	mov	r9, r4
 802b174:	f104 0404 	add.w	r4, r4, #4
 802b178:	dd27      	ble.n	802b1ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802b17a:	f898 1000 	ldrb.w	r1, [r8]
 802b17e:	4650      	mov	r0, sl
 802b180:	9b04      	ldr	r3, [sp, #16]
 802b182:	f1ab 0b02 	sub.w	fp, fp, #2
 802b186:	0909      	lsrs	r1, r1, #4
 802b188:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802b18c:	9300      	str	r3, [sp, #0]
 802b18e:	463b      	mov	r3, r7
 802b190:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b194:	4429      	add	r1, r5
 802b196:	f7ff ff3b 	bl	802b010 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b19a:	f824 0c04 	strh.w	r0, [r4, #-4]
 802b19e:	f818 1b01 	ldrb.w	r1, [r8], #1
 802b1a2:	4650      	mov	r0, sl
 802b1a4:	9b04      	ldr	r3, [sp, #16]
 802b1a6:	f001 010f 	and.w	r1, r1, #15
 802b1aa:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802b1ae:	9300      	str	r3, [sp, #0]
 802b1b0:	463b      	mov	r3, r7
 802b1b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b1b6:	4429      	add	r1, r5
 802b1b8:	f7ff ff2a 	bl	802b010 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b1bc:	f824 0c02 	strh.w	r0, [r4, #-2]
 802b1c0:	e7d5      	b.n	802b16e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802b1c2:	46b0      	mov	r8, r6
 802b1c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b1c8:	e7d1      	b.n	802b16e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802b1ca:	d10f      	bne.n	802b1ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802b1cc:	f898 1000 	ldrb.w	r1, [r8]
 802b1d0:	4650      	mov	r0, sl
 802b1d2:	9b04      	ldr	r3, [sp, #16]
 802b1d4:	0909      	lsrs	r1, r1, #4
 802b1d6:	f8b9 2000 	ldrh.w	r2, [r9]
 802b1da:	9300      	str	r3, [sp, #0]
 802b1dc:	463b      	mov	r3, r7
 802b1de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b1e2:	4429      	add	r1, r5
 802b1e4:	f7ff ff14 	bl	802b010 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b1e8:	f829 0b02 	strh.w	r0, [r9], #2
 802b1ec:	9b08      	ldr	r3, [sp, #32]
 802b1ee:	9a05      	ldr	r2, [sp, #20]
 802b1f0:	881c      	ldrh	r4, [r3, #0]
 802b1f2:	9b03      	ldr	r3, [sp, #12]
 802b1f4:	1ae4      	subs	r4, r4, r3
 802b1f6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802b1fa:	4413      	add	r3, r2
 802b1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b1fe:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802b202:	fb93 f3f2 	sdiv	r3, r3, r2
 802b206:	441e      	add	r6, r3
 802b208:	e796      	b.n	802b138 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802b20a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802b20e:	4f46      	ldr	r7, [pc, #280]	; (802b328 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802b210:	42a3      	cmp	r3, r4
 802b212:	d97c      	bls.n	802b30e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802b214:	9a06      	ldr	r2, [sp, #24]
 802b216:	2a00      	cmp	r2, #0
 802b218:	d054      	beq.n	802b2c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802b21a:	7830      	ldrb	r0, [r6, #0]
 802b21c:	1c71      	adds	r1, r6, #1
 802b21e:	f000 000f 	and.w	r0, r0, #15
 802b222:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b226:	eb05 0e00 	add.w	lr, r5, r0
 802b22a:	5c28      	ldrb	r0, [r5, r0]
 802b22c:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802b230:	f89e e001 	ldrb.w	lr, [lr, #1]
 802b234:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802b238:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b23c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802b240:	ea42 020e 	orr.w	r2, r2, lr
 802b244:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802b248:	f824 2b02 	strh.w	r2, [r4], #2
 802b24c:	9a03      	ldr	r2, [sp, #12]
 802b24e:	f102 3eff 	add.w	lr, r2, #4294967295
 802b252:	f1be 0f01 	cmp.w	lr, #1
 802b256:	4620      	mov	r0, r4
 802b258:	f104 0404 	add.w	r4, r4, #4
 802b25c:	dd36      	ble.n	802b2cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802b25e:	7808      	ldrb	r0, [r1, #0]
 802b260:	f1ae 0e02 	sub.w	lr, lr, #2
 802b264:	0900      	lsrs	r0, r0, #4
 802b266:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b26a:	eb05 0a00 	add.w	sl, r5, r0
 802b26e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802b272:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802b276:	00d2      	lsls	r2, r2, #3
 802b278:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802b27c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b280:	ea49 0202 	orr.w	r2, r9, r2
 802b284:	f815 9000 	ldrb.w	r9, [r5, r0]
 802b288:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802b28c:	f824 2c04 	strh.w	r2, [r4, #-4]
 802b290:	f811 0b01 	ldrb.w	r0, [r1], #1
 802b294:	f000 000f 	and.w	r0, r0, #15
 802b298:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b29c:	eb05 0a00 	add.w	sl, r5, r0
 802b2a0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802b2a4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802b2a8:	00d2      	lsls	r2, r2, #3
 802b2aa:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802b2ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b2b2:	ea49 0202 	orr.w	r2, r9, r2
 802b2b6:	f815 9000 	ldrb.w	r9, [r5, r0]
 802b2ba:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802b2be:	f824 2c02 	strh.w	r2, [r4, #-2]
 802b2c2:	e7c6      	b.n	802b252 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802b2c4:	4631      	mov	r1, r6
 802b2c6:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802b2ca:	e7c2      	b.n	802b252 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802b2cc:	d111      	bne.n	802b2f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802b2ce:	7809      	ldrb	r1, [r1, #0]
 802b2d0:	0909      	lsrs	r1, r1, #4
 802b2d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b2d6:	186c      	adds	r4, r5, r1
 802b2d8:	5c69      	ldrb	r1, [r5, r1]
 802b2da:	78a2      	ldrb	r2, [r4, #2]
 802b2dc:	7864      	ldrb	r4, [r4, #1]
 802b2de:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802b2e2:	00e4      	lsls	r4, r4, #3
 802b2e4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802b2e8:	4322      	orrs	r2, r4
 802b2ea:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802b2ee:	f820 2b02 	strh.w	r2, [r0], #2
 802b2f2:	9a03      	ldr	r2, [sp, #12]
 802b2f4:	f8bc 4000 	ldrh.w	r4, [ip]
 802b2f8:	9905      	ldr	r1, [sp, #20]
 802b2fa:	1aa4      	subs	r4, r4, r2
 802b2fc:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802b300:	440a      	add	r2, r1
 802b302:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b306:	fb92 f2f8 	sdiv	r2, r2, r8
 802b30a:	4416      	add	r6, r2
 802b30c:	e780      	b.n	802b210 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802b30e:	4b04      	ldr	r3, [pc, #16]	; (802b320 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802b310:	6818      	ldr	r0, [r3, #0]
 802b312:	6803      	ldr	r3, [r0, #0]
 802b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b316:	4798      	blx	r3
 802b318:	b00f      	add	sp, #60	; 0x3c
 802b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b31e:	bf00      	nop
 802b320:	2402ae6c 	.word	0x2402ae6c
 802b324:	2402ae66 	.word	0x2402ae66
 802b328:	fffff800 	.word	0xfffff800

0802b32c <CRC_Lock>:
 802b32c:	4a20      	ldr	r2, [pc, #128]	; (802b3b0 <CRC_Lock+0x84>)
 802b32e:	b530      	push	{r4, r5, lr}
 802b330:	6813      	ldr	r3, [r2, #0]
 802b332:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802b336:	f24c 2540 	movw	r5, #49728	; 0xc240
 802b33a:	f023 0301 	bic.w	r3, r3, #1
 802b33e:	6013      	str	r3, [r2, #0]
 802b340:	4b1c      	ldr	r3, [pc, #112]	; (802b3b4 <CRC_Lock+0x88>)
 802b342:	681a      	ldr	r2, [r3, #0]
 802b344:	4022      	ands	r2, r4
 802b346:	42aa      	cmp	r2, r5
 802b348:	d005      	beq.n	802b356 <CRC_Lock+0x2a>
 802b34a:	681b      	ldr	r3, [r3, #0]
 802b34c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802b350:	4023      	ands	r3, r4
 802b352:	4293      	cmp	r3, r2
 802b354:	d124      	bne.n	802b3a0 <CRC_Lock+0x74>
 802b356:	4b18      	ldr	r3, [pc, #96]	; (802b3b8 <CRC_Lock+0x8c>)
 802b358:	681b      	ldr	r3, [r3, #0]
 802b35a:	bb0b      	cbnz	r3, 802b3a0 <CRC_Lock+0x74>
 802b35c:	4b17      	ldr	r3, [pc, #92]	; (802b3bc <CRC_Lock+0x90>)
 802b35e:	681a      	ldr	r2, [r3, #0]
 802b360:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b364:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802b368:	d00d      	beq.n	802b386 <CRC_Lock+0x5a>
 802b36a:	681a      	ldr	r2, [r3, #0]
 802b36c:	f240 4483 	movw	r4, #1155	; 0x483
 802b370:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b374:	42a2      	cmp	r2, r4
 802b376:	d006      	beq.n	802b386 <CRC_Lock+0x5a>
 802b378:	681b      	ldr	r3, [r3, #0]
 802b37a:	f240 4285 	movw	r2, #1157	; 0x485
 802b37e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b382:	4293      	cmp	r3, r2
 802b384:	d10c      	bne.n	802b3a0 <CRC_Lock+0x74>
 802b386:	4b0e      	ldr	r3, [pc, #56]	; (802b3c0 <CRC_Lock+0x94>)
 802b388:	2201      	movs	r2, #1
 802b38a:	601a      	str	r2, [r3, #0]
 802b38c:	681a      	ldr	r2, [r3, #0]
 802b38e:	2a00      	cmp	r2, #0
 802b390:	d1fc      	bne.n	802b38c <CRC_Lock+0x60>
 802b392:	4b0c      	ldr	r3, [pc, #48]	; (802b3c4 <CRC_Lock+0x98>)
 802b394:	6018      	str	r0, [r3, #0]
 802b396:	6818      	ldr	r0, [r3, #0]
 802b398:	1a43      	subs	r3, r0, r1
 802b39a:	4258      	negs	r0, r3
 802b39c:	4158      	adcs	r0, r3
 802b39e:	bd30      	pop	{r4, r5, pc}
 802b3a0:	4b09      	ldr	r3, [pc, #36]	; (802b3c8 <CRC_Lock+0x9c>)
 802b3a2:	2201      	movs	r2, #1
 802b3a4:	601a      	str	r2, [r3, #0]
 802b3a6:	681a      	ldr	r2, [r3, #0]
 802b3a8:	2a00      	cmp	r2, #0
 802b3aa:	d1fc      	bne.n	802b3a6 <CRC_Lock+0x7a>
 802b3ac:	4b07      	ldr	r3, [pc, #28]	; (802b3cc <CRC_Lock+0xa0>)
 802b3ae:	e7f1      	b.n	802b394 <CRC_Lock+0x68>
 802b3b0:	e0002000 	.word	0xe0002000
 802b3b4:	e000ed00 	.word	0xe000ed00
 802b3b8:	e0042000 	.word	0xe0042000
 802b3bc:	5c001000 	.word	0x5c001000
 802b3c0:	58024c08 	.word	0x58024c08
 802b3c4:	58024c00 	.word	0x58024c00
 802b3c8:	40023008 	.word	0x40023008
 802b3cc:	40023000 	.word	0x40023000

0802b3d0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b3d0:	6101      	str	r1, [r0, #16]
 802b3d2:	4770      	bx	lr

0802b3d4 <_ZN8touchgfx8Gestures4tickEv>:
 802b3d4:	7b83      	ldrb	r3, [r0, #14]
 802b3d6:	b14b      	cbz	r3, 802b3ec <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b3d8:	8903      	ldrh	r3, [r0, #8]
 802b3da:	3301      	adds	r3, #1
 802b3dc:	b29b      	uxth	r3, r3
 802b3de:	2b07      	cmp	r3, #7
 802b3e0:	8103      	strh	r3, [r0, #8]
 802b3e2:	bf81      	itttt	hi
 802b3e4:	2300      	movhi	r3, #0
 802b3e6:	8143      	strhhi	r3, [r0, #10]
 802b3e8:	8183      	strhhi	r3, [r0, #12]
 802b3ea:	7383      	strbhi	r3, [r0, #14]
 802b3ec:	4770      	bx	lr
	...

0802b3f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b3f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b3f4:	4698      	mov	r8, r3
 802b3f6:	8883      	ldrh	r3, [r0, #4]
 802b3f8:	4604      	mov	r4, r0
 802b3fa:	4617      	mov	r7, r2
 802b3fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 802b400:	eba8 0303 	sub.w	r3, r8, r3
 802b404:	4a19      	ldr	r2, [pc, #100]	; (802b46c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802b406:	460e      	mov	r6, r1
 802b408:	b21b      	sxth	r3, r3
 802b40a:	88c1      	ldrh	r1, [r0, #6]
 802b40c:	9200      	str	r2, [sp, #0]
 802b40e:	2000      	movs	r0, #0
 802b410:	2b00      	cmp	r3, #0
 802b412:	8aa2      	ldrh	r2, [r4, #20]
 802b414:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802b418:	bfb8      	it	lt
 802b41a:	425b      	neglt	r3, r3
 802b41c:	f88d 0004 	strb.w	r0, [sp, #4]
 802b420:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b424:	b21b      	sxth	r3, r3
 802b426:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b42a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b42e:	4293      	cmp	r3, r2
 802b430:	dc07      	bgt.n	802b442 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802b432:	1a69      	subs	r1, r5, r1
 802b434:	b209      	sxth	r1, r1
 802b436:	2900      	cmp	r1, #0
 802b438:	bfb8      	it	lt
 802b43a:	4249      	neglt	r1, r1
 802b43c:	b209      	sxth	r1, r1
 802b43e:	428a      	cmp	r2, r1
 802b440:	da10      	bge.n	802b464 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802b442:	6920      	ldr	r0, [r4, #16]
 802b444:	4669      	mov	r1, sp
 802b446:	eba8 0606 	sub.w	r6, r8, r6
 802b44a:	1bef      	subs	r7, r5, r7
 802b44c:	6803      	ldr	r3, [r0, #0]
 802b44e:	685b      	ldr	r3, [r3, #4]
 802b450:	4798      	blx	r3
 802b452:	2300      	movs	r3, #0
 802b454:	2001      	movs	r0, #1
 802b456:	8166      	strh	r6, [r4, #10]
 802b458:	8123      	strh	r3, [r4, #8]
 802b45a:	81a7      	strh	r7, [r4, #12]
 802b45c:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b460:	80e5      	strh	r5, [r4, #6]
 802b462:	73a0      	strb	r0, [r4, #14]
 802b464:	b004      	add	sp, #16
 802b466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b46a:	bf00      	nop
 802b46c:	080300f8 	.word	0x080300f8

0802b470 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b470:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b472:	461e      	mov	r6, r3
 802b474:	1e4b      	subs	r3, r1, #1
 802b476:	b085      	sub	sp, #20
 802b478:	4604      	mov	r4, r0
 802b47a:	2b01      	cmp	r3, #1
 802b47c:	460d      	mov	r5, r1
 802b47e:	4617      	mov	r7, r2
 802b480:	d84b      	bhi.n	802b51a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b482:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b486:	1cd3      	adds	r3, r2, #3
 802b488:	b29b      	uxth	r3, r3
 802b48a:	2b06      	cmp	r3, #6
 802b48c:	d916      	bls.n	802b4bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b48e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802b530 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b492:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b496:	f8cd c004 	str.w	ip, [sp, #4]
 802b49a:	f04f 0c00 	mov.w	ip, #0
 802b49e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b4a2:	6900      	ldr	r0, [r0, #16]
 802b4a4:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b4a8:	a901      	add	r1, sp, #4
 802b4aa:	f88d c008 	strb.w	ip, [sp, #8]
 802b4ae:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b4b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b4b6:	6803      	ldr	r3, [r0, #0]
 802b4b8:	689b      	ldr	r3, [r3, #8]
 802b4ba:	4798      	blx	r3
 802b4bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b4c0:	1cd3      	adds	r3, r2, #3
 802b4c2:	b29b      	uxth	r3, r3
 802b4c4:	2b06      	cmp	r3, #6
 802b4c6:	d916      	bls.n	802b4f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b4c8:	f8df c064 	ldr.w	ip, [pc, #100]	; 802b530 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b4cc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b4d0:	f8cd c004 	str.w	ip, [sp, #4]
 802b4d4:	f04f 0c01 	mov.w	ip, #1
 802b4d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b4dc:	6920      	ldr	r0, [r4, #16]
 802b4de:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b4e2:	a901      	add	r1, sp, #4
 802b4e4:	f88d c008 	strb.w	ip, [sp, #8]
 802b4e8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b4ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b4f0:	6803      	ldr	r3, [r0, #0]
 802b4f2:	689b      	ldr	r3, [r3, #8]
 802b4f4:	4798      	blx	r3
 802b4f6:	4b0d      	ldr	r3, [pc, #52]	; (802b52c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b4f8:	a901      	add	r1, sp, #4
 802b4fa:	6920      	ldr	r0, [r4, #16]
 802b4fc:	9301      	str	r3, [sp, #4]
 802b4fe:	2300      	movs	r3, #0
 802b500:	f88d 5008 	strb.w	r5, [sp, #8]
 802b504:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b508:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b50c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b510:	6803      	ldr	r3, [r0, #0]
 802b512:	681b      	ldr	r3, [r3, #0]
 802b514:	4798      	blx	r3
 802b516:	b005      	add	sp, #20
 802b518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b51a:	2900      	cmp	r1, #0
 802b51c:	d1eb      	bne.n	802b4f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b51e:	80a2      	strh	r2, [r4, #4]
 802b520:	80c6      	strh	r6, [r0, #6]
 802b522:	60a1      	str	r1, [r4, #8]
 802b524:	81a1      	strh	r1, [r4, #12]
 802b526:	73a1      	strb	r1, [r4, #14]
 802b528:	e7e5      	b.n	802b4f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b52a:	bf00      	nop
 802b52c:	080300e4 	.word	0x080300e4
 802b530:	0803010c 	.word	0x0803010c

0802b534 <__aeabi_atexit>:
 802b534:	460b      	mov	r3, r1
 802b536:	4601      	mov	r1, r0
 802b538:	4618      	mov	r0, r3
 802b53a:	f000 b90f 	b.w	802b75c <__cxa_atexit>

0802b53e <_ZdlPvj>:
 802b53e:	f000 b812 	b.w	802b566 <_ZdlPv>

0802b542 <__cxa_guard_acquire>:
 802b542:	6803      	ldr	r3, [r0, #0]
 802b544:	07db      	lsls	r3, r3, #31
 802b546:	d406      	bmi.n	802b556 <__cxa_guard_acquire+0x14>
 802b548:	7843      	ldrb	r3, [r0, #1]
 802b54a:	b103      	cbz	r3, 802b54e <__cxa_guard_acquire+0xc>
 802b54c:	deff      	udf	#255	; 0xff
 802b54e:	2301      	movs	r3, #1
 802b550:	7043      	strb	r3, [r0, #1]
 802b552:	4618      	mov	r0, r3
 802b554:	4770      	bx	lr
 802b556:	2000      	movs	r0, #0
 802b558:	4770      	bx	lr

0802b55a <__cxa_guard_release>:
 802b55a:	2301      	movs	r3, #1
 802b55c:	6003      	str	r3, [r0, #0]
 802b55e:	4770      	bx	lr

0802b560 <__cxa_pure_virtual>:
 802b560:	b508      	push	{r3, lr}
 802b562:	f000 f80f 	bl	802b584 <_ZSt9terminatev>

0802b566 <_ZdlPv>:
 802b566:	f000 b845 	b.w	802b5f4 <free>

0802b56a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802b56a:	b508      	push	{r3, lr}
 802b56c:	4780      	blx	r0
 802b56e:	f000 f80e 	bl	802b58e <abort>
	...

0802b574 <_ZSt13get_terminatev>:
 802b574:	4b02      	ldr	r3, [pc, #8]	; (802b580 <_ZSt13get_terminatev+0xc>)
 802b576:	6818      	ldr	r0, [r3, #0]
 802b578:	f3bf 8f5b 	dmb	ish
 802b57c:	4770      	bx	lr
 802b57e:	bf00      	nop
 802b580:	240000e0 	.word	0x240000e0

0802b584 <_ZSt9terminatev>:
 802b584:	b508      	push	{r3, lr}
 802b586:	f7ff fff5 	bl	802b574 <_ZSt13get_terminatev>
 802b58a:	f7ff ffee 	bl	802b56a <_ZN10__cxxabiv111__terminateEPFvvE>

0802b58e <abort>:
 802b58e:	b508      	push	{r3, lr}
 802b590:	2006      	movs	r0, #6
 802b592:	f000 fa39 	bl	802ba08 <raise>
 802b596:	2001      	movs	r0, #1
 802b598:	f7d7 f8c0 	bl	800271c <_exit>

0802b59c <__assert_func>:
 802b59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b59e:	4614      	mov	r4, r2
 802b5a0:	461a      	mov	r2, r3
 802b5a2:	4b09      	ldr	r3, [pc, #36]	; (802b5c8 <__assert_func+0x2c>)
 802b5a4:	681b      	ldr	r3, [r3, #0]
 802b5a6:	4605      	mov	r5, r0
 802b5a8:	68d8      	ldr	r0, [r3, #12]
 802b5aa:	b14c      	cbz	r4, 802b5c0 <__assert_func+0x24>
 802b5ac:	4b07      	ldr	r3, [pc, #28]	; (802b5cc <__assert_func+0x30>)
 802b5ae:	9100      	str	r1, [sp, #0]
 802b5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b5b4:	4906      	ldr	r1, [pc, #24]	; (802b5d0 <__assert_func+0x34>)
 802b5b6:	462b      	mov	r3, r5
 802b5b8:	f000 f970 	bl	802b89c <fiprintf>
 802b5bc:	f7ff ffe7 	bl	802b58e <abort>
 802b5c0:	4b04      	ldr	r3, [pc, #16]	; (802b5d4 <__assert_func+0x38>)
 802b5c2:	461c      	mov	r4, r3
 802b5c4:	e7f3      	b.n	802b5ae <__assert_func+0x12>
 802b5c6:	bf00      	nop
 802b5c8:	2400013c 	.word	0x2400013c
 802b5cc:	08030428 	.word	0x08030428
 802b5d0:	08030435 	.word	0x08030435
 802b5d4:	08030463 	.word	0x08030463

0802b5d8 <atexit>:
 802b5d8:	2300      	movs	r3, #0
 802b5da:	4601      	mov	r1, r0
 802b5dc:	461a      	mov	r2, r3
 802b5de:	4618      	mov	r0, r3
 802b5e0:	f000 bb14 	b.w	802bc0c <__register_exitproc>

0802b5e4 <malloc>:
 802b5e4:	4b02      	ldr	r3, [pc, #8]	; (802b5f0 <malloc+0xc>)
 802b5e6:	4601      	mov	r1, r0
 802b5e8:	6818      	ldr	r0, [r3, #0]
 802b5ea:	f000 b82b 	b.w	802b644 <_malloc_r>
 802b5ee:	bf00      	nop
 802b5f0:	2400013c 	.word	0x2400013c

0802b5f4 <free>:
 802b5f4:	4b02      	ldr	r3, [pc, #8]	; (802b600 <free+0xc>)
 802b5f6:	4601      	mov	r1, r0
 802b5f8:	6818      	ldr	r0, [r3, #0]
 802b5fa:	f000 bb65 	b.w	802bcc8 <_free_r>
 802b5fe:	bf00      	nop
 802b600:	2400013c 	.word	0x2400013c

0802b604 <sbrk_aligned>:
 802b604:	b570      	push	{r4, r5, r6, lr}
 802b606:	4e0e      	ldr	r6, [pc, #56]	; (802b640 <sbrk_aligned+0x3c>)
 802b608:	460c      	mov	r4, r1
 802b60a:	6831      	ldr	r1, [r6, #0]
 802b60c:	4605      	mov	r5, r0
 802b60e:	b911      	cbnz	r1, 802b616 <sbrk_aligned+0x12>
 802b610:	f000 faa0 	bl	802bb54 <_sbrk_r>
 802b614:	6030      	str	r0, [r6, #0]
 802b616:	4621      	mov	r1, r4
 802b618:	4628      	mov	r0, r5
 802b61a:	f000 fa9b 	bl	802bb54 <_sbrk_r>
 802b61e:	1c43      	adds	r3, r0, #1
 802b620:	d00a      	beq.n	802b638 <sbrk_aligned+0x34>
 802b622:	1cc4      	adds	r4, r0, #3
 802b624:	f024 0403 	bic.w	r4, r4, #3
 802b628:	42a0      	cmp	r0, r4
 802b62a:	d007      	beq.n	802b63c <sbrk_aligned+0x38>
 802b62c:	1a21      	subs	r1, r4, r0
 802b62e:	4628      	mov	r0, r5
 802b630:	f000 fa90 	bl	802bb54 <_sbrk_r>
 802b634:	3001      	adds	r0, #1
 802b636:	d101      	bne.n	802b63c <sbrk_aligned+0x38>
 802b638:	f04f 34ff 	mov.w	r4, #4294967295
 802b63c:	4620      	mov	r0, r4
 802b63e:	bd70      	pop	{r4, r5, r6, pc}
 802b640:	2402b7bc 	.word	0x2402b7bc

0802b644 <_malloc_r>:
 802b644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b648:	1ccd      	adds	r5, r1, #3
 802b64a:	f025 0503 	bic.w	r5, r5, #3
 802b64e:	3508      	adds	r5, #8
 802b650:	2d0c      	cmp	r5, #12
 802b652:	bf38      	it	cc
 802b654:	250c      	movcc	r5, #12
 802b656:	2d00      	cmp	r5, #0
 802b658:	4607      	mov	r7, r0
 802b65a:	db01      	blt.n	802b660 <_malloc_r+0x1c>
 802b65c:	42a9      	cmp	r1, r5
 802b65e:	d905      	bls.n	802b66c <_malloc_r+0x28>
 802b660:	230c      	movs	r3, #12
 802b662:	603b      	str	r3, [r7, #0]
 802b664:	2600      	movs	r6, #0
 802b666:	4630      	mov	r0, r6
 802b668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b66c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802b740 <_malloc_r+0xfc>
 802b670:	f000 f868 	bl	802b744 <__malloc_lock>
 802b674:	f8d8 3000 	ldr.w	r3, [r8]
 802b678:	461c      	mov	r4, r3
 802b67a:	bb5c      	cbnz	r4, 802b6d4 <_malloc_r+0x90>
 802b67c:	4629      	mov	r1, r5
 802b67e:	4638      	mov	r0, r7
 802b680:	f7ff ffc0 	bl	802b604 <sbrk_aligned>
 802b684:	1c43      	adds	r3, r0, #1
 802b686:	4604      	mov	r4, r0
 802b688:	d155      	bne.n	802b736 <_malloc_r+0xf2>
 802b68a:	f8d8 4000 	ldr.w	r4, [r8]
 802b68e:	4626      	mov	r6, r4
 802b690:	2e00      	cmp	r6, #0
 802b692:	d145      	bne.n	802b720 <_malloc_r+0xdc>
 802b694:	2c00      	cmp	r4, #0
 802b696:	d048      	beq.n	802b72a <_malloc_r+0xe6>
 802b698:	6823      	ldr	r3, [r4, #0]
 802b69a:	4631      	mov	r1, r6
 802b69c:	4638      	mov	r0, r7
 802b69e:	eb04 0903 	add.w	r9, r4, r3
 802b6a2:	f000 fa57 	bl	802bb54 <_sbrk_r>
 802b6a6:	4581      	cmp	r9, r0
 802b6a8:	d13f      	bne.n	802b72a <_malloc_r+0xe6>
 802b6aa:	6821      	ldr	r1, [r4, #0]
 802b6ac:	1a6d      	subs	r5, r5, r1
 802b6ae:	4629      	mov	r1, r5
 802b6b0:	4638      	mov	r0, r7
 802b6b2:	f7ff ffa7 	bl	802b604 <sbrk_aligned>
 802b6b6:	3001      	adds	r0, #1
 802b6b8:	d037      	beq.n	802b72a <_malloc_r+0xe6>
 802b6ba:	6823      	ldr	r3, [r4, #0]
 802b6bc:	442b      	add	r3, r5
 802b6be:	6023      	str	r3, [r4, #0]
 802b6c0:	f8d8 3000 	ldr.w	r3, [r8]
 802b6c4:	2b00      	cmp	r3, #0
 802b6c6:	d038      	beq.n	802b73a <_malloc_r+0xf6>
 802b6c8:	685a      	ldr	r2, [r3, #4]
 802b6ca:	42a2      	cmp	r2, r4
 802b6cc:	d12b      	bne.n	802b726 <_malloc_r+0xe2>
 802b6ce:	2200      	movs	r2, #0
 802b6d0:	605a      	str	r2, [r3, #4]
 802b6d2:	e00f      	b.n	802b6f4 <_malloc_r+0xb0>
 802b6d4:	6822      	ldr	r2, [r4, #0]
 802b6d6:	1b52      	subs	r2, r2, r5
 802b6d8:	d41f      	bmi.n	802b71a <_malloc_r+0xd6>
 802b6da:	2a0b      	cmp	r2, #11
 802b6dc:	d917      	bls.n	802b70e <_malloc_r+0xca>
 802b6de:	1961      	adds	r1, r4, r5
 802b6e0:	42a3      	cmp	r3, r4
 802b6e2:	6025      	str	r5, [r4, #0]
 802b6e4:	bf18      	it	ne
 802b6e6:	6059      	strne	r1, [r3, #4]
 802b6e8:	6863      	ldr	r3, [r4, #4]
 802b6ea:	bf08      	it	eq
 802b6ec:	f8c8 1000 	streq.w	r1, [r8]
 802b6f0:	5162      	str	r2, [r4, r5]
 802b6f2:	604b      	str	r3, [r1, #4]
 802b6f4:	4638      	mov	r0, r7
 802b6f6:	f104 060b 	add.w	r6, r4, #11
 802b6fa:	f000 f829 	bl	802b750 <__malloc_unlock>
 802b6fe:	f026 0607 	bic.w	r6, r6, #7
 802b702:	1d23      	adds	r3, r4, #4
 802b704:	1af2      	subs	r2, r6, r3
 802b706:	d0ae      	beq.n	802b666 <_malloc_r+0x22>
 802b708:	1b9b      	subs	r3, r3, r6
 802b70a:	50a3      	str	r3, [r4, r2]
 802b70c:	e7ab      	b.n	802b666 <_malloc_r+0x22>
 802b70e:	42a3      	cmp	r3, r4
 802b710:	6862      	ldr	r2, [r4, #4]
 802b712:	d1dd      	bne.n	802b6d0 <_malloc_r+0x8c>
 802b714:	f8c8 2000 	str.w	r2, [r8]
 802b718:	e7ec      	b.n	802b6f4 <_malloc_r+0xb0>
 802b71a:	4623      	mov	r3, r4
 802b71c:	6864      	ldr	r4, [r4, #4]
 802b71e:	e7ac      	b.n	802b67a <_malloc_r+0x36>
 802b720:	4634      	mov	r4, r6
 802b722:	6876      	ldr	r6, [r6, #4]
 802b724:	e7b4      	b.n	802b690 <_malloc_r+0x4c>
 802b726:	4613      	mov	r3, r2
 802b728:	e7cc      	b.n	802b6c4 <_malloc_r+0x80>
 802b72a:	230c      	movs	r3, #12
 802b72c:	603b      	str	r3, [r7, #0]
 802b72e:	4638      	mov	r0, r7
 802b730:	f000 f80e 	bl	802b750 <__malloc_unlock>
 802b734:	e797      	b.n	802b666 <_malloc_r+0x22>
 802b736:	6025      	str	r5, [r4, #0]
 802b738:	e7dc      	b.n	802b6f4 <_malloc_r+0xb0>
 802b73a:	605b      	str	r3, [r3, #4]
 802b73c:	deff      	udf	#255	; 0xff
 802b73e:	bf00      	nop
 802b740:	2402b7b8 	.word	0x2402b7b8

0802b744 <__malloc_lock>:
 802b744:	4801      	ldr	r0, [pc, #4]	; (802b74c <__malloc_lock+0x8>)
 802b746:	f000 ba51 	b.w	802bbec <__retarget_lock_acquire_recursive>
 802b74a:	bf00      	nop
 802b74c:	2402b901 	.word	0x2402b901

0802b750 <__malloc_unlock>:
 802b750:	4801      	ldr	r0, [pc, #4]	; (802b758 <__malloc_unlock+0x8>)
 802b752:	f000 ba4c 	b.w	802bbee <__retarget_lock_release_recursive>
 802b756:	bf00      	nop
 802b758:	2402b901 	.word	0x2402b901

0802b75c <__cxa_atexit>:
 802b75c:	b510      	push	{r4, lr}
 802b75e:	4c05      	ldr	r4, [pc, #20]	; (802b774 <__cxa_atexit+0x18>)
 802b760:	4613      	mov	r3, r2
 802b762:	b12c      	cbz	r4, 802b770 <__cxa_atexit+0x14>
 802b764:	460a      	mov	r2, r1
 802b766:	4601      	mov	r1, r0
 802b768:	2002      	movs	r0, #2
 802b76a:	f000 fa4f 	bl	802bc0c <__register_exitproc>
 802b76e:	bd10      	pop	{r4, pc}
 802b770:	4620      	mov	r0, r4
 802b772:	e7fc      	b.n	802b76e <__cxa_atexit+0x12>
 802b774:	0802bc0d 	.word	0x0802bc0d

0802b778 <std>:
 802b778:	2300      	movs	r3, #0
 802b77a:	b510      	push	{r4, lr}
 802b77c:	4604      	mov	r4, r0
 802b77e:	e9c0 3300 	strd	r3, r3, [r0]
 802b782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b786:	6083      	str	r3, [r0, #8]
 802b788:	8181      	strh	r1, [r0, #12]
 802b78a:	6643      	str	r3, [r0, #100]	; 0x64
 802b78c:	81c2      	strh	r2, [r0, #14]
 802b78e:	6183      	str	r3, [r0, #24]
 802b790:	4619      	mov	r1, r3
 802b792:	2208      	movs	r2, #8
 802b794:	305c      	adds	r0, #92	; 0x5c
 802b796:	f000 f8f4 	bl	802b982 <memset>
 802b79a:	4b05      	ldr	r3, [pc, #20]	; (802b7b0 <std+0x38>)
 802b79c:	6263      	str	r3, [r4, #36]	; 0x24
 802b79e:	4b05      	ldr	r3, [pc, #20]	; (802b7b4 <std+0x3c>)
 802b7a0:	62a3      	str	r3, [r4, #40]	; 0x28
 802b7a2:	4b05      	ldr	r3, [pc, #20]	; (802b7b8 <std+0x40>)
 802b7a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b7a6:	4b05      	ldr	r3, [pc, #20]	; (802b7bc <std+0x44>)
 802b7a8:	6224      	str	r4, [r4, #32]
 802b7aa:	6323      	str	r3, [r4, #48]	; 0x30
 802b7ac:	bd10      	pop	{r4, pc}
 802b7ae:	bf00      	nop
 802b7b0:	0802b8fd 	.word	0x0802b8fd
 802b7b4:	0802b91f 	.word	0x0802b91f
 802b7b8:	0802b957 	.word	0x0802b957
 802b7bc:	0802b97b 	.word	0x0802b97b

0802b7c0 <stdio_exit_handler>:
 802b7c0:	4a02      	ldr	r2, [pc, #8]	; (802b7cc <stdio_exit_handler+0xc>)
 802b7c2:	4903      	ldr	r1, [pc, #12]	; (802b7d0 <stdio_exit_handler+0x10>)
 802b7c4:	4803      	ldr	r0, [pc, #12]	; (802b7d4 <stdio_exit_handler+0x14>)
 802b7c6:	f000 b87b 	b.w	802b8c0 <_fwalk_sglue>
 802b7ca:	bf00      	nop
 802b7cc:	240000e4 	.word	0x240000e4
 802b7d0:	0802c415 	.word	0x0802c415
 802b7d4:	240000f0 	.word	0x240000f0

0802b7d8 <cleanup_stdio>:
 802b7d8:	6841      	ldr	r1, [r0, #4]
 802b7da:	4b0c      	ldr	r3, [pc, #48]	; (802b80c <cleanup_stdio+0x34>)
 802b7dc:	4299      	cmp	r1, r3
 802b7de:	b510      	push	{r4, lr}
 802b7e0:	4604      	mov	r4, r0
 802b7e2:	d001      	beq.n	802b7e8 <cleanup_stdio+0x10>
 802b7e4:	f000 fe16 	bl	802c414 <_fflush_r>
 802b7e8:	68a1      	ldr	r1, [r4, #8]
 802b7ea:	4b09      	ldr	r3, [pc, #36]	; (802b810 <cleanup_stdio+0x38>)
 802b7ec:	4299      	cmp	r1, r3
 802b7ee:	d002      	beq.n	802b7f6 <cleanup_stdio+0x1e>
 802b7f0:	4620      	mov	r0, r4
 802b7f2:	f000 fe0f 	bl	802c414 <_fflush_r>
 802b7f6:	68e1      	ldr	r1, [r4, #12]
 802b7f8:	4b06      	ldr	r3, [pc, #24]	; (802b814 <cleanup_stdio+0x3c>)
 802b7fa:	4299      	cmp	r1, r3
 802b7fc:	d004      	beq.n	802b808 <cleanup_stdio+0x30>
 802b7fe:	4620      	mov	r0, r4
 802b800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b804:	f000 be06 	b.w	802c414 <_fflush_r>
 802b808:	bd10      	pop	{r4, pc}
 802b80a:	bf00      	nop
 802b80c:	2402b7c0 	.word	0x2402b7c0
 802b810:	2402b828 	.word	0x2402b828
 802b814:	2402b890 	.word	0x2402b890

0802b818 <global_stdio_init.part.0>:
 802b818:	b510      	push	{r4, lr}
 802b81a:	4b0b      	ldr	r3, [pc, #44]	; (802b848 <global_stdio_init.part.0+0x30>)
 802b81c:	4c0b      	ldr	r4, [pc, #44]	; (802b84c <global_stdio_init.part.0+0x34>)
 802b81e:	4a0c      	ldr	r2, [pc, #48]	; (802b850 <global_stdio_init.part.0+0x38>)
 802b820:	601a      	str	r2, [r3, #0]
 802b822:	4620      	mov	r0, r4
 802b824:	2200      	movs	r2, #0
 802b826:	2104      	movs	r1, #4
 802b828:	f7ff ffa6 	bl	802b778 <std>
 802b82c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802b830:	2201      	movs	r2, #1
 802b832:	2109      	movs	r1, #9
 802b834:	f7ff ffa0 	bl	802b778 <std>
 802b838:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802b83c:	2202      	movs	r2, #2
 802b83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b842:	2112      	movs	r1, #18
 802b844:	f7ff bf98 	b.w	802b778 <std>
 802b848:	2402b8f8 	.word	0x2402b8f8
 802b84c:	2402b7c0 	.word	0x2402b7c0
 802b850:	0802b7c1 	.word	0x0802b7c1

0802b854 <__sfp_lock_acquire>:
 802b854:	4801      	ldr	r0, [pc, #4]	; (802b85c <__sfp_lock_acquire+0x8>)
 802b856:	f000 b9c9 	b.w	802bbec <__retarget_lock_acquire_recursive>
 802b85a:	bf00      	nop
 802b85c:	2402b902 	.word	0x2402b902

0802b860 <__sfp_lock_release>:
 802b860:	4801      	ldr	r0, [pc, #4]	; (802b868 <__sfp_lock_release+0x8>)
 802b862:	f000 b9c4 	b.w	802bbee <__retarget_lock_release_recursive>
 802b866:	bf00      	nop
 802b868:	2402b902 	.word	0x2402b902

0802b86c <__sinit>:
 802b86c:	b510      	push	{r4, lr}
 802b86e:	4604      	mov	r4, r0
 802b870:	f7ff fff0 	bl	802b854 <__sfp_lock_acquire>
 802b874:	6a23      	ldr	r3, [r4, #32]
 802b876:	b11b      	cbz	r3, 802b880 <__sinit+0x14>
 802b878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b87c:	f7ff bff0 	b.w	802b860 <__sfp_lock_release>
 802b880:	4b04      	ldr	r3, [pc, #16]	; (802b894 <__sinit+0x28>)
 802b882:	6223      	str	r3, [r4, #32]
 802b884:	4b04      	ldr	r3, [pc, #16]	; (802b898 <__sinit+0x2c>)
 802b886:	681b      	ldr	r3, [r3, #0]
 802b888:	2b00      	cmp	r3, #0
 802b88a:	d1f5      	bne.n	802b878 <__sinit+0xc>
 802b88c:	f7ff ffc4 	bl	802b818 <global_stdio_init.part.0>
 802b890:	e7f2      	b.n	802b878 <__sinit+0xc>
 802b892:	bf00      	nop
 802b894:	0802b7d9 	.word	0x0802b7d9
 802b898:	2402b8f8 	.word	0x2402b8f8

0802b89c <fiprintf>:
 802b89c:	b40e      	push	{r1, r2, r3}
 802b89e:	b503      	push	{r0, r1, lr}
 802b8a0:	4601      	mov	r1, r0
 802b8a2:	ab03      	add	r3, sp, #12
 802b8a4:	4805      	ldr	r0, [pc, #20]	; (802b8bc <fiprintf+0x20>)
 802b8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 802b8aa:	6800      	ldr	r0, [r0, #0]
 802b8ac:	9301      	str	r3, [sp, #4]
 802b8ae:	f000 fa81 	bl	802bdb4 <_vfiprintf_r>
 802b8b2:	b002      	add	sp, #8
 802b8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 802b8b8:	b003      	add	sp, #12
 802b8ba:	4770      	bx	lr
 802b8bc:	2400013c 	.word	0x2400013c

0802b8c0 <_fwalk_sglue>:
 802b8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b8c4:	4607      	mov	r7, r0
 802b8c6:	4688      	mov	r8, r1
 802b8c8:	4614      	mov	r4, r2
 802b8ca:	2600      	movs	r6, #0
 802b8cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b8d0:	f1b9 0901 	subs.w	r9, r9, #1
 802b8d4:	d505      	bpl.n	802b8e2 <_fwalk_sglue+0x22>
 802b8d6:	6824      	ldr	r4, [r4, #0]
 802b8d8:	2c00      	cmp	r4, #0
 802b8da:	d1f7      	bne.n	802b8cc <_fwalk_sglue+0xc>
 802b8dc:	4630      	mov	r0, r6
 802b8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b8e2:	89ab      	ldrh	r3, [r5, #12]
 802b8e4:	2b01      	cmp	r3, #1
 802b8e6:	d907      	bls.n	802b8f8 <_fwalk_sglue+0x38>
 802b8e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b8ec:	3301      	adds	r3, #1
 802b8ee:	d003      	beq.n	802b8f8 <_fwalk_sglue+0x38>
 802b8f0:	4629      	mov	r1, r5
 802b8f2:	4638      	mov	r0, r7
 802b8f4:	47c0      	blx	r8
 802b8f6:	4306      	orrs	r6, r0
 802b8f8:	3568      	adds	r5, #104	; 0x68
 802b8fa:	e7e9      	b.n	802b8d0 <_fwalk_sglue+0x10>

0802b8fc <__sread>:
 802b8fc:	b510      	push	{r4, lr}
 802b8fe:	460c      	mov	r4, r1
 802b900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b904:	f000 f900 	bl	802bb08 <_read_r>
 802b908:	2800      	cmp	r0, #0
 802b90a:	bfab      	itete	ge
 802b90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b90e:	89a3      	ldrhlt	r3, [r4, #12]
 802b910:	181b      	addge	r3, r3, r0
 802b912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b916:	bfac      	ite	ge
 802b918:	6563      	strge	r3, [r4, #84]	; 0x54
 802b91a:	81a3      	strhlt	r3, [r4, #12]
 802b91c:	bd10      	pop	{r4, pc}

0802b91e <__swrite>:
 802b91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b922:	461f      	mov	r7, r3
 802b924:	898b      	ldrh	r3, [r1, #12]
 802b926:	05db      	lsls	r3, r3, #23
 802b928:	4605      	mov	r5, r0
 802b92a:	460c      	mov	r4, r1
 802b92c:	4616      	mov	r6, r2
 802b92e:	d505      	bpl.n	802b93c <__swrite+0x1e>
 802b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b934:	2302      	movs	r3, #2
 802b936:	2200      	movs	r2, #0
 802b938:	f000 f8d4 	bl	802bae4 <_lseek_r>
 802b93c:	89a3      	ldrh	r3, [r4, #12]
 802b93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b946:	81a3      	strh	r3, [r4, #12]
 802b948:	4632      	mov	r2, r6
 802b94a:	463b      	mov	r3, r7
 802b94c:	4628      	mov	r0, r5
 802b94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b952:	f000 b90f 	b.w	802bb74 <_write_r>

0802b956 <__sseek>:
 802b956:	b510      	push	{r4, lr}
 802b958:	460c      	mov	r4, r1
 802b95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b95e:	f000 f8c1 	bl	802bae4 <_lseek_r>
 802b962:	1c43      	adds	r3, r0, #1
 802b964:	89a3      	ldrh	r3, [r4, #12]
 802b966:	bf15      	itete	ne
 802b968:	6560      	strne	r0, [r4, #84]	; 0x54
 802b96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b972:	81a3      	strheq	r3, [r4, #12]
 802b974:	bf18      	it	ne
 802b976:	81a3      	strhne	r3, [r4, #12]
 802b978:	bd10      	pop	{r4, pc}

0802b97a <__sclose>:
 802b97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b97e:	f000 b84b 	b.w	802ba18 <_close_r>

0802b982 <memset>:
 802b982:	4402      	add	r2, r0
 802b984:	4603      	mov	r3, r0
 802b986:	4293      	cmp	r3, r2
 802b988:	d100      	bne.n	802b98c <memset+0xa>
 802b98a:	4770      	bx	lr
 802b98c:	f803 1b01 	strb.w	r1, [r3], #1
 802b990:	e7f9      	b.n	802b986 <memset+0x4>

0802b992 <strncmp>:
 802b992:	b510      	push	{r4, lr}
 802b994:	b16a      	cbz	r2, 802b9b2 <strncmp+0x20>
 802b996:	3901      	subs	r1, #1
 802b998:	1884      	adds	r4, r0, r2
 802b99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b99e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802b9a2:	429a      	cmp	r2, r3
 802b9a4:	d103      	bne.n	802b9ae <strncmp+0x1c>
 802b9a6:	42a0      	cmp	r0, r4
 802b9a8:	d001      	beq.n	802b9ae <strncmp+0x1c>
 802b9aa:	2a00      	cmp	r2, #0
 802b9ac:	d1f5      	bne.n	802b99a <strncmp+0x8>
 802b9ae:	1ad0      	subs	r0, r2, r3
 802b9b0:	bd10      	pop	{r4, pc}
 802b9b2:	4610      	mov	r0, r2
 802b9b4:	e7fc      	b.n	802b9b0 <strncmp+0x1e>

0802b9b6 <_raise_r>:
 802b9b6:	291f      	cmp	r1, #31
 802b9b8:	b538      	push	{r3, r4, r5, lr}
 802b9ba:	4604      	mov	r4, r0
 802b9bc:	460d      	mov	r5, r1
 802b9be:	d904      	bls.n	802b9ca <_raise_r+0x14>
 802b9c0:	2316      	movs	r3, #22
 802b9c2:	6003      	str	r3, [r0, #0]
 802b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 802b9c8:	bd38      	pop	{r3, r4, r5, pc}
 802b9ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802b9cc:	b112      	cbz	r2, 802b9d4 <_raise_r+0x1e>
 802b9ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b9d2:	b94b      	cbnz	r3, 802b9e8 <_raise_r+0x32>
 802b9d4:	4620      	mov	r0, r4
 802b9d6:	f000 f8bb 	bl	802bb50 <_getpid_r>
 802b9da:	462a      	mov	r2, r5
 802b9dc:	4601      	mov	r1, r0
 802b9de:	4620      	mov	r0, r4
 802b9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b9e4:	f000 b8a2 	b.w	802bb2c <_kill_r>
 802b9e8:	2b01      	cmp	r3, #1
 802b9ea:	d00a      	beq.n	802ba02 <_raise_r+0x4c>
 802b9ec:	1c59      	adds	r1, r3, #1
 802b9ee:	d103      	bne.n	802b9f8 <_raise_r+0x42>
 802b9f0:	2316      	movs	r3, #22
 802b9f2:	6003      	str	r3, [r0, #0]
 802b9f4:	2001      	movs	r0, #1
 802b9f6:	e7e7      	b.n	802b9c8 <_raise_r+0x12>
 802b9f8:	2400      	movs	r4, #0
 802b9fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b9fe:	4628      	mov	r0, r5
 802ba00:	4798      	blx	r3
 802ba02:	2000      	movs	r0, #0
 802ba04:	e7e0      	b.n	802b9c8 <_raise_r+0x12>
	...

0802ba08 <raise>:
 802ba08:	4b02      	ldr	r3, [pc, #8]	; (802ba14 <raise+0xc>)
 802ba0a:	4601      	mov	r1, r0
 802ba0c:	6818      	ldr	r0, [r3, #0]
 802ba0e:	f7ff bfd2 	b.w	802b9b6 <_raise_r>
 802ba12:	bf00      	nop
 802ba14:	2400013c 	.word	0x2400013c

0802ba18 <_close_r>:
 802ba18:	b538      	push	{r3, r4, r5, lr}
 802ba1a:	4d06      	ldr	r5, [pc, #24]	; (802ba34 <_close_r+0x1c>)
 802ba1c:	2300      	movs	r3, #0
 802ba1e:	4604      	mov	r4, r0
 802ba20:	4608      	mov	r0, r1
 802ba22:	602b      	str	r3, [r5, #0]
 802ba24:	f7d6 fe9c 	bl	8002760 <_close>
 802ba28:	1c43      	adds	r3, r0, #1
 802ba2a:	d102      	bne.n	802ba32 <_close_r+0x1a>
 802ba2c:	682b      	ldr	r3, [r5, #0]
 802ba2e:	b103      	cbz	r3, 802ba32 <_close_r+0x1a>
 802ba30:	6023      	str	r3, [r4, #0]
 802ba32:	bd38      	pop	{r3, r4, r5, pc}
 802ba34:	2402b8fc 	.word	0x2402b8fc

0802ba38 <_reclaim_reent>:
 802ba38:	4b29      	ldr	r3, [pc, #164]	; (802bae0 <_reclaim_reent+0xa8>)
 802ba3a:	681b      	ldr	r3, [r3, #0]
 802ba3c:	4283      	cmp	r3, r0
 802ba3e:	b570      	push	{r4, r5, r6, lr}
 802ba40:	4604      	mov	r4, r0
 802ba42:	d04b      	beq.n	802badc <_reclaim_reent+0xa4>
 802ba44:	69c3      	ldr	r3, [r0, #28]
 802ba46:	b143      	cbz	r3, 802ba5a <_reclaim_reent+0x22>
 802ba48:	68db      	ldr	r3, [r3, #12]
 802ba4a:	2b00      	cmp	r3, #0
 802ba4c:	d144      	bne.n	802bad8 <_reclaim_reent+0xa0>
 802ba4e:	69e3      	ldr	r3, [r4, #28]
 802ba50:	6819      	ldr	r1, [r3, #0]
 802ba52:	b111      	cbz	r1, 802ba5a <_reclaim_reent+0x22>
 802ba54:	4620      	mov	r0, r4
 802ba56:	f000 f937 	bl	802bcc8 <_free_r>
 802ba5a:	6961      	ldr	r1, [r4, #20]
 802ba5c:	b111      	cbz	r1, 802ba64 <_reclaim_reent+0x2c>
 802ba5e:	4620      	mov	r0, r4
 802ba60:	f000 f932 	bl	802bcc8 <_free_r>
 802ba64:	69e1      	ldr	r1, [r4, #28]
 802ba66:	b111      	cbz	r1, 802ba6e <_reclaim_reent+0x36>
 802ba68:	4620      	mov	r0, r4
 802ba6a:	f000 f92d 	bl	802bcc8 <_free_r>
 802ba6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802ba70:	b111      	cbz	r1, 802ba78 <_reclaim_reent+0x40>
 802ba72:	4620      	mov	r0, r4
 802ba74:	f000 f928 	bl	802bcc8 <_free_r>
 802ba78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ba7a:	b111      	cbz	r1, 802ba82 <_reclaim_reent+0x4a>
 802ba7c:	4620      	mov	r0, r4
 802ba7e:	f000 f923 	bl	802bcc8 <_free_r>
 802ba82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802ba84:	b111      	cbz	r1, 802ba8c <_reclaim_reent+0x54>
 802ba86:	4620      	mov	r0, r4
 802ba88:	f000 f91e 	bl	802bcc8 <_free_r>
 802ba8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802ba8e:	b111      	cbz	r1, 802ba96 <_reclaim_reent+0x5e>
 802ba90:	4620      	mov	r0, r4
 802ba92:	f000 f919 	bl	802bcc8 <_free_r>
 802ba96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802ba98:	b111      	cbz	r1, 802baa0 <_reclaim_reent+0x68>
 802ba9a:	4620      	mov	r0, r4
 802ba9c:	f000 f914 	bl	802bcc8 <_free_r>
 802baa0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802baa2:	b111      	cbz	r1, 802baaa <_reclaim_reent+0x72>
 802baa4:	4620      	mov	r0, r4
 802baa6:	f000 f90f 	bl	802bcc8 <_free_r>
 802baaa:	6a23      	ldr	r3, [r4, #32]
 802baac:	b1b3      	cbz	r3, 802badc <_reclaim_reent+0xa4>
 802baae:	4620      	mov	r0, r4
 802bab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802bab4:	4718      	bx	r3
 802bab6:	5949      	ldr	r1, [r1, r5]
 802bab8:	b941      	cbnz	r1, 802bacc <_reclaim_reent+0x94>
 802baba:	3504      	adds	r5, #4
 802babc:	69e3      	ldr	r3, [r4, #28]
 802babe:	2d80      	cmp	r5, #128	; 0x80
 802bac0:	68d9      	ldr	r1, [r3, #12]
 802bac2:	d1f8      	bne.n	802bab6 <_reclaim_reent+0x7e>
 802bac4:	4620      	mov	r0, r4
 802bac6:	f000 f8ff 	bl	802bcc8 <_free_r>
 802baca:	e7c0      	b.n	802ba4e <_reclaim_reent+0x16>
 802bacc:	680e      	ldr	r6, [r1, #0]
 802bace:	4620      	mov	r0, r4
 802bad0:	f000 f8fa 	bl	802bcc8 <_free_r>
 802bad4:	4631      	mov	r1, r6
 802bad6:	e7ef      	b.n	802bab8 <_reclaim_reent+0x80>
 802bad8:	2500      	movs	r5, #0
 802bada:	e7ef      	b.n	802babc <_reclaim_reent+0x84>
 802badc:	bd70      	pop	{r4, r5, r6, pc}
 802bade:	bf00      	nop
 802bae0:	2400013c 	.word	0x2400013c

0802bae4 <_lseek_r>:
 802bae4:	b538      	push	{r3, r4, r5, lr}
 802bae6:	4d07      	ldr	r5, [pc, #28]	; (802bb04 <_lseek_r+0x20>)
 802bae8:	4604      	mov	r4, r0
 802baea:	4608      	mov	r0, r1
 802baec:	4611      	mov	r1, r2
 802baee:	2200      	movs	r2, #0
 802baf0:	602a      	str	r2, [r5, #0]
 802baf2:	461a      	mov	r2, r3
 802baf4:	f7d6 fe3e 	bl	8002774 <_lseek>
 802baf8:	1c43      	adds	r3, r0, #1
 802bafa:	d102      	bne.n	802bb02 <_lseek_r+0x1e>
 802bafc:	682b      	ldr	r3, [r5, #0]
 802bafe:	b103      	cbz	r3, 802bb02 <_lseek_r+0x1e>
 802bb00:	6023      	str	r3, [r4, #0]
 802bb02:	bd38      	pop	{r3, r4, r5, pc}
 802bb04:	2402b8fc 	.word	0x2402b8fc

0802bb08 <_read_r>:
 802bb08:	b538      	push	{r3, r4, r5, lr}
 802bb0a:	4d07      	ldr	r5, [pc, #28]	; (802bb28 <_read_r+0x20>)
 802bb0c:	4604      	mov	r4, r0
 802bb0e:	4608      	mov	r0, r1
 802bb10:	4611      	mov	r1, r2
 802bb12:	2200      	movs	r2, #0
 802bb14:	602a      	str	r2, [r5, #0]
 802bb16:	461a      	mov	r2, r3
 802bb18:	f7d6 fe06 	bl	8002728 <_read>
 802bb1c:	1c43      	adds	r3, r0, #1
 802bb1e:	d102      	bne.n	802bb26 <_read_r+0x1e>
 802bb20:	682b      	ldr	r3, [r5, #0]
 802bb22:	b103      	cbz	r3, 802bb26 <_read_r+0x1e>
 802bb24:	6023      	str	r3, [r4, #0]
 802bb26:	bd38      	pop	{r3, r4, r5, pc}
 802bb28:	2402b8fc 	.word	0x2402b8fc

0802bb2c <_kill_r>:
 802bb2c:	b538      	push	{r3, r4, r5, lr}
 802bb2e:	4d07      	ldr	r5, [pc, #28]	; (802bb4c <_kill_r+0x20>)
 802bb30:	2300      	movs	r3, #0
 802bb32:	4604      	mov	r4, r0
 802bb34:	4608      	mov	r0, r1
 802bb36:	4611      	mov	r1, r2
 802bb38:	602b      	str	r3, [r5, #0]
 802bb3a:	f7d6 fde7 	bl	800270c <_kill>
 802bb3e:	1c43      	adds	r3, r0, #1
 802bb40:	d102      	bne.n	802bb48 <_kill_r+0x1c>
 802bb42:	682b      	ldr	r3, [r5, #0]
 802bb44:	b103      	cbz	r3, 802bb48 <_kill_r+0x1c>
 802bb46:	6023      	str	r3, [r4, #0]
 802bb48:	bd38      	pop	{r3, r4, r5, pc}
 802bb4a:	bf00      	nop
 802bb4c:	2402b8fc 	.word	0x2402b8fc

0802bb50 <_getpid_r>:
 802bb50:	f7d6 bdda 	b.w	8002708 <_getpid>

0802bb54 <_sbrk_r>:
 802bb54:	b538      	push	{r3, r4, r5, lr}
 802bb56:	4d06      	ldr	r5, [pc, #24]	; (802bb70 <_sbrk_r+0x1c>)
 802bb58:	2300      	movs	r3, #0
 802bb5a:	4604      	mov	r4, r0
 802bb5c:	4608      	mov	r0, r1
 802bb5e:	602b      	str	r3, [r5, #0]
 802bb60:	f7d6 fe0a 	bl	8002778 <_sbrk>
 802bb64:	1c43      	adds	r3, r0, #1
 802bb66:	d102      	bne.n	802bb6e <_sbrk_r+0x1a>
 802bb68:	682b      	ldr	r3, [r5, #0]
 802bb6a:	b103      	cbz	r3, 802bb6e <_sbrk_r+0x1a>
 802bb6c:	6023      	str	r3, [r4, #0]
 802bb6e:	bd38      	pop	{r3, r4, r5, pc}
 802bb70:	2402b8fc 	.word	0x2402b8fc

0802bb74 <_write_r>:
 802bb74:	b538      	push	{r3, r4, r5, lr}
 802bb76:	4d07      	ldr	r5, [pc, #28]	; (802bb94 <_write_r+0x20>)
 802bb78:	4604      	mov	r4, r0
 802bb7a:	4608      	mov	r0, r1
 802bb7c:	4611      	mov	r1, r2
 802bb7e:	2200      	movs	r2, #0
 802bb80:	602a      	str	r2, [r5, #0]
 802bb82:	461a      	mov	r2, r3
 802bb84:	f7d6 fdde 	bl	8002744 <_write>
 802bb88:	1c43      	adds	r3, r0, #1
 802bb8a:	d102      	bne.n	802bb92 <_write_r+0x1e>
 802bb8c:	682b      	ldr	r3, [r5, #0]
 802bb8e:	b103      	cbz	r3, 802bb92 <_write_r+0x1e>
 802bb90:	6023      	str	r3, [r4, #0]
 802bb92:	bd38      	pop	{r3, r4, r5, pc}
 802bb94:	2402b8fc 	.word	0x2402b8fc

0802bb98 <__errno>:
 802bb98:	4b01      	ldr	r3, [pc, #4]	; (802bba0 <__errno+0x8>)
 802bb9a:	6818      	ldr	r0, [r3, #0]
 802bb9c:	4770      	bx	lr
 802bb9e:	bf00      	nop
 802bba0:	2400013c 	.word	0x2400013c

0802bba4 <__libc_init_array>:
 802bba4:	b570      	push	{r4, r5, r6, lr}
 802bba6:	4d0d      	ldr	r5, [pc, #52]	; (802bbdc <__libc_init_array+0x38>)
 802bba8:	4c0d      	ldr	r4, [pc, #52]	; (802bbe0 <__libc_init_array+0x3c>)
 802bbaa:	1b64      	subs	r4, r4, r5
 802bbac:	10a4      	asrs	r4, r4, #2
 802bbae:	2600      	movs	r6, #0
 802bbb0:	42a6      	cmp	r6, r4
 802bbb2:	d109      	bne.n	802bbc8 <__libc_init_array+0x24>
 802bbb4:	4d0b      	ldr	r5, [pc, #44]	; (802bbe4 <__libc_init_array+0x40>)
 802bbb6:	4c0c      	ldr	r4, [pc, #48]	; (802bbe8 <__libc_init_array+0x44>)
 802bbb8:	f000 fd6e 	bl	802c698 <_init>
 802bbbc:	1b64      	subs	r4, r4, r5
 802bbbe:	10a4      	asrs	r4, r4, #2
 802bbc0:	2600      	movs	r6, #0
 802bbc2:	42a6      	cmp	r6, r4
 802bbc4:	d105      	bne.n	802bbd2 <__libc_init_array+0x2e>
 802bbc6:	bd70      	pop	{r4, r5, r6, pc}
 802bbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 802bbcc:	4798      	blx	r3
 802bbce:	3601      	adds	r6, #1
 802bbd0:	e7ee      	b.n	802bbb0 <__libc_init_array+0xc>
 802bbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 802bbd6:	4798      	blx	r3
 802bbd8:	3601      	adds	r6, #1
 802bbda:	e7f2      	b.n	802bbc2 <__libc_init_array+0x1e>
 802bbdc:	08030bac 	.word	0x08030bac
 802bbe0:	08030bac 	.word	0x08030bac
 802bbe4:	08030bac 	.word	0x08030bac
 802bbe8:	08030bc4 	.word	0x08030bc4

0802bbec <__retarget_lock_acquire_recursive>:
 802bbec:	4770      	bx	lr

0802bbee <__retarget_lock_release_recursive>:
 802bbee:	4770      	bx	lr

0802bbf0 <memcpy>:
 802bbf0:	440a      	add	r2, r1
 802bbf2:	4291      	cmp	r1, r2
 802bbf4:	f100 33ff 	add.w	r3, r0, #4294967295
 802bbf8:	d100      	bne.n	802bbfc <memcpy+0xc>
 802bbfa:	4770      	bx	lr
 802bbfc:	b510      	push	{r4, lr}
 802bbfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bc02:	f803 4f01 	strb.w	r4, [r3, #1]!
 802bc06:	4291      	cmp	r1, r2
 802bc08:	d1f9      	bne.n	802bbfe <memcpy+0xe>
 802bc0a:	bd10      	pop	{r4, pc}

0802bc0c <__register_exitproc>:
 802bc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bc10:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802bcc4 <__register_exitproc+0xb8>
 802bc14:	4606      	mov	r6, r0
 802bc16:	f8d8 0000 	ldr.w	r0, [r8]
 802bc1a:	461f      	mov	r7, r3
 802bc1c:	460d      	mov	r5, r1
 802bc1e:	4691      	mov	r9, r2
 802bc20:	f7ff ffe4 	bl	802bbec <__retarget_lock_acquire_recursive>
 802bc24:	4b23      	ldr	r3, [pc, #140]	; (802bcb4 <__register_exitproc+0xa8>)
 802bc26:	681c      	ldr	r4, [r3, #0]
 802bc28:	b934      	cbnz	r4, 802bc38 <__register_exitproc+0x2c>
 802bc2a:	4c23      	ldr	r4, [pc, #140]	; (802bcb8 <__register_exitproc+0xac>)
 802bc2c:	601c      	str	r4, [r3, #0]
 802bc2e:	4b23      	ldr	r3, [pc, #140]	; (802bcbc <__register_exitproc+0xb0>)
 802bc30:	b113      	cbz	r3, 802bc38 <__register_exitproc+0x2c>
 802bc32:	681b      	ldr	r3, [r3, #0]
 802bc34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802bc38:	6863      	ldr	r3, [r4, #4]
 802bc3a:	2b1f      	cmp	r3, #31
 802bc3c:	dd07      	ble.n	802bc4e <__register_exitproc+0x42>
 802bc3e:	f8d8 0000 	ldr.w	r0, [r8]
 802bc42:	f7ff ffd4 	bl	802bbee <__retarget_lock_release_recursive>
 802bc46:	f04f 30ff 	mov.w	r0, #4294967295
 802bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bc4e:	b32e      	cbz	r6, 802bc9c <__register_exitproc+0x90>
 802bc50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802bc54:	b968      	cbnz	r0, 802bc72 <__register_exitproc+0x66>
 802bc56:	4b1a      	ldr	r3, [pc, #104]	; (802bcc0 <__register_exitproc+0xb4>)
 802bc58:	2b00      	cmp	r3, #0
 802bc5a:	d0f0      	beq.n	802bc3e <__register_exitproc+0x32>
 802bc5c:	f44f 7084 	mov.w	r0, #264	; 0x108
 802bc60:	f7ff fcc0 	bl	802b5e4 <malloc>
 802bc64:	2800      	cmp	r0, #0
 802bc66:	d0ea      	beq.n	802bc3e <__register_exitproc+0x32>
 802bc68:	2300      	movs	r3, #0
 802bc6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802bc6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802bc72:	6863      	ldr	r3, [r4, #4]
 802bc74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802bc78:	2201      	movs	r2, #1
 802bc7a:	409a      	lsls	r2, r3
 802bc7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802bc80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802bc84:	4313      	orrs	r3, r2
 802bc86:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802bc8a:	2e02      	cmp	r6, #2
 802bc8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802bc90:	bf02      	ittt	eq
 802bc92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802bc96:	4313      	orreq	r3, r2
 802bc98:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802bc9c:	6863      	ldr	r3, [r4, #4]
 802bc9e:	f8d8 0000 	ldr.w	r0, [r8]
 802bca2:	1c5a      	adds	r2, r3, #1
 802bca4:	3302      	adds	r3, #2
 802bca6:	6062      	str	r2, [r4, #4]
 802bca8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802bcac:	f7ff ff9f 	bl	802bbee <__retarget_lock_release_recursive>
 802bcb0:	2000      	movs	r0, #0
 802bcb2:	e7ca      	b.n	802bc4a <__register_exitproc+0x3e>
 802bcb4:	2402b990 	.word	0x2402b990
 802bcb8:	2402b904 	.word	0x2402b904
 802bcbc:	08030464 	.word	0x08030464
 802bcc0:	0802b5e5 	.word	0x0802b5e5
 802bcc4:	24000140 	.word	0x24000140

0802bcc8 <_free_r>:
 802bcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bcca:	2900      	cmp	r1, #0
 802bccc:	d044      	beq.n	802bd58 <_free_r+0x90>
 802bcce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bcd2:	9001      	str	r0, [sp, #4]
 802bcd4:	2b00      	cmp	r3, #0
 802bcd6:	f1a1 0404 	sub.w	r4, r1, #4
 802bcda:	bfb8      	it	lt
 802bcdc:	18e4      	addlt	r4, r4, r3
 802bcde:	f7ff fd31 	bl	802b744 <__malloc_lock>
 802bce2:	4a1e      	ldr	r2, [pc, #120]	; (802bd5c <_free_r+0x94>)
 802bce4:	9801      	ldr	r0, [sp, #4]
 802bce6:	6813      	ldr	r3, [r2, #0]
 802bce8:	b933      	cbnz	r3, 802bcf8 <_free_r+0x30>
 802bcea:	6063      	str	r3, [r4, #4]
 802bcec:	6014      	str	r4, [r2, #0]
 802bcee:	b003      	add	sp, #12
 802bcf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802bcf4:	f7ff bd2c 	b.w	802b750 <__malloc_unlock>
 802bcf8:	42a3      	cmp	r3, r4
 802bcfa:	d908      	bls.n	802bd0e <_free_r+0x46>
 802bcfc:	6825      	ldr	r5, [r4, #0]
 802bcfe:	1961      	adds	r1, r4, r5
 802bd00:	428b      	cmp	r3, r1
 802bd02:	bf01      	itttt	eq
 802bd04:	6819      	ldreq	r1, [r3, #0]
 802bd06:	685b      	ldreq	r3, [r3, #4]
 802bd08:	1949      	addeq	r1, r1, r5
 802bd0a:	6021      	streq	r1, [r4, #0]
 802bd0c:	e7ed      	b.n	802bcea <_free_r+0x22>
 802bd0e:	461a      	mov	r2, r3
 802bd10:	685b      	ldr	r3, [r3, #4]
 802bd12:	b10b      	cbz	r3, 802bd18 <_free_r+0x50>
 802bd14:	42a3      	cmp	r3, r4
 802bd16:	d9fa      	bls.n	802bd0e <_free_r+0x46>
 802bd18:	6811      	ldr	r1, [r2, #0]
 802bd1a:	1855      	adds	r5, r2, r1
 802bd1c:	42a5      	cmp	r5, r4
 802bd1e:	d10b      	bne.n	802bd38 <_free_r+0x70>
 802bd20:	6824      	ldr	r4, [r4, #0]
 802bd22:	4421      	add	r1, r4
 802bd24:	1854      	adds	r4, r2, r1
 802bd26:	42a3      	cmp	r3, r4
 802bd28:	6011      	str	r1, [r2, #0]
 802bd2a:	d1e0      	bne.n	802bcee <_free_r+0x26>
 802bd2c:	681c      	ldr	r4, [r3, #0]
 802bd2e:	685b      	ldr	r3, [r3, #4]
 802bd30:	6053      	str	r3, [r2, #4]
 802bd32:	440c      	add	r4, r1
 802bd34:	6014      	str	r4, [r2, #0]
 802bd36:	e7da      	b.n	802bcee <_free_r+0x26>
 802bd38:	d902      	bls.n	802bd40 <_free_r+0x78>
 802bd3a:	230c      	movs	r3, #12
 802bd3c:	6003      	str	r3, [r0, #0]
 802bd3e:	e7d6      	b.n	802bcee <_free_r+0x26>
 802bd40:	6825      	ldr	r5, [r4, #0]
 802bd42:	1961      	adds	r1, r4, r5
 802bd44:	428b      	cmp	r3, r1
 802bd46:	bf04      	itt	eq
 802bd48:	6819      	ldreq	r1, [r3, #0]
 802bd4a:	685b      	ldreq	r3, [r3, #4]
 802bd4c:	6063      	str	r3, [r4, #4]
 802bd4e:	bf04      	itt	eq
 802bd50:	1949      	addeq	r1, r1, r5
 802bd52:	6021      	streq	r1, [r4, #0]
 802bd54:	6054      	str	r4, [r2, #4]
 802bd56:	e7ca      	b.n	802bcee <_free_r+0x26>
 802bd58:	b003      	add	sp, #12
 802bd5a:	bd30      	pop	{r4, r5, pc}
 802bd5c:	2402b7b8 	.word	0x2402b7b8

0802bd60 <__sfputc_r>:
 802bd60:	6893      	ldr	r3, [r2, #8]
 802bd62:	3b01      	subs	r3, #1
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	b410      	push	{r4}
 802bd68:	6093      	str	r3, [r2, #8]
 802bd6a:	da08      	bge.n	802bd7e <__sfputc_r+0x1e>
 802bd6c:	6994      	ldr	r4, [r2, #24]
 802bd6e:	42a3      	cmp	r3, r4
 802bd70:	db01      	blt.n	802bd76 <__sfputc_r+0x16>
 802bd72:	290a      	cmp	r1, #10
 802bd74:	d103      	bne.n	802bd7e <__sfputc_r+0x1e>
 802bd76:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bd7a:	f000 bb73 	b.w	802c464 <__swbuf_r>
 802bd7e:	6813      	ldr	r3, [r2, #0]
 802bd80:	1c58      	adds	r0, r3, #1
 802bd82:	6010      	str	r0, [r2, #0]
 802bd84:	7019      	strb	r1, [r3, #0]
 802bd86:	4608      	mov	r0, r1
 802bd88:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bd8c:	4770      	bx	lr

0802bd8e <__sfputs_r>:
 802bd8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bd90:	4606      	mov	r6, r0
 802bd92:	460f      	mov	r7, r1
 802bd94:	4614      	mov	r4, r2
 802bd96:	18d5      	adds	r5, r2, r3
 802bd98:	42ac      	cmp	r4, r5
 802bd9a:	d101      	bne.n	802bda0 <__sfputs_r+0x12>
 802bd9c:	2000      	movs	r0, #0
 802bd9e:	e007      	b.n	802bdb0 <__sfputs_r+0x22>
 802bda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bda4:	463a      	mov	r2, r7
 802bda6:	4630      	mov	r0, r6
 802bda8:	f7ff ffda 	bl	802bd60 <__sfputc_r>
 802bdac:	1c43      	adds	r3, r0, #1
 802bdae:	d1f3      	bne.n	802bd98 <__sfputs_r+0xa>
 802bdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802bdb4 <_vfiprintf_r>:
 802bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bdb8:	460d      	mov	r5, r1
 802bdba:	b09d      	sub	sp, #116	; 0x74
 802bdbc:	4614      	mov	r4, r2
 802bdbe:	4698      	mov	r8, r3
 802bdc0:	4606      	mov	r6, r0
 802bdc2:	b118      	cbz	r0, 802bdcc <_vfiprintf_r+0x18>
 802bdc4:	6a03      	ldr	r3, [r0, #32]
 802bdc6:	b90b      	cbnz	r3, 802bdcc <_vfiprintf_r+0x18>
 802bdc8:	f7ff fd50 	bl	802b86c <__sinit>
 802bdcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bdce:	07d9      	lsls	r1, r3, #31
 802bdd0:	d405      	bmi.n	802bdde <_vfiprintf_r+0x2a>
 802bdd2:	89ab      	ldrh	r3, [r5, #12]
 802bdd4:	059a      	lsls	r2, r3, #22
 802bdd6:	d402      	bmi.n	802bdde <_vfiprintf_r+0x2a>
 802bdd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bdda:	f7ff ff07 	bl	802bbec <__retarget_lock_acquire_recursive>
 802bdde:	89ab      	ldrh	r3, [r5, #12]
 802bde0:	071b      	lsls	r3, r3, #28
 802bde2:	d501      	bpl.n	802bde8 <_vfiprintf_r+0x34>
 802bde4:	692b      	ldr	r3, [r5, #16]
 802bde6:	b99b      	cbnz	r3, 802be10 <_vfiprintf_r+0x5c>
 802bde8:	4629      	mov	r1, r5
 802bdea:	4630      	mov	r0, r6
 802bdec:	f000 fb78 	bl	802c4e0 <__swsetup_r>
 802bdf0:	b170      	cbz	r0, 802be10 <_vfiprintf_r+0x5c>
 802bdf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bdf4:	07dc      	lsls	r4, r3, #31
 802bdf6:	d504      	bpl.n	802be02 <_vfiprintf_r+0x4e>
 802bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 802bdfc:	b01d      	add	sp, #116	; 0x74
 802bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be02:	89ab      	ldrh	r3, [r5, #12]
 802be04:	0598      	lsls	r0, r3, #22
 802be06:	d4f7      	bmi.n	802bdf8 <_vfiprintf_r+0x44>
 802be08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802be0a:	f7ff fef0 	bl	802bbee <__retarget_lock_release_recursive>
 802be0e:	e7f3      	b.n	802bdf8 <_vfiprintf_r+0x44>
 802be10:	2300      	movs	r3, #0
 802be12:	9309      	str	r3, [sp, #36]	; 0x24
 802be14:	2320      	movs	r3, #32
 802be16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802be1a:	f8cd 800c 	str.w	r8, [sp, #12]
 802be1e:	2330      	movs	r3, #48	; 0x30
 802be20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802bfd4 <_vfiprintf_r+0x220>
 802be24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802be28:	f04f 0901 	mov.w	r9, #1
 802be2c:	4623      	mov	r3, r4
 802be2e:	469a      	mov	sl, r3
 802be30:	f813 2b01 	ldrb.w	r2, [r3], #1
 802be34:	b10a      	cbz	r2, 802be3a <_vfiprintf_r+0x86>
 802be36:	2a25      	cmp	r2, #37	; 0x25
 802be38:	d1f9      	bne.n	802be2e <_vfiprintf_r+0x7a>
 802be3a:	ebba 0b04 	subs.w	fp, sl, r4
 802be3e:	d00b      	beq.n	802be58 <_vfiprintf_r+0xa4>
 802be40:	465b      	mov	r3, fp
 802be42:	4622      	mov	r2, r4
 802be44:	4629      	mov	r1, r5
 802be46:	4630      	mov	r0, r6
 802be48:	f7ff ffa1 	bl	802bd8e <__sfputs_r>
 802be4c:	3001      	adds	r0, #1
 802be4e:	f000 80a9 	beq.w	802bfa4 <_vfiprintf_r+0x1f0>
 802be52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802be54:	445a      	add	r2, fp
 802be56:	9209      	str	r2, [sp, #36]	; 0x24
 802be58:	f89a 3000 	ldrb.w	r3, [sl]
 802be5c:	2b00      	cmp	r3, #0
 802be5e:	f000 80a1 	beq.w	802bfa4 <_vfiprintf_r+0x1f0>
 802be62:	2300      	movs	r3, #0
 802be64:	f04f 32ff 	mov.w	r2, #4294967295
 802be68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802be6c:	f10a 0a01 	add.w	sl, sl, #1
 802be70:	9304      	str	r3, [sp, #16]
 802be72:	9307      	str	r3, [sp, #28]
 802be74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802be78:	931a      	str	r3, [sp, #104]	; 0x68
 802be7a:	4654      	mov	r4, sl
 802be7c:	2205      	movs	r2, #5
 802be7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802be82:	4854      	ldr	r0, [pc, #336]	; (802bfd4 <_vfiprintf_r+0x220>)
 802be84:	f7d4 fa2c 	bl	80002e0 <memchr>
 802be88:	9a04      	ldr	r2, [sp, #16]
 802be8a:	b9d8      	cbnz	r0, 802bec4 <_vfiprintf_r+0x110>
 802be8c:	06d1      	lsls	r1, r2, #27
 802be8e:	bf44      	itt	mi
 802be90:	2320      	movmi	r3, #32
 802be92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802be96:	0713      	lsls	r3, r2, #28
 802be98:	bf44      	itt	mi
 802be9a:	232b      	movmi	r3, #43	; 0x2b
 802be9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bea0:	f89a 3000 	ldrb.w	r3, [sl]
 802bea4:	2b2a      	cmp	r3, #42	; 0x2a
 802bea6:	d015      	beq.n	802bed4 <_vfiprintf_r+0x120>
 802bea8:	9a07      	ldr	r2, [sp, #28]
 802beaa:	4654      	mov	r4, sl
 802beac:	2000      	movs	r0, #0
 802beae:	f04f 0c0a 	mov.w	ip, #10
 802beb2:	4621      	mov	r1, r4
 802beb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802beb8:	3b30      	subs	r3, #48	; 0x30
 802beba:	2b09      	cmp	r3, #9
 802bebc:	d94d      	bls.n	802bf5a <_vfiprintf_r+0x1a6>
 802bebe:	b1b0      	cbz	r0, 802beee <_vfiprintf_r+0x13a>
 802bec0:	9207      	str	r2, [sp, #28]
 802bec2:	e014      	b.n	802beee <_vfiprintf_r+0x13a>
 802bec4:	eba0 0308 	sub.w	r3, r0, r8
 802bec8:	fa09 f303 	lsl.w	r3, r9, r3
 802becc:	4313      	orrs	r3, r2
 802bece:	9304      	str	r3, [sp, #16]
 802bed0:	46a2      	mov	sl, r4
 802bed2:	e7d2      	b.n	802be7a <_vfiprintf_r+0xc6>
 802bed4:	9b03      	ldr	r3, [sp, #12]
 802bed6:	1d19      	adds	r1, r3, #4
 802bed8:	681b      	ldr	r3, [r3, #0]
 802beda:	9103      	str	r1, [sp, #12]
 802bedc:	2b00      	cmp	r3, #0
 802bede:	bfbb      	ittet	lt
 802bee0:	425b      	neglt	r3, r3
 802bee2:	f042 0202 	orrlt.w	r2, r2, #2
 802bee6:	9307      	strge	r3, [sp, #28]
 802bee8:	9307      	strlt	r3, [sp, #28]
 802beea:	bfb8      	it	lt
 802beec:	9204      	strlt	r2, [sp, #16]
 802beee:	7823      	ldrb	r3, [r4, #0]
 802bef0:	2b2e      	cmp	r3, #46	; 0x2e
 802bef2:	d10c      	bne.n	802bf0e <_vfiprintf_r+0x15a>
 802bef4:	7863      	ldrb	r3, [r4, #1]
 802bef6:	2b2a      	cmp	r3, #42	; 0x2a
 802bef8:	d134      	bne.n	802bf64 <_vfiprintf_r+0x1b0>
 802befa:	9b03      	ldr	r3, [sp, #12]
 802befc:	1d1a      	adds	r2, r3, #4
 802befe:	681b      	ldr	r3, [r3, #0]
 802bf00:	9203      	str	r2, [sp, #12]
 802bf02:	2b00      	cmp	r3, #0
 802bf04:	bfb8      	it	lt
 802bf06:	f04f 33ff 	movlt.w	r3, #4294967295
 802bf0a:	3402      	adds	r4, #2
 802bf0c:	9305      	str	r3, [sp, #20]
 802bf0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802bfe4 <_vfiprintf_r+0x230>
 802bf12:	7821      	ldrb	r1, [r4, #0]
 802bf14:	2203      	movs	r2, #3
 802bf16:	4650      	mov	r0, sl
 802bf18:	f7d4 f9e2 	bl	80002e0 <memchr>
 802bf1c:	b138      	cbz	r0, 802bf2e <_vfiprintf_r+0x17a>
 802bf1e:	9b04      	ldr	r3, [sp, #16]
 802bf20:	eba0 000a 	sub.w	r0, r0, sl
 802bf24:	2240      	movs	r2, #64	; 0x40
 802bf26:	4082      	lsls	r2, r0
 802bf28:	4313      	orrs	r3, r2
 802bf2a:	3401      	adds	r4, #1
 802bf2c:	9304      	str	r3, [sp, #16]
 802bf2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bf32:	4829      	ldr	r0, [pc, #164]	; (802bfd8 <_vfiprintf_r+0x224>)
 802bf34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bf38:	2206      	movs	r2, #6
 802bf3a:	f7d4 f9d1 	bl	80002e0 <memchr>
 802bf3e:	2800      	cmp	r0, #0
 802bf40:	d03f      	beq.n	802bfc2 <_vfiprintf_r+0x20e>
 802bf42:	4b26      	ldr	r3, [pc, #152]	; (802bfdc <_vfiprintf_r+0x228>)
 802bf44:	bb1b      	cbnz	r3, 802bf8e <_vfiprintf_r+0x1da>
 802bf46:	9b03      	ldr	r3, [sp, #12]
 802bf48:	3307      	adds	r3, #7
 802bf4a:	f023 0307 	bic.w	r3, r3, #7
 802bf4e:	3308      	adds	r3, #8
 802bf50:	9303      	str	r3, [sp, #12]
 802bf52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bf54:	443b      	add	r3, r7
 802bf56:	9309      	str	r3, [sp, #36]	; 0x24
 802bf58:	e768      	b.n	802be2c <_vfiprintf_r+0x78>
 802bf5a:	fb0c 3202 	mla	r2, ip, r2, r3
 802bf5e:	460c      	mov	r4, r1
 802bf60:	2001      	movs	r0, #1
 802bf62:	e7a6      	b.n	802beb2 <_vfiprintf_r+0xfe>
 802bf64:	2300      	movs	r3, #0
 802bf66:	3401      	adds	r4, #1
 802bf68:	9305      	str	r3, [sp, #20]
 802bf6a:	4619      	mov	r1, r3
 802bf6c:	f04f 0c0a 	mov.w	ip, #10
 802bf70:	4620      	mov	r0, r4
 802bf72:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bf76:	3a30      	subs	r2, #48	; 0x30
 802bf78:	2a09      	cmp	r2, #9
 802bf7a:	d903      	bls.n	802bf84 <_vfiprintf_r+0x1d0>
 802bf7c:	2b00      	cmp	r3, #0
 802bf7e:	d0c6      	beq.n	802bf0e <_vfiprintf_r+0x15a>
 802bf80:	9105      	str	r1, [sp, #20]
 802bf82:	e7c4      	b.n	802bf0e <_vfiprintf_r+0x15a>
 802bf84:	fb0c 2101 	mla	r1, ip, r1, r2
 802bf88:	4604      	mov	r4, r0
 802bf8a:	2301      	movs	r3, #1
 802bf8c:	e7f0      	b.n	802bf70 <_vfiprintf_r+0x1bc>
 802bf8e:	ab03      	add	r3, sp, #12
 802bf90:	9300      	str	r3, [sp, #0]
 802bf92:	462a      	mov	r2, r5
 802bf94:	4b12      	ldr	r3, [pc, #72]	; (802bfe0 <_vfiprintf_r+0x22c>)
 802bf96:	a904      	add	r1, sp, #16
 802bf98:	4630      	mov	r0, r6
 802bf9a:	f3af 8000 	nop.w
 802bf9e:	4607      	mov	r7, r0
 802bfa0:	1c78      	adds	r0, r7, #1
 802bfa2:	d1d6      	bne.n	802bf52 <_vfiprintf_r+0x19e>
 802bfa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bfa6:	07d9      	lsls	r1, r3, #31
 802bfa8:	d405      	bmi.n	802bfb6 <_vfiprintf_r+0x202>
 802bfaa:	89ab      	ldrh	r3, [r5, #12]
 802bfac:	059a      	lsls	r2, r3, #22
 802bfae:	d402      	bmi.n	802bfb6 <_vfiprintf_r+0x202>
 802bfb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bfb2:	f7ff fe1c 	bl	802bbee <__retarget_lock_release_recursive>
 802bfb6:	89ab      	ldrh	r3, [r5, #12]
 802bfb8:	065b      	lsls	r3, r3, #25
 802bfba:	f53f af1d 	bmi.w	802bdf8 <_vfiprintf_r+0x44>
 802bfbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bfc0:	e71c      	b.n	802bdfc <_vfiprintf_r+0x48>
 802bfc2:	ab03      	add	r3, sp, #12
 802bfc4:	9300      	str	r3, [sp, #0]
 802bfc6:	462a      	mov	r2, r5
 802bfc8:	4b05      	ldr	r3, [pc, #20]	; (802bfe0 <_vfiprintf_r+0x22c>)
 802bfca:	a904      	add	r1, sp, #16
 802bfcc:	4630      	mov	r0, r6
 802bfce:	f000 f879 	bl	802c0c4 <_printf_i>
 802bfd2:	e7e4      	b.n	802bf9e <_vfiprintf_r+0x1ea>
 802bfd4:	08030468 	.word	0x08030468
 802bfd8:	08030472 	.word	0x08030472
 802bfdc:	00000000 	.word	0x00000000
 802bfe0:	0802bd8f 	.word	0x0802bd8f
 802bfe4:	0803046e 	.word	0x0803046e

0802bfe8 <_printf_common>:
 802bfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bfec:	4616      	mov	r6, r2
 802bfee:	4699      	mov	r9, r3
 802bff0:	688a      	ldr	r2, [r1, #8]
 802bff2:	690b      	ldr	r3, [r1, #16]
 802bff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802bff8:	4293      	cmp	r3, r2
 802bffa:	bfb8      	it	lt
 802bffc:	4613      	movlt	r3, r2
 802bffe:	6033      	str	r3, [r6, #0]
 802c000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802c004:	4607      	mov	r7, r0
 802c006:	460c      	mov	r4, r1
 802c008:	b10a      	cbz	r2, 802c00e <_printf_common+0x26>
 802c00a:	3301      	adds	r3, #1
 802c00c:	6033      	str	r3, [r6, #0]
 802c00e:	6823      	ldr	r3, [r4, #0]
 802c010:	0699      	lsls	r1, r3, #26
 802c012:	bf42      	ittt	mi
 802c014:	6833      	ldrmi	r3, [r6, #0]
 802c016:	3302      	addmi	r3, #2
 802c018:	6033      	strmi	r3, [r6, #0]
 802c01a:	6825      	ldr	r5, [r4, #0]
 802c01c:	f015 0506 	ands.w	r5, r5, #6
 802c020:	d106      	bne.n	802c030 <_printf_common+0x48>
 802c022:	f104 0a19 	add.w	sl, r4, #25
 802c026:	68e3      	ldr	r3, [r4, #12]
 802c028:	6832      	ldr	r2, [r6, #0]
 802c02a:	1a9b      	subs	r3, r3, r2
 802c02c:	42ab      	cmp	r3, r5
 802c02e:	dc26      	bgt.n	802c07e <_printf_common+0x96>
 802c030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802c034:	1e13      	subs	r3, r2, #0
 802c036:	6822      	ldr	r2, [r4, #0]
 802c038:	bf18      	it	ne
 802c03a:	2301      	movne	r3, #1
 802c03c:	0692      	lsls	r2, r2, #26
 802c03e:	d42b      	bmi.n	802c098 <_printf_common+0xb0>
 802c040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802c044:	4649      	mov	r1, r9
 802c046:	4638      	mov	r0, r7
 802c048:	47c0      	blx	r8
 802c04a:	3001      	adds	r0, #1
 802c04c:	d01e      	beq.n	802c08c <_printf_common+0xa4>
 802c04e:	6823      	ldr	r3, [r4, #0]
 802c050:	6922      	ldr	r2, [r4, #16]
 802c052:	f003 0306 	and.w	r3, r3, #6
 802c056:	2b04      	cmp	r3, #4
 802c058:	bf02      	ittt	eq
 802c05a:	68e5      	ldreq	r5, [r4, #12]
 802c05c:	6833      	ldreq	r3, [r6, #0]
 802c05e:	1aed      	subeq	r5, r5, r3
 802c060:	68a3      	ldr	r3, [r4, #8]
 802c062:	bf0c      	ite	eq
 802c064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c068:	2500      	movne	r5, #0
 802c06a:	4293      	cmp	r3, r2
 802c06c:	bfc4      	itt	gt
 802c06e:	1a9b      	subgt	r3, r3, r2
 802c070:	18ed      	addgt	r5, r5, r3
 802c072:	2600      	movs	r6, #0
 802c074:	341a      	adds	r4, #26
 802c076:	42b5      	cmp	r5, r6
 802c078:	d11a      	bne.n	802c0b0 <_printf_common+0xc8>
 802c07a:	2000      	movs	r0, #0
 802c07c:	e008      	b.n	802c090 <_printf_common+0xa8>
 802c07e:	2301      	movs	r3, #1
 802c080:	4652      	mov	r2, sl
 802c082:	4649      	mov	r1, r9
 802c084:	4638      	mov	r0, r7
 802c086:	47c0      	blx	r8
 802c088:	3001      	adds	r0, #1
 802c08a:	d103      	bne.n	802c094 <_printf_common+0xac>
 802c08c:	f04f 30ff 	mov.w	r0, #4294967295
 802c090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c094:	3501      	adds	r5, #1
 802c096:	e7c6      	b.n	802c026 <_printf_common+0x3e>
 802c098:	18e1      	adds	r1, r4, r3
 802c09a:	1c5a      	adds	r2, r3, #1
 802c09c:	2030      	movs	r0, #48	; 0x30
 802c09e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802c0a2:	4422      	add	r2, r4
 802c0a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802c0a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802c0ac:	3302      	adds	r3, #2
 802c0ae:	e7c7      	b.n	802c040 <_printf_common+0x58>
 802c0b0:	2301      	movs	r3, #1
 802c0b2:	4622      	mov	r2, r4
 802c0b4:	4649      	mov	r1, r9
 802c0b6:	4638      	mov	r0, r7
 802c0b8:	47c0      	blx	r8
 802c0ba:	3001      	adds	r0, #1
 802c0bc:	d0e6      	beq.n	802c08c <_printf_common+0xa4>
 802c0be:	3601      	adds	r6, #1
 802c0c0:	e7d9      	b.n	802c076 <_printf_common+0x8e>
	...

0802c0c4 <_printf_i>:
 802c0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c0c8:	7e0f      	ldrb	r7, [r1, #24]
 802c0ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c0cc:	2f78      	cmp	r7, #120	; 0x78
 802c0ce:	4691      	mov	r9, r2
 802c0d0:	4680      	mov	r8, r0
 802c0d2:	460c      	mov	r4, r1
 802c0d4:	469a      	mov	sl, r3
 802c0d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802c0da:	d807      	bhi.n	802c0ec <_printf_i+0x28>
 802c0dc:	2f62      	cmp	r7, #98	; 0x62
 802c0de:	d80a      	bhi.n	802c0f6 <_printf_i+0x32>
 802c0e0:	2f00      	cmp	r7, #0
 802c0e2:	f000 80d4 	beq.w	802c28e <_printf_i+0x1ca>
 802c0e6:	2f58      	cmp	r7, #88	; 0x58
 802c0e8:	f000 80c0 	beq.w	802c26c <_printf_i+0x1a8>
 802c0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c0f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802c0f4:	e03a      	b.n	802c16c <_printf_i+0xa8>
 802c0f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802c0fa:	2b15      	cmp	r3, #21
 802c0fc:	d8f6      	bhi.n	802c0ec <_printf_i+0x28>
 802c0fe:	a101      	add	r1, pc, #4	; (adr r1, 802c104 <_printf_i+0x40>)
 802c100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c104:	0802c15d 	.word	0x0802c15d
 802c108:	0802c171 	.word	0x0802c171
 802c10c:	0802c0ed 	.word	0x0802c0ed
 802c110:	0802c0ed 	.word	0x0802c0ed
 802c114:	0802c0ed 	.word	0x0802c0ed
 802c118:	0802c0ed 	.word	0x0802c0ed
 802c11c:	0802c171 	.word	0x0802c171
 802c120:	0802c0ed 	.word	0x0802c0ed
 802c124:	0802c0ed 	.word	0x0802c0ed
 802c128:	0802c0ed 	.word	0x0802c0ed
 802c12c:	0802c0ed 	.word	0x0802c0ed
 802c130:	0802c275 	.word	0x0802c275
 802c134:	0802c19d 	.word	0x0802c19d
 802c138:	0802c22f 	.word	0x0802c22f
 802c13c:	0802c0ed 	.word	0x0802c0ed
 802c140:	0802c0ed 	.word	0x0802c0ed
 802c144:	0802c297 	.word	0x0802c297
 802c148:	0802c0ed 	.word	0x0802c0ed
 802c14c:	0802c19d 	.word	0x0802c19d
 802c150:	0802c0ed 	.word	0x0802c0ed
 802c154:	0802c0ed 	.word	0x0802c0ed
 802c158:	0802c237 	.word	0x0802c237
 802c15c:	682b      	ldr	r3, [r5, #0]
 802c15e:	1d1a      	adds	r2, r3, #4
 802c160:	681b      	ldr	r3, [r3, #0]
 802c162:	602a      	str	r2, [r5, #0]
 802c164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802c16c:	2301      	movs	r3, #1
 802c16e:	e09f      	b.n	802c2b0 <_printf_i+0x1ec>
 802c170:	6820      	ldr	r0, [r4, #0]
 802c172:	682b      	ldr	r3, [r5, #0]
 802c174:	0607      	lsls	r7, r0, #24
 802c176:	f103 0104 	add.w	r1, r3, #4
 802c17a:	6029      	str	r1, [r5, #0]
 802c17c:	d501      	bpl.n	802c182 <_printf_i+0xbe>
 802c17e:	681e      	ldr	r6, [r3, #0]
 802c180:	e003      	b.n	802c18a <_printf_i+0xc6>
 802c182:	0646      	lsls	r6, r0, #25
 802c184:	d5fb      	bpl.n	802c17e <_printf_i+0xba>
 802c186:	f9b3 6000 	ldrsh.w	r6, [r3]
 802c18a:	2e00      	cmp	r6, #0
 802c18c:	da03      	bge.n	802c196 <_printf_i+0xd2>
 802c18e:	232d      	movs	r3, #45	; 0x2d
 802c190:	4276      	negs	r6, r6
 802c192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c196:	485a      	ldr	r0, [pc, #360]	; (802c300 <_printf_i+0x23c>)
 802c198:	230a      	movs	r3, #10
 802c19a:	e012      	b.n	802c1c2 <_printf_i+0xfe>
 802c19c:	682b      	ldr	r3, [r5, #0]
 802c19e:	6820      	ldr	r0, [r4, #0]
 802c1a0:	1d19      	adds	r1, r3, #4
 802c1a2:	6029      	str	r1, [r5, #0]
 802c1a4:	0605      	lsls	r5, r0, #24
 802c1a6:	d501      	bpl.n	802c1ac <_printf_i+0xe8>
 802c1a8:	681e      	ldr	r6, [r3, #0]
 802c1aa:	e002      	b.n	802c1b2 <_printf_i+0xee>
 802c1ac:	0641      	lsls	r1, r0, #25
 802c1ae:	d5fb      	bpl.n	802c1a8 <_printf_i+0xe4>
 802c1b0:	881e      	ldrh	r6, [r3, #0]
 802c1b2:	4853      	ldr	r0, [pc, #332]	; (802c300 <_printf_i+0x23c>)
 802c1b4:	2f6f      	cmp	r7, #111	; 0x6f
 802c1b6:	bf0c      	ite	eq
 802c1b8:	2308      	moveq	r3, #8
 802c1ba:	230a      	movne	r3, #10
 802c1bc:	2100      	movs	r1, #0
 802c1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802c1c2:	6865      	ldr	r5, [r4, #4]
 802c1c4:	60a5      	str	r5, [r4, #8]
 802c1c6:	2d00      	cmp	r5, #0
 802c1c8:	bfa2      	ittt	ge
 802c1ca:	6821      	ldrge	r1, [r4, #0]
 802c1cc:	f021 0104 	bicge.w	r1, r1, #4
 802c1d0:	6021      	strge	r1, [r4, #0]
 802c1d2:	b90e      	cbnz	r6, 802c1d8 <_printf_i+0x114>
 802c1d4:	2d00      	cmp	r5, #0
 802c1d6:	d04b      	beq.n	802c270 <_printf_i+0x1ac>
 802c1d8:	4615      	mov	r5, r2
 802c1da:	fbb6 f1f3 	udiv	r1, r6, r3
 802c1de:	fb03 6711 	mls	r7, r3, r1, r6
 802c1e2:	5dc7      	ldrb	r7, [r0, r7]
 802c1e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802c1e8:	4637      	mov	r7, r6
 802c1ea:	42bb      	cmp	r3, r7
 802c1ec:	460e      	mov	r6, r1
 802c1ee:	d9f4      	bls.n	802c1da <_printf_i+0x116>
 802c1f0:	2b08      	cmp	r3, #8
 802c1f2:	d10b      	bne.n	802c20c <_printf_i+0x148>
 802c1f4:	6823      	ldr	r3, [r4, #0]
 802c1f6:	07de      	lsls	r6, r3, #31
 802c1f8:	d508      	bpl.n	802c20c <_printf_i+0x148>
 802c1fa:	6923      	ldr	r3, [r4, #16]
 802c1fc:	6861      	ldr	r1, [r4, #4]
 802c1fe:	4299      	cmp	r1, r3
 802c200:	bfde      	ittt	le
 802c202:	2330      	movle	r3, #48	; 0x30
 802c204:	f805 3c01 	strble.w	r3, [r5, #-1]
 802c208:	f105 35ff 	addle.w	r5, r5, #4294967295
 802c20c:	1b52      	subs	r2, r2, r5
 802c20e:	6122      	str	r2, [r4, #16]
 802c210:	f8cd a000 	str.w	sl, [sp]
 802c214:	464b      	mov	r3, r9
 802c216:	aa03      	add	r2, sp, #12
 802c218:	4621      	mov	r1, r4
 802c21a:	4640      	mov	r0, r8
 802c21c:	f7ff fee4 	bl	802bfe8 <_printf_common>
 802c220:	3001      	adds	r0, #1
 802c222:	d14a      	bne.n	802c2ba <_printf_i+0x1f6>
 802c224:	f04f 30ff 	mov.w	r0, #4294967295
 802c228:	b004      	add	sp, #16
 802c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c22e:	6823      	ldr	r3, [r4, #0]
 802c230:	f043 0320 	orr.w	r3, r3, #32
 802c234:	6023      	str	r3, [r4, #0]
 802c236:	4833      	ldr	r0, [pc, #204]	; (802c304 <_printf_i+0x240>)
 802c238:	2778      	movs	r7, #120	; 0x78
 802c23a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802c23e:	6823      	ldr	r3, [r4, #0]
 802c240:	6829      	ldr	r1, [r5, #0]
 802c242:	061f      	lsls	r7, r3, #24
 802c244:	f851 6b04 	ldr.w	r6, [r1], #4
 802c248:	d402      	bmi.n	802c250 <_printf_i+0x18c>
 802c24a:	065f      	lsls	r7, r3, #25
 802c24c:	bf48      	it	mi
 802c24e:	b2b6      	uxthmi	r6, r6
 802c250:	07df      	lsls	r7, r3, #31
 802c252:	bf48      	it	mi
 802c254:	f043 0320 	orrmi.w	r3, r3, #32
 802c258:	6029      	str	r1, [r5, #0]
 802c25a:	bf48      	it	mi
 802c25c:	6023      	strmi	r3, [r4, #0]
 802c25e:	b91e      	cbnz	r6, 802c268 <_printf_i+0x1a4>
 802c260:	6823      	ldr	r3, [r4, #0]
 802c262:	f023 0320 	bic.w	r3, r3, #32
 802c266:	6023      	str	r3, [r4, #0]
 802c268:	2310      	movs	r3, #16
 802c26a:	e7a7      	b.n	802c1bc <_printf_i+0xf8>
 802c26c:	4824      	ldr	r0, [pc, #144]	; (802c300 <_printf_i+0x23c>)
 802c26e:	e7e4      	b.n	802c23a <_printf_i+0x176>
 802c270:	4615      	mov	r5, r2
 802c272:	e7bd      	b.n	802c1f0 <_printf_i+0x12c>
 802c274:	682b      	ldr	r3, [r5, #0]
 802c276:	6826      	ldr	r6, [r4, #0]
 802c278:	6961      	ldr	r1, [r4, #20]
 802c27a:	1d18      	adds	r0, r3, #4
 802c27c:	6028      	str	r0, [r5, #0]
 802c27e:	0635      	lsls	r5, r6, #24
 802c280:	681b      	ldr	r3, [r3, #0]
 802c282:	d501      	bpl.n	802c288 <_printf_i+0x1c4>
 802c284:	6019      	str	r1, [r3, #0]
 802c286:	e002      	b.n	802c28e <_printf_i+0x1ca>
 802c288:	0670      	lsls	r0, r6, #25
 802c28a:	d5fb      	bpl.n	802c284 <_printf_i+0x1c0>
 802c28c:	8019      	strh	r1, [r3, #0]
 802c28e:	2300      	movs	r3, #0
 802c290:	6123      	str	r3, [r4, #16]
 802c292:	4615      	mov	r5, r2
 802c294:	e7bc      	b.n	802c210 <_printf_i+0x14c>
 802c296:	682b      	ldr	r3, [r5, #0]
 802c298:	1d1a      	adds	r2, r3, #4
 802c29a:	602a      	str	r2, [r5, #0]
 802c29c:	681d      	ldr	r5, [r3, #0]
 802c29e:	6862      	ldr	r2, [r4, #4]
 802c2a0:	2100      	movs	r1, #0
 802c2a2:	4628      	mov	r0, r5
 802c2a4:	f7d4 f81c 	bl	80002e0 <memchr>
 802c2a8:	b108      	cbz	r0, 802c2ae <_printf_i+0x1ea>
 802c2aa:	1b40      	subs	r0, r0, r5
 802c2ac:	6060      	str	r0, [r4, #4]
 802c2ae:	6863      	ldr	r3, [r4, #4]
 802c2b0:	6123      	str	r3, [r4, #16]
 802c2b2:	2300      	movs	r3, #0
 802c2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c2b8:	e7aa      	b.n	802c210 <_printf_i+0x14c>
 802c2ba:	6923      	ldr	r3, [r4, #16]
 802c2bc:	462a      	mov	r2, r5
 802c2be:	4649      	mov	r1, r9
 802c2c0:	4640      	mov	r0, r8
 802c2c2:	47d0      	blx	sl
 802c2c4:	3001      	adds	r0, #1
 802c2c6:	d0ad      	beq.n	802c224 <_printf_i+0x160>
 802c2c8:	6823      	ldr	r3, [r4, #0]
 802c2ca:	079b      	lsls	r3, r3, #30
 802c2cc:	d413      	bmi.n	802c2f6 <_printf_i+0x232>
 802c2ce:	68e0      	ldr	r0, [r4, #12]
 802c2d0:	9b03      	ldr	r3, [sp, #12]
 802c2d2:	4298      	cmp	r0, r3
 802c2d4:	bfb8      	it	lt
 802c2d6:	4618      	movlt	r0, r3
 802c2d8:	e7a6      	b.n	802c228 <_printf_i+0x164>
 802c2da:	2301      	movs	r3, #1
 802c2dc:	4632      	mov	r2, r6
 802c2de:	4649      	mov	r1, r9
 802c2e0:	4640      	mov	r0, r8
 802c2e2:	47d0      	blx	sl
 802c2e4:	3001      	adds	r0, #1
 802c2e6:	d09d      	beq.n	802c224 <_printf_i+0x160>
 802c2e8:	3501      	adds	r5, #1
 802c2ea:	68e3      	ldr	r3, [r4, #12]
 802c2ec:	9903      	ldr	r1, [sp, #12]
 802c2ee:	1a5b      	subs	r3, r3, r1
 802c2f0:	42ab      	cmp	r3, r5
 802c2f2:	dcf2      	bgt.n	802c2da <_printf_i+0x216>
 802c2f4:	e7eb      	b.n	802c2ce <_printf_i+0x20a>
 802c2f6:	2500      	movs	r5, #0
 802c2f8:	f104 0619 	add.w	r6, r4, #25
 802c2fc:	e7f5      	b.n	802c2ea <_printf_i+0x226>
 802c2fe:	bf00      	nop
 802c300:	08030479 	.word	0x08030479
 802c304:	0803048a 	.word	0x0803048a

0802c308 <__sflush_r>:
 802c308:	898a      	ldrh	r2, [r1, #12]
 802c30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c30e:	4605      	mov	r5, r0
 802c310:	0710      	lsls	r0, r2, #28
 802c312:	460c      	mov	r4, r1
 802c314:	d458      	bmi.n	802c3c8 <__sflush_r+0xc0>
 802c316:	684b      	ldr	r3, [r1, #4]
 802c318:	2b00      	cmp	r3, #0
 802c31a:	dc05      	bgt.n	802c328 <__sflush_r+0x20>
 802c31c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802c31e:	2b00      	cmp	r3, #0
 802c320:	dc02      	bgt.n	802c328 <__sflush_r+0x20>
 802c322:	2000      	movs	r0, #0
 802c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c32a:	2e00      	cmp	r6, #0
 802c32c:	d0f9      	beq.n	802c322 <__sflush_r+0x1a>
 802c32e:	2300      	movs	r3, #0
 802c330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802c334:	682f      	ldr	r7, [r5, #0]
 802c336:	6a21      	ldr	r1, [r4, #32]
 802c338:	602b      	str	r3, [r5, #0]
 802c33a:	d032      	beq.n	802c3a2 <__sflush_r+0x9a>
 802c33c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802c33e:	89a3      	ldrh	r3, [r4, #12]
 802c340:	075a      	lsls	r2, r3, #29
 802c342:	d505      	bpl.n	802c350 <__sflush_r+0x48>
 802c344:	6863      	ldr	r3, [r4, #4]
 802c346:	1ac0      	subs	r0, r0, r3
 802c348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c34a:	b10b      	cbz	r3, 802c350 <__sflush_r+0x48>
 802c34c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c34e:	1ac0      	subs	r0, r0, r3
 802c350:	2300      	movs	r3, #0
 802c352:	4602      	mov	r2, r0
 802c354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c356:	6a21      	ldr	r1, [r4, #32]
 802c358:	4628      	mov	r0, r5
 802c35a:	47b0      	blx	r6
 802c35c:	1c43      	adds	r3, r0, #1
 802c35e:	89a3      	ldrh	r3, [r4, #12]
 802c360:	d106      	bne.n	802c370 <__sflush_r+0x68>
 802c362:	6829      	ldr	r1, [r5, #0]
 802c364:	291d      	cmp	r1, #29
 802c366:	d82b      	bhi.n	802c3c0 <__sflush_r+0xb8>
 802c368:	4a29      	ldr	r2, [pc, #164]	; (802c410 <__sflush_r+0x108>)
 802c36a:	410a      	asrs	r2, r1
 802c36c:	07d6      	lsls	r6, r2, #31
 802c36e:	d427      	bmi.n	802c3c0 <__sflush_r+0xb8>
 802c370:	2200      	movs	r2, #0
 802c372:	6062      	str	r2, [r4, #4]
 802c374:	04d9      	lsls	r1, r3, #19
 802c376:	6922      	ldr	r2, [r4, #16]
 802c378:	6022      	str	r2, [r4, #0]
 802c37a:	d504      	bpl.n	802c386 <__sflush_r+0x7e>
 802c37c:	1c42      	adds	r2, r0, #1
 802c37e:	d101      	bne.n	802c384 <__sflush_r+0x7c>
 802c380:	682b      	ldr	r3, [r5, #0]
 802c382:	b903      	cbnz	r3, 802c386 <__sflush_r+0x7e>
 802c384:	6560      	str	r0, [r4, #84]	; 0x54
 802c386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c388:	602f      	str	r7, [r5, #0]
 802c38a:	2900      	cmp	r1, #0
 802c38c:	d0c9      	beq.n	802c322 <__sflush_r+0x1a>
 802c38e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c392:	4299      	cmp	r1, r3
 802c394:	d002      	beq.n	802c39c <__sflush_r+0x94>
 802c396:	4628      	mov	r0, r5
 802c398:	f7ff fc96 	bl	802bcc8 <_free_r>
 802c39c:	2000      	movs	r0, #0
 802c39e:	6360      	str	r0, [r4, #52]	; 0x34
 802c3a0:	e7c0      	b.n	802c324 <__sflush_r+0x1c>
 802c3a2:	2301      	movs	r3, #1
 802c3a4:	4628      	mov	r0, r5
 802c3a6:	47b0      	blx	r6
 802c3a8:	1c41      	adds	r1, r0, #1
 802c3aa:	d1c8      	bne.n	802c33e <__sflush_r+0x36>
 802c3ac:	682b      	ldr	r3, [r5, #0]
 802c3ae:	2b00      	cmp	r3, #0
 802c3b0:	d0c5      	beq.n	802c33e <__sflush_r+0x36>
 802c3b2:	2b1d      	cmp	r3, #29
 802c3b4:	d001      	beq.n	802c3ba <__sflush_r+0xb2>
 802c3b6:	2b16      	cmp	r3, #22
 802c3b8:	d101      	bne.n	802c3be <__sflush_r+0xb6>
 802c3ba:	602f      	str	r7, [r5, #0]
 802c3bc:	e7b1      	b.n	802c322 <__sflush_r+0x1a>
 802c3be:	89a3      	ldrh	r3, [r4, #12]
 802c3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c3c4:	81a3      	strh	r3, [r4, #12]
 802c3c6:	e7ad      	b.n	802c324 <__sflush_r+0x1c>
 802c3c8:	690f      	ldr	r7, [r1, #16]
 802c3ca:	2f00      	cmp	r7, #0
 802c3cc:	d0a9      	beq.n	802c322 <__sflush_r+0x1a>
 802c3ce:	0793      	lsls	r3, r2, #30
 802c3d0:	680e      	ldr	r6, [r1, #0]
 802c3d2:	bf08      	it	eq
 802c3d4:	694b      	ldreq	r3, [r1, #20]
 802c3d6:	600f      	str	r7, [r1, #0]
 802c3d8:	bf18      	it	ne
 802c3da:	2300      	movne	r3, #0
 802c3dc:	eba6 0807 	sub.w	r8, r6, r7
 802c3e0:	608b      	str	r3, [r1, #8]
 802c3e2:	f1b8 0f00 	cmp.w	r8, #0
 802c3e6:	dd9c      	ble.n	802c322 <__sflush_r+0x1a>
 802c3e8:	6a21      	ldr	r1, [r4, #32]
 802c3ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802c3ec:	4643      	mov	r3, r8
 802c3ee:	463a      	mov	r2, r7
 802c3f0:	4628      	mov	r0, r5
 802c3f2:	47b0      	blx	r6
 802c3f4:	2800      	cmp	r0, #0
 802c3f6:	dc06      	bgt.n	802c406 <__sflush_r+0xfe>
 802c3f8:	89a3      	ldrh	r3, [r4, #12]
 802c3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c3fe:	81a3      	strh	r3, [r4, #12]
 802c400:	f04f 30ff 	mov.w	r0, #4294967295
 802c404:	e78e      	b.n	802c324 <__sflush_r+0x1c>
 802c406:	4407      	add	r7, r0
 802c408:	eba8 0800 	sub.w	r8, r8, r0
 802c40c:	e7e9      	b.n	802c3e2 <__sflush_r+0xda>
 802c40e:	bf00      	nop
 802c410:	dfbffffe 	.word	0xdfbffffe

0802c414 <_fflush_r>:
 802c414:	b538      	push	{r3, r4, r5, lr}
 802c416:	690b      	ldr	r3, [r1, #16]
 802c418:	4605      	mov	r5, r0
 802c41a:	460c      	mov	r4, r1
 802c41c:	b913      	cbnz	r3, 802c424 <_fflush_r+0x10>
 802c41e:	2500      	movs	r5, #0
 802c420:	4628      	mov	r0, r5
 802c422:	bd38      	pop	{r3, r4, r5, pc}
 802c424:	b118      	cbz	r0, 802c42e <_fflush_r+0x1a>
 802c426:	6a03      	ldr	r3, [r0, #32]
 802c428:	b90b      	cbnz	r3, 802c42e <_fflush_r+0x1a>
 802c42a:	f7ff fa1f 	bl	802b86c <__sinit>
 802c42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c432:	2b00      	cmp	r3, #0
 802c434:	d0f3      	beq.n	802c41e <_fflush_r+0xa>
 802c436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802c438:	07d0      	lsls	r0, r2, #31
 802c43a:	d404      	bmi.n	802c446 <_fflush_r+0x32>
 802c43c:	0599      	lsls	r1, r3, #22
 802c43e:	d402      	bmi.n	802c446 <_fflush_r+0x32>
 802c440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c442:	f7ff fbd3 	bl	802bbec <__retarget_lock_acquire_recursive>
 802c446:	4628      	mov	r0, r5
 802c448:	4621      	mov	r1, r4
 802c44a:	f7ff ff5d 	bl	802c308 <__sflush_r>
 802c44e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c450:	07da      	lsls	r2, r3, #31
 802c452:	4605      	mov	r5, r0
 802c454:	d4e4      	bmi.n	802c420 <_fflush_r+0xc>
 802c456:	89a3      	ldrh	r3, [r4, #12]
 802c458:	059b      	lsls	r3, r3, #22
 802c45a:	d4e1      	bmi.n	802c420 <_fflush_r+0xc>
 802c45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c45e:	f7ff fbc6 	bl	802bbee <__retarget_lock_release_recursive>
 802c462:	e7dd      	b.n	802c420 <_fflush_r+0xc>

0802c464 <__swbuf_r>:
 802c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c466:	460e      	mov	r6, r1
 802c468:	4614      	mov	r4, r2
 802c46a:	4605      	mov	r5, r0
 802c46c:	b118      	cbz	r0, 802c476 <__swbuf_r+0x12>
 802c46e:	6a03      	ldr	r3, [r0, #32]
 802c470:	b90b      	cbnz	r3, 802c476 <__swbuf_r+0x12>
 802c472:	f7ff f9fb 	bl	802b86c <__sinit>
 802c476:	69a3      	ldr	r3, [r4, #24]
 802c478:	60a3      	str	r3, [r4, #8]
 802c47a:	89a3      	ldrh	r3, [r4, #12]
 802c47c:	071a      	lsls	r2, r3, #28
 802c47e:	d525      	bpl.n	802c4cc <__swbuf_r+0x68>
 802c480:	6923      	ldr	r3, [r4, #16]
 802c482:	b31b      	cbz	r3, 802c4cc <__swbuf_r+0x68>
 802c484:	6823      	ldr	r3, [r4, #0]
 802c486:	6922      	ldr	r2, [r4, #16]
 802c488:	1a98      	subs	r0, r3, r2
 802c48a:	6963      	ldr	r3, [r4, #20]
 802c48c:	b2f6      	uxtb	r6, r6
 802c48e:	4283      	cmp	r3, r0
 802c490:	4637      	mov	r7, r6
 802c492:	dc04      	bgt.n	802c49e <__swbuf_r+0x3a>
 802c494:	4621      	mov	r1, r4
 802c496:	4628      	mov	r0, r5
 802c498:	f7ff ffbc 	bl	802c414 <_fflush_r>
 802c49c:	b9e0      	cbnz	r0, 802c4d8 <__swbuf_r+0x74>
 802c49e:	68a3      	ldr	r3, [r4, #8]
 802c4a0:	3b01      	subs	r3, #1
 802c4a2:	60a3      	str	r3, [r4, #8]
 802c4a4:	6823      	ldr	r3, [r4, #0]
 802c4a6:	1c5a      	adds	r2, r3, #1
 802c4a8:	6022      	str	r2, [r4, #0]
 802c4aa:	701e      	strb	r6, [r3, #0]
 802c4ac:	6962      	ldr	r2, [r4, #20]
 802c4ae:	1c43      	adds	r3, r0, #1
 802c4b0:	429a      	cmp	r2, r3
 802c4b2:	d004      	beq.n	802c4be <__swbuf_r+0x5a>
 802c4b4:	89a3      	ldrh	r3, [r4, #12]
 802c4b6:	07db      	lsls	r3, r3, #31
 802c4b8:	d506      	bpl.n	802c4c8 <__swbuf_r+0x64>
 802c4ba:	2e0a      	cmp	r6, #10
 802c4bc:	d104      	bne.n	802c4c8 <__swbuf_r+0x64>
 802c4be:	4621      	mov	r1, r4
 802c4c0:	4628      	mov	r0, r5
 802c4c2:	f7ff ffa7 	bl	802c414 <_fflush_r>
 802c4c6:	b938      	cbnz	r0, 802c4d8 <__swbuf_r+0x74>
 802c4c8:	4638      	mov	r0, r7
 802c4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c4cc:	4621      	mov	r1, r4
 802c4ce:	4628      	mov	r0, r5
 802c4d0:	f000 f806 	bl	802c4e0 <__swsetup_r>
 802c4d4:	2800      	cmp	r0, #0
 802c4d6:	d0d5      	beq.n	802c484 <__swbuf_r+0x20>
 802c4d8:	f04f 37ff 	mov.w	r7, #4294967295
 802c4dc:	e7f4      	b.n	802c4c8 <__swbuf_r+0x64>
	...

0802c4e0 <__swsetup_r>:
 802c4e0:	b538      	push	{r3, r4, r5, lr}
 802c4e2:	4b2a      	ldr	r3, [pc, #168]	; (802c58c <__swsetup_r+0xac>)
 802c4e4:	4605      	mov	r5, r0
 802c4e6:	6818      	ldr	r0, [r3, #0]
 802c4e8:	460c      	mov	r4, r1
 802c4ea:	b118      	cbz	r0, 802c4f4 <__swsetup_r+0x14>
 802c4ec:	6a03      	ldr	r3, [r0, #32]
 802c4ee:	b90b      	cbnz	r3, 802c4f4 <__swsetup_r+0x14>
 802c4f0:	f7ff f9bc 	bl	802b86c <__sinit>
 802c4f4:	89a3      	ldrh	r3, [r4, #12]
 802c4f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c4fa:	0718      	lsls	r0, r3, #28
 802c4fc:	d422      	bmi.n	802c544 <__swsetup_r+0x64>
 802c4fe:	06d9      	lsls	r1, r3, #27
 802c500:	d407      	bmi.n	802c512 <__swsetup_r+0x32>
 802c502:	2309      	movs	r3, #9
 802c504:	602b      	str	r3, [r5, #0]
 802c506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802c50a:	81a3      	strh	r3, [r4, #12]
 802c50c:	f04f 30ff 	mov.w	r0, #4294967295
 802c510:	e034      	b.n	802c57c <__swsetup_r+0x9c>
 802c512:	0758      	lsls	r0, r3, #29
 802c514:	d512      	bpl.n	802c53c <__swsetup_r+0x5c>
 802c516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c518:	b141      	cbz	r1, 802c52c <__swsetup_r+0x4c>
 802c51a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c51e:	4299      	cmp	r1, r3
 802c520:	d002      	beq.n	802c528 <__swsetup_r+0x48>
 802c522:	4628      	mov	r0, r5
 802c524:	f7ff fbd0 	bl	802bcc8 <_free_r>
 802c528:	2300      	movs	r3, #0
 802c52a:	6363      	str	r3, [r4, #52]	; 0x34
 802c52c:	89a3      	ldrh	r3, [r4, #12]
 802c52e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802c532:	81a3      	strh	r3, [r4, #12]
 802c534:	2300      	movs	r3, #0
 802c536:	6063      	str	r3, [r4, #4]
 802c538:	6923      	ldr	r3, [r4, #16]
 802c53a:	6023      	str	r3, [r4, #0]
 802c53c:	89a3      	ldrh	r3, [r4, #12]
 802c53e:	f043 0308 	orr.w	r3, r3, #8
 802c542:	81a3      	strh	r3, [r4, #12]
 802c544:	6923      	ldr	r3, [r4, #16]
 802c546:	b94b      	cbnz	r3, 802c55c <__swsetup_r+0x7c>
 802c548:	89a3      	ldrh	r3, [r4, #12]
 802c54a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802c54e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c552:	d003      	beq.n	802c55c <__swsetup_r+0x7c>
 802c554:	4621      	mov	r1, r4
 802c556:	4628      	mov	r0, r5
 802c558:	f000 f840 	bl	802c5dc <__smakebuf_r>
 802c55c:	89a0      	ldrh	r0, [r4, #12]
 802c55e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c562:	f010 0301 	ands.w	r3, r0, #1
 802c566:	d00a      	beq.n	802c57e <__swsetup_r+0x9e>
 802c568:	2300      	movs	r3, #0
 802c56a:	60a3      	str	r3, [r4, #8]
 802c56c:	6963      	ldr	r3, [r4, #20]
 802c56e:	425b      	negs	r3, r3
 802c570:	61a3      	str	r3, [r4, #24]
 802c572:	6923      	ldr	r3, [r4, #16]
 802c574:	b943      	cbnz	r3, 802c588 <__swsetup_r+0xa8>
 802c576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802c57a:	d1c4      	bne.n	802c506 <__swsetup_r+0x26>
 802c57c:	bd38      	pop	{r3, r4, r5, pc}
 802c57e:	0781      	lsls	r1, r0, #30
 802c580:	bf58      	it	pl
 802c582:	6963      	ldrpl	r3, [r4, #20]
 802c584:	60a3      	str	r3, [r4, #8]
 802c586:	e7f4      	b.n	802c572 <__swsetup_r+0x92>
 802c588:	2000      	movs	r0, #0
 802c58a:	e7f7      	b.n	802c57c <__swsetup_r+0x9c>
 802c58c:	2400013c 	.word	0x2400013c

0802c590 <__swhatbuf_r>:
 802c590:	b570      	push	{r4, r5, r6, lr}
 802c592:	460c      	mov	r4, r1
 802c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c598:	2900      	cmp	r1, #0
 802c59a:	b096      	sub	sp, #88	; 0x58
 802c59c:	4615      	mov	r5, r2
 802c59e:	461e      	mov	r6, r3
 802c5a0:	da0d      	bge.n	802c5be <__swhatbuf_r+0x2e>
 802c5a2:	89a3      	ldrh	r3, [r4, #12]
 802c5a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 802c5a8:	f04f 0100 	mov.w	r1, #0
 802c5ac:	bf0c      	ite	eq
 802c5ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802c5b2:	2340      	movne	r3, #64	; 0x40
 802c5b4:	2000      	movs	r0, #0
 802c5b6:	6031      	str	r1, [r6, #0]
 802c5b8:	602b      	str	r3, [r5, #0]
 802c5ba:	b016      	add	sp, #88	; 0x58
 802c5bc:	bd70      	pop	{r4, r5, r6, pc}
 802c5be:	466a      	mov	r2, sp
 802c5c0:	f000 f848 	bl	802c654 <_fstat_r>
 802c5c4:	2800      	cmp	r0, #0
 802c5c6:	dbec      	blt.n	802c5a2 <__swhatbuf_r+0x12>
 802c5c8:	9901      	ldr	r1, [sp, #4]
 802c5ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802c5ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802c5d2:	4259      	negs	r1, r3
 802c5d4:	4159      	adcs	r1, r3
 802c5d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c5da:	e7eb      	b.n	802c5b4 <__swhatbuf_r+0x24>

0802c5dc <__smakebuf_r>:
 802c5dc:	898b      	ldrh	r3, [r1, #12]
 802c5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c5e0:	079d      	lsls	r5, r3, #30
 802c5e2:	4606      	mov	r6, r0
 802c5e4:	460c      	mov	r4, r1
 802c5e6:	d507      	bpl.n	802c5f8 <__smakebuf_r+0x1c>
 802c5e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c5ec:	6023      	str	r3, [r4, #0]
 802c5ee:	6123      	str	r3, [r4, #16]
 802c5f0:	2301      	movs	r3, #1
 802c5f2:	6163      	str	r3, [r4, #20]
 802c5f4:	b002      	add	sp, #8
 802c5f6:	bd70      	pop	{r4, r5, r6, pc}
 802c5f8:	ab01      	add	r3, sp, #4
 802c5fa:	466a      	mov	r2, sp
 802c5fc:	f7ff ffc8 	bl	802c590 <__swhatbuf_r>
 802c600:	9900      	ldr	r1, [sp, #0]
 802c602:	4605      	mov	r5, r0
 802c604:	4630      	mov	r0, r6
 802c606:	f7ff f81d 	bl	802b644 <_malloc_r>
 802c60a:	b948      	cbnz	r0, 802c620 <__smakebuf_r+0x44>
 802c60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c610:	059a      	lsls	r2, r3, #22
 802c612:	d4ef      	bmi.n	802c5f4 <__smakebuf_r+0x18>
 802c614:	f023 0303 	bic.w	r3, r3, #3
 802c618:	f043 0302 	orr.w	r3, r3, #2
 802c61c:	81a3      	strh	r3, [r4, #12]
 802c61e:	e7e3      	b.n	802c5e8 <__smakebuf_r+0xc>
 802c620:	89a3      	ldrh	r3, [r4, #12]
 802c622:	6020      	str	r0, [r4, #0]
 802c624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c628:	81a3      	strh	r3, [r4, #12]
 802c62a:	9b00      	ldr	r3, [sp, #0]
 802c62c:	6163      	str	r3, [r4, #20]
 802c62e:	9b01      	ldr	r3, [sp, #4]
 802c630:	6120      	str	r0, [r4, #16]
 802c632:	b15b      	cbz	r3, 802c64c <__smakebuf_r+0x70>
 802c634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c638:	4630      	mov	r0, r6
 802c63a:	f000 f81d 	bl	802c678 <_isatty_r>
 802c63e:	b128      	cbz	r0, 802c64c <__smakebuf_r+0x70>
 802c640:	89a3      	ldrh	r3, [r4, #12]
 802c642:	f023 0303 	bic.w	r3, r3, #3
 802c646:	f043 0301 	orr.w	r3, r3, #1
 802c64a:	81a3      	strh	r3, [r4, #12]
 802c64c:	89a3      	ldrh	r3, [r4, #12]
 802c64e:	431d      	orrs	r5, r3
 802c650:	81a5      	strh	r5, [r4, #12]
 802c652:	e7cf      	b.n	802c5f4 <__smakebuf_r+0x18>

0802c654 <_fstat_r>:
 802c654:	b538      	push	{r3, r4, r5, lr}
 802c656:	4d07      	ldr	r5, [pc, #28]	; (802c674 <_fstat_r+0x20>)
 802c658:	2300      	movs	r3, #0
 802c65a:	4604      	mov	r4, r0
 802c65c:	4608      	mov	r0, r1
 802c65e:	4611      	mov	r1, r2
 802c660:	602b      	str	r3, [r5, #0]
 802c662:	f7d6 f880 	bl	8002766 <_fstat>
 802c666:	1c43      	adds	r3, r0, #1
 802c668:	d102      	bne.n	802c670 <_fstat_r+0x1c>
 802c66a:	682b      	ldr	r3, [r5, #0]
 802c66c:	b103      	cbz	r3, 802c670 <_fstat_r+0x1c>
 802c66e:	6023      	str	r3, [r4, #0]
 802c670:	bd38      	pop	{r3, r4, r5, pc}
 802c672:	bf00      	nop
 802c674:	2402b8fc 	.word	0x2402b8fc

0802c678 <_isatty_r>:
 802c678:	b538      	push	{r3, r4, r5, lr}
 802c67a:	4d06      	ldr	r5, [pc, #24]	; (802c694 <_isatty_r+0x1c>)
 802c67c:	2300      	movs	r3, #0
 802c67e:	4604      	mov	r4, r0
 802c680:	4608      	mov	r0, r1
 802c682:	602b      	str	r3, [r5, #0]
 802c684:	f7d6 f874 	bl	8002770 <_isatty>
 802c688:	1c43      	adds	r3, r0, #1
 802c68a:	d102      	bne.n	802c692 <_isatty_r+0x1a>
 802c68c:	682b      	ldr	r3, [r5, #0]
 802c68e:	b103      	cbz	r3, 802c692 <_isatty_r+0x1a>
 802c690:	6023      	str	r3, [r4, #0]
 802c692:	bd38      	pop	{r3, r4, r5, pc}
 802c694:	2402b8fc 	.word	0x2402b8fc

0802c698 <_init>:
 802c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c69a:	bf00      	nop
 802c69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c69e:	bc08      	pop	{r3}
 802c6a0:	469e      	mov	lr, r3
 802c6a2:	4770      	bx	lr

0802c6a4 <_fini>:
 802c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c6a6:	bf00      	nop
 802c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c6aa:	bc08      	pop	{r3}
 802c6ac:	469e      	mov	lr, r3
 802c6ae:	4770      	bx	lr
